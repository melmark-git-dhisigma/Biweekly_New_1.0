using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using Calculate;
using System.Collections;
using System.Diagnostics;
using System.Text.RegularExpressions;
using System.Web.Services;


public partial class StudentBinder_Datasheet : System.Web.UI.Page
{
    public static clsData objData = null;
    clsData oData = null;
    ClsTemplateSession oTemp = null;
    clsSession oSession = null;
    clsDataSheet oDS = null;
    DiscreteSession oDisc = null;
    string DatasheetKey = "";
    int repeatNo = 0;
    static bool Disable = false;
    Dictionary<int, Dictionary<string, string>> dict1 = new Dictionary<int, Dictionary<string, string>>();
    Dictionary<string, string> dict2 = new Dictionary<string, string>();
    Dictionary<int, string> dictNAscore = new Dictionary<int, string>();
    Dictionary<string, string> samcnt = new Dictionary<string, string>();
    string[] limtReachedSamples = new string[0];
    string preSampleString = "";
    string[] QuestnAary = new string[0];
    List<String> GroupName = new List<String>();


    protected void Page_Load(object sender, EventArgs e)
    {
        Response.CacheControl = "private";
        Response.ExpiresAbsolute = DateTime.Now.AddDays(-1d);
        Response.Cache.SetCacheability(HttpCacheability.NoCache);
        Session["promptid"] = 0;
        int printid = Convert.ToInt32(Request.QueryString["printid"]);
        if (printid == 1)
        {
            btnPriorSessn.Visible = false;
            btnSave.Visible = false;
            btnProbe.Visible = false;
            ImgBtn_Override.Visible = false;
            btnSubmit.Visible = false;
            btnSubmitAndRepeat2.Visible = false;
            btnSave1.Visible = false;
            btnSubmit2.Visible = false;
            btnSubmitAndRepeat3.Visible = false;
            btnDiscardDatasheet.Visible = false;
            Print1.Visible = false;
            btnAddTrial.Visible = false;
            ClientScript.RegisterStartupScript(this.GetType(), "", "SaveData();", true);
        }

        oData = new clsData();
        oTemp = (ClsTemplateSession)Session["BiweeklySession"];
        if (!IsPostBack)
        {
            hfProbe.Value = "No Probe";
            Session["totalcorrectincorrect"] = "";
            if (Request.QueryString["pageid"] != null)
            {
                oTemp.TemplateId = Convert.ToInt32(Request.QueryString["pageid"]);
            }
            else
            {
                oTemp.TemplateId = 0;

            }
            hdnTemplateId.Value = oTemp.TemplateId.ToString();
            DatasheetKey = "DataSht_Sess-" + hdnTemplateId.Value.ToString();
            if (Request.QueryString["isMaint"] != null && Request.QueryString["isMaint"] == "true")
            {
                hdn_isMaintainance.Value = "true";
            }
            else
            {
                hdn_isMaintainance.Value = "false";
            }
            if (Request.QueryString["SRMode"] != null && Request.QueryString["SRMode"] == "true")
            {
                //if submit & repeat, display repeat count
                lblSubmitAndRepeatText.Visible = true;
                lblSubmitAndRepeatCount.Visible = true;
                lblSubmitAndRepeatCount.Text = Request.QueryString["repeatNo"];
                //Page.ClientScript.RegisterStartupScript(this.GetType(), "myScript", "probe();", true);
                //btnProbe_Click(sender, e);
            }
            Session[DatasheetKey] = null;


            if (Request.QueryString["SessHdrID"] != null)
            {

                oData = new clsData();
                oDS = new clsDataSheet();

                string strqry = "SELECT DSTempHdrId FROM StdtSessionHdr WHERE StdtSessionHdrId=" + Request.QueryString["SessHdrID"];
                object objSessHdrID = oData.FetchValue(strqry);
                if (objSessHdrID != null)
                {
                    oTemp.TemplateId = Convert.ToInt32(objSessHdrID);

                }


                hdnTemplateId.Value = oTemp.TemplateId.ToString();
                DatasheetKey = "DataSht_Sess-" + hdnTemplateId.Value.ToString();
                Session[DatasheetKey] = oDS;
                ViewState["IsHistory"] = true;
                ViewState["StdtSessHdr"] = Convert.ToInt32(Request.QueryString["SessHdrID"]);
                object objIOAInd = oData.FetchValue("SELECT IOAInd FROM StdtSessionHdr WHERE StdtSessionHdrId=" + Request.QueryString["SessHdrID"].ToString());
                if (objIOAInd != null)
                {
                    object objMistrial = oData.FetchValue("SELECT SessMissTrailStus FROM StdtSessionHdr WHERE StdtSessionHdrId=" + Request.QueryString["SessHdrID"].ToString());
                    if (objMistrial != null)
                    {
                        if (objMistrial.ToString() == "Y")
                        {
                            oDS.SessionMistrial = true;
                        }
                    }

                    object objMistrialRsn = oData.FetchValue("SELECT SessMissTrailRsn FROM StdtSessionHdr WHERE StdtSessionHdrId=" + Request.QueryString["SessHdrID"].ToString());
                    if (objMistrialRsn != null)
                    {
                        oDS.SessionMistrialRsn = objMistrialRsn.ToString();
                    }

                    oDS.IOAInd = objIOAInd.ToString();


                    setTempData(Request.QueryString["SessHdrID"]);

                    //generateSheet();                   
                    LoadData(Convert.ToInt32(Request.QueryString["SessHdrID"]), false);

                    loadSetsOverride();


                    calculateFormula();
                }
            }
            else
            {
                if (Request.QueryString["SessionHdr"] != null)
                {
                    setTempData(Request.QueryString["SessionHdr"]);
                }
                ViewState["IsHistory"] = false;
                checkStat(sender, e);
            }


            FillDoc(oTemp.TemplateId);
            loadSetsOverride();
            //if (HttpContext.Current.Request.UserAgent.ToLower().Contains("ipad"))
            //{
            //    IfrmTimer.Attributes.Add("src", "DatasheetTimerIpad.aspx");
            //}
            //else {
            //    IfrmTimer.Attributes.Add("src", "dataSheetTimer.aspx");//dataSheetTimer
            //}

            string sqlStr = "SELECT ChainType,TotalTaskType FROM DSTempHdr where DSTempHdrId=" + oTemp.TemplateId;
            DataTable dataT = oData.ReturnDataTable(sqlStr, false);

            string type = dataT.Rows[0]["ChainType"].ToString();
            string totalTasktype = dataT.Rows[0]["TotalTaskType"].ToString();

            if (totalTasktype == "1")
            {
                totalTaskOverride.Visible = true;
                normalOverride.Visible = false;
            }
            if (totalTasktype == "0" || totalTasktype == "")
            {
                totalTaskOverride.Visible = false;
                normalOverride.Visible = true;
            }

            clsGeneral.Btn_Write(oSession.LoginId, oSession.SchoolId, out Disable);
            if (Disable == true)
            {
                ImgBtn_Override.Visible = false;
            }
            else
            {
                ImgBtn_Override.Visible = true;
            }

        }
        else
        {
            bool ContrlEnable = true;
            DatasheetKey = "DataSht_Sess-" + hdnTemplateId.Value.ToString();
            oTemp.TemplateId = Convert.ToInt32(hdnTemplateId.Value);
            oDS = (clsDataSheet)Session[DatasheetKey];
            if (oDS != null)
                if (oDS.dtColumns != null)
                {
                    if (oDS.ISVTool == 1) { ContrlEnable = false; }
                    int count = grdDataSht.Columns.Count;
                    for (int i = 0; i < count; i++)
                        grdDataSht.Columns.RemoveAt(0);
                    string[] colnames = new string[] { "Step / Sample / Sd", "Mistrial", "Notes" }; int index = 0;
                    foreach (string colnam in colnames)
                    {
                        TemplateField ItemTmpFld = new TemplateField();
                        // create HeaderTemplate
                        ItemTmpFld.HeaderTemplate = new DynamicallyTemplatedGridViewHandler(ListItemType.Header, "SessStepID,StepCd,StepId",
                                                                      colnam, colnam, "", "", true, 0);
                        // create ItemTemplate
                        ItemTmpFld.ItemTemplate = new DynamicallyTemplatedGridViewHandler(ListItemType.Item, "SessStepID,StepCd,StepId",
                                                                      colnam, colnam, "", "", true, 0);
                        ItemTmpFld.HeaderStyle.Width = Unit.Percentage(20);
                        ItemTmpFld.HeaderStyle.CssClass = "clr"; ItemTmpFld.ItemStyle.CssClass = "clr";
                        if (index == 1)
                        {
                            ItemTmpFld.HeaderStyle.Width = Unit.Percentage(7);
                        }
                        if (index == 2) { ItemTmpFld.ItemStyle.CssClass = "nobdr"; ItemTmpFld.HeaderStyle.CssClass = "nobdr"; }
                        grdDataSht.Columns.Insert(index, ItemTmpFld);
                        index++;
                    }
                    foreach (DataRow dr in oDS.dtColumns.Rows)
                    {
                        TemplateField ItemTmpField = new TemplateField();
                        // create HeaderTemplate

                        ItemTmpField.HeaderTemplate = new DynamicallyTemplatedGridViewHandler(ListItemType.Header, "",
                                                                      dr["ColName"].ToString(), dr["ColControl"].ToString(), dr["DSTempSetColId"].ToString(), dr["ColTypeCd"].ToString(), ContrlEnable, 0);
                        // create ItemTemplate
                        ItemTmpField.ItemTemplate = new DynamicallyTemplatedGridViewHandler(ListItemType.Item, "",
                                                                      dr["ColName"].ToString(), dr["ColControl"].ToString(), dr["DSTempSetColId"].ToString(), dr["ColTypeCd"].ToString(), ContrlEnable, 0);
                        ItemTmpField.HeaderStyle.CssClass = "clr"; ItemTmpField.ItemStyle.CssClass = "clr";
                        if (dr["ColControl"].ToString() == "DropDown")
                            ItemTmpField.HeaderStyle.Width = Unit.Percentage(14);
                        if (dr["ColControl"].ToString() == "Radio")
                            ItemTmpField.HeaderStyle.Width = Unit.Percentage(8);
                        if (dr["ColControl"].ToString() == "Timer")
                            ItemTmpField.HeaderStyle.Width = Unit.Percentage(16);
                        if (dr["ColControl"].ToString() == "Text")
                            ItemTmpField.HeaderStyle.Width = Unit.Percentage(12);
                        if (dr["ColControl"].ToString() == "Freq")
                            ItemTmpField.HeaderStyle.Width = Unit.Percentage(12);
                        // then add to the GridView
                        grdDataSht.Columns.Insert(grdDataSht.Columns.Count - 2, ItemTmpField);
                    }
                    int colmncount = 8 - grdDataSht.Columns.Count;
                    for (int i = 1; i <= colmncount; i++)
                    {
                        // add templated fields to the GridView

                        TemplateField ItemTmpNote = new TemplateField();
                        // create HeaderTemplate
                        ItemTmpNote.HeaderTemplate = new DynamicallyTemplatedGridViewHandler(ListItemType.Header, "",
                                                                      "NA", "NA", "", "", true, 0);
                        // create ItemTemplate
                        ItemTmpNote.ItemTemplate = new DynamicallyTemplatedGridViewHandler(ListItemType.Item, "",
                                                                      "", "", "", "", true, 0);
                        ItemTmpNote.HeaderStyle.CssClass = "clr"; ItemTmpNote.ItemStyle.CssClass = "clr";
                        //ItemTmpNote.ItemStyle.BackColor = System.Drawing.Color.FromName("");

                        ItemTmpNote.HeaderStyle.Width = Unit.Percentage(15); ItemTmpNote.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
                        // then add to the GridView
                        grdDataSht.Columns.Insert(grdDataSht.Columns.Count - 2, ItemTmpNote);
                    }
                    fillStepGrid(oDS.TeachProc, oDS.SkillType, oDS.MatchToSampleType);
                    //grdDataSht.DataSource = oDS.dtSteps;
                    //grdDataSht.DataBind();

                }
            oSession = (clsSession)Session["UserSession"];
            clsGeneral.Btn_Write(oSession.LoginId, oSession.SchoolId, out Disable);
            if (Disable == true)
            {
                ImgBtn_Override.Visible = false;
            }
            else
            {
                ImgBtn_Override.Visible = true;
            }

        }

        object SkillType = oData.FetchValue("SELECT SkillType FROM DSTempHdr WHERE DSTempHdrId='" + oTemp.TemplateId + "'");
        if (Convert.ToString(SkillType) == "Discrete" && btnSubmit.Visible == true)
        {
            btnAddTrial.Visible = true;
        }
        else
        {
            btnAddTrial.Visible = false;
        }
        string Maintanance = Convert.ToString(oData.FetchValue("SELECT [DSMode] FROM [dbo].[DSTempHdr] WHERE DSTempHdrId=" + oTemp.TemplateId));
        if (Maintanance == "MAINTENANCE" && btnSubmit.Visible == true)
        {
            ImgBtn_Inactive.Visible = false;
            ImgBtn_Override.Visible = false;
        }
        else if (btnSubmit.Visible == false)
        {
            ImgBtn_Inactive.Visible = false;
            ImgBtn_Override.Visible = false;
            btnPriorSessn.Visible = false;
            btnSubmitAndRepeat1.Visible = false;
            btnSubmitAndRepeat2.Visible = false;
            btnSubmitAndRepeat3.Visible = false;
            btnDiscardDatasheet.Visible = false;
            btnSubmit2.Visible = false;
        }
        else
        {
            ImgBtn_Inactive.Visible = false;
        }

        hdnSessionHdr.Value = Convert.ToString(ViewState["StdtSessHdr"]);

        string sqlStrchk = "SELECT isnull(Bannerstatus,2) from DSTempHdr WHERE StudentId= " + oSession.StudentId + " AND DSTempHdrId = " + oTemp.TemplateId;
        int chk = Convert.ToInt32(oData.FetchValue(sqlStrchk));
        if (chk == 1)
        {
            banner.Visible = true;
        }
        else
        {
            banner.Visible = false;
        }

        string sqlBnrChk = "SELECT LessonStatusforBanner from DSTempHdr WHERE StudentId= " + oSession.StudentId + " AND DSTempHdrId = " + oTemp.TemplateId;
        string bnrTxt = Convert.ToString(oData.FetchValue(sqlBnrChk));
        LessonBanner.Visible = false;
        if (bnrTxt != "")
        {
            LblBanner.Text = bnrTxt+" – Criteria met, notify supervisor.";
            LessonBanner.Visible = true;
        }
    }

    public string getFormulae(string calId)
    {

        oData = new clsData();
        oTemp = (ClsTemplateSession)Session["BiweeklySession"];

        string sqlStr = " SELECT DST.DSTempSetColId,DST.ColName, DC.CalcType,DC.CalcRptLabel,DC.CalcFormula,DST.CalcuData,DC.DSTempSetColCalcId,DT.MultiSetsInd, DT.DSTempHdrId FROM DSTempHdr DT" +
                               " INNER JOIN DSTempSetCol DST ON DT.DSTempHdrId = DST.DSTempHdrId  " +
                               " INNER JOIN DSTempSetColCalc DC ON DST.DSTempSetColId = DC.DSTempSetColId  " +
                               " WHERE (DT.DSTempHdrId =" + oTemp.TemplateId + " and DST.DSTempSetColId = " + calId + ")";
        DataTable dt = oData.ReturnDataTable(sqlStr, false);

        foreach (DataRow dr in dt.Rows)
        {
            if (dr["CalcuData"] != null && dr["CalcuData"].ToString() != "")
            {
                return dr["CalcuData"].ToString();
            }
        }

        return "";
    }

    public void calculateFormula()
    {
        oData = new clsData();
        oTemp = (ClsTemplateSession)Session["BiweeklySession"];
        oSession = (clsSession)Session["UserSession"];
        oDS = (clsDataSheet)Session[DatasheetKey];
        if (oSession != null)
        {
            if (oTemp != null)
            {
                if (oDS != null)
                {
                    /*
                     * Creation and insertion to a new Session  
                     */
                    Dictionary<string, string[]> ht = LoadStepVals_toDict();
                    if (ht != null)
                    {


                        string sqlStr = " SELECT DST.DSTempSetColId,DST.ColName, DC.CalcType,DC.CalcRptLabel,DC.CalcFormula,DST.CalcuData,DC.DSTempSetColCalcId,DT.MultiSetsInd, DT.DSTempHdrId FROM DSTempHdr DT" +
                                " INNER JOIN DSTempSetCol DST ON DT.DSTempHdrId = DST.DSTempHdrId  " +
                                " INNER JOIN DSTempSetColCalc DC ON DST.DSTempSetColId = DC.DSTempSetColId  " +
                                " WHERE (DT.DSTempHdrId =" + oTemp.TemplateId + ")";
                        DataTable dt = oData.ReturnDataTable(sqlStr, false);
                        int indexi = 0;
                        int icount = 0;
                        int count = dt.Rows.Count;
                        int[] arColcalId = new int[count];
                        int[] arColId = new int[count];
                        string[] arColName = new string[oDS.dtColumns.Rows.Count];
                        string custom = "";
                        foreach (DataRow dr in dt.Rows)
                        {
                            arColcalId[icount] = Convert.ToInt32(dr["DSTempSetColCalcId"]);
                            if (dr["CalcType"].ToString() == "Customize")
                            {
                                custom += dr["CalcuData"].ToString() + "#";
                            }

                            icount++;
                        }
                        int colIndex = 0;
                        foreach (DataRow dr in oDS.dtColumns.Rows)
                        {
                            sqlStr = " select dbo.DSTempSetCol.ColName from DSTempSetCol where DSTempSetCol.DSTempSetColId=" + Convert.ToInt32(dr["DSTempSetColId"].ToString());
                            arColName[colIndex] = oData.FetchValue(sqlStr).ToString();
                            colIndex++;
                        }
                        string names = "";
                        float custResult = 0;
                        string[] sEquation = custom.Split('#');
                        string colmnId = "", result = "";
                        foreach (var item in sEquation)
                        {
                            Calculate.Calculate oCalc = new Calculate.Calculate();
                            if (item != "")
                            {
                                PreProcessedExpression expResult = oCalc.PreProcessExpression(item);
                                int expCount = expResult.ColumnDatas.Length;
                                for (int indexj = 0; indexj < expCount; indexj++)
                                {
                                    names = "";
                                    for (int i = 0; i < oDS.dtColumns.Rows.Count; i++)
                                    {
                                        if (ht.ContainsKey(oDS.dtColumns.Rows[i]["DSTempSetColId"].ToString()))
                                        {
                                            if (!names.Contains(arColName[i]))
                                            {
                                                if (arColName[i].ToUpper() == expResult.ColumnDatas[indexj].ColumnName.Trim())
                                                {
                                                    expResult.ColumnDatas[indexj].Data = new float[oDS.dtSteps.Rows.Count - 1];
                                                    names += arColName[i] + ",";
                                                    expResult.ColumnDatas[indexj].Data = parseFloat(ht[oDS.dtColumns.Rows[i]["DSTempSetColId"].ToString()]);

                                                    result += oDS.dtColumns.Rows[i]["DSTempSetColId"].ToString() + "*";
                                                }
                                            }
                                        }
                                    }
                                }
                                if (expResult != null)
                                {
                                    string exp = oCalc.CreateExpressionToEvaluate(expResult);
                                    string[] tempString = exp.Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);
                                    string[] postfixArray = oCalc.InfixToPostfix(tempString);
                                    custResult = oCalc.EvaluatePostfix(postfixArray);
                                }
                                result += custResult + "|";
                            }
                        }
                        if (result.Length > 1)
                        {
                            result = result.Substring(0, result.Length - 1);

                        }
                        ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "scoreForText1('" + result + "');", true);

                    }
                }
            }
        }
    }




    public void setTempData(string stdtSessionHdrId)
    {
        oData = new clsData();
        string sqlStr = "select ssh.CurrentSetId,dsts.SortOrder from StdtSessionHdr as ssh LEFT JOIN DSTempSet dsts on ssh.CurrentSetId = dsts.DSTempSetId where ssh.StdtSessionHdrId ='" + stdtSessionHdrId + "'";
        DataTable dt = oData.ReturnDataTable(sqlStr, false);

        if (dt.Rows.Count > 0)
        {
            hdn_currTempSetNmbr.Value = dt.Rows[0]["SortOrder"].ToString();
            hdn_currTempSet.Value = dt.Rows[0]["CurrentSetId"].ToString();
        }

    }

    protected void fillStepGrid(string TeachingProc, string SkillType, string matchToSampleType)
    {
        ClsErrorLog clError = new ClsErrorLog();
        oData = new clsData();
        oTemp = (ClsTemplateSession)Session["BiweeklySession"];
        oDS = (clsDataSheet)Session[DatasheetKey];
        DataTable dt = new DataTable();
        if ((oTemp != null) && (oDS != null))
            try
            {
                if (ViewState["StdtSessHdr"] != null)
                {

                    //SqlDataReader reader = oData.ReturnDataReader("SELECT StdtSessionStepId FROM StdtSessionStep WHERE StdtSessionHdrId=" + ViewState["StdtSessHdr"].ToString(), true);
                    string sqlQry = "SELECT * FROM StdtSessionStep Step INNER JOIN DSTempStep Stp ON Stp.DSTempStepId=Step.DSTempStepId WHERE StdtSessionHdrId="
                        + ViewState["StdtSessHdr"].ToString() + " and ActiveInd='A' AND (Stp.DSTempSetId=" + oDS.CrntSet + ") AND IsDynamic=0 ORDER BY Stp.SortOrder";

                    if (SkillType == "Discrete")
                    {
                        sqlQry = "SELECT * FROM StdtSessionStep WHERE StdtSessionHdrId=" + ViewState["StdtSessHdr"].ToString();
                    }
                    DataTable dtstepIDs = new DataTable();
                    dtstepIDs = oData.ReturnDataTable(sqlQry, false);
                    DataTable dtstps = oDS.dtSteps;

                    if (dtstps.Rows.Count == 0)
                    {
                        ScriptManager.RegisterStartupScript(this, this.GetType(), "script", "alert('This set does not have any steps attached, please modify the lesson to assign steps...');", true);
                    }

                    /// Code Added By Arun. Code Change is for Match-to-Sample teaching procedure automatically yields a “Positional
                    /// Datasheet” (random presentation) so maybe it should indicate that.

                    if (oDS.TeachProc == "Match-to-Sample")
                    {
                        //string sqlStr = "SELECT [DSTempStepId],[StepName] as StepCd,[StepName],SortOrder as StepId  FROM [dbo].[DSTempStep] " +
                        //                        " WHERE DSTempHdrId=" + oTemp.TemplateId + " AND DsTempSetId=" + oDS.CrntSet + " AND ActiveInd='A' ORDER BY [SortOrder]";

                        string sqlStr = "SELECT Step.StdtSessionStepId as SessStepID, TempStep.[DSTempStepId],TempStep.[StepName] as StepCd,TempStep.[StepName],TempStep.SortOrder as StepId  FROM [dbo].[DSTempStep] TempStep  INNER JOIN StdtSessionStep Step " +
                                         " ON TempStep.DSTempStepId=Step.DSTempStepId  WHERE TempStep.DSTempHdrId=" + oTemp.TemplateId + " AND TempStep.DsTempSetId=" + oDS.CrntSet + " AND TempStep.ActiveInd='A' AND IsDynamic=0 AND  Step.StdtSessionHdrId=" + ViewState["StdtSessHdr"].ToString() + " ORDER BY NEWID()";


                        dt = oData.ReturnDataTable(sqlStr, false);


                        string[] distractorSamples = getDistractors(oTemp.TemplateId,oDS.CrntSet);

                        if (ViewState["StdtSessHdr"] != null && ViewState["StdtSessHdr"] != "")
                        {
                            string IsTrial = Convert.ToString(oData.FetchValue("SELECT IsTrial FROM StdtSessionHdr WHERE StdtSessionHdrId='" + Convert.ToInt32(ViewState["StdtSessHdr"].ToString()) + "'"));
                            if (IsTrial != "")
                            {
                                sqlStr = "SELECT Step.StdtSessionStepId as SessStepID, TempStep.[DSTempStepId],TempStep.[StepName] as StepCd,TempStep.[StepName],TempStep.SortOrder as StepId  FROM [dbo].[DSTempStep] TempStep  INNER JOIN StdtSessionStep Step " +
                                             " ON TempStep.DSTempStepId=Step.DSTempStepId  WHERE TempStep.DSTempStepId IN (" + IsTrial + ") ORDER BY NEWID()";
                                DataTable dtTrialSample = oData.ReturnDataTable(sqlStr, false);

                                foreach (DataRow dr in dtTrialSample.Rows)
                                {
                                    DataRow newTrialRow = dt.NewRow();
                                    newTrialRow["SessStepID"] = dr["SessStepID"];
                                    newTrialRow["DSTempStepId"] = dr["DSTempStepId"];
                                    newTrialRow["StepCd"] = dr["StepCd"];
                                    newTrialRow["StepName"] = dr["StepName"];
                                    newTrialRow["StepId"] = dr["StepId"];
                                    dt.Rows.Add(newTrialRow);
                                }
                            }
                        }
                        oDS.dtSteps = dtstps = dt;
                        int sampleCount = 0;
                        if (dt != null)
                        {
                            clsMathToSamples.Step[] steps = null;

                            if (dt.Rows.Count > 0)
                            {
                                string ansString = dt.Rows[0]["StepName"].ToString();
                                ansString = ansString.Replace(", ", ",").ToString(); // Space Removal May 5 2020
                                string[] ansList = clsMathToSamples.GetAnsList(ansString);
                                string[] Questions = new string[dt.Rows.Count];
                                QuestnAary = new string[dt.Rows.Count];
                                samcnt = new Dictionary<string, string>();


                                for (int i = 0; i < dt.Rows.Count; i++)
                                {
                                    string tempString = dt.Rows[i]["StepName"].ToString();
                                    tempString = tempString.Replace(", ", ",").ToString(); // Space Removal May 5 2020

                                    if(distractorSamples!=null)
                                    {
                                        string matchDistractors = String.Join(",", distractorSamples);
                                        tempString = getNormalSample(distractorSamples, matchDistractors, tempString);
                                    }


                                    Questions[i] = clsMathToSamples.GetQuestion(tempString);
                                        QuestnAary[i] = clsMathToSamples.GetQuestion(tempString);
                                }
                                if (matchToSampleType == "Randomized")
                                {
                                    steps = clsMathToSamples.FormStepsWithAns(ansList, Questions.Length, Questions);
                                }
                                else
                                {
                                    steps = clsMathToSamples.FormStepsInOrderWithAns(ansList, Questions.Length, Questions);
                                }




                            }



                            if (dt.Rows.Count > 0)
                            {
                                if (dtstps != null)
                                {
                                    if (dtstps.Rows.Count > 0)
                                    {
                                        foreach (DataRow dr in dt.Rows)
                                        {
                                            string stepname = dr["StepName"].ToString();
                                            string[] samplesCollection = stepname.Split('[');
                                            string[] samples = samplesCollection[1].Split(',');
                                            sampleCount = samples.Length;
                                        }
                                        int j = 0;
                                        //if (dtstps.Columns.Count > 4)
                                        // {

                                        //}
                                        //else
                                        //{

                                        for (int i = 0; i < sampleCount; i++)
                                        {
                                            if (!dtstps.Columns.Contains("Samples" + i))
                                                dtstps.Columns.Add("Samples" + i);
                                        }
                                        // }
                                        foreach (DataRow drst in dtstps.Rows)
                                        {

                                            for (int i = 0; i < dt.Rows.Count; i++)
                                            {
                                                if (i == j)
                                                {
                                                    DataRow dr = dt.Rows[i];
                                                    // do something with dr


                                                    //string stepname = dr["StepName"].ToString();
                                                    string stepname = steps[i].TrialText.Trim();
                                                    string[] samplesCollection = stepname.Split('[');
                                                    string[] samples = samplesCollection[1].Split(',');
                                                    //Keep the same order for qustn and samples
                                                    if (matchToSampleType == "Randomized")
                                                    {
                                                        drst["StepCd"] = stepname;
                                                        drst["StepName"] = stepname;
                                                    }
                                                    else
                                                    {
                                                        string dtStepname = drst["StepCd"].ToString();
                                                        string[] dtSamplesCollection = dtStepname.Split(':');
                                                        string dtSamplesCollectionNew = dtSamplesCollection[0] + " [" + samplesCollection[1];
                                                        drst["StepCd"] = dtSamplesCollectionNew;
                                                        drst["StepName"] = dtSamplesCollectionNew;

                                                    }


                                                    //need to set value to MyRow column
                                                    // or set it to some other value

                                                    for (int index = 0; index < samples.Length; index++)
                                                    {
                                                        samples[index] = samples[index].Replace("]", "");
                                                        drst["Samples" + index] = samples[index].Trim();


                                                    }
                                                }

                                            }
                                            j++;

                                        }
                                    }
                                }
                            }
                        }

                    }

                    ///Code Ended Here. Arun.

                    if (dtstps != null)
                    {
                        if (!dtstps.Columns.Contains("SessStepID"))
                        {
                            dtstps.Columns.Add("SessStepID", System.Type.GetType("System.String"));
                            int i = 0;
                            if (dtstepIDs.Rows.Count > 0)
                                foreach (DataRow dr in dtstepIDs.Rows)
                                //while (reader.Read())
                                {
                                    if (dtstps.Rows.Count > 0)
                                    {
                                        //dtstps.Rows[i]["SessStepID"] = dr["StdtSessionStepId"].ToString();
                                        dtstps.Rows[i]["SessStepID"] = dr["StdtSessionStepId"].ToString();
                                        i++;
                                    }
                                }
                            //reader.Close();
                        }

                        // bind and display the data

                        grdDataSht.DataSource = null;
                        grdDataSht.DataBind();
                        grdDataSht.DataSource = oDS.dtSteps;
                        grdDataSht.DataBind();
                    }
                    string selPrmpt = "";
                    if ((oDS.PromptProc == "Least-to-Most") || (oDS.PromptProc == "Graduated Guidance"))
                    {
                        selPrmpt = "SELECT LU.LookupId as Id,LU.LookupName as Name FROM LookUp LU INNER JOIN DSTempPrompt DS ON DS.PromptId=LU.LookupId WHERE" +
                                                " DS.ActiveInd='A' AND DS.DSTempHdrId=" + oTemp.TemplateId + " ORDER BY SortOrder DESC";
                    }
                    else
                    {
                        selPrmpt = "SELECT LU.LookupId as Id,LU.LookupName as Name FROM LookUp LU INNER JOIN DSTempPrompt DS ON DS.PromptId=LU.LookupId WHERE" +
                                    " DS.ActiveInd='A' AND DS.DSTempHdrId=" + oTemp.TemplateId + " ORDER BY SortOrder ";
                    }
                    DataTable dtPrompts = new DataTable();
                    dtPrompts = oData.ReturnDataTable(selPrmpt, false);
                    if (dtPrompts != null)
                    {

                        foreach (DataRow dr in dtPrompts.Rows)
                        {
                            lblPromtProc.Text += "<br/>" + dr["Name"].ToString();
                        }
                        foreach (GridViewRow gr in grdDataSht.Rows)
                        {
                            if (gr.RowType == DataControlRowType.DataRow)
                            {
                                if (oDS.dtColumns != null)
                                    foreach (DataRow drcol in oDS.dtColumns.Rows)
                                    {
                                        if (drcol["ColTypeCd"].ToString() == "Prompt")
                                        {
                                            DropDownList ddlPrompt = (DropDownList)gr.FindControl("ddlPrompt_" + drcol["DSTempSetColId"].ToString());
                                            ddlPrompt.DataSource = dtPrompts;
                                            ddlPrompt.DataTextField = "Name";
                                            ddlPrompt.DataValueField = "Id";
                                            ddlPrompt.DataBind();
                                            ddlPrompt.Items.Insert(0, new ListItem("--- Select ---", "0"));
                                            ddlPrompt.Items.Insert(ddlPrompt.Items.Count, new ListItem("Fail", "-2"));
                                            Session["promptid"] = "1";
                                            int printid = Convert.ToInt32(Request.QueryString["printid"]);
                                            if (printid == 1)
                                            {
                                                ddlPrompt.Attributes.Add("size", "6");
                                                ddlPrompt.Style.Add("height", "140px");

                                            }
                                        }
                                    }
                            }
                        }
                    }

                    object IOAStat = oData.FetchValue("SELECT IOAInd FROM StdtSessionHdr WHERE StdtSessionHdrId=" + ViewState["StdtSessHdr"]);
                    if (Convert.ToString(IOAStat) == "Y")
                    {
                        btnSubmitAndRepeat1.Visible = false;
                        btnSubmitAndRepeat2.Visible = false;
                        btnSubmitAndRepeat3.Visible = false;
                        btnDiscardDatasheet.Visible = false;
                    }
                    else
                    {
                        if (Session["DupNewTemplateId"] != null)
                        {
                            btnSubmitAndRepeat1.Visible = false;
                            btnSubmitAndRepeat2.Visible = false;
                            btnSubmitAndRepeat3.Visible = false;
                            btnDiscardDatasheet.Visible = false;
                        }
                        else
                        {
                            btnSubmitAndRepeat1.Visible = true;
                            btnSubmitAndRepeat2.Visible = true;
                            btnSubmitAndRepeat3.Visible = true;
                            btnDiscardDatasheet.Visible = true;
                        }
                        Session["DupNewTemplateId"] = null;
                    }

                    ClientScript.RegisterStartupScript(this.GetType(), "", "temp();", true);

                }
            }
            catch (Exception ex)
            {
                //LIJU:  Do the Rollback abd Connection close only in the Parent where its declared in a Try/Catch
                //oData.RollBackTransation(trans, con);
                //con.Close();
                clError.WriteToLog(ex.ToString());
                throw ex;
            }
    }
    //protected void fillSteps(int TempHdrId, int NbrOfTrials, string SkillTyp, int SetId, string TeachingProc, int VTLessonId, string ChainType)
    //{
    //    oData = new clsData();
    //    oTemp = (ClsTemplateSession)Session["BiweeklySession"];
    //    oDS = (clsDataSheet)Session[DatasheetKey];
    //    DataTable dt = new DataTable();
    //    if (oTemp != null)
    //    {
    //        if (oDS != null)
    //        {

    //            if (SkillTyp == "Discrete")
    //            {
    //                if (TeachingProc == "Match-to-Sample")
    //                {
    //                    string sqlStr = "SELECT [DSTempStepId],[StepName] as StepCd,[StepName]  FROM [dbo].[DSTempStep] " +
    //                                    " WHERE DSTempHdrId=" + oTemp.TemplateId + " AND DsTempSetId=" + SetId + " AND ActiveInd='A' ORDER BY [SortOrder]";
    //                    dt = oData.ReturnDataTable(sqlStr, false);
    //                }
    //                else if (VTLessonId > 0)
    //                {
    //                    string sqlStr = "SELECT [DSTempStepId],[StepCd],[StepName]  FROM [dbo].[DSTempStep] " +
    //                                    " WHERE DSTempHdrId=" + oTemp.TemplateId + " AND DsTempSetId=" + SetId + " AND ActiveInd='A' ORDER BY [SortOrder]";
    //                    dt = oData.ReturnDataTable(sqlStr, false);
    //                }
    //                else
    //                {
    //                    dt.Columns.Add("DSTempStepId", System.Type.GetType("System.String"));
    //                    dt.Columns.Add("StepCd", System.Type.GetType("System.String"));
    //                    for (int i = 1; i <= NbrOfTrials; i++)
    //                    {
    //                        DataRow dr = dt.NewRow();
    //                        dr["DSTempStepId"] = "0";
    //                        dr["StepCd"] = i.ToString();
    //                        dt.Rows.Add(dr);
    //                    }
    //                }
    //            }
    //            else
    //            {
    //                string sqlStr = "SELECT [DSTempStepId],[StepCd],[StepName]  FROM [dbo].[DSTempStep] " +
    //                " WHERE DSTempHdrId=" + oTemp.TemplateId + " AND (DsTempSetId=0 OR DsTempSetId=" + SetId + ") AND ActiveInd='A' ORDER BY [SortOrder]";
    //                if (ChainType == "Backward chain")
    //                {
    //                    sqlStr = "SELECT [DSTempStepId],[StepCd],[StepName]  FROM [dbo].[DSTempStep] " +
    //                             "WHERE DSTempHdrId=" + oTemp.TemplateId + " AND (DsTempSetId=0 OR DsTempSetId=" + SetId + ") AND ActiveInd='A' ORDER BY [SortOrder] DESC";
    //                }

    //                dt = oData.ReturnDataTable(sqlStr, false);
    //            }
    //            oDS.dtSteps = dt;
    //            Session[DatasheetKey] = oDS;
    //        }
    //    }
    //}


    protected void fillSteps(int TempHdrId, int NbrOfTrials, string SkillTyp, int SetId, string TeachingProc, int VTLessonId, string ChainType, string totalTaskType, string matchToSampleType)
    {
        //TeachingProc = getTeachingMethod(TeachingProc);

        oData = new clsData();
        oTemp = (ClsTemplateSession)Session["BiweeklySession"];
        oDS = (clsDataSheet)Session[DatasheetKey];
        DataTable dt = new DataTable();
        DataTable dtUpdated = new DataTable();

        if (oTemp != null)
        {
            if (oDS != null)
            {

                if (SkillTyp == "Discrete")
                {
                    if (TeachingProc == "Match-to-Sample")
                    {
                        //if(ViewState["StdtSessHdr"] != null)
                        {
                            string sqlStr = "SELECT [DSTempStepId],[StepName] as StepCd,[StepName],SortOrder as StepId  FROM [dbo].[DSTempStep] " +
                                            " WHERE DSTempHdrId=" + oTemp.TemplateId + " AND DsTempSetId=" + SetId + " AND ActiveInd='A' AND IsDynamic=0 ORDER BY [SortOrder]";
                            // string sqlStr = "SELECT Step.StdtSessionStepId as SessStepID, TempStep.[DSTempStepId],TempStep.[StepName] as StepCd,TempStep.[StepName],TempStep.SortOrder as StepId  FROM [dbo].[DSTempStep] TempStep  INNER JOIN StdtSessionStep Step " +
                            //                 " ON TempStep.DSTempStepId=Step.DSTempStepId  WHERE TempStep.DSTempHdrId=" + oTemp.TemplateId + " AND TempStep.DsTempSetId=" + SetId + " AND TempStep.ActiveInd='A' AND  Step.StdtSessionHdrId=" + ViewState["StdtSessHdr"].ToString() + " ORDER BY NEWID()";



                            dt = oData.ReturnDataTable(sqlStr, false);
                        }


                        string[] distractorSamples = getDistractors(oTemp.TemplateId, oDS.CrntSet);

                        if (ViewState["StdtSessHdr"] != null && ViewState["StdtSessHdr"] != "")
                        {
                            string IsTrial = Convert.ToString(oData.FetchValue("SELECT IsTrial FROM StdtSessionHdr WHERE StdtSessionHdrId='" + Convert.ToInt32(ViewState["StdtSessHdr"].ToString()) + "'"));
                            if (IsTrial != "")
                            {
                                string sqlStr = "SELECT Step.StdtSessionStepId as SessStepID, TempStep.[DSTempStepId],TempStep.[StepName] as StepCd,TempStep.[StepName],TempStep.SortOrder as StepId  FROM [dbo].[DSTempStep] TempStep  INNER JOIN StdtSessionStep Step " +
                                             " ON TempStep.DSTempStepId=Step.DSTempStepId  WHERE TempStep.DSTempStepId IN (" + IsTrial + ") ORDER BY NEWID()";
                                DataTable dtTrialSample = oData.ReturnDataTable(sqlStr, false);

                                foreach (DataRow dr in dtTrialSample.Rows)
                                {
                                    DataRow newTrialRow = dt.NewRow();
                                    newTrialRow["DSTempStepId"] = dr["DSTempStepId"];
                                    newTrialRow["StepCd"] = dr["StepCd"];
                                    newTrialRow["StepName"] = dr["StepName"];
                                    newTrialRow["StepId"] = dr["StepId"];
                                    dt.Rows.Add(newTrialRow);
                                }
                            }
                        }
                        if (dt.Rows.Count > 0)
                        {
                            string ansString = dt.Rows[0]["StepName"].ToString();
                            ansString = ansString.Replace(", ", ",").ToString(); // Space Removal May 5 2020
                            string[] ansList = clsMathToSamples.GetAnsList(ansString); 
                            string[] Questions = new string[dt.Rows.Count];
                            QuestnAary = new string[dt.Rows.Count];
                            samcnt = new Dictionary<string, string>();
                            clsMathToSamples.Step[] steps = null;


                            for (int i = 0; i < dt.Rows.Count; i++)
                            {
                                string tempString = dt.Rows[i]["StepName"].ToString();
                                tempString = tempString.Replace(", ", ",").ToString(); // Space Removal May 5 2020

                                if (distractorSamples != null)
                                {
                                    string matchDistractors = String.Join(",", distractorSamples);
                                    tempString = getNormalSample(distractorSamples, matchDistractors, tempString);
                                }

                                   

                                Questions[i] = clsMathToSamples.GetQuestion(tempString);
                                    QuestnAary[i] = clsMathToSamples.GetQuestion(tempString);
                            }
                            if (matchToSampleType == "Randomized")
                            {
                                steps = clsMathToSamples.FormStepsWithAns(ansList, Questions.Length, Questions);
                            }
                            else
                            {
                                steps = clsMathToSamples.FormStepsInOrderWithAns(ansList, Questions.Length, Questions);
                            }

                            dtUpdated = dt.Clone();
                            for (int i = 0; i < dt.Rows.Count; i++)
                            {
                                foreach (DataColumn col in dt.Columns)
                                {
                                    if (col.ColumnName == "StepCd")
                                    {

                                        dt.Rows[i][col] = steps[i].Questions;
                                    }
                                    if (col.ColumnName == "StepName")
                                    {
                                        dt.Rows[i][col] = steps[i].Questions;
                                    }
                                }
                                dtUpdated.ImportRow(dt.Rows[i]);
                            }
                            oDS.dtSteps = dtUpdated;
                            Session[DatasheetKey] = oDS;
                            return;
                        }
                    }
                    else if (VTLessonId > 0)
                    {
                        string sqlStr = "SELECT [DSTempStepId],[StepCd],[StepName],SortOrder as StepId  FROM [dbo].[DSTempStep] " +
                                        " WHERE DSTempHdrId=" + oTemp.TemplateId + " AND DsTempSetId=" + SetId + " AND ActiveInd='A' AND IsDynamic=0 ORDER BY [SortOrder]";
                        dt = oData.ReturnDataTable(sqlStr, false);
                    }
                    else
                    {
                        int TrialNo = Convert.ToInt32(oData.FetchValue("SELECT COUNT(*) FROM StdtSessionStep WHERE StdtSessionHdrId='" + ViewState["StdtSessHdr"] + "'"));
                        if (TrialNo == 0)
                        {
                            TrialNo = Convert.ToInt32(oData.FetchValue("SELECT  NbrOfTrials FROM DSTempHdr WHERE DSTempHdrId='" + oTemp.TemplateId + "'"));
                        }

                        dt.Columns.Add("DSTempStepId", System.Type.GetType("System.String"));
                        dt.Columns.Add("StepCd", System.Type.GetType("System.String"));
                        dt.Columns.Add("StepId", System.Type.GetType("System.String"));

                        for (int i = 1; i <= TrialNo; i++)
                        {
                            DataRow dr = dt.NewRow();
                            dr["DSTempStepId"] = "0";
                            dr["StepCd"] = i.ToString();
                            dr["StepId"] = "0";
                            dt.Rows.Add(dr);
                        }
                    }
                }
                else
                {
                    //string sqlStr = "SELECT [DSTempStepId],[StepCd]+' - '+[StepName] as StepCd,[StepName],SortOrder as StepId  FROM [dbo].[DSTempStep] " +
                    //" WHERE DSTempHdrId=" + oTemp.TemplateId + " AND  DsTempSetId=" + SetId + " AND ActiveInd='A' AND IsDynamic=0 ORDER BY [SortOrder]";
                    string sqlStr = "SELECT [DSTempStepId],[StepCd]+' - '+[StepName] as StepCd,[StepName],RANK() OVER(ORDER BY SortOrder) as StepId  FROM [dbo].[DSTempStep] " +
                   " WHERE DSTempHdrId=" + oTemp.TemplateId + " AND  DsTempSetId=" + SetId + " AND ActiveInd='A' AND IsDynamic=0 ORDER BY [SortOrder]";
                    if (TeachingProc == "Total Task")
                    {
                        if (totalTaskType == "Randomized")
                        {
                            if (Convert.ToBoolean(ViewState["IsHistory"]) != true)
                            {

                                sqlStr = "SELECT [DSTempStepId],[StepCd]+' - '+[StepName] as StepCd,[StepName],SortOrder as StepId  FROM [dbo].[DSTempStep] " +
                            " WHERE DSTempHdrId=" + oTemp.TemplateId + " AND DsTempSetId=" + SetId + " AND ActiveInd='A'  AND IsDynamic=0 ORDER BY NEWID()";
                            }
                            else
                                sqlStr = "SELECT [DSTempStepId],[StepCd]+' - '+[StepName] as StepCd,[StepName],SortOrder as StepId  FROM [dbo].[DSTempStep] " +
                                " WHERE DSTempHdrId=" + oTemp.TemplateId + " AND  DsTempSetId=" + SetId + "  AND ActiveInd='A'  AND IsDynamic=0 ORDER BY SortOrder";
                        }
                    }

                    if (ChainType == "Backward chain")
                    {
                        sqlStr = "SELECT [DSTempStepId],[StepCd]+' - '+[StepName] as StepCd,[StepName],RANK() OVER(ORDER BY SortOrder DESC) as StepId  FROM [dbo].[DSTempStep] " +
                                 "WHERE DSTempHdrId=" + oTemp.TemplateId + " AND DsTempSetId=" + SetId + " AND ActiveInd='A'  AND IsDynamic=0 ORDER BY [SortOrder] ";

                    }

                    dt = oData.ReturnDataTable(sqlStr, false);
                }
                dtUpdated = dt.Clone();

                if (dt != null)
                {
                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            foreach (DataColumn col in dt.Columns)
                            {
                                if (col.ColumnName == "StepCd")
                                {

                                    dr[col] = dr[col].ToString().Replace("&qt;", "'");
                                    dr[col] = dr[col].ToString().Replace("?s", "'s");
                                    dr[col] = dr[col].ToString().Replace("&lqt", "‘");
                                    dr[col] = dr[col].ToString().Replace("?", "");
                                    dr[col] = dr[col].ToString().Replace("&rqt", "’");
                                }
                                if (col.ColumnName == "StepName")
                                {
                                    dr[col] = dr[col].ToString().Replace("&qt;", "'");
                                    dr[col] = dr[col].ToString().Replace("?s", "'s");
                                    dr[col] = dr[col].ToString().Replace("&lqt", "‘");
                                    dr[col] = dr[col].ToString().Replace("?", "");
                                    dr[col] = dr[col].ToString().Replace("&rqt", "’");
                                }
                            }
                            dtUpdated.ImportRow(dr);
                        }

                    }
                }
                oDS.dtSteps = dtUpdated;
                Session[DatasheetKey] = oDS;
            }
        }
    }

    private string getTeachingMethod(string TeachingProc)
    {
        string sqlStr = "SELECT LookupDesc FROM LookUp WHERE LookupName = '" + TeachingProc + "'";
        DataTable dt = oData.ReturnDataTable(sqlStr, false);

        return dt.Rows[0]["LookupDesc"].ToString();
    }

    protected void checkStat(object sender, EventArgs e)
    {
        SqlConnection con = null;
        SqlTransaction trans = null;
        oTemp = (ClsTemplateSession)Session["BiweeklySession"];
        oSession = (clsSession)Session["UserSession"];
        oDS = new clsDataSheet();
        int hasPrevSet = fillTempOverride(oTemp.TemplateId);
		
		//Code for Not Deleting data from Stdtdsstat Preview Issue in Maintenance [16-jul-2020] - Dev 2
        int MaintStatusId = Convert.ToInt16(oData.FetchValue("SELECT  LookupId FROM LookUp WHERE LookupType='TemplateStatus' And LookupName='Maintenance' "));
        int AprovdStatusId = Convert.ToInt16(oData.FetchValue("SELECT  LookupId FROM LookUp WHERE LookupType='TemplateStatus' And LookupName='Approved' "));
        int LsnStatusId = Convert.ToInt16(oData.FetchValue("select statusid from DSTempHdr where DSTempHdrId =" + oTemp.TemplateId + " "));
       // if ((MaintStatusId == LsnStatusId) || (AprovdStatusId == LsnStatusId))
       // {
            string dtDelQry = null;
            string DelQry = "SELECT StdtSessionHdrId FROM StdtSessionHdr WHERE StudentId=" + oSession.StudentId + " AND SchoolId=" + oSession.SchoolId + " AND StdtClassId=" + oSession.Classid + " AND DSTempHdrId=" + oTemp.TemplateId + " AND SessionStatusCd='P'";
            DataTable dtDelQrys = oData.ReturnDataTable(DelQry, false);
            if (dtDelQrys.Rows.Count > 0)
            {
                dtDelQry = dtDelQrys.Rows[0]["StdtSessionHdrId"].ToString();
                string check = null;
                check = dtDelQry.ToString();
                if (check != null)
                {
                    string updQry = "DELETE FROM StdtSessionHdr WHERE StdtSessionHdrId=" + check;
                    int retrn = oData.Execute(updQry);
                }
            }
        //}
        //Code for Not Deleting data from Stdtdsstat Preview Issue in Maintenance [16-jul-2020] - Dev 2

        //if (Session["NewTemplateId"] != null)
        //{
        //    oTemp.TemplateId = Convert.ToInt32(Session["NewTemplateId"]);

        //    btnSubmit1.Visible = false;
        //    btnSave1.Visible = false;
        //    btnPriorSessn.Visible = false;
        //    btnSave.Visible = false;
        //    btnSubmit.Visible = false;
        //    btnProbe.Visible = false;
        //    btnSubmitAndRepeat1.Visible = false;
        //    btnSubmitAndRepeat2.Visible = false;
        //    ImgBtn_Override.Visible = false;
        //    ImgBtn_Inactive.Visible = false;
        //    // Session["NewTemplateId"] = null;
        //}
        Session[DatasheetKey] = oDS;
        try
        {
            if ((oTemp != null) && (oSession != null))
            {
                oData = new clsData();
                string sel = "";

                //if (Session["NewTemplateId"] != null)
                //{
                //    //selPrev = "SELECT * FROM StdtSessionHdr WHERE StudentId=" + oSession.StudentId + " AND SchoolId=" + oSession.SchoolId + " AND StdtClassId=" + oSession.Classid + " AND DSTempHdrId=" + oTemp.TemplateId + " AND SessionStatusCd='P' AND IsMaintanace ='False'";
                //    //DataTable dtHdrsPrev = oData.ReturnDataTable(sel, false);
                //    oData = new clsData();
                //    oData.ReturnDropDown("SELECT UserId as Id,UserLName+' '+UserFName AS Name FROM [dbo].[User] WHERE ActiveInd='A'", ddlIOAUsers);
                //    if (ddlIOAUsers.Items.Count > 0)
                //    {
                //        ddlIOAUsers.Items[0].Text = "---- Select User ----";

                //        string strQuery = "SELECT UserId as Id,UserLName+' '+UserFName AS Name FROM [dbo].[User] WHERE ActiveInd='A' AND UserId=" + oSession.LoginId;
                //        DataTable dtSess = oData.ReturnDataTable(strQuery, false);
                //        ddlIOAUsers.SelectedValue = dtSess.Rows[0]["Id"].ToString();
                //        ddlIOAUsers.Enabled = false;

                //    }
                //    //Create new Draft for teacher..

                //    hdn_isMaintainance.Value = "false";

                //    con = oData.Open();
                //    trans = con.BeginTransaction();
                //    generateSheet(true);
                //    bool reslt = SaveDraft("P", "N", "insert", con, trans);
                //    ImgBtn_Inactive.Visible = false;

                //    if (reslt)
                //    {
                //        bool reslt2 = SaveMeasuremnts(Convert.ToInt32(ViewState["StdtSessHdr"].ToString()), con, trans);
                //        if (reslt2) oData.CommitTransation(trans, con);
                //        else if (trans.Connection.State == ConnectionState.Open) oData.RollBackTransation(trans, con);
                //        con.Close();
                //        getStepPrompts();
                //        fillStepGrid(oDS.TeachProc, oDS.SkillType, oDS.MatchToSampleType);

                //    }
                //    else if (trans.Connection.State == ConnectionState.Open)
                //    {
                //        oData.RollBackTransation(trans, con);
                //        con.Close();
                //    }
                //}
                //else
                //{
                if ((Request.QueryString["exc"] != null && Request.QueryString["exc"] == "true") || (hasPrevSet == 0))
                {
                    //

                    sel = "SELECT TOP 1 * FROM StdtSessionHdr WHERE StudentId=" + oSession.StudentId + " AND SchoolId=" + oSession.SchoolId + /*" AND StdtClassId=" + oSession.Classid +*/ " AND DSTempHdrId=" + oTemp.TemplateId + " AND SessionStatusCd='D' AND IsMaintanace ='" + hdn_isMaintainance.Value + "' AND IOAInd='N'";
                    string selIOA = "SELECT TOP 1 * FROM StdtSessionHdr WHERE StudentId=" + oSession.StudentId + " AND SchoolId=" + oSession.SchoolId + " AND DSTempHdrId=" + oTemp.TemplateId + " AND SessionStatusCd='D' AND IsMaintanace ='" + hdn_isMaintainance.Value + "' AND IOAInd='Y'";

                    object objSessNbr = oData.FetchValue("SELECT ISNULL(MAX(SessionNbr),0)+1 FROM StdtSessionHdr WHERE StudentId=" + oSession.StudentId + " AND SchoolId=" + oSession.SchoolId +/* " AND StdtClassId=" + oSession.Classid +*/ " AND LessonPlanId=(SELECT LessonPlanId FROM DSTempHdr WHERE DSTempHdrId=" + oTemp.TemplateId + ")");
                    if (objSessNbr == null)
                        objSessNbr = 0;
                    oDS.SessNbr = (int)objSessNbr;
                    DataTable dtHdrs = oData.ReturnDataTable(sel, false);
                    DataTable dtHdrsIOA = oData.ReturnDataTable(selIOA, false);
                    dtHdrs.Merge(dtHdrsIOA, true);

                    oData.ReturnDropDown("SELECT UserId as Id,UserLName+' '+UserFName AS Name FROM [dbo].[User] WHERE ActiveInd='A'", ddlIOAUsers);
                    if (ddlIOAUsers.Items.Count > 0)
                    {
                        ddlIOAUsers.Items[0].Text = "---- Select User ----";
                        string strQuery = "SELECT UserId as Id,UserLName+' '+UserFName AS Name FROM [dbo].[User] WHERE ActiveInd='A' AND UserId=" + oSession.LoginId;
                        DataTable dtSess = oData.ReturnDataTable(strQuery, false);
                        ddlIOAUsers.SelectedValue = dtSess.Rows[0]["Id"].ToString();
                        ddlIOAUsers.Enabled = false;
                    }
                    if (dtHdrs != null)
                    {
                        if (dtHdrs.Rows.Count == 0)
                        {
                            //Create new Draft for teacher..
                            con = oData.Open();
                            //Preview template Exists
                            if (oDS.SessNbr > 0)
                            {
                                sel = "SELECT * FROM StdtSessionHdr WHERE StudentId=" + oSession.StudentId + " AND SchoolId=" + oSession.SchoolId + " AND StdtClassId=" + oSession.Classid + " AND DSTempHdrId=" + oTemp.TemplateId + " AND SessionStatusCd='P' AND SessionNbr=0 ";
                                DataTable dtPreview = oData.ReturnDataTable(sel, false);
                                if (dtPreview != null)
                                {
                                    if (dtPreview.Rows.Count > 0)
                                    {
                                        ViewState["StdtSessHdr"] = dtPreview.Rows[0]["StdtSessionHdrId"].ToString();
                                    }
                                    //-----
                                    if (ViewState["StdtSessHdr"] != null)
                                    {
                                        string updQry = "DELETE FROM StdtSessionHdr WHERE StdtSessionHdrId=" + ViewState["StdtSessHdr"];
                                        int retrn = oData.Execute(updQry);
                                        string selqry = "SELECT StdtDSStatId FROM StdtDSStat WHERE StudentId=" + oSession.StudentId + " AND SchoolId=" + oSession.SchoolId + " AND DSTempHdrId=" + oTemp.TemplateId + "";
                                        DataTable dtDSStat = oData.ReturnDataTable(selqry, false);
                                        if (dtDSStat.Rows.Count > 0)
                                        {
                                            string dltQry = "DELETE FROM StdtDSStat WHERE DSTempHdrId=" + oTemp.TemplateId + " ";
                                            int dtlRetrn = oData.Execute(dltQry);
                                        }
                                    }
                                }
                            }
                            trans = con.BeginTransaction();
                            generateSheet(true);
                            bool reslt = SaveDraft("D", "N", "insert", con, trans, true);
                            if (reslt)
                            {
                                bool reslt2 = SaveMeasuremnts(Convert.ToInt32(ViewState["StdtSessHdr"].ToString()), con, trans);
                                if (reslt2) oData.CommitTransation(trans, con);
                                else if (trans.Connection.State == ConnectionState.Open) oData.RollBackTransation(trans, con);
                                con.Close();
                                getStepPrompts();
                                fillStepGrid(oDS.TeachProc, oDS.SkillType, oDS.MatchToSampleType);
                            }
                            else if (!reslt)
                            {
                                dtHdrs = null;
                                dtHdrsIOA = null;
                                sel = "SELECT TOP 1 * FROM StdtSessionHdr WHERE StudentId=" + oSession.StudentId + " AND SchoolId=" + oSession.SchoolId + /*" AND StdtClassId=" + oSession.Classid +*/ " AND DSTempHdrId=" + oTemp.TemplateId + " AND SessionStatusCd='D' AND IsMaintanace ='" + hdn_isMaintainance.Value + "' AND IOAInd='N'";
                                selIOA = "SELECT TOP 1 * FROM StdtSessionHdr WHERE StudentId=" + oSession.StudentId + " AND SchoolId=" + oSession.SchoolId + " AND DSTempHdrId=" + oTemp.TemplateId + " AND SessionStatusCd='D' AND IsMaintanace ='" + hdn_isMaintainance.Value + "' AND IOAInd='Y'";

                                objSessNbr = oData.FetchValue("SELECT ISNULL(MAX(SessionNbr),0)+1 FROM StdtSessionHdr WHERE StudentId=" + oSession.StudentId + " AND SchoolId=" + oSession.SchoolId +/* " AND StdtClassId=" + oSession.Classid +*/ " AND LessonPlanId=(SELECT LessonPlanId FROM DSTempHdr WHERE DSTempHdrId=" + oTemp.TemplateId + ")");

                                if (objSessNbr == null)
                                    objSessNbr = 0;
                                oDS.SessNbr = (int)objSessNbr;
                                dtHdrs = oData.ReturnDataTable(sel, false);
                                dtHdrsIOA = oData.ReturnDataTable(selIOA, false);
                                dtHdrs.Merge(dtHdrsIOA, true);

                                oData.ReturnDropDown("SELECT UserId as Id,UserLName+' '+UserFName AS Name FROM [dbo].[User] WHERE ActiveInd='A'", ddlIOAUsers);
                                if (ddlIOAUsers.Items.Count > 0)
                                {
                                    ddlIOAUsers.Items[0].Text = "---- Select User ----";
                                    string strQuery = "SELECT UserId as Id,UserLName+' '+UserFName AS Name FROM [dbo].[User] WHERE ActiveInd='A' AND UserId=" + oSession.LoginId;
                                    DataTable dtSess = oData.ReturnDataTable(strQuery, false);
                                    ddlIOAUsers.SelectedValue = dtSess.Rows[0]["Id"].ToString();
                                    ddlIOAUsers.Enabled = false;
                                }
                            }
                            else if (trans.Connection.State == ConnectionState.Open)
                            {
                                oData.RollBackTransation(trans, con);
                                con.Close();
                            }
                        }
                        if (dtHdrs.Rows.Count == 2)
                        {
                            foreach (DataRow dr in dtHdrs.Rows)
                            {
                                DataTable dtUsr = new DataTable();
                                if (dr["IOAInd"].ToString() == "N")
                                {
                                    string selQry = "SELECT UserLName+' '+UserFName AS Name,Hdr.CreatedOn,SessionNbr FROM StdtSessionHdr Hdr INNER JOIN [User] Usr ON Usr.UserId=Hdr.CreatedBy " +
                                        "WHERE StdtSessionHdrId=" + dr["StdtSessionHdrId"].ToString();
                                    dtUsr = oData.ReturnDataTable(selQry, false);
                                    if ((dtUsr != null) && (dtUsr.Rows.Count > 0))
                                    {
                                        hfSessIDNorm.Value = dr["StdtSessionHdrId"].ToString();
                                        lblNormalUsr.InnerHtml = dtUsr.Rows[0]["Name"].ToString();
                                        lblNormalStime.InnerHtml = dtUsr.Rows[0]["CreatedOn"].ToString();
                                        lblSessNo.InnerHtml = dtUsr.Rows[0]["SessionNbr"].ToString();
                                    }
                                }
                                if (dr["IOAInd"].ToString() == "Y")
                                {
                                    string selQry = "SELECT UserLName+' '+UserFName AS Name,Hdr.CreatedOn,SessionNbr,IOASessionHdrId FROM StdtSessionHdr Hdr INNER JOIN [User] Usr ON Usr.UserId=Hdr.IOAUserId " +
                                        "WHERE StdtSessionHdrId=" + dr["StdtSessionHdrId"].ToString();
                                    dtUsr = oData.ReturnDataTable(selQry, false);
                                    if ((dtUsr != null) && (dtUsr.Rows.Count > 0))
                                    {
                                        hfSessIDIOA.Value = dr["StdtSessionHdrId"].ToString();
                                        lblIOAUsr.InnerHtml = dtUsr.Rows[0]["Name"].ToString();
                                        lblIOAStime.InnerHtml = dtUsr.Rows[0]["CreatedOn"].ToString();
                                        lblIOASessNo.InnerHtml = dtUsr.Rows[0]["SessionNbr"].ToString();
                                        // oDS.IOASessHdr = Convert.ToInt32(dtUsr.Rows[0]["IOASessionHdrId"].ToString());
                                    }
                                }
                            }


                            //Open ioa or teacher's draft...
                            if (Request.QueryString["IOA_Status"] == null)
                            {
                                ClientScript.RegisterStartupScript(this.GetType(), "", "showPop(1);", true);
                            }
                            else
                            {
                                string IOA_Stat = Convert.ToString(Request.QueryString["IOA_Status"]);
                                if (IOA_Stat == "'N'")
                                {
                                    btnNormal_Click(sender, e);
                                }
                                else if (IOA_Stat == "'Y'")
                                {
                                    btnIOA_Click(sender, e);
                                }
                            }

                        }
                        if (dtHdrs.Rows.Count == 1)
                        {
                            if (dtHdrs.Rows[0]["IOAInd"].ToString() == "Y")
                            {
                                if (dtHdrs.Rows[0]["IOAInd"].ToString() == "Y")
                                {
                                    //open ioa's draft...
                                    ViewState["StdtSessHdr"] = dtHdrs.Rows[0]["StdtSessionHdrId"].ToString();
                                    oDS.IOAInd = "Y";
                                    oDS.IOASessHdr = Convert.ToInt32(dtHdrs.Rows[0]["IOASessionHdrId"].ToString());
                                    LoadData(Convert.ToInt32(ViewState["StdtSessHdr"].ToString()), true);
                                }
                            }
                            else
                            {   //ask whether to create an ioa draft or open existing draft...
                                ViewState["StdtSessHdr"] = dtHdrs.Rows[0]["StdtSessionHdrId"].ToString();
                                oDS.IOASessHdr = Convert.ToInt32(dtHdrs.Rows[0]["StdtSessionHdrId"].ToString());
                                if (Request.QueryString["AddTrial"] == null)
                                {
                                    //string Maintanance = Convert.ToString(oData.FetchValue("SELECT [DSMode] FROM [dbo].[DSTempHdr] WHERE DSTempHdrId=" + oTemp.TemplateId));
                                    //if (Maintanance == "MAINTENANCE")
                                    //{
                                    //    btnNoIOA_Click(sender, e);
                                    //}
                                    //else
                                        ClientScript.RegisterStartupScript(this.GetType(), "", "showPop(2);", true);
                                }
                                else
                                {
                                    if (Request.QueryString["AddTrial"] == "true")
                                    {
                                        ViewState["StdtSessHdr"] = Request.QueryString["SessionHdr"];  //If the request is add trial in maintanance mode session hdr values should nor be changed
                                        oDS.IOASessHdr = Convert.ToInt32(Request.QueryString["SessionHdr"]);
                                    }
                                    btnNoIOA_Click(sender, e);
                                }
                                string selQry = "SELECT UserLName+' '+UserFName AS Name,Hdr.CreatedOn,SessionNbr FROM StdtSessionHdr Hdr INNER JOIN [User] Usr ON Usr.UserId=Hdr.CreatedBy " +
                                        "WHERE StdtSessionHdrId=" + dtHdrs.Rows[0]["StdtSessionHdrId"].ToString();
                                DataTable dtUsr = oData.ReturnDataTable(selQry, false);
                                if ((dtUsr != null) && (dtUsr.Rows.Count > 0))
                                {
                                    lblUName1.InnerHtml = dtUsr.Rows[0]["Name"].ToString();
                                    LblStrtTime1.InnerHtml = dtUsr.Rows[0]["CreatedOn"].ToString();
                                    lblSessNo1.InnerHtml = dtUsr.Rows[0]["SessionNbr"].ToString();
                                }
                            }
                        }
                    }
                    //
                }
                else
                {
                    ClientScript.RegisterStartupScript(this.GetType(), "", "showTempOverride();", true);

                    //if submit and repeat, trigger continue button

                    //---
                    if (Request.QueryString["SRMode"] != null && Request.QueryString["SRMode"] == "true")
                    {
                        if (Request.QueryString["isMaint"] != null && Request.QueryString["isMaint"] == "true")
                        {
                            foreach (RepeaterItem rItem in rptr_tempOverride.Items)
                            {
                                CheckBox chkTempOverride = (CheckBox)rItem.FindControl("tempOverrideCheckBox");
                                HiddenField hdn_tempSetId = (HiddenField)rItem.FindControl("hdn_tempSetId");
                                chkTempOverride.Checked = false;
                                string currSetIdTemp = Request.QueryString["currSetIdTemp"];
                                if (hdn_tempSetId.Value == currSetIdTemp)
                                {
                                    chkTempOverride.Checked = true;
                                }
                            }
                        }
                        else
                        {
                            int iCrntSet = 0;
                            string sqlStr = "select NextSetId from StdtDSStat where DSTempHdrId = " + oTemp.TemplateId;
                            DataTable dt = oData.ReturnDataTable(sqlStr, false);
                            if (dt != null)
                            {
                                iCrntSet = Convert.ToInt32(dt.Rows[0]["NextSetId"]);
                            }
                            foreach (RepeaterItem rItem in rptr_tempOverride.Items)
                            {
                                CheckBox chkTempOverride = (CheckBox)rItem.FindControl("tempOverrideCheckBox");
                                HiddenField hdn_tempSetId = (HiddenField)rItem.FindControl("hdn_tempSetId");
                                chkTempOverride.Checked = false;
                                string currSetIdTemp = Request.QueryString["currSetIdTemp"];
                                if (hdn_tempSetId.Value == iCrntSet.ToString())
                                {
                                    chkTempOverride.Checked = true;
                                }
                            }
                        }
                        ScriptManager.RegisterStartupScript(this, this.GetType(), "showTempOverrideCheck", "showTempOverrideCheck();", true);
                    }
                    //---

                    //if hashtable has set, load it

					//Code for Not Deleting data from Stdtdsstat Preview Issue in Maintenance [16-jul-2020] - Dev 2
                    int MaintStatusId1 = Convert.ToInt16(oData.FetchValue("SELECT  LookupId FROM LookUp WHERE LookupType='TemplateStatus' And LookupName='Maintenance' "));
                    int AprovdStatusId1 = Convert.ToInt16(oData.FetchValue("SELECT  LookupId FROM LookUp WHERE LookupType='TemplateStatus' And LookupName='Approved' "));
                    int LsnStatusId1 = Convert.ToInt16(oData.FetchValue("select statusid from DSTempHdr where DSTempHdrId =" + oTemp.TemplateId + " "));
                   // if ((MaintStatusId1 != LsnStatusId1) && (AprovdStatusId1 != LsnStatusId1))
                   // {
						//???
						Hashtable htLpList = (Hashtable)Session["tempOverrideHT"];
						if (htLpList != null)
						{
							string lpId = oTemp.TemplateId.ToString();
							LinkedList<KeyValuePair<string, Hashtable>> llKvpSetList = (LinkedList<KeyValuePair<string, Hashtable>>)htLpList[lpId];
							if (llKvpSetList != null)
							{
								if (llKvpSetList.Count > 0)
								{
									foreach (KeyValuePair<string, Hashtable> abc in llKvpSetList)
									{
										string checkedId = abc.Key;
										foreach (RepeaterItem rItem in rptr_tempOverride.Items)
										{
											CheckBox chkTempOverride = (CheckBox)rItem.FindControl("tempOverrideCheckBox");
											HiddenField hdn_tempSetId = (HiddenField)rItem.FindControl("hdn_tempSetId");
											if (checkedId == hdn_tempSetId.Value)
											{
												chkTempOverride.Checked = true;
											}
										}
									}
									ScriptManager.RegisterStartupScript(this, this.GetType(), "showTempOverrideCheck", "showTempOverrideCheck();", true);
								}
							}
						}
						//???
                   // }
                    //Code for Not Deleting data from Stdtdsstat Preview Issue in Maintenance [16-jul-2020] - Dev 2
                }
                // Session["NewTemplateId"] = null;

            }
        }
        catch (Exception ex)
        {
            if (trans != null && trans.Connection.State == ConnectionState.Open)
            {
                oData.RollBackTransation(trans, con);

            }
            if (con != null)
                con.Close();
            ClsErrorLog clError = new ClsErrorLog();
            clError.WriteToLog(ex.ToString());
            throw ex;
        }
    }
    protected void getStepPrompts()
    {
        ClsErrorLog clError = new ClsErrorLog();
        oDS = (clsDataSheet)Session[DatasheetKey];

        if (oDS != null)
        {
            try
            {
                if (oDS.ChainType == "Total Task")
                {
                    hfcrntPrompt.Value = "";

                    if (oDS.dtColumns != null)
                        foreach (DataRow drCol in oDS.dtColumns.Rows)
                        {
                            if (drCol["ColTypeCd"].ToString() == "Prompt")
                            {
                                hfcrntPrompt.Value += drCol["DSTempSetColId"].ToString() + "*";
                                string selStepPrompts = "SELECT PromptId FROM StdtDSStepStat StpStat INNER JOIN StdtSessionStep Step ON Step.DSTempStepId=StpStat.DSTempStepId " +
                                    "WHERE DSTempSetColId=" + drCol["DSTempSetColId"].ToString() + " AND StdtSessionHdrId=" + Convert.ToInt32(ViewState["StdtSessHdr"].ToString());
                                DataTable dtStepPrompts = new DataTable();
                                dtStepPrompts = oData.ReturnDataTable(selStepPrompts, false);
                                foreach (DataRow drStepPrmpt in dtStepPrompts.Rows)
                                {
                                    hfcrntPrompt.Value += drStepPrmpt["PromptId"].ToString() + ",";
                                }
                                hfcrntPrompt.Value += "|";
                            }
                        }
                    //if (hfcrntPrompt.Value.Length > 0)
                    //    hfcrntPrompt.Value = hfcrntPrompt.Value.Substring(0, (hfcrntPrompt.Value.Length - 1));
                    generateStepPrompts();
                }
                else
                {
                    hfcrntPrompt.Value = "";
                    if (oDS.dtColumns != null)
                        foreach (DataRow drCol in oDS.dtColumns.Rows)
                        {
                            if (drCol["ColTypeCd"].ToString() == "Prompt")
                            {
                                hfcrntPrompt.Value += drCol["DSTempSetColId"].ToString() + "*";
                                string selStepPrompts = "SELECT StdtSessionStepId FROM StdtSessionStep WHERE StdtSessionHdrId=" + Convert.ToInt32(ViewState["StdtSessHdr"].ToString());
                                DataTable dtStepPrompts = new DataTable();
                                dtStepPrompts = oData.ReturnDataTable(selStepPrompts, false);
                                for (int i = 0; i < dtStepPrompts.Rows.Count; i++)
                                {
                                    hfcrntPrompt.Value += oDS.CrntPrompt + ",";
                                }
                                hfcrntPrompt.Value += "|";
                            }
                        }
                    //if (hfcrntPrompt.Value.Length > 0)
                    //    hfcrntPrompt.Value = hfcrntPrompt.Value.Substring(0, (hfcrntPrompt.Value.Length - 1));
                }
            }
            catch (Exception ex)
            {
                // valid = false;
                //LIJU:  Do the Rollback abd Connection close only in the Parent where its declared in a Try/Catch
                //oData.RollBackTransation(tran, con);
                //con.Close();
                clError.WriteToLog(ex.ToString());
                throw ex;
            }
        }

    }

    protected void generateStepPrompts()
    {
        oDS = (clsDataSheet)Session[DatasheetKey];
        string selSteps = "SELECT DSS.StepCd,Step.DSTempStepId FROM StdtSessionStep Step INNER JOIN DSTempStep DSS ON DSS.DSTempStepId=Step.DSTempStepId WHERE StdtSessionHdrId=" + Convert.ToInt32(ViewState["StdtSessHdr"].ToString()) + "  AND IsDynamic=0 order by SortOrder";
        DataTable dtSteps = new DataTable();
        dtSteps = oData.ReturnDataTable(selSteps, false);
        string table = "<table>";
        for (int i = 0; i < dtSteps.Rows.Count + 1; i++)
        {
            if (i == 0)
            {
                table += "<tr>";
                if (oDS != null)
                {
                    table += "<td><b>Step Name</b></td>";
                    for (int j = 0; j < oDS.dtColumns.Rows.Count; j++)
                    {
                        if (oDS.dtColumns.Rows[j]["ColTypeCd"].ToString() == "Prompt")
                            table += "<td><b>" + oDS.dtColumns.Rows[j]["ColName"].ToString() + "</b></td>";
                    }
                }
                table += "</tr>";
            }
            else
            {
                table += "<tr>";
                if (oDS != null)
                {
                    table += "<td>" + dtSteps.Rows[i - 1]["StepCd"].ToString() + "</td>";
                    for (int j = 0; j < oDS.dtColumns.Rows.Count; j++)
                    {
                        if (oDS.dtColumns.Rows[j]["ColTypeCd"].ToString() == "Prompt")
                        {
                            object objPrmpt = "";
                            objPrmpt = oData.FetchValue("SELECT LookupName FROM StdtDSStepStat Stp INNER JOIN LookUp LU ON LU.LookupId=Stp.PromptId WHERE DSTempSetColId=" + oDS.dtColumns.Rows[j]["DSTempSetColId"].ToString() + " AND DSTempStepId=" + dtSteps.Rows[i - 1]["DSTempStepId"].ToString() + "");
                            if (objPrmpt != null)
                                table += "<td>" + objPrmpt.ToString() + "</td>";
                        }
                    }
                }
                table += "</tr>";
            }
        } table += "</table>";
        divStpPrmpts.InnerHtml = table;
    }
    protected void generateSheet(bool VTPopupInd)
    {
        Session["StepLevelPrompt"] = false;
        ClsErrorLog clError = new ClsErrorLog();
        oData = new clsData();
        try
        {
            oTemp = (ClsTemplateSession)Session["BiweeklySession"];
            oDS = (clsDataSheet)Session[DatasheetKey];
            if (oTemp != null)
            {
                if (oDS != null)
                {

                    string sqlStr = "";
                    sqlStr = "SELECT DH.LessonPlanId,DH.LessonDefInst,ISNULL(LU.LookupName,'') AS TeachingProc,ISNULL(LUp.LookupName,'') as PromptProc ,SkillType,ISNULL(NbrOfTrials,0) as NbrOfTrials," +
                            "DH.DSTemplateName AS LessonPlanName,ISNULL(DH.Materials,'') as Mat,ISNULL(DH.TotalTaskType,0) as TType,ISNULL(DH.TaskOther,0)as TOther,ISNULL(ChainType,'') AS ChainType,DH.DSMode,DH.IsVisualTool,ISNULL(DH.VTLessonId,0) as VTLessonId,ISNULL(ModificationInd,0) as ModificationInd,TotalTaskFormat,MatchToSampleType,StudIncorrRespDef,StudentReadCrita,Mistrial,TeacherPrepare,CorrectionProc,ReinforcementProc  FROM DSTempHdr DH JOIN LessonPlan LP ON LP.LessonPlanId=DH.LessonPlanId LEFT " +
                            "JOIN LookUp LU ON TeachingProcId=LU.LookUpId INNER JOIN Lookup LUp ON LUp.LookupId=PromptTypeId WHERE DSTempHdrId=" + oTemp.TemplateId;
                    DataTable dtTmpHdrDtls = new DataTable();
                    dtTmpHdrDtls = oData.ReturnDataTable(sqlStr, false);
                    if (dtTmpHdrDtls != null)
                    {
                        if (dtTmpHdrDtls.Rows.Count > 0)
                        {
                            oDS.ISVTool = Convert.ToInt32(dtTmpHdrDtls.Rows[0]["IsVisualTool"].ToString());
                            oDS.VTLessonId = Convert.ToInt32(dtTmpHdrDtls.Rows[0]["VTLessonId"].ToString());
                            if (oDS.ISVTool == 1)
                            {
                                if (VTPopupInd)
                                    ClientScript.RegisterStartupScript(this.GetType(), "", "showPop(3);", true);
                            }


                            if (Convert.ToBoolean(dtTmpHdrDtls.Rows[0]["ModificationInd"]) == true)
                            {
                                lblModificationStat.Text = "Need Modification";
                            }

                            lblCorrectRespData.Text = dtTmpHdrDtls.Rows[0]["StudentReadCrita"].ToString();
                            lblInCorrectRespData.Text = dtTmpHdrDtls.Rows[0]["StudIncorrRespDef"].ToString();
                            lblMistrial.Text = dtTmpHdrDtls.Rows[0]["Mistrial"].ToString();
                            oDS.NbrOfTrials = Convert.ToInt32(dtTmpHdrDtls.Rows[0]["NbrOfTrials"].ToString());
                            lblLessonPrep.Text = dtTmpHdrDtls.Rows[0]["TeacherPrepare"].ToString();
                            lblcorrectionproc.Text = dtTmpHdrDtls.Rows[0]["CorrectionProc"].ToString();
                            lblreinforcementproc.Text = dtTmpHdrDtls.Rows[0]["ReinforcementProc"].ToString();
                            //object objSess = 0;
                            //if (ViewState["StdtSessHdr"] != null)
                            //{
                            //    objSess = oData.FetchValue("SELECT SessionNbr FROM StdtSessionHdr WHERE StdtSessionHdrId=" + ViewState["StdtSessHdr"].ToString());
                            //    if (objSess == null) objSess = 0;
                            //    lblSession.Text = objSess.ToString();
                            //}
                            oDS.ChainType = dtTmpHdrDtls.Rows[0]["ChainType"].ToString();
                            oDS.SkillType = dtTmpHdrDtls.Rows[0]["SkillType"].ToString();
                            if (oDS.SkillType != "Chained")
                            {
                                btnProbe.Visible = false;
                                //btnProbe1.Visible = false;
                            }//Session["StepLevelPrompt"] TType TOther
                            else if (oDS.ChainType == "Total Task")
                            {
                                btnProbe.Visible = false;
                                //btnProbe1.Visible = false;
                            }
                            if (dtTmpHdrDtls.Rows[0]["TType"] != null && Convert.ToInt32(dtTmpHdrDtls.Rows[0]["TType"]) == 1)//|| Convert.ToInt32(dtTmpHdrDtls.Rows[0]["TOther"]) == 1)
                            {
                                Session["StepLevelPrompt"] = true;
                            }
                            lblSd.Text = dtTmpHdrDtls.Rows[0]["LessonDefInst"].ToString();

                            ///assign LookupDesc to TeachProc
                            ///
                            //oDS.TeachProc = dtTmpHdrDtls.Rows[0]["TeachingProc"].ToString();
                            string TeachingProc = dtTmpHdrDtls.Rows[0]["TeachingProc"].ToString();
                            oDS.TeachProc = getTeachingMethod(TeachingProc);
                            lblTypOfIns.Text = TeachingProc;
                            ///end
                            ///

                            //lblTeachProc.Text = oDS.TeachProc;
                            //lblTypOfIns.Text = oDS.TeachProc;
                            oDS.Materials = dtTmpHdrDtls.Rows[0]["Mat"].ToString();
                            lblMaterials.Text = oDS.Materials;
                            oDS.PromptProc = dtTmpHdrDtls.Rows[0]["PromptProc"].ToString();
                            lblPromtProc.Text = oDS.PromptProc;
                            oDS.TotalTaskFormat = dtTmpHdrDtls.Rows[0]["TotalTaskFormat"].ToString();
                            oDS.MatchToSampleType = dtTmpHdrDtls.Rows[0]["MatchToSampleType"].ToString();
                            //oDS.CrntSet = 0;

                            oDS.LessonPlan = dtTmpHdrDtls.Rows[0]["LessonPlanName"].ToString();
                            h_LPname.InnerHtml = oDS.LessonPlan;
                            if (dtTmpHdrDtls.Rows[0]["DSMode"].ToString() == "MAINTENANCE")
                            {
                                if (!h_LPname.InnerHtml.ToString().Contains("MAINTENANCE"))
                                {
                                    h_LPname.InnerHtml += " - MAINTENANCE MODE";
                                }

                            }
                            oDS.LessonPlanID = Convert.ToInt32(dtTmpHdrDtls.Rows[0]["LessonPlanId"].ToString());
                            GetDSStat(oDS.SkillType, oDS.TeachProc, oDS.LessonPlanID);
                            GetColumnDetls();
                            fillSteps(oTemp.TemplateId, oDS.NbrOfTrials, oDS.SkillType, oDS.CrntSet, oDS.TeachProc, oDS.VTLessonId, oDS.ChainType, oDS.TotalTaskFormat, oDS.MatchToSampleType);

                            //check whether IOA required for any criterias like move up,move down or modification....
                            string multiTechr = "";
                            lblIOA.Text = "IOA Not Required";
                            string chkIOA = "SELECT IOAReqInd,RuleType,CriteriaType,MultiTeacherReqInd " +
                                        "FROM DSTempSetCol Col LEFT OUTER JOIN DSTempRule Rul ON Rul.DSTempSetColId=Col.DSTempSetColId WHERE " +
                                        "Col.DSTempHdrId=" + oTemp.TemplateId + " AND Col.SchoolId = " + oSession.SchoolId + "  AND Col.ActiveInd='A' AND Rul.ActiveInd='A' ORDER BY Col.DSTempSetColId";
                            DataTable dtIOARqrd = new DataTable();
                            dtIOARqrd = oData.ReturnDataTable(chkIOA, false);
                            if (dtIOARqrd != null)
                                if (dtIOARqrd.Rows.Count > 0)
                                {
                                    foreach (DataRow drIOA in dtIOARqrd.Rows)
                                    {
                                        if (Convert.ToBoolean(drIOA["IOAReqInd"]) == true)
                                            lblIOA.Text = "IOA to Advance";
                                        if (Convert.ToBoolean(drIOA["MultiTeacherReqInd"]) == true)
                                            multiTechr = "Multiteacher to Advance";
                                    }
                                }
                            FillSetStepDetails(oTemp.TemplateId, lblIOA.Text, multiTechr); //fill set,step and prompt detials in popup
                        }
                    }
                    ScriptManager.RegisterStartupScript(this, this.GetType(), "ColorIt", "ColorIt();", true);
                }

            }

        }
        catch (Exception ex)
        {
            //valid = false;
            //LIJU:  Do the Rollback abd Connection close only in the Parent where its declared in a Try/Catch
            //oData.RollBackTransation(tran, con);
            //con.Close();
            clError.WriteToLog(ex.ToString());


            throw ex;
        }
    }
    /// <summary>
    /// Retreive and Save all the Datas from DSStat table to Session...
    /// </summary>
    /// <param name="SkillType">Skilltype of the current ds</param>
    /// <param name="TeachingProc">teaching procedure</param>
    /// <param name="LesPlanID">crnt Lessonplan id</param>
    protected void GetDSStat(string SkillType, string TeachingProc, int LesPlanID)
    {
        int iCrntSet = 0;
        int iCrntStep = 0;
        int iCrntSetNbr = 0;
        int iCrntPrompt = 0;
        string StatusMessage = "";
        string stepName = "";
        string sqlStr = "";
        lblModifiedOn.Visible = false;
        lblModifiedDate.Visible = false;
        Session["TargetPrompt"] = null;
        lblPromptData.Visible = true;
        string PromptName = "";
        oData = new clsData();
        oTemp = (ClsTemplateSession)Session["BiweeklySession"];
        oSession = (clsSession)Session["UserSession"];
        oDS = (clsDataSheet)Session[DatasheetKey];
        if (oSession != null)
        {
            if (oTemp != null)
            {
                if (oDS != null)
                {
                    if (Convert.ToBoolean(hdn_isMaintainance.Value) != true)
                    {
                        sqlStr = "select NextStepId,NextSetId,NextSetNmbr,NextPromptId,statusMessage from StdtDSStat where DSTempHdrId=" + oTemp.TemplateId;
                        DataTable dtDSStat = oData.ReturnDataTable(sqlStr, false);
                        if ((dtDSStat != null) && (dtDSStat.Rows.Count > 0))
                        {
                            iCrntSet = Convert.ToInt32(dtDSStat.Rows[0]["NextSetId"]);
                            iCrntStep = Convert.ToInt32(dtDSStat.Rows[0]["NextStepId"]);
                            iCrntSetNbr = Convert.ToInt32(dtDSStat.Rows[0]["NextSetNmbr"]);
                            if (Convert.ToBoolean(ViewState["IsHistory"]) == true)
                            {
                                sqlStr = "SELECT ISNULL(CurrentPromptId,0)CurrentPromptId FROM StdtSessionHdr WHERE StdtSessionHdrId=" + Convert.ToInt32(ViewState["StdtSessHdr"]);
                                iCrntPrompt = Convert.ToInt32(oData.FetchValue(sqlStr));
                                Session["TargetPrompt"] = iCrntPrompt.ToString();
                            }
                            else
                            {
                                if (dtDSStat.Rows[0]["NextPromptId"] != null && dtDSStat.Rows[0]["NextPromptId"].ToString().Trim() != "")
                                    iCrntPrompt = Convert.ToInt32(dtDSStat.Rows[0]["NextPromptId"]);
                                else
                                    iCrntPrompt = 0;
                                Session["TargetPrompt"] = iCrntPrompt.ToString();
                            }
                            StatusMessage = dtDSStat.Rows[0]["statusMessage"].ToString();
                        }
                        else
                        {
                            string tempStep = "";
                            int prevStage = PrevVersionExist();
                            if (prevStage > 0)
                            {
                                PrevVersionValues();
                                iCrntSet = oDS.CrntSet;
                                iCrntSetNbr = oDS.CrntSetNbr;
                                if (SkillType == "Chained")
                                {
                                    iCrntStep = oDS.CrntStep;
                                    stepName = Convert.ToString(oData.FetchValue("SELECT StepCd From DSTempStep WHERE SortOrder=" + iCrntStep + " AND DSTempHdrId = " + oTemp.TemplateId));
                                }
                                if (oDS.PromptProc != "NA")
                                {
                                    iCrntPrompt = oDS.CrntPrompt;
                                    PromptName = Convert.ToString(oData.FetchValue("SELECT LookupName FROM LookUp WHERE LookUpId=" + iCrntPrompt));
                                    Session["TargetPrompt"] = iCrntPrompt.ToString();
                                }
                            }
                            else
                            {
                                sqlStr = "SELECT ISNULL(DSTempSetId,0)DSTempSetId,SetCd,SortOrder  From DSTempSet WHERE SortOrder = (SELECT MIN(SortOrder) FROM DSTempSet WHERE DSTempHdrId = " + oTemp.TemplateId + " AND ActiveInd='A') AND ActiveInd='A' AND DSTempHdrId = " + oTemp.TemplateId;
                                iCrntSet = Convert.ToInt32(oData.FetchValue(sqlStr));
                                iCrntSetNbr = 1;
                                if (SkillType == "Chained")
                                {

                                    sqlStr = "SELECT ISNULL(DSTempStepId,0)DSTempStepId,StepCd,SortOrder  From DSTempStep WHERE SortOrder = (SELECT MIN(SortOrder) FROM DSTempStep WHERE DSTempHdrId = " + oTemp.TemplateId + " AND ActiveInd='A'  AND IsDynamic=0) AND ActiveInd='A'  AND IsDynamic=0 AND DSTempHdrId = " + oTemp.TemplateId;
                                    DataTable dtStep = oData.ReturnDataTable(sqlStr, false);
                                    if (dtStep != null)
                                    {
                                        iCrntStep = 1; //s Convert.ToInt32(dtStep.Rows[0]["SortOrder"]);
                                        tempStep = dtStep.Rows[0]["StepCd"].ToString().Replace("?s", "'s");
                                        tempStep = dtStep.Rows[0]["StepCd"].ToString().Replace("?", "");
                                        stepName = tempStep;
                                    }

                                    // iCrntStep = Convert.ToInt32(oData.FetchValue(sqlStr));
                                }
                                if (oDS.PromptProc != "NA")
                                {
                                    if ((oDS.PromptProc == "Least-to-Most") || (oDS.PromptProc == "Graduated Guidance"))
                                    {
                                        /* Added by “Dev1” on “03-03-2020” for the Item Preview causing prompt move error */
                                        sqlStr = "select Top 1(CurrentPromptId) PromptId,LookupName from StdtSessionHdr join lookup on LookupId=CurrentPromptId where SessionNbr<>0 and DSTempHdrId=" + oTemp.TemplateId + " order by StdtSessionHdrId desc";
                                        DataTable dtPromptTb = oData.ReturnDataTable(sqlStr, false);
                                        if (dtPromptTb.Rows.Count == 0)
                                        {
                                            sqlStr = "SELECT ISNULL(PromptId,0)PromptId,LookupName FROM DSTempPrompt,lookup WHERE " +
                                            "PromptId=LookupId AND PromptOrder = (SELECT MIN(PromptOrder) FROM DSTempPrompt WHERE DSTempHdrId = " + oTemp.TemplateId + ") AND DSTempHdrId = " + oTemp.TemplateId;
                                        } //SELECT MAX(PromptOrder) MAX to SELECT MIN(PromptOrder) Fix - May 1 2020

                                        iCrntPrompt = Convert.ToInt32(oData.FetchValue(sqlStr));
                                        Session["TargetPrompt"] = iCrntPrompt.ToString();
                                        /* End of Addition on “03-03-2020” */
                                    }
                                    else
                                    {
                                        /* Added by “Dev1” on “03-03-2020” for the Item Preview causing prompt move error */

                                        sqlStr = "select Top 1(CurrentPromptId) PromptId,LookupName from StdtSessionHdr join lookup on LookupId=CurrentPromptId where SessionNbr<>0 and DSTempHdrId=" + oTemp.TemplateId + " order by StdtSessionHdrId desc";
                                        DataTable dtPromptT = oData.ReturnDataTable(sqlStr, false);
                                        if (dtPromptT.Rows.Count == 0)
                                        {
                                            sqlStr = "SELECT ISNULL(PromptId,0)PromptId,LookupName FROM DSTempPrompt,lookup WHERE " +
                                            "PromptId=LookupId AND PromptOrder = (SELECT MAX(PromptOrder) FROM DSTempPrompt WHERE DSTempHdrId = " + oTemp.TemplateId + ") AND DSTempHdrId = " + oTemp.TemplateId;
                                        }
                                        DataTable dtPrompt = oData.ReturnDataTable(sqlStr, false);

                                        /* End of Addition on “03-03-2020” */
                                        if (dtPrompt != null)
                                        {
                                            iCrntPrompt = Convert.ToInt32(dtPrompt.Rows[0]["PromptId"]);
                                            PromptName = dtPrompt.Rows[0]["LookupName"].ToString();
                                            Session["TargetPrompt"] = iCrntPrompt.ToString();
                                        }
                                    }
                                }
                            }
                            sqlStr = "INSERT INTO StdtDSStat (SchoolId,StudentId,DSTempHdrId,LessonPlanId,NextSetId,NextSetNmbr,NextStepId,NextPromptId,NextSessionNbr" +
                                ",CreatedBy,CreatedOn) VALUES(" + oSession.SchoolId + "," + oSession.StudentId + "," + oTemp.TemplateId + "," + LesPlanID + "," + iCrntSet + "," + iCrntSetNbr + "," + iCrntStep + "," + iCrntPrompt + ",'0'," + oSession.LoginId + ",GETDATE())";
                            oData.Execute(sqlStr);
                        }

                    }
                    else
                    {

                        iCrntSetNbr = Convert.ToInt32(hdn_currTempSetNmbr.Value);
                        iCrntSet = Convert.ToInt32(hdn_currTempSet.Value);

                        DataTable dt = fn_getStepList(iCrntSet);
                        if (dt.Rows.Count > 0)
                        {
                            try
                            {
                                iCrntStep = Convert.ToInt32(dt.Rows[0]["SortOrder"].ToString());
                            }
                            catch
                            {
                                iCrntStep = 0;
                            }
                        }

                        if (oDS.PromptProc != "NA")
                        {
                            if ((oDS.PromptProc == "Least-to-Most") || (oDS.PromptProc == "Graduated Guidance"))
                            {
                                //sqlStr = "SELECT ISNULL(PromptId,0)PromptId FROM DSTempPrompt WHERE PromptOrder = (SELECT MIN(PromptOrder) FROM DSTempPrompt WHERE DSTempHdrId = " + oTemp.TemplateId + ") AND DSTempHdrId = " + oTemp.TemplateId;
                                sqlStr = "SELECT ISNULL(LookupId,0)PromptId FROM Lookup WHERE SortOrder =(SELECT MAX(SortOrder) FROM Lookup WHERE LookupId IN(SELECT PromptId FROM DSTempPrompt WHERE DSTempHdrId = " + oTemp.TemplateId + ")) AND LookupType = 'DSTempPrompt'";
                                iCrntPrompt = Convert.ToInt32(oData.FetchValue(sqlStr));
                                Session["TargetPrompt"] = iCrntPrompt.ToString();
                            }
                            else
                            {
                                sqlStr = "SELECT ISNULL(PromptId,0)PromptId,LookupName FROM DSTempPrompt,lookup WHERE " +
                               "PromptId=LookupId AND PromptOrder = (SELECT MIN(PromptOrder) FROM DSTempPrompt WHERE DSTempHdrId = " + oTemp.TemplateId + ") AND DSTempHdrId = " + oTemp.TemplateId;

                                DataTable dtPrompt = oData.ReturnDataTable(sqlStr, false);
                                if (dtPrompt != null)
                                {
                                    iCrntPrompt = Convert.ToInt32(dtPrompt.Rows[0]["PromptId"]);
                                    PromptName = dtPrompt.Rows[0]["LookupName"].ToString();
                                    Session["TargetPrompt"] = iCrntPrompt.ToString();
                                }
                            }
                        }

                        ImgBtn_Override.Visible = false;
                        btnProbe.Visible = false;
                        //ImgBtn_Inactive.Visible = false;
                    }

                    ////if page is loaded from history...change the stepid to the one in that session....
                    if (ViewState["IsHistory"] != null && Convert.ToBoolean(ViewState["IsHistory"]) != false)
                    {
                        object Stepid = oData.FetchValue("SELECT CurrentStepId FROM StdtSessionHdr WHERE StdtSessionHdrId=" + Convert.ToInt32(ViewState["StdtSessHdr"]));
                        if (Stepid != null)
                        {
                            iCrntStep = Convert.ToInt32(Stepid);
                        }
                        //////if page is loaded from history...change the setid to the one in that session....
                        object Setid = oData.FetchValue("SELECT CurrentSetId FROM StdtSessionHdr WHERE StdtSessionHdrId=" + Convert.ToInt32(ViewState["StdtSessHdr"]));
                        if (Setid != null)
                        {
                            iCrntSet = Convert.ToInt32(Setid);
                        }
                        //if page is loaded from history... show a submitted/modified date
                        object ModifiedOn = oData.FetchValue("SELECT CONVERT(varchar(27), ModifiedOn, 100) as ModifiedOn FROM StdtSessionHdr WHERE StdtSessionHdrId=" + Convert.ToInt32(ViewState["StdtSessHdr"]));
                        object SessionStatusCd = oData.FetchValue("SELECT SessionStatusCd FROM StdtSessionHdr WHERE StdtSessionHdrId = " + Convert.ToInt32(ViewState["StdtSessHdr"]));
                        if (ModifiedOn != null && SessionStatusCd.ToString()=="S")
                        {
                            lblModifiedOn.Visible=true;
                            lblModifiedDate.Visible = true;
                            lblModifiedDate.Text = ModifiedOn.ToString();
                        }
                        ///////////////////////////////////////////////////////////////////////////////////////////////
                    }

                    /// If the condition is temporary overriding then change the current set number to the selected one temporarily.
                    if (Convert.ToBoolean(hdn_isMaintainance.Value) == true)
                    {

                        iCrntSetNbr = Convert.ToInt32(hdn_currTempSetNmbr.Value);
                        iCrntSet = Convert.ToInt32(hdn_currTempSet.Value);
                    }

                    //TeachingProcId
                    //Lesson.NextPromptId = iCrntPrompt;
                    if (SkillType == "Chained")
                    {
                        string tempStep = "";
                        sqlStr = "select StepCd+' - '+StepName as StepCd from DSTempStep where DSTempHdrId = " + oTemp.TemplateId + " AND (DSTempSetId=" + iCrntSet + ") AND ActiveInd='A'  AND IsDynamic=0 AND SortOrder=" + iCrntStep;
                        sqlStr = "select * FROM (select StepCd+' - '+StepName as StepCd,ROW_NUMBER() OVER(ORDER BY SortOrder) as numRow from DSTempStep where DSTempHdrId = " + oTemp.TemplateId + " AND (DSTempSetId=" + iCrntSet + ") AND ActiveInd='A'  AND IsDynamic=0 ) A WHERE numRow=" + iCrntStep;
                        if (oDS.ChainType == "Backward chain")
                            sqlStr = "SELECT * FROM(select StepCd+' - '+StepName as StepCd,SortOrder,RANK() OVER(ORDER BY SortOrder DESC) Rnk from DSTempStep " +
                                        "where DSTempHdrId=" + oTemp.TemplateId + " AND ActiveInd='A'  AND IsDynamic=0  AND (DSTempSetId=" + iCrntSet + ")) A WHERE Rnk=" + iCrntStep;
                        if (oData.FetchValue(sqlStr) != null)
                        {
                            tempStep = oData.FetchValue(sqlStr).ToString().Replace("?s", "'s");
                            tempStep = oData.FetchValue(sqlStr).ToString().Replace("?", "");
                            stepName = tempStep;
                        }
                    }
                    if (iCrntPrompt != 0)
                    {
                        sqlStr = "select LookupName from Lookup where LookupId=" + iCrntPrompt;
                        if (oData.FetchValue(sqlStr) != null)
                        {
                            PromptName = oData.FetchValue(sqlStr).ToString();
                        }
                    }
                    sqlStr = "select SetCd,SetName,SortOrder from DSTempSet where DSTempSetId = " + iCrntSet + " and DSTempHdrId=" + oTemp.TemplateId;
                    DataTable dtSet = oData.ReturnDataTable(sqlStr, false);

                    string setName = "";
                    string tempsetname = "";
                    if (dtSet != null)
                    {
                        if (dtSet.Rows.Count > 0)
                        {
                            tempsetname = dtSet.Rows[0]["SetCd"].ToString().Replace("?s", "'s") + " - " + dtSet.Rows[0]["SetName"].ToString().Replace("?s", "'s");
                            tempsetname = dtSet.Rows[0]["SetCd"].ToString().Replace("?", "") + " - " + dtSet.Rows[0]["SetName"].ToString().Replace("?", "");
                            setName = tempsetname;
                        }
                    }
                    //Assign values to Properties...
                    oDS.CrntSet = iCrntSet;
                    oDS.CrntSetNbr = iCrntSetNbr;
                    oDS.CrntStep = iCrntStep;
                    oDS.CrntPrompt = iCrntPrompt;
                    oDS.StepName = stepName;
                    oDS.SetName = setName;
                    oDS.PromptName = PromptName;
                    oDS.StatusMsg = StatusMessage;

                    //hfcrntPrompt.Value = iCrntPrompt.ToString();
                    lblSet.Text = setName;
                    lblStep_Sample.Text = stepName;
                    lblPromt.Text = PromptName;
                    lblPromptData.Text = PromptName;

                    //int sessHdrId = Convert.ToInt32(ViewState["StdtSessHdr"]);
                    //int templateId = oTemp.TemplateId;
                    //int testMaster;
                    if (StatusMessage == "COMPLETED")
                    {

                        ///

                        //testMaster = setLabelMastered(sessHdrId, templateId);
                        //if (testMaster==1)
                        //{
                        lblSet.Text = setName + " <b>&nbsp(MASTERED)</b>";
                        //}

                        Page.ClientScript.RegisterStartupScript(this.GetType(), "myScript", "probe();", true);
                        //btnProbe_Click(sender, e);
                        if (!h_LPname.InnerHtml.ToString().Contains("MAINTENANCE"))
                        {
                            h_LPname.InnerHtml += " - MAINTENANCE MODE";
                        }
                        ImgBtn_Inactive.Visible = false;
                    }
                    else
                    {
                        if ((h_LPname.InnerHtml.ToString().Contains("MAINTENANCE"))&&
                            (Convert.ToInt32(oData.FetchValue("SELECT COUNT(*) FROM StdtDSStat WHERE statusMessage='COMPLETED' AND DSTempHdrId='" + oTemp.TemplateId + "'")) > 0))
                        {
                            //if (Convert.ToInt32(oData.FetchValue("SELECT COUNT(*) FROM StdtDSStat WHERE statusMessage='COMPLETED' AND DSTempHdrId='" + oTemp.TemplateId + "'")) > 0)
                            //{
                                //testMaster = setLabelMastered(sessHdrId, templateId);
                                //if (testMaster == 1)
                                //{
                                lblSet.Text = setName + " <b>&nbsp(MASTERED)</b>";
                                //}
                            //}
                            Page.ClientScript.RegisterStartupScript(this.GetType(), "myScript", "probe();", true);
                        }
                    }

                    //else ImgBtn_Inactive.Visible = false;


                    if (oDS.SessionMistrial)
                    {
                        lblSet.Text += "  <b>(MISTRIAL)</b>";
                        lblRsn.Text = oDS.sessionMistrialRsn;
                    }
                    int sessHdrId2 = Convert.ToInt32(ViewState["StdtSessHdr"]);
                    string sqlStr2 = "select SessionStatusCd from StdtSessionHdr where StdtSessionHdrId=" + sessHdrId2;
                    object sesst2 = oData.FetchValue(sqlStr2);

                    if (oDS.SessionMistrial && sesst2.ToString() == "D")
                    {
                        chkSessMistrial.Checked = true;
                        hdnChkdRsn.Value = oDS.SessionMistrialRsn;
                        mistrialRsn.Text = hdnMissTrialRsn.Value;
                    }

                    hfcrntStep.Value = iCrntStep.ToString();


                    string strQry = "SELECT DSTempSetColId,ColName,ColTypeCd,CalcuType from DSTempSetCol WHERE DSTempHdrId=" + oTemp.TemplateId + " And  SchoolId = " + oSession.SchoolId + "  And ActiveInd='A'";
                    DataTable dt_stepList = oData.ReturnDataTable(strQry, false);
                    if (dt_stepList != null)
                    {
                        if (dt_stepList.Rows.Count > 0)
                        {
                            foreach (DataRow dr in dt_stepList.Rows)
                            {
                                if (dr["ColTypeCd"].ToString() == "Prompt")
                                {
                                    int iColId = Convert.ToInt32(dr["DSTempSetColId"].ToString());
                                    Rules TempRules = new Rules();
                                    TempRules = GetPromptRules(oTemp.TemplateId, iColId);

                                    //if (TempRules.pctAccyMoveUp.iScoreRequired == 0 || TempRules.pctAccyMoveUp.iScoreRequired == 100)
                                    //    Session["StepLevelPrompt"] = true;

                                }
                            }
                        }
                    }

                    if (oDS.ChainType == "Total Task" && Convert.ToBoolean(Session["StepLevelPrompt"]) == true)
                    {
                        lblStep_Sample.Text = ""; lblPromt.Text = "";
                        lblPromptData.Visible = false;
                    }
                    else
                    {
                        lblPromt.Visible = false;
                        div_StepPrompts.Visible = false;
                    }

                }
            }
        }
    }

    //private int setLabelMastered(int sessHdrId, int templateId)
    //{
    //    int sessionNbr=0;
    //    int eventsessionNbr=0;

    //    object objSessNbr = oData.FetchValue("SELECT SessionNbr FROM StdtSessionHdr WHERE StdtSessionHdrId=" + sessHdrId);
    //    if (objSessNbr != null)
    //    {
    //        sessionNbr = Convert.ToInt32(objSessNbr);
    //    }

    //    object objEventSessNbr = oData.FetchValue("select SessionNbr from StdtSessEvent where EventName='LP Complete' and DSTempHdrId=" + templateId );
    //    if (objEventSessNbr != null)
    //    {
    //        eventsessionNbr = Convert.ToInt32(objEventSessNbr);
    //    }
    //    if (sessionNbr == eventsessionNbr)
    //    {
    //        return 1;
    //    }
    //    else
    //    {
    //        return 0;
    //    }
    //}

    protected void GetColumnDetls()
    {
        oData = new clsData();
        oTemp = (ClsTemplateSession)Session["BiweeklySession"];
        oSession = (clsSession)Session["UserSession"];
        oDS = (clsDataSheet)Session[DatasheetKey];
        bool ContrlEnable = true;
        if (oSession != null)
        {
            if (oTemp != null)
            {
                if (oDS != null)
                {
                    if (oDS.ISVTool == 1) { ContrlEnable = false; }
                    string sqlStr = "SELECT DSTempSetColId,ColName,ColTypeCd,CorrRespDesc,CorrResp,InCorrRespDesc,IncMisTrialInd,MisTrialDesc,CalcuType," +
                                    "CASE(ColTypeCd) WHEN '+/-' THEN '' WHEN 'Prompt' THEN '0' WHEN 'Duration' THEN '00:00:00' " +
                                    "WHEN 'Frequency' THEN '0' WHEN 'Text' THEN '0' END as ColValue, " +
                                    "CASE(ColTypeCd) WHEN '+/-' THEN 'Radio' WHEN 'Prompt' THEN 'DropDown' WHEN 'Duration' THEN 'Timer' " +
                                    "WHEN 'Frequency' THEN 'Freq' WHEN 'Text' THEN 'Text' END as ColControl " +
                                    "FROM DSTempSetCol WHERE " +
                                    "DSTempHdrId=" + oTemp.TemplateId + " AND SchoolId = " + oSession.SchoolId + "  AND ActiveInd='A' ORDER BY DSTempSetColId";
                    DataTable dt = oData.ReturnDataTable(sqlStr, false);
                    oDS.dtColumns = dt;
                    int count = dt.Rows.Count;
                    if (dt != null)
                    {
                        lblResDef.Text = "";
                        lblResIncorrect.Text = "";


                        string[] colnames = new string[] { "Step / Sample / Sd", "Mistrial", "Notes" }; int index = 0;
                        foreach (string colnam in colnames)
                        {
                            TemplateField ItemTmpFld = new TemplateField();
                            // create HeaderTemplate
                            ItemTmpFld.HeaderTemplate = new DynamicallyTemplatedGridViewHandler(ListItemType.Header, "SessStepID,StepCd,StepId",
                                                                          colnam, colnam, "", "", true, 0);
                            // create ItemTemplate
                            ItemTmpFld.ItemTemplate = new DynamicallyTemplatedGridViewHandler(ListItemType.Item, "SessStepID,StepCd,StepId",
                                                                          colnam, colnam, "", "", true, 0);
                            ItemTmpFld.ItemStyle.CssClass = "clr"; ItemTmpFld.HeaderStyle.CssClass = "clr";
                            ItemTmpFld.HeaderStyle.Width = Unit.Percentage(20);
                            if (index == 1)
                                ItemTmpFld.HeaderStyle.Width = Unit.Percentage(7);
                            if (index == 2) { ItemTmpFld.ItemStyle.CssClass = "nobdr"; ItemTmpFld.HeaderStyle.CssClass = "nobdr"; }
                            grdDataSht.Columns.Insert(index, ItemTmpFld);
                            index++;
                        }
                        foreach (DataRow dr in dt.Rows)
                        {
                            if (Convert.ToBoolean(dr["IncMisTrialInd"]) == true)
                            {
                                oDS.MisTrail = true;
                            }
                            if (dr["ColTypeCd"].ToString() == "+/-")
                            {
                                hfPlusMinusResp.Value = dr["CorrResp"].ToString();
                            }
                            string resposeVal = dr["CorrResp"].ToString();
                            string incResposeVal = "";
                            if (dr["ColTypeCd"].ToString() == "+/-")
                            {
                                if (resposeVal == "+")
                                {
                                    incResposeVal = "-";
                                }
                                else
                                {
                                    incResposeVal = "+";
                                }
                            }
                            else
                            {
                                incResposeVal = dr["CorrResp"].ToString();
                            }
                            //if(resposeVal!=null && resposeVal=="+")
                            //{
                            // lblResDef.Text += "Correct Response of is : " + resposeVal + "<br/>" + "Correct Response Data of  is : " + dr["CorrRespDesc"].ToString() + "<br/>";

                            lblResDef.Text += "<b><font size='2'>" + dr["ColName"].ToString() + "</font></b><br/>  " + dr["CorrRespDesc"].ToString() + "<br/> " + dr["InCorrRespDesc"].ToString() + "  <br/> ";
                            if (Convert.ToBoolean(dr["IncMisTrialInd"]) == true)
                            {
                                lblResDef.Text += "Record mistrials" + "<br/> ";
                            }
                            else
                                lblResDef.Text += "Do not record mistrials <br/>";
                            //}
                            //if(resposeVal!=null && resposeVal=="-")
                            //{
                            //lblResIncorrect.Text += "Incorrect Response of " + dr["ColName"].ToString() + " is : " + incResposeVal + "<br/>" + "Incorrect Response Data of " + dr["ColName"].ToString() + " is : " + dr["InCorrRespDesc"].ToString() + "<br/>";
                            //lblResIncorrect.Text += " " + dr["InCorrRespDesc"].ToString() + "<br/>";
                            //}

                            TemplateField ItemTmpField = new TemplateField();
                            // create HeaderTemplate
                            ItemTmpField.HeaderTemplate = new DynamicallyTemplatedGridViewHandler(ListItemType.Header, "",
                                                                          dr["ColName"].ToString(), dr["ColControl"].ToString(), dr["DSTempSetColId"].ToString(), dr["ColTypeCd"].ToString(), ContrlEnable, 0);

                            //####
                            bool bFreeTest = false;
                            if (dr["CalcuType"] != null)
                            {
                                if (dr["CalcuType"].ToString().Trim() == "1")
                                    bFreeTest = true;
                            }
                            // create ItemTemplate
                            ItemTmpField.ItemTemplate = new DynamicallyTemplatedGridViewHandler(ListItemType.Item, "",
                                                                          dr["ColName"].ToString(), dr["ColControl"].ToString(), dr["DSTempSetColId"].ToString(), "", ContrlEnable, 0, bFreeTest);
                            ItemTmpField.ItemStyle.CssClass = "clr"; ItemTmpField.HeaderStyle.CssClass = "clr";
                            if (dr["ColControl"].ToString() == "DropDown")
                                ItemTmpField.HeaderStyle.Width = Unit.Percentage(14);
                            if (dr["ColControl"].ToString() == "Radio")
                                ItemTmpField.HeaderStyle.Width = Unit.Percentage(8);
                            if (dr["ColControl"].ToString() == "Timer")
                             	 ItemTmpField.HeaderStyle.Width = Unit.Percentage(16);    
								 //ItemTmpField.HeaderStyle.Width = Unit.Pixel(132);
                            if (dr["ColControl"].ToString() == "Text")
                                ItemTmpField.HeaderStyle.Width = Unit.Percentage(12);
                            if (dr["ColControl"].ToString() == "Freq")
                                ItemTmpField.HeaderStyle.Width = Unit.Percentage(12);
                            // then add to the GridView
                            grdDataSht.Columns.Insert(grdDataSht.Columns.Count - 2, ItemTmpField);
                        }
                        int colmncount = 8 - grdDataSht.Columns.Count;

                        ////// COde change for Match To Sample Dynamic Datasheet---------------Start Here--------Arun M----
                        int j = 0;
                        int tempCount = 1;
                        bool row = false;
                        if (oDS.TeachProc == "Match-to-Sample")
                        {

                            sqlStr = "SELECT [DSTempStepId],[StepName] as StepCd,[StepName],SortOrder as StepId  FROM [dbo].[DSTempStep] " +
                                        " WHERE DSTempHdrId=" + oTemp.TemplateId + " AND DsTempSetId=" + oDS.CrntSet + " AND ActiveInd='A' AND IsDynamic=0 ORDER BY [SortOrder]";
                            dt = oData.ReturnDataTable(sqlStr, false);
                            if (ViewState["StdtSessHdr"] != null && ViewState["StdtSessHdr"] != "")
                            {
                                string IsTrial = Convert.ToString(oData.FetchValue("SELECT IsTrial FROM StdtSessionHdr WHERE StdtSessionHdrId='" + Convert.ToInt32(ViewState["StdtSessHdr"].ToString()) + "'"));
                                if (IsTrial != "")
                                {
                                    sqlStr = "SELECT Step.StdtSessionStepId as SessStepID, TempStep.[DSTempStepId],TempStep.[StepName] as StepCd,TempStep.[StepName],TempStep.SortOrder as StepId  FROM [dbo].[DSTempStep] TempStep  INNER JOIN StdtSessionStep Step " +
                                                 " ON TempStep.DSTempStepId=Step.DSTempStepId  WHERE TempStep.DSTempStepId IN (" + IsTrial + ") ORDER BY NEWID()";
                                    DataTable dtTrialSample = oData.ReturnDataTable(sqlStr, false);

                                    foreach (DataRow dr in dtTrialSample.Rows)
                                    {
                                        DataRow newTrialRow = dt.NewRow();
                                        newTrialRow["DSTempStepId"] = dr["DSTempStepId"];
                                        newTrialRow["StepCd"] = dr["StepCd"];
                                        newTrialRow["StepName"] = dr["StepName"];
                                        newTrialRow["StepId"] = dr["StepId"];
                                        dt.Rows.Add(newTrialRow);
                                    }
                                }
                            }
                            if (dt.Rows.Count > 0)
                            {
                                foreach (DataRow dr in dt.Rows)
                                {
                                    string stepname = dr["StepName"].ToString();
                                    string[] samplesCollection = stepname.Split('[');
                                    string[] samples = samplesCollection[1].Split(',');
                                    colmncount = 8 + samples.Length - grdDataSht.Columns.Count;
                                    for (int i = 0; i < samples.Length; i++)
                                    {
                                        if (!row)
                                        {

                                            if (colmncount >= tempCount)
                                            {
                                                //hereash
                                                if (oDS.MatchToSampleType != "MTSisExpressive")
                                                {
                                                    string Samplename = samples[i].Replace("]", "");

                                                    TemplateField ItemTmpFld = new TemplateField();
                                                    // create HeaderTemplate
                                                    ItemTmpFld.HeaderTemplate = new DynamicallyTemplatedGridViewHandler(ListItemType.Header, "",
                                                                                                  "Samples", "Samples", "", "", true, 0);
                                                    // create ItemTemplate
                                                    ItemTmpFld.ItemTemplate = new DynamicallyTemplatedGridViewHandler(ListItemType.Item, "Samples" + i,
                                                                                                  Samplename, "Samples", "", "", true, j);

                                                    ItemTmpFld.ItemStyle.CssClass = "clr"; ItemTmpFld.HeaderStyle.CssClass = "clr";
                                                    ItemTmpFld.HeaderStyle.Width = Unit.Percentage(20);

                                                    grdDataSht.Columns.Insert(grdDataSht.Columns.Count - 2, ItemTmpFld);
                                                    // grdDataSht.Columns.Insert(grdDataSht.Columns.Count - 2, ItemTmpNote);
                                                }
                                            }
                                        }
                                        j++;
                                        tempCount++;
                                    }
                                    row = true;


                                }
                            }
                        }
                        else
                        {
                            ////// COde change for Match To Sample Dynamic Datasheet----------------End Here--------Arun M-----
                            for (int i = 1; i <= colmncount; i++)
                            {
                                // add templated fields to the GridView

                                TemplateField ItemTmpNote = new TemplateField();
                                // create HeaderTemplate
                                ItemTmpNote.HeaderTemplate = new DynamicallyTemplatedGridViewHandler(ListItemType.Header, "",
                                                                              "NA", "NA", "", "", true, 0);
                                // create ItemTemplate
                                ItemTmpNote.ItemTemplate = new DynamicallyTemplatedGridViewHandler(ListItemType.Item, "",
                                                                              "", "", "", "", true, 0);
                                ItemTmpNote.ItemStyle.CssClass = "clr"; ItemTmpNote.HeaderStyle.CssClass = "clr";
                                //ItemTmpNote.ItemStyle.BackColor = System.Drawing.Color.FromName("#ECECEC");

                                ItemTmpNote.HeaderStyle.Width = Unit.Percentage(15); ItemTmpNote.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
                                // then add to the GridView
                                grdDataSht.Columns.Insert(grdDataSht.Columns.Count - 2, ItemTmpNote);
                            }
                        }
                    }
                    generateMeasurmntTable();
                }
            }
        }
    }

    protected void generateMeasurmntTable()
    {
        oDS = (clsDataSheet)Session[DatasheetKey];
        oData = new clsData();
        if (oDS != null)
        {
            HtmlTableRow trHead = new HtmlTableRow();
            HtmlTableCell tdHead1 = new HtmlTableCell("th"); tdHead1.InnerHtml = "Measurement Label"; tdHead1.Width = "22%"; trHead.Cells.Add(tdHead1);
            HtmlTableCell tdHead2 = new HtmlTableCell("th"); tdHead2.InnerHtml = "Formula"; tdHead2.Width = "18%"; trHead.Cells.Add(tdHead2);
            foreach (DataRow drcol in oDS.dtColumns.Rows)
            {
                HtmlTableCell tdCols = new HtmlTableCell("th");
                tdCols.InnerHtml = drcol["ColName"].ToString();
                tdCols.ID = drcol["DSTempSetColId"].ToString();
                trHead.Cells.Add(tdCols);
            }
            tbl_Measure.Rows.Add(trHead);
            int index = oDS.dtColumns.Rows.Count;
            foreach (DataRow drcol in oDS.dtColumns.Rows)
            {
                string sel = "SELECT CalcType,CalcLabel,CalcRptLabel,CalcFormula FROM DSTempSetColCalc WHERE DSTempSetColId=" + drcol["DSTempSetColId"].ToString();
                DataTable dtColCalc = oData.ReturnDataTable(sel, false);
                if (dtColCalc != null)
                    if (dtColCalc.Rows.Count > 0)
                    {
                        foreach (DataRow drCalc in dtColCalc.Rows)
                        {
                            HtmlTableRow trRow = new HtmlTableRow();
                            HtmlTableCell tdCol1 = new HtmlTableCell("td"); tdCol1.InnerHtml = drCalc["CalcRptLabel"].ToString(); trRow.Cells.Add(tdCol1);
                            HtmlTableCell tdCol2 = new HtmlTableCell("td"); tdCol2.InnerHtml = drCalc["CalcType"].ToString(); trRow.Cells.Add(tdCol2);

                            //for (int j = 0; j < oDS.dtColumns.Rows.Count - index; j++)
                            //{
                            //    HtmlTableCell tdCol3 = new HtmlTableCell("td"); trRow.Cells.Add(tdCol3);
                            //}

                            foreach (DataRow rw in oDS.dtColumns.Rows)
                            {
                                if (Convert.ToInt32(rw["DSTempSetColId"]) != Convert.ToInt32(drcol["DSTempSetColId"]))
                                {
                                    HtmlTableCell tdCol3 = new HtmlTableCell("td"); trRow.Cells.Add(tdCol3);
                                }
                                else if (Convert.ToInt32(rw["DSTempSetColId"]) == Convert.ToInt32(drcol["DSTempSetColId"]))
                                {
                                    break;
                                }
                            }

                            HtmlTableCell tdCol = new HtmlTableCell("td"); //tdCol.ColSpan = index;
                            Label lbl = new Label(); lbl.ID = (drCalc["CalcType"].ToString().Replace("%", "") + "_" + drcol["DSTempSetColId"].ToString()).Replace(" ", "");
                            lbl.Text = drcol["ColValue"].ToString();
                            if (drCalc["CalcType"].ToString().StartsWith("%"))
                                lbl.Text = "0%";
                            tdCol.Controls.Add(lbl);
                            trRow.Cells.Add(tdCol);

                            tbl_Measure.Rows.Add(trRow);
                        }
                        index--;
                    }
            }
        }
    }
    private int PrevVersionExist()
    {
        oTemp = (ClsTemplateSession)Session["BiweeklySession"];
        oData = new clsData();
        object SetVal = oData.FetchValue("SELECT crntset FROM DSTempHdr WHERE DSTempHdrId=" + oTemp.TemplateId);
        if (Convert.ToString(SetVal) == "")
        {
            return 0;
        }
        return Convert.ToInt32(SetVal);

    }

    private void PrevVersionValues()
    {
        oDS = (clsDataSheet)Session[DatasheetKey];
        oTemp = (ClsTemplateSession)Session["BiweeklySession"];
        DataTable dtPrevData = oData.ReturnDataTable("SELECT crntset,crntstep,crntprompt,nextsetno FROM DSTempHdr WHERE DSTempHdrId=" + oTemp.TemplateId, false);
        oDS.CrntSet = Convert.ToInt32(dtPrevData.Rows[0]["crntset"]);
        oDS.CrntSetNbr = Convert.ToInt32(dtPrevData.Rows[0]["nextsetno"]);
        if (dtPrevData.Rows[0]["crntstep"] != null || Convert.ToString(dtPrevData.Rows[0]["crntstep"]) != "")
        {
            oDS.CrntStep = Convert.ToInt32(dtPrevData.Rows[0]["crntstep"]);
        }
        else
        {
            oDS.CrntStep = 0;
        }
        if (dtPrevData.Rows[0]["crntprompt"] != null || Convert.ToString(dtPrevData.Rows[0]["crntprompt"]) != "")
        {
            oDS.CrntPrompt = Convert.ToInt32(dtPrevData.Rows[0]["crntprompt"]);
        }
        else
        {
            oDS.CrntPrompt = 0;
        }


    }

    protected bool SaveDraft(string status, string IOAInd, string action, SqlConnection con, SqlTransaction trans, bool SesCheck)
    {
        bool rtrn = true;
        oData = new clsData();
        oTemp = (ClsTemplateSession)Session["BiweeklySession"];
        if (oTemp != null)
        {
            oSession = (clsSession)Session["UserSession"];
            if (oSession != null)
            {
                int PrevVerExist = PrevVersionExist();
                if (PrevVerExist > 0)
                {
                    PrevVersionValues();
                }
                oDS = (clsDataSheet)Session[DatasheetKey];
                if (oDS != null)
                {
                    try
                    {
                        string sessMistrial = "N";
                        if (chkSessMistrial.Checked == true)
                        {
                            sessMistrial = "Y";
                            status = "S";
                            oDS.SessionMistrial = true;
                            oDS.SessionMistrialRsn = hdnMissTrialRsn.Value;
                            Session[DatasheetKey] = oDS;
                            mistrialRsn.Text = hdnMissTrialRsn.Value;
                        }
                        string insertSessionQuery = "";
                        int sessHdrID = 0;
                        object checkquery_object = null;
                        if (hdn_isMaintainance.Value != "true")
                        {
                            insertSessionQuery = "INSERT INTO StdtSessionHdr (SchoolId,StudentId,DSTempHdrId,StdtClassId,LessonPlanId,IOASessionHdrId,SessionNbr,StartTs,SessMissTrailStus,"
                                        + "SessMissTrailRsn,AssignedToId,CurrentSetId,CurrentStepId,CurrentPromptId,SessionStatusCd,Comments,IOAInd,IOAUserId,CreatedBy,CreatedOn,IsMaintanace) "
                                        + "VALUES(" + oSession.SchoolId + "," + oSession.StudentId + "," + oTemp.TemplateId + "," + oSession.Classid + "," + oDS.LessonPlanID + ","
                                        + "" + oDS.IOASessHdr + "," + oDS.SessNbr + ",(GETDATE()),'" + sessMistrial + "','" + hdnMissTrialRsn.Value + "',1," + oDS.CrntSet + "," + oDS.CrntStep + "," + oDS.CrntPrompt + ",'"
                                        + status + "','" + txtNote.Text.Trim() + "','" + IOAInd + "'," + ddlIOAUsers.SelectedValue + "," + oSession.LoginId + ",GETDATE(),'false')";
                        }
                        else
                        {

                            insertSessionQuery = "INSERT INTO StdtSessionHdr (SchoolId,StudentId,DSTempHdrId,StdtClassId,LessonPlanId,IOASessionHdrId,SessionNbr,StartTs,SessMissTrailStus,"
                                            + "SessMissTrailRsn,AssignedToId,CurrentSetId,CurrentStepId,CurrentPromptId,SessionStatusCd,Comments,IOAInd,IOAUserId,CreatedBy,CreatedOn,IsMaintanace) "
                                            + "VALUES(" + oSession.SchoolId + "," + oSession.StudentId + "," + oTemp.TemplateId + "," + oSession.Classid + "," + oDS.LessonPlanID + ","
                                            + "" + oDS.IOASessHdr + "," + oDS.SessNbr + ",(GETDATE()),'" + sessMistrial + "','" + hdnMissTrialRsn.Value + "',1," + oDS.CrntSet + "," + oDS.CrntStep + "," + oDS.CrntPrompt + ",'"
                                            + status + "','" + txtNote.Text.Trim() + "','" + IOAInd + "',1," + oSession.LoginId + ",GETDATE(),'true')";
                        }
                        if (SesCheck)
                        {
                            if (IOAInd == "N")
                            {
                                //string checkquery = "SELECT StdtSessionHdrID FROM StdtSessionHdr WHERE DSTempHdrId = " + oTemp.TemplateId + " and SessionStatusCd = 'D' AND IsMaintanace ='" + hdn_isMaintainance.Value + "'"; // ORDER BY StdtSessionHdrId DESC";
                                string checkquery = "SELECT StdtSessionHdrID FROM StdtSessionHdr WHERE DSTempHdrId = " + oTemp.TemplateId + " and SessionStatusCd = 'D' AND IsMaintanace ='" + hdn_isMaintainance.Value + "' AND StudentId = " + oSession.StudentId + "";
                                checkquery_object = oData.FetchValue(checkquery);
                            }
                            else if (IOAInd == "Y")
                            {
                                //string checkquery = "SELECT StdtSessionHdrID FROM StdtSessionHdr WHERE DSTempHdrId = " + oTemp.TemplateId + " and SessionStatusCd = 'D' and IOAInd = 'Y' AND IsMaintanace ='" + hdn_isMaintainance.Value + "'"; // ORDER BY StdtSessionHdrId DESC";
                                string checkquery = "SELECT StdtSessionHdrID FROM StdtSessionHdr WHERE DSTempHdrId = " + oTemp.TemplateId + " and SessionStatusCd = 'D' and IOAInd = 'Y' AND IsMaintanace ='" + hdn_isMaintainance.Value + "' AND StudentId = " + oSession.StudentId + "";
                                checkquery_object = oData.FetchValue(checkquery);
                            }
                        }

                        if (checkquery_object != null)
                        {
                            rtrn = false;
                        }
                        else
                        {
                            sessHdrID = oData.ExecuteWithScopeandConnection(insertSessionQuery, con, trans);

                            if (sessHdrID > 0)
                            {
                                string sessnumCheck = "SELECT StdtSessionHdrId from stdtsessionhdr where studentid = " + oSession.StudentId + " and schoolid= " + oSession.SchoolId + " and dstemphdrid= " + oTemp.TemplateId + " and SessionNbr= " + oDS.SessNbr + " order by stdtsessionhdrid desc";
                                //string sessnumCheck = "select stdtsessionhdrid from stdtsessionhdr where studentid=1308 and schoolid=1 and dstemphdrid=40415 and SessionNbr =33 order by stdtsessionhdrid desc";
                                DataTable dtcheck = oData.ReturnDataTableWithTransaction(sessnumCheck, con, trans, false);
                                //int chk = 240658;
                                string deletehdrid = dtcheck.Rows[0][0].ToString();

                                if ((dtcheck.Rows.Count > 1) && (deletehdrid.Equals(sessHdrID.ToString())))
                                {
                                    string delQuery = "UPDATE stdtsessionhdr SET dstemphdrid = (dstemphdrid-(dstemphdrid*2)),studentid = (studentid-(studentid*2))"
                                                        + ",SessionNbr = (SessionNbr-(SessionNbr*2)),lessonplanid = (lessonplanid-(lessonplanid*2)), IOASessionHdrId = (IOASessionHdrId-(IOASessionHdrId*2)) WHERE stdtsessionhdrid = " + sessHdrID;
                                    oData.ExecuteWithTrans(delQuery, con, trans);
                                    oData.CommitTransation(trans, con);
                                    return false;
                                }

                                else
                                {

                                    //if (Session["NewTemplateId"] != null)
                                    //{
                                    //    lblSession.Text = "";
                                    //    Session["DupNewTemplateId"] = Session["NewTemplateId"];
                                    //    Session["NewTemplateId"] = null;
                                    //}
                                    //else
                                    //{
                                    lblSession.Text = oDS.SessNbr.ToString();

                                    //}
                                    ViewState["StdtSessHdr"] = sessHdrID.ToString();


                                    int Sessionnbr = Convert.ToInt32(oData.FetchValueTrans("SELECT SessionNbr FROM StdtSessionHdr WHERE StdtSessionHdrId=" + Convert.ToInt32(ViewState["StdtSessHdr"]), trans, con));

                                    DataTable dtsteps = oDS.dtSteps;

                                    string strQuery = "SELECT COUNT(1) from StdtSessStimuliActivity where DSTempHdrId=" + oTemp.TemplateId;
                                    int stimulyCount = Convert.ToInt32(oData.FetchValue(strQuery));
                                    if (stimulyCount == 0)
                                    {
                                        object verNo = oData.FetchValueTrans("select VerNbr from DSTempHdr where DSTempHdrId=" + oTemp.TemplateId + "", trans, con);
                                        if (verNo != null && verNo.ToString() != "")
                                        {
                                            string strVerNo = verNo.ToString();
                                            string strOldVer = checkversion(strVerNo);
                                            string strQury = "";
                                            int lessonplanid = Convert.ToInt32(oData.FetchValueTrans("select LessonplanId from DSTempHdr where DSTempHdrId=" + oTemp.TemplateId + "", trans, con));
                                            if (strOldVer == "1.0")
                                            {
                                                strQury = "select DSTempHdrId from DSTempHdr where SchoolId=" + oSession.SchoolId + " and StudentId=" + oSession.StudentId + " and LessonplanId=" + lessonplanid + " and VerNbr is NULL";
                                            }
                                            else
                                                strQury = "select DSTempHdrId from DSTempHdr where SchoolId=" + oSession.SchoolId + " and StudentId=" + oSession.StudentId + " and LessonplanId=" + lessonplanid + " and VerNbr=" + strOldVer + "";
                                            string dstemphdrId = Convert.ToString(oData.FetchValueTrans(strQury, trans, con));
                                            if (dstemphdrId != "")
                                            {
                                                string strQry = "update StdtSessStimuliActivity Set DateClosed=GETDATE() From StdtSessStimuliActivity where DSTempHdrId=" + Convert.ToInt32(dstemphdrId);
                                                oData.ExecuteWithTrans(strQry, con, trans);
                                            }

                                        }


                                        strQuery = "INSERT INTO StdtSessStimuliActivity(SchoolId,ClassId,StudentId,DSTempHdrId,ActivitiType,StartTime,CreatedBy,CreatedOn)VALUES" +
                                                          "(" + oSession.SchoolId + "," + oSession.Classid + "," + oSession.StudentId + "," + oTemp.TemplateId + ",'STARTED',GETDATE()," + oSession.LoginId + ",GETDATE())";
                                        int excId = oData.ExecuteWithScopeandConnection(strQuery, con, trans);
                                        if (excId > 0)
                                        {
                                            strQuery = "INSERT INTO StdtSessStimuliActivity(SchoolId,ClassId,StudentId,DSTempHdrId,ActivitiType,StartTime,ActivityId,CreatedBy,CreatedOn)VALUES" +
                                                          "(" + oSession.SchoolId + "," + oSession.Classid + "," + oSession.StudentId + "," + oTemp.TemplateId + ",'SET',GETDATE()," + oDS.CrntSet + "," + oSession.LoginId + ",GETDATE())";
                                            int exId = oData.ExecuteWithScopeandConnection(strQuery, con, trans);
                                            //if (excId > 0)
                                            //{
                                            //    if (oDS.SkillType == "Chained")
                                            //    {
                                            //        strQuery = "Select DSTempStepId from DSTempStep where  SortOrder= " + oDS.CrntStep + " and DSTempSetId=" + oDS.CrntSet + " and DSTempHdrId=" + oTemp.TemplateId;
                                            //        int retunID = Convert.ToInt32(oData.FetchValueTrans(strQuery, trans, con));
                                            //        strQuery = "INSERT INTO StdtSessStimuliActivity(SchoolId,ClassId,StudentId,DSTempHdrId,ActivitiType,StartTime,ActivityId,CreatedBy,CreatedOn)VALUES" +
                                            //                   "(" + oSession.SchoolId + "," + oSession.Classid + "," + oSession.StudentId + "," + oTemp.TemplateId + ",'STEP',GETDATE()," + retunID + "," + oSession.LoginId + ",GETDATE())";
                                            //        int execId = oData.ExecuteWithScopeandConnection(strQuery, con, trans);
                                            //        if (execId > 0)
                                            //        {
                                            //            if (oDS.CrntPrompt > 0)
                                            //            {
                                            //                strQuery = "INSERT INTO StdtSessStimuliActivity(SchoolId,ClassId,StudentId,DSTempHdrId,ActivitiType,StartTime,ActivityId,CreatedBy,CreatedOn)VALUES" +
                                            //                           "(" + oSession.SchoolId + "," + oSession.Classid + "," + oSession.StudentId + "," + oTemp.TemplateId + ",'PROMPT',GETDATE()," + oDS.CrntPrompt + "," + oSession.LoginId + ",GETDATE())";
                                            //                oData.ExecuteWithScopeandConnection(strQuery, con, trans);
                                            //            }
                                            //        }
                                            //    }
                                            //    else
                                            //    {
                                            //        if (oDS.CrntPrompt > 0)
                                            //        {
                                            //            strQuery = "INSERT INTO StdtSessStimuliActivity(SchoolId,ClassId,StudentId,DSTempHdrId,ActivitiType,StartTime,ActivityId,CreatedBy,CreatedOn)VALUES" +
                                            //                       "(" + oSession.SchoolId + "," + oSession.Classid + "," + oSession.StudentId + "," + oTemp.TemplateId + ",'PROMPT',GETDATE()," + oDS.CrntPrompt + "," + oSession.LoginId + ",GETDATE())";
                                            //            oData.ExecuteWithScopeandConnection(strQuery, con, trans);
                                            //        }
                                            //    }
                                            //}
                                        }
                                    }

                                    if (dtsteps != null)
                                    {
                                        int index = 0;
                                        dtsteps.Columns.Add("SessStepID", System.Type.GetType("System.String"));

                                        foreach (DataRow drStep in dtsteps.Rows)
                                        {

                                            string mistrial = "NAV";
                                            if (oDS.MisTrail == true)
                                                mistrial = "N";
                                            string insertSessionSetQuery = "INSERT INTO StdtSessionStep (StdtSessionHdrId,DSTempStepId,TrialNbr,TrialName,SessionStatusCd,CreatedBy,CreatedOn) "
                                               + "VALUES(" + sessHdrID + "," + drStep["DSTempStepId"].ToString() + "," + index.ToString() + ",'','" + mistrial + "'," + oSession.LoginId + ",GETDATE())";
                                            int stepID = oData.ExecuteWithScopeandConnection(insertSessionSetQuery, con, trans);
                                            //#####
                                            drStep["SessStepID"] = stepID.ToString();

                                            if (stepID > 0)
                                            {

                                                DataTable dtcolumns = oDS.dtColumns;
                                                if (dtcolumns != null)
                                                {
                                                    foreach (DataRow drColmn in dtcolumns.Rows)
                                                    {
                                                        if (oDS.ChainType == "Total Task")
                                                        {
                                                            object objColType = oData.FetchValueTrans("SELECT ColTypeCd FROM DSTempSetCol WHERE DSTempSetColId=" + drColmn["DSTempSetColId"].ToString(), trans, con);
                                                            if (objColType != null)
                                                            {
                                                                if (objColType.ToString() == "Prompt")
                                                                {
                                                                    string selStepStat = "SELECT StdtDSStepStatId FROM StdtDSStepStat WHERE DSTempStepId=" + drStep["DSTempStepId"].ToString() + " AND " +
                                                                        "  StudentId=" + oSession.StudentId + "";
                                                                    if (!oData.IFExistsWithTranss(selStepStat, trans, con))
                                                                    {
                                                                        string insertStepStats = "INSERT INTO StdtDSStepStat (SchoolId,StudentId,DSTempStepId,DSTempSetColId,PromptId,CreatedBy,CreatedOn) " +
                                                                            "VALUES(" + oSession.SchoolId + "," + oSession.StudentId + "," + drStep["DSTempStepId"].ToString() + "," + drColmn["DSTempSetColId"].ToString() + "," +
                                                                            "" + oDS.CrntPrompt + "," + oSession.LoginId + ",GETDATE())";
                                                                        oData.ExecuteWithScopeandConnection(insertStepStats, con, trans);
                                                                    }
                                                                    else
                                                                    {
                                                                        selStepStat = "SELECT StdtDSStepStatId FROM StdtDSStepStat WHERE DSTempStepId=" + drStep["DSTempStepId"].ToString() + " AND " +
                                                                       "DSTempSetColId is NULL AND StudentId=" + oSession.StudentId + "  ";
                                                                        int stepStatId = Convert.ToInt32(oData.FetchValueTrans(selStepStat, trans, con));
                                                                        if (stepStatId > 0)
                                                                        {
                                                                            string query = "UPDATE StdtDSStepStat set DSTempSetColId=" + drColmn["DSTempSetColId"].ToString() + " ,ModifiedBy=" + oSession.LoginId + ",ModifiedOn=GETDATE() where StdtDSStepStatId = " + stepStatId;
                                                                            int id = oData.Execute(query);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        int crntPrmpt = Convert.ToInt32(Session["TargetPrompt"]);
                                                        if (oDS.ChainType == "Total Task")
                                                        {
                                                            string selStepStat = "SELECT PromptId FROM StdtDSStepStat WHERE DSTempStepId=" + drStep["DSTempStepId"].ToString() + " AND " +
                                                                       "DSTempSetColId=" + drColmn["DSTempSetColId"].ToString() + " AND StudentId=" + oSession.StudentId + "";
                                                            crntPrmpt = Convert.ToInt32(oData.FetchValueTrans(selStepStat, trans, con));
                                                        }
                                                        String StepVal;
                                                        if (drColmn["ColTypeCd"].ToString() == "Frequency")
                                                            StepVal = "-1";
                                                        else
                                                            StepVal = drColmn["ColValue"].ToString();

                                                        string insertSessionSetDtlQuery = "INSERT INTO StdtSessionDtl(StdtSessionStepId,DSTempSetColId,StepVal,CurrentPrompt,RowNumber,CreatedBy,CreatedOn)"
                                                        + " VALUES(" + stepID + "," + drColmn["DSTempSetColId"].ToString() + ",'" + StepVal + "'," + crntPrmpt + "," + (index + 1) + "," + oSession.LoginId + ",GETDATE())";
                                                        int dtlId = oData.ExecuteWithScopeandConnection(insertSessionSetDtlQuery, con, trans);
                                                        if (dtlId <= 0)
                                                            return false;
                                                    }
                                                }
                                                else return false;
                                            }
                                            else return false;
                                            index++;
                                        }
                                        oDS.dtSteps = dtsteps;
                                    }
                                    else
                                        rtrn = false;

                                }
                            }
                            else
                                rtrn = false;

                        }
                    }
                    catch (Exception ex)
                    {
                        rtrn = false;
                        //LIJU:  Do the Rollback abd Connection close only in the Parent where its declared in a Try/Catch
                        //oData.RollBackTransation(trans, con);
                        //con.Close();
                        ClsErrorLog clError = new ClsErrorLog();
                        clError.WriteToLog(ex.ToString());
                        throw ex;
                    }
                }
            }
        }
        oData.Execute("UPDATE DSTempHdr SET crntset=NULL,crntstep=NULL,crntprompt=NULL,nextsetno=NULL WHERE DSTempHdrId=" + oTemp.TemplateId);
        return rtrn;
    }

    protected void updateDatas(int sessHdrId)
    {
        oSession = (clsSession)Session["UserSession"];
        oData = new clsData();
        int crntPrmpt = 0;
        if (oSession != null)
        {
            Dictionary<string, string[]> dictSteps = LoadStepVals_toDict();
            if (dictSteps != null)
            {
                int index = 0;
                foreach (var pair in dictSteps)
                {
                    int scoreIndex = 0;
                    oDS = (clsDataSheet)Session[DatasheetKey];
                    if (oDS != null)
                    {
                        foreach (GridViewRow gr in grdDataSht.Rows)
                        {
                            int cnt = 0;
                            TextBox txtStepCmnts = (TextBox)gr.FindControl("txtStepNotes");


                            if (txtStepCmnts.Enabled == true)
                            {

                                HiddenField hfStepid = (HiddenField)gr.FindControl("hfSessStepID");

                                HiddenField hfSample = (HiddenField)gr.FindControl("hfSampleID");

                                // RadioButton rdoSample = (RadioButton)gr.FindControl("rdbStepName_" + hfstp.Value);
                                string mistrial = "NAV";
                                CheckBox chkMistrial = (CheckBox)gr.FindControl("chkMistrial");
                                if (index == 0)
                                {

                                    if (oDS.MisTrail == true)
                                    {
                                        //mistrial = "N";

                                        //if (pair.Value[scoreIndex] == "")
                                        //{
                                        //    mistrial = "Y";
                                        //}
                                        //if (pair.Value[scoreIndex] == "0")
                                        //{
                                        //    mistrial = "Y";
                                        //}
                                        //if (pair.Value[scoreIndex] == "00:00:00")
                                        //{
                                        //    mistrial = "Y";
                                        //}
                                        //// DropDownList drpPrompt = (DropDownList)gr.FindControl("ddlPrompt"); ;
                                        ////HtmlInputRadioButton rdoPlusMinus = (HtmlInputRadioButton)gr.FindControl("rdbRespPlus");
                                        if (chkMistrial.Checked == true) mistrial = "Y";
                                    }
                                    string updSteps = "UPDATE StdtSessionStep SET Comments='" + txtStepCmnts.Text.Replace("'","''") + "',SessionStatusCd='" + mistrial + "',SelectedSample='" + hfSample.Value.Replace("'", "''").Trim() + "',ModifiedBy=" + oSession.LoginId + ",ModifiedOn=GETDATE() " +
                                        "WHERE StdtSessionStepId=" + hfStepid.Value + " AND StdtSessionHdrId=" + sessHdrId + "";
                                    oData.Execute(updSteps);

                                }
                                mistrial = "N";


                                crntPrmpt = Convert.ToInt32(Session["TargetPrompt"]);
                                if (pair.Value[scoreIndex] == "")
                                {
                                    mistrial = "Y";
                                }
                                if (pair.Value[scoreIndex] == "0")
                                {
                                    mistrial = "Y";
                                }
                                if (pair.Value[scoreIndex] == "00:00:00")
                                {
                                    mistrial = "Y";
                                }
                                // DropDownList drpPrompt = (DropDownList)gr.FindControl("ddlPrompt"); ;
                                //HtmlInputRadioButton rdoPlusMinus = (HtmlInputRadioButton)gr.FindControl("rdbRespPlus");
                                if (chkMistrial.Checked == true)
                                    mistrial = "Y";
                                if (mistrial == "Y" && chkMistrial.Checked != true)
                                {
                                    if (Session["ISAddTrial"] == "True")
                                    {
                                        mistrial = "N";
                                    }
                                }

                                string updStpDtls = "UPDATE StdtSessionDtl SET StepVal='" + pair.Value[scoreIndex].Replace("'", "''") + "',CurrentPrompt='" + crntPrmpt + "',SessionStatusCd='" + mistrial + "',ModifiedBy=" + oSession.LoginId + ",ModifiedOn=GETDATE() " +
                                    "WHERE StdtSessionStepId=" + hfStepid.Value + " AND DSTempSetColId=" + pair.Key + "";
                                oData.Execute(updStpDtls);


                                scoreIndex++;
                            }
                        }
                        index++;
                    }
                }
            }
            if (oDS.ChainType == "Total Task")
            {

                crntPrmpt = 0;
                DataTable dtsteps = oDS.dtSteps;
                if (dtsteps != null)
                {
                    foreach (DataRow drStep in dtsteps.Rows)
                    {
                        DataTable dtcolumns = oDS.dtColumns;
                        if (dtcolumns != null)
                        {
                            foreach (DataRow drColmn in dtcolumns.Rows)
                            {
                                // crntPrmpt = Convert.ToInt32(Session["TargetPrompt"]);
                                if (oDS.ChainType == "Total Task")
                                {
                                    string selStepStat = "SELECT PromptId FROM StdtDSStepStat WHERE DSTempStepId=" + drStep["DSTempStepId"].ToString() + " AND " +
                                               "DSTempSetColId=" + drColmn["DSTempSetColId"].ToString() + " AND StudentId=" + oSession.StudentId + "";
                                    crntPrmpt = Convert.ToInt32(oData.FetchValue(selStepStat));

                                    string strqry3 = "select case when'%Independent of All Steps' in(select colcalc.CalcType " +
                                                    "from DSTempSetCol col " +
                                                    "left join DSTempSetColCalc colcalc on col.DSTempSetColId=colcalc.DSTempSetColId " +
                                                    "where DSTempHdrId=" + oTemp.TemplateId + " and col.DSTempSetColId=" + drColmn["DSTempSetColId"] + ") then 'true' else 'false' end";

                                    object colt = oData.FetchValue(strqry3);

                                    if (drColmn["ColTypeCd"].ToString() != "Prompt" && colt != "true")
                                    {
                                        string updStpDtls = "UPDATE StdtSessionDtl SET CurrentPrompt='" + crntPrmpt + "' WHERE StdtSessionStepId=" + drStep["SessStepID"] + " AND DSTempSetColId=" + drColmn["DSTempSetColId"].ToString() + "";
                                        oData.Execute(updStpDtls);
                                    }
                                }
                            }
                        }
                    }
                }
            }


        }
    }
    protected bool updateDraft(int sessHdrId, string updateMode)
    {
        bool valid_Ind = false;
        oSession = (clsSession)Session["UserSession"];
        oData = new clsData();
        string updQry = "";
        bool Ismaint = Convert.ToBoolean(hdn_isMaintainance.Value);
        if (oSession != null)
        {
            if (updateMode == "Save")
            {
                oDS = (clsDataSheet)Session[DatasheetKey];
                if (oDS != null)
                {
                    if ((oDS.dtSteps != null) && (oDS.dtSteps.Rows.Count > 0))
                    {
                        string sessMistrial = "N";
                        string status = "D";
                        if (chkSessMistrial.Checked == true)
                        {
                            sessMistrial = "Y";
                            oDS.SessionMistrial = true;
                            oDS.SessionMistrialRsn = hdnMissTrialRsn.Value;
                            Session[DatasheetKey] = oDS;
                            mistrialRsn.Text = hdnMissTrialRsn.Value;
                        }
                        if (Convert.ToBoolean(ViewState["IsHistory"]) == true)
                        {
                            updQry = "update StdtSessionHdr SET AssignedToId=1,SessMissTrailStus='" + sessMistrial + "',SessMissTrailRsn='" + hdnMissTrialRsn.Value + "',"
                        + "Comments='" + txtNote.Text.Trim() + "',ModifiedBy=" + oSession.LoginId + ",ModifiedOn=GETDATE(),IsUpdate=1 WHERE StdtSessionHdrId=" + sessHdrId + "";

                        }
                        else
                        {
                            string sqlStr1 = "select SessionStatusCd from StdtSessionHdr where StdtSessionHdrId=" + sessHdrId;
                            object sesst1 = oData.FetchValue(sqlStr1);
                            if (sesst1.ToString() == "S")
                            {
                                string strDtls = "SELECT UserFName+' '+UserLName AS CreatedBy,StartTs,CASE WHEN S.ModifiedBy IS NULL THEN (SELECT CONCAT(UserFName,' ',UserLName) " +
                                    "FROM [User] WHERE UserId=S.CreatedBy) ELSE (SELECT CONCAT(UserFName,' ',UserLName) FROM [User] WHERE UserId=S.ModifiedBy) END as ModifiedBy, " +
                                    "EndTs FROM StdtSessionHdr S LEFT JOIN [User] U ON U.UserId=S.CreatedBy WHERE StdtSessionHdrId=" + sessHdrId;
                                DataTable dts = oData.ReturnDataTable(strDtls, false);
                                if (dts != null)
                                {
                                    if (dts.Rows.Count == 1)
                                    {
                                        string strCreatedBy = dts.Rows[0]["CreatedBy"].ToString();
                                        string strModifiedBy = dts.Rows[0]["ModifiedBy"].ToString();
                                        DateTime strStart = DateTime.Parse(dts.Rows[0]["StartTs"].ToString());
                                        string strStartDate = strStart.ToString("MM/dd/yyyy HH:mm:ss");
                                        DateTime strEnd = DateTime.Parse(dts.Rows[0]["EndTs"].ToString());
                                        string strEndDate = strEnd.ToString("MM/dd/yyyy HH:mm:ss");
                                        tdMsg.InnerHtml = clsGeneral.failedMsg("Submit not possible: This session was started by '" + strCreatedBy + "' on '" + strStartDate + "' and completed by '" + strModifiedBy + "' on '" + strEndDate + "'. Please Close[X] this datasheet.");
                                    }
                                }
                            }
                            else
                            {
                                string where = "";
                                updQry = "SELECT CASE WHEN Convert(date,StartTs) < Convert(date,GETDATE()) THEN 1 ELSE 0 END AS status " +
                                          "FROM stdtsessionhdr where StdtSessionHdrId=" + sessHdrId;
                                int idStatus = Convert.ToInt32(oData.FetchValue(updQry));
                                if (idStatus == 1)
                                    where = "IsUpdate=1";
                                else
                                    where = "IsUpdate=0";
                                updQry = "update StdtSessionHdr SET AssignedToId=1,SessionStatusCd='" + status + "',SessMissTrailStus='" + sessMistrial + "',SessMissTrailRsn='" + hdnMissTrialRsn.Value + "',"
                               + "Comments='" + txtNote.Text.Trim() + "',ModifiedBy=" + oSession.LoginId + ",ModifiedOn=GETDATE()," + where + " WHERE StdtSessionHdrId=" + sessHdrId + "";
                            }
                        }
                        if (updQry != "")
                        {
                            if (oData.Execute(updQry) > 0)
                            {

                                updateDatas(sessHdrId);
                                valid_Ind = true;
                            }
                        }
                        else
                            valid_Ind = false;
                    }
                }
            }
            if (updateMode == "Submit")
            {
                oDS = (clsDataSheet)Session[DatasheetKey];
                oData = new clsData();
                if (oDS != null)
                {
                    if (oDS.IOAInd == "N")
                    {
                        string sessMistrial = "N";
                        int iIsmaintain = 0;//Ismaint
                        if (chkSessMistrial.Checked == true)
                        {
                            oDS.SessionMistrial = true;
                            oDS.SessionMistrialRsn = hdnMissTrialRsn.Value;
                            Session[DatasheetKey] = oDS;
                            sessMistrial = "Y";
                            mistrialRsn.Text = hdnMissTrialRsn.Value;
                        }
                        else
                        {
                            oDS.SessionMistrial = false;
                            oDS.SessionMistrialRsn = "";
                            hdnMissTrialRsn.Value = "";
                            Session[DatasheetKey] = oDS;
                        }
                        if (Ismaint)
                            iIsmaintain = 1;
                        updQry = "update StdtSessionHdr SET IsMaintanace=" + iIsmaintain + ", AssignedToId=1,EndTs=GETDATE(),SessionStatusCd='S',SessMissTrailStus='" + sessMistrial + "',SessMissTrailRsn='" + hdnMissTrialRsn.Value + "',"
                        + "Comments='" + txtNote.Text.Trim() + "',ModifiedBy=" + oSession.LoginId + ",ModifiedOn=GETDATE() WHERE StdtSessionHdrId=" + sessHdrId + "";
                        int retrn = oData.Execute(updQry);
                        if (retrn > 0) { updateDatas(sessHdrId); valid_Ind = true; }
                        else { tdMsg.InnerHtml = clsGeneral.failedMsg("Submission Failed"); valid_Ind = false; }
                    }
                    else if (oDS.IOAInd == "Y")
                    {
                        int sessid = oDS.IOASessHdr;

                        string SelectSessionIOA = "SELECT IOASessionHdrId FROM StdtSessionHdr WHERE StdtSessionHdrId=" + sessHdrId + "";
                        object objIOAid = oData.FetchValue(SelectSessionIOA);
                        if (objIOAid == null) objIOAid = 0;
                        int ioaid = Convert.ToInt32(objIOAid);
                        if (ioaid != 0)
                            sessid = ioaid;
                        string SelectSessionDetail = "SELECT SessionStatusCd AS ISExistSession FROM StdtSessionHdr WHERE StdtSessionHdrId=" + sessid + "";
                        object objStatus = oData.FetchValue(SelectSessionDetail);
                        if (objStatus != null)
                        {
                            if (objStatus.ToString() != "S")
                            {
                                tdMsg.InnerHtml = clsGeneral.warningMsg("IOA Draft Submission not Possible when Teacher Session currently in Progress");
                                valid_Ind = false;
                            }
                            else
                            {
                                valid_Ind = true;
                            }

                        }
                        else
                        {
                            string deleteQuerry = "DELETE FROM StdtSessionHdr WHERE StdtSessionHdrId=" + sessHdrId;
                            oData.Execute(deleteQuerry);

                            tdMsg.InnerHtml = clsGeneral.warningMsg("IOA not possible because the partner session to your IOA was closed. Please close (X) this datasheet and try again");
                            valid_Ind = false;
                        }
                    }
                }
                else valid_Ind = false;
            }
        }
        hdn_isMaintainance.Value = "false";
        return valid_Ind;
    }
    protected Dictionary<string, string[]> LoadStepVals_toDict()
    {
        Dictionary<string, string[]> dict = new Dictionary<string, string[]>();
        oDS = (clsDataSheet)Session[DatasheetKey];
        if (oDS != null)
        {
            if ((oDS.dtColumns != null) && (oDS.dtColumns.Rows.Count > 0))
            {
                foreach (DataRow dr in oDS.dtColumns.Rows)
                {
                    string sessionValues = "";
                    foreach (GridViewRow gr in grdDataSht.Rows)
                    {
                        HiddenField hfDusr = (HiddenField)gr.FindControl("hfSessStepID");
                        if (dr["ColTypeCd"].ToString() == "Duration")
                        {
                            HiddenField hfDur = (HiddenField)gr.FindControl("hfDuration_" + dr["DSTempSetColId"].ToString());
                            if (hfDur.Value != "")
                            {
                                sessionValues += hfDur.Value + "|";
                            }
                        }
                        if (dr["ColTypeCd"].ToString() == "Text")
                        {
                            TextBox txtText = (TextBox)gr.FindControl("txtText_" + dr["DSTempSetColId"].ToString());
                            if (txtText.Enabled == true)
                            {
                                if (txtText.Text == "") sessionValues += "-1|";
                                else sessionValues += txtText.Text + "|";
                            }
                        }
                        if (dr["ColTypeCd"].ToString() == "Frequency")
                        {
                            TextBox txtFrq = (TextBox)gr.FindControl("txtFrequency_" + dr["DSTempSetColId"].ToString());
                            if (txtFrq.Enabled == true)
                            {
                                if (txtFrq.Text == "") sessionValues += "-1|";
                                else sessionValues += txtFrq.Text + "|";
                            }
                        }
                        if (dr["ColTypeCd"].ToString() == "Prompt")
                        {
                            DropDownList ddlPrmpt = (DropDownList)gr.FindControl("ddlPrompt_" + dr["DSTempSetColId"].ToString());
                            if (ddlPrmpt.Enabled == true)
                            {
                                if (ddlPrmpt.SelectedValue == "0")
                                {
                                    sessionValues += "|";
                                }
                                else
                                {
                                    sessionValues += ddlPrmpt.SelectedValue + "|";
                                }
                            }
                        }
                        if (dr["ColTypeCd"].ToString() == "+/-")
                        {
                            HtmlInputRadioButton rdbRespplus = (HtmlInputRadioButton)gr.FindControl("rdbRespPlus_" + dr["DSTempSetColId"].ToString());
                            HtmlInputRadioButton rdbRespminus = (HtmlInputRadioButton)gr.FindControl("rdbRespMinus_" + dr["DSTempSetColId"].ToString());
                            if (rdbRespplus != null && rdbRespminus != null)
                            {
                                if ((rdbRespminus.Disabled == false) && (rdbRespplus.Disabled == false))
                                {
                                    if (rdbRespplus.Checked == true) sessionValues += "+|";
                                    else if (rdbRespminus.Checked == true) sessionValues += "-|";
                                    else sessionValues += "|";
                                }
                            }
                        }

                    }
                    if (sessionValues.Length > 0)
                    {
                        sessionValues = sessionValues.Substring(0, (sessionValues.Length - 1));
                        if (sessionValues.Contains("-1"))
                        {
                            string[] S_Values = sessionValues.Split('|');
                            bool ISExist = false;
                            for (int i = 0; i < S_Values.Count(); i++)
                            {
                                if (dr["ColTypeCd"].ToString() == "Text")
                                {
                                    if (S_Values[i] != "-1")
                                    {
                                        ISExist = true;
                                        break;
                                    }
                                }
                                else if (Convert.ToInt32(S_Values[i]) > 0)
                                {
                                    ISExist = true;
                                    break;
                                }
                            }
                            if (ISExist == true)
                            {
                                sessionValues = "";
                                for (int i = 0; i < S_Values.Count(); i++)
                                {
                                    if (dr["ColTypeCd"].ToString() == "Text")
                                    {
                                        if (S_Values[i] == "-1")
                                        {
                                            sessionValues += "|";
                                        }
                                        else
                                        {
                                            sessionValues += S_Values[i].ToString() + "|";
                                        }
                                    }
                                    else if (Convert.ToInt32(S_Values[i]) == -1)
                                    {
                                        if (dr["ColTypeCd"].ToString() == "Frequency")
                                            sessionValues += "-1|";
                                        else
                                            sessionValues += "0|";
                                    }
                                    else
                                    {
                                        sessionValues += S_Values[i].ToString() + "|";
                                    }
                                }
                                sessionValues = sessionValues.Substring(0, (sessionValues.Length - 1));
                            }
                            //else
                            //{
                            //    sessionValues = "";
                            //    for (int i = 0; i < S_Values.Count(); i++)
                            //    {
                            //        if (Convert.ToInt32(S_Values[i]) == -1)
                            //        {
                            //            sessionValues += "0|";
                            //        }
                            //    }
                            //    sessionValues = sessionValues.Substring(0, (sessionValues.Length - 1));
                            //}

                        }

                        dict.Add(dr["DSTempSetColId"].ToString(), sessionValues.Split('|'));
                    }
                }
            }
            else return null;
        }
        else return null;
        return dict;
    }

    protected bool SaveMeasuremnts(int sessHdrId, SqlConnection con, SqlTransaction tran)
    {
        bool valid = false;
        string value = "";
        try
        {
            oData = new clsData();
            oTemp = (ClsTemplateSession)Session["BiweeklySession"];
            oSession = (clsSession)Session["UserSession"];
            oDS = (clsDataSheet)Session[DatasheetKey];
            if (oSession != null)
            {
                if (oTemp != null)
                {
                    if (oDS != null)
                    {
                        /*
                         * Creation and insertion to a new Session  
                         */
                        //Dictionary<string, string[]> ht = LoadStepVals_toDict();
                        //if (ht != null)
                        {

                            string deleteSessStepScore = "DELETE FROM StdtSessColScore WHERE StdtSessionHdrId=" + sessHdrId + "";
                            oData.ExecuteWithTrans(deleteSessStepScore, con, tran);
                            string sqlStr = "";
                            DataTable dt = new DataTable();
                            //string sqlStr = " SELECT DST.DSTempSetColId,DST.ColName, DC.CalcType,DC.CalcFormula,DC.DSTempSetColCalcId,DT.MultiSetsInd, DT.DSTempHdrId FROM DSTempHdr DT" +
                            //        " INNER JOIN DSTempSetCol DST ON DT.DSTempHdrId = DST.DSTempHdrId  " +
                            //        " INNER JOIN DSTempSetColCalc DC ON DST.DSTempSetColId = DC.DSTempSetColId  " +
                            //        " WHERE (DT.DSTempHdrId =" + oTemp.TemplateId + ")";
                            //DataTable dt = oData.ReturnDataTable(sqlStr, tran, false);
                            //int indexi = 0;
                            //int icount = 0;
                            //int count = dt.Rows.Count;
                            //int[] arColcalId = new int[count];
                            //int[] arColId = new int[count];
                            //string[] arColName = new string[oDS.dtColumns.Rows.Count];
                            //string custom = "";
                            //foreach (DataRow dr in dt.Rows)
                            //{
                            //    arColcalId[icount] = Convert.ToInt32(dr["DSTempSetColCalcId"]);
                            //    if (dr["CalcType"].ToString() == "Customize")
                            //    {
                            //        custom += dr["CalcFormula"].ToString() + "#";
                            //    }
                            //    icount++;
                            //}
                            //ViewState["Custom_Formula"] = custom;
                            //int colIndex = 0;
                            //foreach (DataRow dr in oDS.dtColumns.Rows)
                            //{
                            //    sqlStr = " select dbo.DSTempSetCol.ColName from DSTempSetCol where DSTempSetCol.DSTempSetColId=" + Convert.ToInt32(dr["DSTempSetColId"].ToString());
                            //    arColName[colIndex] = oData.FetchValueTrans(sqlStr, tran, con).ToString();
                            //    colIndex++;
                            //}
                            //string names = "";
                            //float custResult = 0;
                            //string[] sEquation = custom.Split('#');
                            //foreach (var item in sEquation)
                            //{
                            //    Calculate.Calculate oCalc = new Calculate.Calculate();
                            //    if (item != "")
                            //    {
                            //        PreProcessedExpression expResult = oCalc.PreProcessExpression(item);
                            //        int expCount = expResult.ColumnDatas.Length;
                            //        for (int indexj = 0; indexj < expCount; indexj++)
                            //        {
                            //            for (int i = 0; i < oDS.dtColumns.Rows.Count; i++)
                            //            {
                            //                if (ht.ContainsKey(oDS.dtColumns.Rows[i]["DSTempSetColId"].ToString()))
                            //                {
                            //                    if (!names.Contains(arColName[i]))
                            //                    {
                            //                        if (arColName[i].ToUpper() == expResult.ColumnDatas[indexj].ColumnName.Trim())
                            //                        {
                            //                            expResult.ColumnDatas[indexj].Data = new float[oDS.dtSteps.Rows.Count - 1];
                            //                            names += arColName[i] + ",";
                            //                            expResult.ColumnDatas[indexj].Data = parseFloat(ht[oDS.dtColumns.Rows[i]["DSTempSetColId"].ToString()]);
                            //                        }
                            //                    }
                            //                }
                            //            }
                            //        }
                            //        if (expResult != null)
                            //        {
                            //            string exp = oCalc.CreateExpressionToEvaluate(expResult);
                            //            string[] tempString = exp.Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);
                            //            string[] postfixArray = oCalc.InfixToPostfix(tempString);
                            //            custResult = oCalc.EvaluatePostfix(postfixArray);
                            //        }
                            //    }
                            //}
                            for (int i = 0; i < oDS.dtColumns.Rows.Count; i++)
                            {
                                sqlStr = " SELECT DST.DSTempSetColId,DST.ColName, DC.CalcType,DC.CalcFormula,DST.ColTypeCd,DC.DSTempSetColCalcId,DT.MultiSetsInd, DT.DSTempHdrId FROM DSTempHdr DT" +
                                   " INNER JOIN DSTempSetCol DST ON DT.DSTempHdrId = DST.DSTempHdrId  " +
                                   " INNER JOIN DSTempSetColCalc DC ON DST.DSTempSetColId = DC.DSTempSetColId  " +
                                   " WHERE (DT.DSTempHdrId =" + oTemp.TemplateId + "AND DST.DSTempSetColId=" + Convert.ToInt32(oDS.dtColumns.Rows[i]["DSTempSetColId"].ToString()) + ")";
                                dt = oData.ReturnDataTable(sqlStr, con, tran, false);
                                //liju
                                string score = "0";
                                if (dt != null)
                                {
                                    if (dt.Rows.Count > 0)
                                    {
                                        foreach (DataRow dr in dt.Rows)
                                        {
                                            Session["totalcorrectincorrect"] = "";
                                            if (dr["CalcType"].ToString().Replace(" ", "") == "Customize")
                                            {
                                                // if (hfTextScore.Value == "") score = "0";
                                                //else score = hfTextScore.Value.Trim();

                                                score = ReturnScore(hfTextScore, dr["DSTempSetColId"].ToString());
                                            }
                                            if (dr["CalcType"].ToString().Replace(" ", "") == "%AccuracyatTrainingStep")
                                            {
                                                if (dr["ColTypeCd"].ToString() == "+/-")
                                                {

                                                    score = ReturnScore(hfResultStep_Acc, dr["DSTempSetColId"].ToString());
                                                }
                                                if (dr["ColTypeCd"].ToString() == "Prompt")
                                                {
                                                    score = ReturnScore(hfResultStep_Prmpt, dr["DSTempSetColId"].ToString());
                                                }

                                            }
                                            if (dr["CalcType"].ToString().Replace(" ", "") == "%AccuracyatPreviouslyLearnedSteps")
                                            {
                                                if (dr["ColTypeCd"].ToString() == "+/-")
                                                {
                                                    score = ReturnScore(hfRslt1_ExcludeCrntStep_Acc, dr["DSTempSetColId"].ToString());
                                                }
                                                if (dr["ColTypeCd"].ToString() == "Prompt")
                                                {
                                                    score = ReturnScore(hfRslt2_ExcludeCrntStep_Acc, dr["DSTempSetColId"].ToString());
                                                }
                                            }
                                            if (dr["CalcType"].ToString().Replace(" ", "") == "%Accuracy")
                                            {
                                                if (dr["ColTypeCd"].ToString() == "+/-")
                                                {
                                                    //if (hfRslt1_Acc.Value == "") score = "0";
                                                    //else score = hfRslt1_Acc.Value.Trim().Replace("%", "");

                                                    score = ReturnScore(hfRslt1_Acc, dr["DSTempSetColId"].ToString());
                                                }
                                                if (dr["ColTypeCd"].ToString() == "Prompt")
                                                {
                                                    //if (hfRslt2_Acc.Value == "") score = "0";
                                                    //else score = hfRslt2_Acc.Value.Trim().Replace("%", "");

                                                    score = ReturnScore(hfRslt2_Acc, dr["DSTempSetColId"].ToString());
                                                }
                                            }
                                            if (dr["CalcType"].ToString().Replace(" ", "") == "%Prompted")
                                            {
                                                if (dr["ColTypeCd"].ToString() == "+/-")
                                                {
                                                    //if (hfRslt1_Prmt.Value == "") score = "0";
                                                    //else score = hfRslt1_Prmt.Value.Trim().Replace("%", "");

                                                    score = ReturnScore(hfRslt1_Prmt, dr["DSTempSetColId"].ToString());
                                                }
                                                if (dr["ColTypeCd"].ToString() == "Prompt")
                                                {
                                                    //if (hfRslt2_Prmt.Value == "") score = "0";
                                                    //else score = hfRslt2_Prmt.Value.Trim().Replace("%", "");

                                                    score = ReturnScore(hfRslt2_Prmt, dr["DSTempSetColId"].ToString());
                                                }
                                            }
                                            if (dr["CalcType"].ToString().Replace(" ", "") == "%Independent")
                                            {
                                                if (dr["ColTypeCd"].ToString() == "+/-")
                                                {
                                                    //if (hfRslt1_Ind.Value == "") score = "0";
                                                    //else score = hfRslt1_Ind.Value.Trim().Replace("%", "");

                                                    score = ReturnScore(hfRslt1_Ind, dr["DSTempSetColId"].ToString());
                                                }
                                                if (dr["ColTypeCd"].ToString() == "Prompt")
                                                {
                                                    //if (hfRslt2_Ind.Value == "") score = "0";
                                                    //else score = hfRslt2_Ind.Value.Trim().Replace("%", "");

                                                    score = ReturnScore(hfRslt2_Ind, dr["DSTempSetColId"].ToString());
                                                }
                                            }
                                            if (dr["CalcType"].ToString().Replace(" ", "") == "%IndependentofAllSteps")
                                            {
                                                if (dr["ColTypeCd"].ToString() == "+/-")
                                                {
                                                    score = ReturnScore(hfRslt1_IndAll, dr["DSTempSetColId"].ToString());
                                                }
                                                if (dr["ColTypeCd"].ToString() == "Prompt")
                                                {
                                                    score = ReturnScore(hfRslt2_IndAll, dr["DSTempSetColId"].ToString());
                                                }
                                            }
                                            if (dr["CalcType"].ToString().Replace(" ", "") == "AvgDuration")
                                            {
                                                if (hfAvgDur.Value == "") score = TimeSpan.Parse("00:00:00").TotalSeconds.ToString();
                                                else
                                                {
                                                    score = ReturnScore(hfAvgDur, dr["DSTempSetColId"].ToString());
                                                    if (score != "N/A")
                                                    {
                                                        score = TimeSpan.Parse(ReturnScore(hfAvgDur, dr["DSTempSetColId"].ToString())).TotalSeconds.ToString();
                                                    }

                                                }
                                            }
                                            if (dr["CalcType"].ToString().Replace(" ", "") == "TotalDuration")
                                            {
                                                if (hfTotDur.Value == "") score = TimeSpan.Parse("00:00:00").TotalSeconds.ToString();
                                                else
                                                {
                                                    score = ReturnScore(hfTotDur, dr["DSTempSetColId"].ToString());
                                                    if (score != "N/A")
                                                    {
                                                        score = TimeSpan.Parse(ReturnScore(hfTotDur, dr["DSTempSetColId"].ToString())).TotalSeconds.ToString();
                                                    }

                                                }

                                            }
                                            if (dr["CalcType"].ToString() == "Frequency")
                                            {
                                                //if (hf_Freq.Value == "") score = "0";
                                                //else score = hf_Freq.Value.Trim();

                                                score = ReturnScore(hf_Freq, dr["DSTempSetColId"].ToString());
                                            }
                                            //Total correct and incorrect jis

                                            if (dr["CalcType"].ToString() == "Total Correct")
                                            {
                                                Session["totalcorrectincorrect"] = "Total Correct";
                                                if (dr["ColTypeCd"].ToString() == "+/-")
                                                {
                                                    if (hfTotCorct.Value != "")
                                                    {
                                                        score = ReturnScore(hfTotCorct, dr["DSTempSetColId"].ToString());
                                                    }
                                                    else
                                                        score = "0";
                                                }
                                            }
                                            if (dr["CalcType"].ToString() == "Total Incorrect")
                                            {
                                                Session["totalcorrectincorrect"] = "Total Incorrect";
                                                if (dr["ColTypeCd"].ToString() == "+/-")
                                                {
                                                    if (hfInTotCorct.Value != "")
                                                    {
                                                        //score = hfInTotCorct.Value;
                                                        score = ReturnScore(hfInTotCorct, dr["DSTempSetColId"].ToString());
                                                    }
                                                    else
                                                        score = "0";
                                                }
                                            }
                                            if (dr["CalcType"].ToString().Replace(" ", "") == "NA")
                                            {
                                                score = "N/A";
                                            }

                                            if (score == "N/A")
                                            {
                                                score = "-1";
                                            }
                                            if (score == "-")
                                            {
                                                score = "-1";
                                            }


                                            // Code By Arun for update Datasheet Scores.


                                            string[] arguments = new string[8];

                                            //if (Convert.ToBoolean(ViewState["IsHistory"]) == false)
                                            //{
                                            string insertSessionScoreQuery = "INSERT INTO StdtSessColScore (SchoolId,StudentId,DSTempSetColId,DSTempSetColCalcId,StdtSessionHdrId,Score,CreatedBy,CreatedOn)"
                                                + "values(" + oSession.SchoolId + "," + oSession.StudentId + "," + Convert.ToInt32(oDS.dtColumns.Rows[i]["DSTempSetColId"].ToString()) + ","
                                                + Convert.ToInt32(dr["DSTempSetColCalcId"].ToString()) + "," + sessHdrId + ","
                                                + "" + float.Parse(score) + "," + oSession.LoginId + ",GETDATE())";
                                            if (oData.ExecuteWithScopeandConnection(insertSessionScoreQuery, con, tran) > 0) valid = true;
                                            //}

                                            //else
                                            //{
                                            //    string updateQry = "UPDATE StdtSessColScore SET Score= " + float.Parse(score) + ",ModifiedBy=" + oSession.LoginId + ",ModifiedOn=GETDATE() WHERE " +
                                            //        "StdtSessionHdrId=" + sessHdrId + " AND DSTempSetColId=" + Convert.ToInt32(oDS.dtColumns.Rows[i]["DSTempSetColId"].ToString()) + " AND " +
                                            //        " DSTempSetColCalcId=" + Convert.ToInt32(dr["DSTempSetColCalcId"].ToString());
                                            //    oData.ExecuteWithTrans(updateQry, con, tran); valid = true;
                                            //}



                                        }
                                    }
                                }
                            }

                        }
                        //else valid = false;

                    }
                }
            }
        }
        catch (Exception ex)
        {
            valid = false;
            //LIJU:  Do the Rollback abd Connection close only in the Parent where its declared in a Try/Catch
            //oData.RollBackTransation(tran, con);
            //con.Close();
            ClsErrorLog clError = new ClsErrorLog();
            clError.WriteToLog(ex.ToString());
            throw ex;
        }
        return valid;
    }

    public string ReturnScore(HiddenField hf, string colid)
    {
        string score = "0";
        if (hf.Value.Length >= 1)
        {
            if (hf.Value == "N/A" || hf.Value.Contains("N/A"))
            {
                score = "N/A";
            }
            string reslt = hf.Value;
            string[] items = reslt.Split('|');
            foreach (string item in items)
            {
                if (colid == item.Split('*')[0] || colid == item.Split('*')[0].Replace("N/A", ""))
                {
                    score = item.Split('*')[1].Replace("%", "");
                }
                else
                {
                    if (Session["totalcorrectincorrect"].ToString() != "" || Session["totalcorrectincorrect"].ToString() != "")
                    {
                        if (Session["totalcorrectincorrect"].ToString() == "Total Correct" || Session["totalcorrectincorrect"].ToString() == "Total Incorrect")
                        {
                            if (hf.Value == "N/A" || hf.Value.Contains("N/A"))
                            {
                                reslt = hf.Value.Split('|')[0];
                                score = reslt.Split('*')[1];
                            }
                            else
                            {
                                score = hf.Value;
                            }
                        }
                    }
                }
            }
        }
        else
        {
            score = "0";
        }
        //int outrslt;
        //if (!Int32.TryParse(score, out outrslt))
        //{
        //    score = "0";
        //}

        return score;
    }

    protected float[] parseFloat(string[] p)
    {
        float[] temp = new float[p.Length];
        for (int i = 0; i < p.Length; i++)
        {
            temp[i] = float.Parse(p[i]);
        }
        return temp;
    }

    protected void LoadData(int SessHdrID, bool VTPopupInd)
    {
        ClsErrorLog clError = new ClsErrorLog();
        oDS = (clsDataSheet)Session[DatasheetKey];
        oTemp = (ClsTemplateSession)Session["BiweeklySession"];
        oData = new clsData();
        int printId = Convert.ToInt32(Request.QueryString["printid"]);
        //SqlConnection con = null;
        //SqlTransaction trans = null;

        try
        {
            //con = oData.Open();
            //trans = con.BeginTransaction();
            string strqry = "SELECT DSTempHdrId FROM StdtSessionHdr WHERE StdtSessionHdrId=" + SessHdrID;
            object objSessHdrID = oData.FetchValue(strqry);
            if (objSessHdrID != null)
            {
                oTemp.TemplateId = Convert.ToInt32(objSessHdrID);
                lblSession.Text = oDS.SessNbr.ToString();

            }
            generateSheet(VTPopupInd);
            getStepPrompts();


            if (oTemp != null)
            {
                if (oDS != null)
                {
                    fillStepGrid(oDS.TeachProc, oDS.SkillType, oDS.MatchToSampleType);
                    object objSessNbr = oData.FetchValue("SELECT SessionNbr FROM StdtSessionHdr WHERE StdtSessionHdrId=" + SessHdrID);
                    if (objSessNbr != null)
                    {
                        oDS.SessNbr = Convert.ToInt32(objSessNbr);
                        lblSession.Text = oDS.SessNbr.ToString();
                        //if (Session["NewTemplateId"] != null)
                        //{
                        //    lblSession.Text = "";
                        //    Session["DupNewTemplateId"] = Session["NewTemplateId"];
                        //    Session["NewTemplateId"] = null;
                        //}
                    }


                    object objSessStat = oData.FetchValue("SELECT SessionStatusCd FROM StdtSessionHdr WHERE StdtSessionHdrId=" + SessHdrID);
                    if (objSessStat != null)
                    {
                        if (objSessStat.ToString() == "S")
                        { /* btnSave.Visible = false;*/
                            int sessHdrId2 = Convert.ToInt32(ViewState["StdtSessHdr"]);
                            object sessDate1 = oData.FetchValue("select startTs FROM StdtSessionHdr WHERE StdtSessionHdrId=" + sessHdrId2);
                            sessDate.Text= "Session Date:  " + sessDate1.ToString();
                            btnSave.Text = "Update";
                            btnSave1.Text = "Update";
                            printPrev.Value = "1";
                            rightNav.Visible = true;
                            leftNav.Visible = true;
                            Print1.Visible = false;
                            print2.Visible = true;
                            //leftarrow.Visible = true;
                            btnSubmit.Visible = false;
                            btnSubmit1.Visible = false;
                            btnSubmit2.Visible = false;
                            chkSessMistrial.Visible = false;
                            ImgBtn_Override.Visible = false;
                            btnSubmitAndRepeat1.Visible = false;
                            btnSubmitAndRepeat2.Visible = false;
                            btnSubmitAndRepeat3.Visible = false;
                            btnDiscardDatasheet.Visible = false;
                            btnProbe.Visible = false;
                            if (oDS.VTLessonId > 0)
                            {
                                btnSave.Visible = false;
                                btnSave1.Visible = false;
                                LabelvisualToolEdit.Visible = true;
                                LabelvisualToolEdit.Text = "VisualTool Score Editing Is Not Possible..";
                            }
                        }
                        //
                    }
                    //DataTable dtstp = new DataTable();
                    //dtstp = oDS.dtSteps;

                    foreach (GridViewRow grStep in grdDataSht.Rows)
                    {
                        HiddenField hfStepid = (HiddenField)grStep.FindControl("hfSessStepID");
                        string qry = "SELECT Step.Comments StpCmts,Step.SelectedSample,Dtl.StdtSessionStepId,Dtl.DSTempSetColId,Col.ColTypeCd,StepVal,Dtl.SessionStatusCd as SessMisStat,RowNumber,Hdr.Comments,Step.SessionStatusCd FROM StdtSessionStep Step " +
                                "INNER JOIN StdtSessionHdr Hdr ON Hdr.StdtSessionHdrId=Step.StdtSessionHdrId " +
                                "INNER JOIN StdtSessionDtl Dtl INNER JOIN DSTempSetCol Col ON Col.DSTempSetColId=Dtl.DSTempSetColId " +
                                "ON Dtl.StdtSessionStepId=Step.StdtSessionStepId WHERE Hdr.StdtSessionHdrId=" + SessHdrID + " AND Dtl.StdtSessionStepId=" + hfStepid.Value;
                        DataTable dtColmns = oData.ReturnDataTable(qry, false);
                        int statusFlag = 0;
                        if (dtColmns != null)
                        {
                            if (dtColmns.Rows.Count > 0)
                            {

                                CheckBox chkMistrial = (CheckBox)grStep.FindControl("chkMistrial");


                                foreach (DataRow drcolmn in dtColmns.Rows)
                                {
                                    if (oDS.TeachProc == "Match-to-Sample")
                                    {

                                        HiddenField hdfSample = (HiddenField)grStep.FindControl("hfSampleID");
                                        if (printId == 1) hdfSample.Value = "";
                                        else hdfSample.Value = drcolmn["SelectedSample"].ToString();
                                    }

                                    if (drcolmn["SessMisStat"].ToString() == "Y")
                                    {
                                        statusFlag++;

                                    }


                                    if (drcolmn["ColTypeCd"].ToString() == "Duration")
                                    {
                                        HiddenField hfDur = (HiddenField)grStep.FindControl("hfDuration_" + drcolmn["DSTempSetColId"].ToString());
                                        HtmlInputText txtdur = (HtmlInputText)grStep.FindControl("txtDuratn_" + drcolmn["DSTempSetColId"].ToString());
                                        hfDur.Value = drcolmn["StepVal"].ToString();
                                        if (printId == 1) txtdur.Value = "";
                                        else txtdur.Value = drcolmn["StepVal"].ToString();
                                    }
                                    if (drcolmn["ColTypeCd"].ToString() == "Text")
                                    {
                                        TextBox txtText = (TextBox)grStep.FindControl("txtText_" + drcolmn["DSTempSetColId"].ToString());
                                        if (drcolmn["StepVal"].ToString() != "0" && drcolmn["StepVal"].ToString() != "-1")
                                            if (printId == 1) txtText.Text = " ";
                                            else txtText.Text = drcolmn["StepVal"].ToString();

                                        // calculateFormula();
                                    }
                                    if (drcolmn["ColTypeCd"].ToString() == "Frequency")
                                    {
                                        TextBox txtFrq = (TextBox)grStep.FindControl("txtFrequency_" + drcolmn["DSTempSetColId"].ToString());
                                        if (drcolmn["StepVal"].ToString() != "-1")
                                            if (printId == 1) txtFrq.Text = "";
                                            else txtFrq.Text = drcolmn["StepVal"].ToString();
                                    }
                                    if (drcolmn["ColTypeCd"].ToString() == "Prompt")
                                    {
                                        DropDownList ddlPrmpt = (DropDownList)grStep.FindControl("ddlPrompt_" + drcolmn["DSTempSetColId"].ToString());
                                        if (drcolmn["StepVal"].ToString() != "")
                                            if (printId == 1) ddlPrmpt.SelectedValue = "";
                                            else ddlPrmpt.SelectedValue = drcolmn["StepVal"].ToString();
                                    }
                                    if (drcolmn["ColTypeCd"].ToString() == "+/-")
                                    {
                                        HtmlInputRadioButton rdbRespplus = (HtmlInputRadioButton)grStep.FindControl("rdbRespPlus_" + drcolmn["DSTempSetColId"].ToString());
                                        HtmlInputRadioButton rdbRespminus = (HtmlInputRadioButton)grStep.FindControl("rdbRespMinus_" + drcolmn["DSTempSetColId"].ToString());
                                        if (rdbRespplus != null && rdbRespminus != null)
                                        {
                                            if (drcolmn["StepVal"].ToString() != "")
                                            {
                                                if (drcolmn["StepVal"].ToString() == "+")
                                                    if (printId == 1) rdbRespplus.Checked = false;
                                                    else rdbRespplus.Checked = true;
                                                if (drcolmn["StepVal"].ToString() == "-")
                                                    if (printId == 1) rdbRespminus.Checked = false;
                                                    else rdbRespminus.Checked = true;
                                            }
                                        }
                                    }
                                    TextBox txtnotes = (TextBox)grStep.FindControl("txtStepNotes");
                                    if (drcolmn["StpCmts"] != null)
                                        if (printId == 1) txtnotes.Text = " ";
                                        else txtnotes.Text = drcolmn["StpCmts"].ToString();
                                    if (drcolmn["Comments"] != null)
                                        if (printId == 1) txtNote.Text = " ";
                                        else txtNote.Text = drcolmn["Comments"].ToString();
                                }
                                if (statusFlag == dtColmns.Rows.Count)
                                    if (printId == 1) chkMistrial.Checked=false;
                                    else chkMistrial.Checked = true;
                                else
                                    chkMistrial.Checked = false;
                            }
                        }
                    }
                    ScriptManager.RegisterStartupScript(this, this.GetType(), "closewindow", "fillMatchtosapmpleval();", true);

                }
            }
            /// oData.CommitTransation(trans, con);
            //con.Close();
        }
        catch (Exception ex)
        {
            //if (trans != null && trans.Connection.State == ConnectionState.Open)
            //{
            //    oData.RollBackTransation(trans, con);

            //}
            //if (con != null)
            //    con.Close();
            clError.WriteToLog(ex.ToString());
            Response.Redirect("Error.aspx");
        }
    }


    protected void btnIOASelect_Click(object sender, EventArgs e)
    {
        oData = new clsData();

        SqlConnection con = null;
        SqlTransaction trans = null;

        oDS = (clsDataSheet)Session[DatasheetKey];
        try
        {
            if (oDS != null)
            {
                string checkquery = "SELECT StdtSessionHdrID FROM StdtSessionHdr WHERE DSTempHdrId = " + oTemp.TemplateId + " and SessionStatusCd = 'D' and IOAInd = 'Y'"; // ORDER BY StdtSessionHdrId DESC";
                object checkquery_object = oData.FetchValue(checkquery);
                if (checkquery_object == null)
                {
                    generateSheet(true);
                }
                con = oData.Open();
                trans = con.BeginTransaction();

                oSession = (clsSession)Session["UserSession"];
                oTemp = (ClsTemplateSession)Session["BiweeklySession"];
                string sel = "SELECT TOP 1 StdtSessionHdrId, SessionNbr FROM StdtSessionHdr WHERE StudentId=" + oSession.StudentId + " AND SchoolId=" + oSession.SchoolId + " AND DSTempHdrId=" + oTemp.TemplateId + " AND SessionStatusCd='D' AND IsMaintanace ='" + hdn_isMaintainance.Value + "' AND IOAInd='N'";
                DataTable dtHdrs = oData.ReturnDataTable(sel, false);
                if (dtHdrs != null)
                {
                    if (dtHdrs.Rows.Count == 1)
                    {
                        oDS.IOASessHdr = Convert.ToInt32(dtHdrs.Rows[0]["StdtSessionHdrId"].ToString());
                        oDS.SessNbr = Convert.ToInt32(dtHdrs.Rows[0]["SessionNbr"].ToString()) + 1;
                    }
                }

                bool reslt;
                //if (Session["NewTemplateId"] != null)
                //    reslt = SaveDraft("P", "Y", "insert", con, trans);
                //else
                reslt = SaveDraft("D", "Y", "insert", con, trans, true);
                if (reslt)
                {
                    oDS.IOAInd = "Y";
                    bool reslt2 = SaveMeasuremnts(Convert.ToInt32(ViewState["StdtSessHdr"].ToString()), con, trans);
                    if (reslt2) oData.CommitTransation(trans, con);
                    else if (trans.Connection.State == ConnectionState.Open) oData.RollBackTransation(trans, con);

                    con.Close();

                    getStepPrompts();
                    fillStepGrid(oDS.TeachProc, oDS.SkillType, oDS.MatchToSampleType);

                }
                else if (!reslt)
                {
                    checkStat(this, new EventArgs());
                }
                else if (trans.Connection.State == ConnectionState.Open)
                {
                    oData.RollBackTransation(trans, con);
                    con.Close();
                }


            }

            btnSubmitAndRepeat1.Visible = false;
            btnSubmitAndRepeat2.Visible = false;
            btnSubmitAndRepeat3.Visible = false;
            btnDiscardDatasheet.Visible = false;
        }
        catch (Exception ex)
        {
            if (trans != null && trans.Connection.State == ConnectionState.Open)
            {
                oData.RollBackTransation(trans, con);

            }
            if (con != null)
                con.Close();

            ClsErrorLog clError = new ClsErrorLog();
            clError.WriteToLog(ex.ToString());
            throw ex;
        }
    }
    protected void btnNoIOA_Click(object sender, EventArgs e)
    {
        oDS = (clsDataSheet)Session[DatasheetKey];
        if (oDS != null)
        {
            int SessHdrIDNor = Convert.ToInt32(ViewState["StdtSessHdr"].ToString());
            string UpdateNor = "UPDATE StdtSessionHdr SET CreatedBy=" + oSession.LoginId + ",IOAUserId=" + oSession.LoginId + " WHERE StdtSessionHdrId=" + SessHdrIDNor;
            oData.Execute(UpdateNor);

            oDS.IOAInd = "N";
            LoadData(Convert.ToInt32(ViewState["StdtSessHdr"].ToString()), true);
        }
    }

    public int fillTempOverride(int templateId)
    {
        int retValue = 1;
        clsData oData = new clsData();
        ClsTemplateSession oTemp = (ClsTemplateSession)HttpContext.Current.Session["BiweeklySession"];
        string sqlStr = "select * from StdtDSStat where DSTempHdrId = " + templateId;
        DataTable dt = oData.ReturnDataTable(sqlStr, false);
        if (dt != null)
        {
            if (dt.Rows.Count > 0)
            {

                int currSetNumber = (dt.Rows[0]["NextSetNmbr"] != null && dt.Rows[0]["NextSetNmbr"].ToString() != "") ? Convert.ToInt32(dt.Rows[0]["NextSetNmbr"].ToString()) : 0;
                if (currSetNumber > 1)
                {

                    sqlStr = "select DSTempSetId,SetCd,SetName,SortOrder," + dt.Rows[0]["NextSetId"].ToString() + " as currSet, " + currSetNumber + " as currSetNmbr,case when DSTempSetId =" + dt.Rows[0]["NextSetId"].ToString() + " then 'Current Set' else 'Mastered Sets' end as GroupName from DSTempSet where DSTempHdrId=" + oTemp.TemplateId + " AND ActiveInd = 'A' order by DSTempSetId desc";
                   //sqlStr = "select DSTempSetId,SetCd,SetName,SortOrder, " + dt.Rows[0]["NextSetId"].ToString() + " as currSet, " + currSetNumber + " as currSetNmbr from DSTempSet where DSTempHdrId=" + oTemp.TemplateId + " AND ActiveInd = 'A' order by SortOrder";
                    DataSet ds = oData.ReturnDataSet(sqlStr, false);

                    rptr_tempOverride.DataSource = ds;
                    rptr_tempOverride.DataBind();

                    lblDefMsg.Visible = false;
                }
                else
                {
                    rptr_tempOverride.DataSource = null;
                    rptr_tempOverride.DataBind();

                    lblDefMsg.Visible = true;
                    btn_continue.Visible = true;

                    retValue = 0;
                }
            }
            else
            {
                rptr_tempOverride.DataSource = null;
                rptr_tempOverride.DataBind();

                lblDefMsg.Visible = true;
                btn_continue.Visible = true;

                retValue = 0;
            }
        }
        return retValue;
    }

    //protected void grdSteps_RowDataBound(object sender, GridViewRowEventArgs e)
    //{
    //    oDS = (clsDataSheet)Session[DatasheetKey];
    //    DataTable dtColmns = oDS.dtColumns;
    //    if (oDS != null)
    //        if (e.Row.RowType == DataControlRowType.DataRow)
    //        {
    //            if (oDS.MisTrail == true)
    //            {
    //                CheckBox chkMistrial = (CheckBox)e.Row.FindControl("chkMistrial");
    //                chkMistrial.Enabled = true;
    //            }
    //            foreach (DataRow dr in dtColmns.Rows)
    //            {
    //                if (dr["ColTypeCd"].ToString() == "Duration")
    //                {
    //                    var cntrls = e.Row.Controls[4].Controls[1];
    //                    HtmlInputButton btn = (HtmlInputButton)cntrls;
    //                    btn.Disabled = false;
    //                }
    //                if (dr["ColTypeCd"].ToString() == "Text")
    //                {
    //                    TextBox txtText = (TextBox)e.Row.FindControl("txtText");
    //                    txtText.Enabled = true;
    //                }
    //                if (dr["ColTypeCd"].ToString() == "Frequency")
    //                {
    //                    TextBox txtFrq = (TextBox)e.Row.FindControl("txtFrequency");
    //                    txtFrq.Enabled = true;
    //                }
    //                if (dr["ColTypeCd"].ToString() == "Prompt")
    //                {
    //                    DropDownList ddlPrmpt = (DropDownList)e.Row.FindControl("ddlPrompt");
    //                    ddlPrmpt.Enabled = true;
    //                }
    //                if (dr["ColTypeCd"].ToString() == "+/-")
    //                {
    //                    HtmlInputRadioButton rdbRespplus = (HtmlInputRadioButton)e.Row.FindControl("rdbRespPlus");
    //                    HtmlInputRadioButton rdbRespminus = (HtmlInputRadioButton)e.Row.FindControl("rdbRespMinus");
    //                    rdbRespminus.Disabled = false;
    //                    rdbRespplus.Disabled = false;
    //                }
    //                //txtStepNotes
    //            }

    //        }
    //}
    protected void btnSave_Click(object sender, EventArgs e)
    {
        SaveDraft();
        if (Convert.ToBoolean(ViewState["IsHistory"]) == true)
        {
            oDS.VTLessonId = 0;
            //ScriptManager.RegisterStartupScript(this, this.GetType(), "closewindow", "closeIframe1(" + oSession.StudentId + ");", true);
        }

    }

    private void SaveDraft()
    {
        btnSave.Enabled = false;
        btnSave1.Enabled = false;

        SqlConnection con = null;
        SqlTransaction trans = null;
        try
        {
            int sessHdrId1 = Convert.ToInt32(ViewState["StdtSessHdr"]);
            string sqlStr1 = "select SessionStatusCd from StdtSessionHdr where StdtSessionHdrId=" + sessHdrId1;
            oData = new clsData();
            if (updateDraft(Convert.ToInt32(ViewState["StdtSessHdr"]), "Save"))
            {
                con = oData.Open();
                trans = con.BeginTransaction();

                bool reslt2 = SaveMeasuremnts(Convert.ToInt32(ViewState["StdtSessHdr"].ToString()), con, trans);
                if (reslt2)
                {
                    object sesst1 = oData.FetchValue(sqlStr1);
                    if (sesst1.ToString() == "S")
                    {
                        SaveIOAPercentage();
                    }
                    oData.CommitTransation(trans, con);
                    tdMsg.InnerHtml = clsGeneral.sucessMsg("Data Successfully Saved");

                    oDS = (clsDataSheet)Session[DatasheetKey];
                    if (oDS != null)
                        if (oDS.SessionMistrial)
                        {
                            ScriptManager.RegisterStartupScript(this, this.GetType(), "closewindow", "closeIframe1();", true);
                        }
                }
                else
                {
                    oData.RollBackTransation(trans, con);
                    tdMsg.InnerHtml = clsGeneral.failedMsg("Updation Failed");
                }
                con.Close();
            }
            btnSave.Enabled = true;
            btnSave1.Enabled = true;
            // oData.CommitTransation(trans, con);

        }
        catch (Exception ex)
        {
            if (trans != null && trans.Connection.State == ConnectionState.Open)
            {
                oData.RollBackTransation(trans, con);

            }
            if (con != null)
                con.Close();

            ClsErrorLog clError = new ClsErrorLog();
            clError.WriteToLog(ex.ToString());
            throw ex;
        }
    }

    private void SaveIOAPercentage()
    {
        oData = new clsData();
        oSession = (clsSession)Session["UserSession"];
        int sessHdrId = Convert.ToInt32(ViewState["StdtSessHdr"]);
        oDS = (clsDataSheet)Session[DatasheetKey];
        if (oDS.IOAInd == "Y")
        {
            int IOAsesshdrId = Convert.ToInt32(oData.FetchValue("SELECT IOASessionHdrId FROM StdtSessionHdr WHERE StdtSessionHdrId=" + sessHdrId));
            string UpdateIOA = "UPDATE StdtSessionHdr SET EndTs=GETDATE(),SessionStatusCd='S',Comments='" + txtNote.Text.Trim() + "',ModifiedBy=" + oSession.LoginId + ",ModifiedOn=GETDATE() WHERE StdtSessionHdrId=" + sessHdrId;
            int retrn = oData.Execute(UpdateIOA);
            if (retrn > 0)
            {
                updateDatas(sessHdrId);
                oData.ExecuteIOAPercCalculation(IOAsesshdrId, sessHdrId);
            }
            else { tdMsg.InnerHtml = clsGeneral.failedMsg("Submission Failed"); }
        }
    }
    protected void btnSubmit_Click(object sender, EventArgs e)
    {
        SqlConnection con = null;
        SqlTransaction trans = null;
        bool IsMaintanace = false;
        oData = new clsData();
        IsMaintanace = Convert.ToBoolean(hdn_isMaintainance.Value);
        try
        {
            string sqlStr = "select statusMessage from StdtDSStat where DSTempHdrId=" + oTemp.TemplateId;
            if (oData.FetchValue(sqlStr) != null)
            {
                string StatusMessage = oData.FetchValue(sqlStr).ToString();
                if (StatusMessage == "COMPLETED")
                    IsMaintanace = true;

            }
            if (updateDraft(Convert.ToInt32(ViewState["StdtSessHdr"]), "Submit"))
            {
                oSession = (clsSession)Session["UserSession"];
                oTemp = (ClsTemplateSession)HttpContext.Current.Session["BiweeklySession"];
                con = oData.Open();
                trans = con.BeginTransaction();
                bool reslt2 = SaveMeasuremnts(Convert.ToInt32(ViewState["StdtSessHdr"].ToString()), con, trans);
                if (reslt2)
                {
                    oDS = (clsDataSheet)Session[DatasheetKey];
                    int Sessionnbr = Convert.ToInt32(oData.FetchValueTrans("SELECT SessionNbr FROM StdtSessionHdr WHERE StdtSessionHdrId=" + Convert.ToInt32(ViewState["StdtSessHdr"]), trans, con));
                    oDS.SessNbr = Sessionnbr;
                    if (Sessionnbr == 1)
                    {
                        DataTable DTCurrentDtl = oData.ReturnDataTableWithTransaction("SELECT HDR.DSTempHdrId,CASE WHEN ST.SetCd IS NOT NULL THEN 'SET '+ST.SetCd END AS SetName,CASE WHEN STP.SortOrder <>0 THEN 'Step '+CONVERT(VARCHAR(10),STP.SortOrder) END AS StepName,HDR.CurrentStepId,HDR.CurrentPromptId,HDR.LessonPlanId,HDR.CurrentSetId,PT.LookupName AS PromptName FROM StdtSessionHdr HDR LEFT JOIN DSTempSet ST ON HDR.CurrentSetId=ST.DSTempSetId LEFT JOIN DSTempStep STP ON HDR.CurrentStepId=STP.DSTempStepId LEFT JOIN LookUp PT ON HDR.CurrentPromptId=PT.LookupId WHERE StdtSessionHdrId=" + Convert.ToInt32(ViewState["StdtSessHdr"]), con, trans, false);
                        string EvntName = DTCurrentDtl.Rows[0]["SetName"].ToString();
                        string strQuery = "INSERT INTO StdtSessEvent(SchoolId,ClassId,StudentId,DSTempHdrId,EventName,StdtSessEventType,SetId,EvntTs,SessionNbr,EventType,LessonPlanId,TimeStampForReport)VALUES" +
     " (" + oSession.SchoolId + "," + oSession.Classid + "," + oSession.StudentId + "," + DTCurrentDtl.Rows[0]["DSTempHdrId"] + ",'" + EvntName.Replace("'", "''") + "','Major'," + DTCurrentDtl.Rows[0]["CurrentSetId"] + ",GETDATE(),1,'EV', " + DTCurrentDtl.Rows[0]["LessonPlanId"] + ",DATEADD(HH,(SELECT (COUNT(*)+1) FROM StdtSessEvent WHERE CONVERT(DATE,EvntTs)=CONVERT(DATE,GETDATE()) AND " + "SchoolId=" + oSession.SchoolId + " AND StudentId=" + oSession.StudentId + " AND EventType='EV' AND LessonPlanId=" + DTCurrentDtl.Rows[0]["LessonPlanId"] + ")," + "CONVERT(datetime,GETDATE())))";
                        oData.ExecuteWithTrans(strQuery, con, trans);

                        if (Convert.ToString(DTCurrentDtl.Rows[0]["StepName"]) != "")
                        {
                            strQuery = "INSERT INTO StdtSessEvent(SchoolId,ClassId,StudentId,DSTempHdrId,EventName,StdtSessEventType,EvntTs,SessionNbr,EventType,StepId,SetId,LessonPlanId,TimeStampForReport)VALUES" +
    "(" + oSession.SchoolId + "," + oSession.Classid + "," + oSession.StudentId + "," + DTCurrentDtl.Rows[0]["DSTempHdrId"] + ",'" + DTCurrentDtl.Rows[0]["StepName"] + "','Minor'," + "GETDATE(),1,'EV'," + DTCurrentDtl.Rows[0]["CurrentStepId"] + "," + DTCurrentDtl.Rows[0]["CurrentSetId"] + "," + DTCurrentDtl.Rows[0]["LessonPlanId"] + ",DATEADD(HH,(SELECT (COUNT(*)+1) FROM StdtSessEvent WHERE CONVERT(DATE,EvntTs)=CONVERT(DATE,getdate()) AND " + "SchoolId=" + oSession.SchoolId + " AND StudentId=" + oSession.StudentId + " AND EventType='EV' AND LessonPlanId=" + DTCurrentDtl.Rows[0]["LessonPlanId"] + ")," + "CONVERT(datetime,getdate())))";
                            oData.ExecuteWithTrans(strQuery, con, trans);
                        }

                        if (Convert.ToString(DTCurrentDtl.Rows[0]["PromptName"]) != "")
                        {
                            strQuery = "INSERT INTO StdtSessEvent(SchoolId,ClassId,StudentId,DSTempHdrId,EventName,StdtSessEventType,EvntTs,SessionNbr,EventType,SetId,StepId,PromptId,LessonPlanId,TimeStampForReport)VALUES" +
   "(" + oSession.SchoolId + "," + oSession.Classid + "," + oSession.StudentId + "," + DTCurrentDtl.Rows[0]["DSTempHdrId"] + ",'" + DTCurrentDtl.Rows[0]["PromptName"] + "','Minor'," + "GETDATE(),1,'EV'," + DTCurrentDtl.Rows[0]["CurrentSetId"] + "," + DTCurrentDtl.Rows[0]["CurrentStepId"] + "," + DTCurrentDtl.Rows[0]["CurrentPromptId"] + "," + DTCurrentDtl.Rows[0]["LessonPlanId"] + ",DATEADD(HH,(SELECT (COUNT(*)+1) FROM StdtSessEvent WHERE CONVERT(DATE,EvntTs)=CONVERT(DATE,getdate()) AND " + "SchoolId=" + oSession.SchoolId + " AND StudentId=" + oSession.StudentId + " AND EventType='EV' AND LessonPlanId=" + DTCurrentDtl.Rows[0]["LessonPlanId"] + ")," + "getdate()))";
                            oData.ExecuteWithTrans(strQuery, con, trans);
                        }

                        string str1 = "UPDATE StdtSessionHdr SET StartTs = GETDATE() WHERE DSTempHdrId = " + DTCurrentDtl.Rows[0]["DSTempHdrId"] + " AND SessionNbr = 1";
                        oData.ExecuteWithTrans(str1, con, trans);

                    }
                    oDS = (clsDataSheet)Session[DatasheetKey];
                    oData.CommitTransation(trans, con);
                    con.Close();
                    if (!oDS.SessionMistrial)
                    {
                        SaveIOAPercentage();
                        //if (!IsMaintanace)
                        //{
                           // SaveIOAPercentage();
                            string strQry = "SELECT DSTempSetColId,ColName,ColTypeCd from DSTempSetCol WHERE DSTempHdrId=" + oTemp.TemplateId + " And  SchoolId = " + oSession.SchoolId + "  And ActiveInd='A'";
                            DataTable dt = oData.ReturnDataTable(strQry, false);
                            int count = dt.Rows.Count;

                            int measureCount = 0;
                            string sql = " SELECT  Count(Distinct(dc.DSTempSetColId)) FROM DSTempHdr DT " +
                                " INNER JOIN DSTempSetCol DST ON DT.DSTempHdrId = DST.DSTempHdrId " +
                                " INNER JOIN DSTempSetColCalc DC ON DST.DSTempSetColId = DC.DSTempSetColId " +
                                " INNER JOIN DSTempRule DR ON DR.DSTempSetColCalcId = DC.DSTempSetColCalcId " +
                                " WHERE (DT.DSTempHdrId =" + oTemp.TemplateId + ") AND DR.ActiveInd='A' AND DR.IsNA<>1";

                            measureCount = Convert.ToInt32(oData.FetchValue(sql));

                            #region MultiColumn_and_Criteria_Check

                            //int setCriCount = 0;
                            //int stepCriCount = 0;
                            //int promptCriCount = 0;
                            //int criteriaCount = 0;

                            //string sql = " SELECT  Count(DR.RuleType) FROM DSTempHdr DT " +
                            //    " INNER JOIN DSTempSetCol DST ON DT.DSTempHdrId = DST.DSTempHdrId " +
                            //    " INNER JOIN DSTempSetColCalc DC ON DST.DSTempSetColId = DC.DSTempSetColId " +
                            //    " INNER JOIN DSTempRule DR ON DR.DSTempSetColCalcId = DC.DSTempSetColCalcId " +
                            //    " WHERE (DT.DSTempHdrId =" + oTemp.TemplateId + ") AND DR.RuleType='SET' AND DR.ActiveInd='A' AND DR.IsNA<>1";

                            //setCriCount = Convert.ToInt32(oData.FetchValue(sql));

                            //sql = " SELECT  Count(DR.RuleType) FROM DSTempHdr DT " +
                            //    " INNER JOIN DSTempSetCol DST ON DT.DSTempHdrId = DST.DSTempHdrId " +
                            //    " INNER JOIN DSTempSetColCalc DC ON DST.DSTempSetColId = DC.DSTempSetColId " +
                            //    " INNER JOIN DSTempRule DR ON DR.DSTempSetColCalcId = DC.DSTempSetColCalcId " +
                            //    " WHERE (DT.DSTempHdrId =" + oTemp.TemplateId + ") AND DR.RuleType='STEP' AND DR.ActiveInd='A' AND DR.IsNA<>1";

                            //stepCriCount = Convert.ToInt32(oData.FetchValue(sql));

                            //sql = " SELECT  Count(DR.RuleType) FROM DSTempHdr DT " +
                            //    " INNER JOIN DSTempSetCol DST ON DT.DSTempHdrId = DST.DSTempHdrId " +
                            //    " INNER JOIN DSTempSetColCalc DC ON DST.DSTempSetColId = DC.DSTempSetColId " +
                            //    " INNER JOIN DSTempRule DR ON DR.DSTempSetColCalcId = DC.DSTempSetColCalcId " +
                            //    " WHERE (DT.DSTempHdrId =" + oTemp.TemplateId + ") AND DR.RuleType='PROMPT' AND DR.ActiveInd='A' AND DR.IsNA<>1";

                            //promptCriCount = Convert.ToInt32(oData.FetchValue(sql));

                            //if (setCriCount > 1 && (stepCriCount > 0 || promptCriCount > 0))
                            //    criteriaCount = setCriCount;
                            //else if (stepCriCount > 1 && (setCriCount > 0 || promptCriCount > 0))
                            //    criteriaCount = stepCriCount;
                            //else if (promptCriCount > 1 && (setCriCount > 0 || stepCriCount > 0))
                            //    criteriaCount = promptCriCount;

                            #endregion MultiColumn_and_Criteria_Check

                            if (count > 1 && measureCount > 1)
                            {
                                checkScoreMulty(Convert.ToInt32(ViewState["StdtSessHdr"].ToString()));
                            }
                            else
                            {
                                checkScore(Convert.ToInt32(ViewState["StdtSessHdr"].ToString()));
                            }
                        //}

                    }

                    ///save the Drafted IOA session in the maintenance mode
                    ///
                    if (IsMaintanace)
                    {
                        int sessHdrId = Convert.ToInt32(ViewState["StdtSessHdr"]);
                        string strStat = "SELECT SessionStatusCd FROM StdtSessionHdr WHERE StdtSessionHdrId=" + sessHdrId;
                        object objstat = oData.FetchValue(strStat);
                        string strIOA = "SELECT IOAInd FROM StdtSessionHdr WHERE StdtSessionHdrId=" + sessHdrId;
                        object objIOA = oData.FetchValue(strIOA);
                        if (objstat != null && objstat.ToString() == "D" && objIOA.ToString() == "Y")
                        {
                            string UpdateIOA = "UPDATE StdtSessionHdr SET EndTs=GETDATE(),SessionStatusCd='S',Comments='" + txtNote.Text.Trim() + "',ModifiedBy=" + oSession.LoginId + ",ModifiedOn=GETDATE() WHERE StdtSessionHdrId=" + sessHdrId;
                            oData.Execute(UpdateIOA);
                        }
                    }
                    //code_start
                    //delete llKvpSetList[0] and put it in the session
                    //check if llKvpSetList has any value
                    //if yes, call LoadDatasheet(lpId)
                    //else proceed below
                    Hashtable htLpList = (Hashtable)Session["tempOverrideHT"];
                    LinkedList<KeyValuePair<string, Hashtable>> llKvpSetList = new LinkedList<KeyValuePair<string, Hashtable>>();
                    if (htLpList != null)
                    {
                        string lpId = oTemp.TemplateId.ToString();
                        llKvpSetList = (LinkedList<KeyValuePair<string, Hashtable>>)htLpList[lpId];
                        if (llKvpSetList != null)
                        {
                            if (llKvpSetList.Count > 0)
                            {
                                llKvpSetList.RemoveFirst();
                                if (llKvpSetList.Count == 0)
                                {
                                    htLpList.Remove(lpId);
                                }
                            }
                        }
                        Session["tempOverrideHT"] = htLpList;
                    }
                    //code_end
                    //Page.ClientScript.RegisterStartupScript(this.GetType(), "closewindow", "closeIframe();", true);
                    ScriptManager.RegisterStartupScript(this, this.GetType(), "closewindow", "closeIframe1(" + oSession.StudentId + ");", true);
                    Session.Remove(DatasheetKey);
                    //Response.Redirect("Home.aspx?LPid=" + oDS.LessonPlanID);

                    //code_start
                    if (htLpList != null)
                    {
                        if (llKvpSetList != null)
                        {
                            if (llKvpSetList.Count > 0)
                            {
                                Response.Redirect("Datasheet.aspx?pageid=" + oTemp.TemplateId + "&studid=" + oSession.StudentId, false);
                            }
                        }
                    }
                    //code_end
                }
                else
                {
                    oData.RollBackTransation(trans, con);
                    tdMsg.InnerHtml = clsGeneral.failedMsg("Submission Failed");
                }
            }
        }
        catch (Exception ex)
        {
            if (trans != null && trans.Connection.State == ConnectionState.Open)
            {
                oData.RollBackTransation(trans, con);

            }
            if (con != null)
                con.Close();

            ClsErrorLog clError = new ClsErrorLog();
            clError.WriteToLog(ex.ToString());
            ScriptManager.RegisterStartupScript(this, this.GetType(), "closewindow", "closeIframe1(" + oSession.StudentId + ");", true);
        }

        string sqlBnrChk = "SELECT LessonStatusforBanner from DSTempHdr WHERE StudentId= " + oSession.StudentId + " AND DSTempHdrId = " + oTemp.TemplateId;
        string bnrTxt = Convert.ToString(oData.FetchValue(sqlBnrChk));
        LessonBanner.Visible = false;
        if (bnrTxt != "")
        {
            LblBanner.Text = bnrTxt+" – Criteria met, notify supervisor.";
            LessonBanner.Visible = true;
        }
    }
    [System.Web.Services.WebMethod]
    #region comment
    //public static string ScoreForText(string[] txts, string colId)
    //{
    //    clsData oData = new clsData();
    //    clsDataSheet oDS = (clsDataSheet)HttpContext.Current.Session[DatasheetKey];
    //    ClsTemplateSession oTemp = (ClsTemplateSession)HttpContext.Current.Session["BiweeklySession"];
    //    string sqlStr = " SELECT DST.DSTempSetColId,DST.ColName, DC.CalcType,DC.CalcRptLabel,DC.DSTempSetColCalcId,DT.MultiSetsInd, DT.DSTempHdrId FROM DSTempHdr DT" +
    //                                " INNER JOIN DSTempSetCol DST ON DT.DSTempHdrId = DST.DSTempHdrId  " +
    //                                " INNER JOIN DSTempSetColCalc DC ON DST.DSTempSetColId = DC.DSTempSetColId  " +
    //                                " WHERE (DT.DSTempHdrId =" + oTemp.TemplateId + ")";
    //    DataTable dt = oData.ReturnDataTable(sqlStr, false);
    //    int indexi = 0;
    //    int icount = 0;
    //    int count = dt.Rows.Count;
    //    int[] arColcalId = new int[count];
    //    int[] arColId = new int[count];
    //    string[] arColName = new string[oDS.dtColumns.Rows.Count];
    //    string custom = "";
    //    foreach (DataRow dr in dt.Rows)
    //    {
    //        arColcalId[icount] = Convert.ToInt32(dr["DSTempSetColCalcId"]);
    //        if (dr["CalcType"].ToString() == "Customize")
    //        {
    //            custom += dr["CalcRptLabel"].ToString() + "#";
    //        }
    //        icount++;
    //    }
    //    //ViewState["Custom_Formula"] = custom;
    //    int colIndex = 0;
    //    foreach (DataRow dr in oDS.dtColumns.Rows)
    //    {
    //        sqlStr = " select dbo.DSTempSetCol.ColName from DSTempSetCol where DSTempSetCol.DSTempSetColId=" + Convert.ToInt32(dr["DSTempSetColId"].ToString());
    //        arColName[colIndex] = oData.FetchValue(sqlStr).ToString();
    //        colIndex++;
    //    }
    //    string names = "";
    //    float custResult = 0;
    //    string[] sEquation = custom.Split('#');
    //    foreach (var item in sEquation)
    //    {
    //        //Calculate.Calculate oCalc = new Calculate.Calculate();
    //        //if (item != "")
    //        //{
    //        //    PreProcessedExpression expResult = oCalc.PreProcessExpression(item);
    //        //    int expCount = expResult.ColumnDatas.Length;
    //        //    for (int indexj = 0; indexj < expCount; indexj++)
    //        //    {
    //        //        for (int i = 0; i < oDS.dtColumns.Rows.Count; i++)
    //        //        {
    //        //            if (!names.Contains(arColName[i]))
    //        //            {
    //        //                if (arColName[i].ToUpper() == expResult.ColumnDatas[indexj].ColumnName.Trim())
    //        //                {
    //        //                    expResult.ColumnDatas[indexj].Data = new float[oDS.dtSteps.Rows.Count - 1];
    //        //                    names += arColName[i] + ",";
    //        //                    expResult.ColumnDatas[indexj].Data = parseFloat(txts);
    //        //                }
    //        //            }
    //        //        }
    //        //    }



    //        //    if (expResult != null)
    //        //    {
    //        //        string exp = oCalc.CreateExpressionToEvaluate(expResult);
    //        //        string[] tempString = exp.Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);
    //        //        string[] postfixArray = oCalc.InfixToPostfix(tempString);
    //        //        custResult = oCalc.EvaluatePostfix(postfixArray);
    //        //    }
    //        //}
    //    }
    //    return custResult.ToString();
    //}
    // [System.Web.Services.WebMethod]
    #endregion
    private void txtText_TextChanged(object sender, System.EventArgs e)
    {
        oData = new clsData();
        oTemp = (ClsTemplateSession)Session["BiweeklySession"];
        oSession = (clsSession)Session["UserSession"];
        oDS = (clsDataSheet)Session[DatasheetKey];
        if (oSession != null)
        {
            if (oTemp != null)
            {
                if (oDS != null)
                {
                    /*
                     * Creation and insertion to a new Session  
                     */
                    Dictionary<string, string[]> ht = LoadStepVals_toDict();
                    if (ht != null)
                    {


                        string sqlStr = " SELECT DST.DSTempSetColId,DST.ColName, DC.CalcType,DC.CalcRptLabel,DC.CalcFormula,DST.CalcuData,DC.DSTempSetColCalcId,DT.MultiSetsInd, DT.DSTempHdrId FROM DSTempHdr DT" +
                                " INNER JOIN DSTempSetCol DST ON DT.DSTempHdrId = DST.DSTempHdrId  " +
                                " INNER JOIN DSTempSetColCalc DC ON DST.DSTempSetColId = DC.DSTempSetColId  " +
                                " WHERE (DT.DSTempHdrId =" + oTemp.TemplateId + ")";
                        DataTable dt = oData.ReturnDataTable(sqlStr, false);
                        int indexi = 0;
                        int icount = 0;
                        int count = dt.Rows.Count;
                        int[] arColcalId = new int[count];
                        int[] arColId = new int[count];
                        string[] arColName = new string[oDS.dtColumns.Rows.Count];
                        string custom = "";
                        foreach (DataRow dr in dt.Rows)
                        {
                            arColcalId[icount] = Convert.ToInt32(dr["DSTempSetColCalcId"]);
                            if (dr["CalcType"].ToString() == "Customize")
                            {
                                custom += dr["CalcuData"].ToString() + "#";
                            }
                            icount++;
                        }
                        int colIndex = 0;
                        foreach (DataRow dr in oDS.dtColumns.Rows)
                        {
                            sqlStr = " select dbo.DSTempSetCol.ColName from DSTempSetCol where DSTempSetCol.DSTempSetColId=" + Convert.ToInt32(dr["DSTempSetColId"].ToString());
                            arColName[colIndex] = oData.FetchValue(sqlStr).ToString();
                            colIndex++;
                        }
                        string names = "";
                        float custResult = 0;
                        string[] sEquation = custom.Split('#');
                        string colmnId = "", result = "";
                        foreach (var item in sEquation)
                        {
                            Calculate.Calculate oCalc = new Calculate.Calculate();
                            if (item != "")
                            {
                                PreProcessedExpression expResult = oCalc.PreProcessExpression(item);
                                int expCount = expResult.ColumnDatas.Length;
                                for (int indexj = 0; indexj < expCount; indexj++)
                                {
                                    names = "";
                                    for (int i = 0; i < oDS.dtColumns.Rows.Count; i++)
                                    {
                                        if (ht.ContainsKey(oDS.dtColumns.Rows[i]["DSTempSetColId"].ToString()))
                                        {
                                            if (!names.Contains(arColName[i]))
                                            {
                                                if (arColName[i].ToUpper() == expResult.ColumnDatas[indexj].ColumnName.Trim())
                                                {
                                                    expResult.ColumnDatas[indexj].Data = new float[oDS.dtSteps.Rows.Count - 1];
                                                    names += arColName[i] + ",";
                                                    expResult.ColumnDatas[indexj].Data = parseFloat(ht[oDS.dtColumns.Rows[i]["DSTempSetColId"].ToString()]);

                                                    result += oDS.dtColumns.Rows[i]["DSTempSetColId"].ToString() + "*";
                                                }
                                            }
                                        }
                                    }
                                }
                                if (expResult != null)
                                {
                                    string exp = oCalc.CreateExpressionToEvaluate(expResult);
                                    string[] tempString = exp.Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);
                                    string[] postfixArray = oCalc.InfixToPostfix(tempString);
                                    custResult = oCalc.EvaluatePostfix(postfixArray);
                                }
                                result += custResult + "|";
                            }


                        }
                        if (result.Length > 1)
                        {
                            result = result.Substring(0, result.Length - 1);
                        }
                        ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "scoreForText('" + result + "');", true);

                    }
                }
            }
        }
    }


    bool bSetIOA = false;
    bool bPromptIOA = false;
    bool bStepIOA = false;
    int avgDurationId = 0;
    int totDuraionId = 0;
    int freqId = 0;
    int IndeallId = 0;
    int acc_trainId = 0; int iSessionNmbr = 0;
    int colCalId = 0;

    protected void checkScore(int StdtSessHdrId)
    {
        oSession = (clsSession)HttpContext.Current.Session["UserSession"];
        oTemp = (ClsTemplateSession)HttpContext.Current.Session["BiweeklySession"];
        oDS = (clsDataSheet)Session[DatasheetKey];
        oData = new clsData();
        oDisc = new DiscreteSession();

        iSessionNmbr = oDS.SessNbr;
        int studentid = oSession.StudentId;
        int schoolid = oSession.SchoolId;
        //string result = "";
        SqlDataReader reader = null;
        bool bPrompt = false;
        bool bMultyTchr = false;
        bool bIOA = false;
        bool bRuleStatusIOA = false;
        bool bRuleStatusMultiTchr = false;
        bool bPromptMoveupNA = false;
        bool bPromptMovedownNA = false;
        bool bSetPromptMoveupNA = false;
        bool bSetPromptMovedownNA = false;
        bool bStepPromptMoveupNA = false;
        bool bStepPromptMovedownNA = false;
      
        //Input Data

        int sLessonPlanId = 0;
        int iCurrentSetId = 0;
        int iCurrentSetNbr = 0;
        int iCurrentStep = 0;
        string sCurrentPrompt = "";
        string sCurrentLessonPrompt = "";
        string sNextLessonPrompt = "";
        string sLessonPrompt = "";
        bool bPromtHirchy = false;
        bool bSetCompleted = false;
        string sSkillType = "";
        string[] columns = null;
        string[] promptUsed = null;
        string[] LessonpromptUsed = null;
        string[] LessonpromptUsedOther = null;
        #region comment
        //if (oDS.IOAInd == "Y")
        //{
        //    int IOASessHdrId = iSessionNmbr;
        //}
        //else
        {
            //string strQry = " SELECT Hdr.SkillType, ISNULL(MAX(NextSetId),0) NextSetId,ISNULL(MAX(NextSetNmbr),0) NextSetNmbr " +
            //     " ,ISNULL(MAX(NextStepId),0)NextStepId,ISNULL(MAX(NextPromptId),0)NextPromptId" +
            //     " FROM DSTempHdr Hdr LEFT JOIN StdtDSStat Stat  ON Hdr.DSTempHdrId = Stat.DSTempHdrId " +
            //      " WHERE Hdr.DSTempHdrId= " + oTemp.TemplateId + " GROUP BY Hdr.SkillType ";

            //reader = oData.ReturnDataReader(strQry, false);
            //if (reader.Read())
            //{
            //    iCurrentSetId = Convert.ToInt32(reader["NextSetId"]);
            //    iCurrentSetNbr = Convert.ToInt32(reader["NextSetNmbr"]);
            //    iCurrentStep = Convert.ToInt32(reader["NextStepId"]);
            //    sCurrentPrompt = reader["NextPromptId"].ToString();
            //    sSkillType = reader["SkillType"].ToString();
            //}
            //reader.Close();
        #endregion
            DiscreetTrial.InputData discreteInptData = null;
            Chained.InputData chainedInptData = null;
            Chained.InputData chained_nextstep = null; ArrayList Trials = new ArrayList();
            Dictionary<string, DiscreetTrial.InputData> discreteCols = new Dictionary<string, DiscreetTrial.InputData>();
            Dictionary<string, Chained.InputData> chainedCols = new Dictionary<string, Chained.InputData>();
            Hashtable ht = new Hashtable(); ;
            string TargetPrompt = "0";
            string LessonTargetPrompt = "0";
            string prompt = "-,+";

            string prompts = "-,+";
            string strQry = "";
            ResetIOAStatus(oTemp.TemplateId);

            strQry = "SELECT DSTempSetColId,ColName,ColTypeCd from DSTempSetCol WHERE DSTempHdrId=" + oTemp.TemplateId + " And  SchoolId = " + oSession.SchoolId + "  And ActiveInd='A'";
            DataTable dt = oData.ReturnDataTable(strQry, false);
            int count = dt.Rows.Count;
            int index = 0;
            int loop = 0;
            int freqdureloop = 0;
            bool bStepCountCriteria = false;
            int crntPrmtIndex = 0;

            DiscreetTrial.Result[] sesResult = null;
            Chained.Result[] sesResultchain = null;

            columns = new string[count];
            #region moveup_moveback_declaration
            bool bSetMoveUp = true;
            bool bSetMoveBack = true;
            bool bStepMoveUp = true;
            bool bStepMoveBack = true;
            bool bPromptMoveUp = false;
            bool bPromptMoveBack = false;
            bool bDurationMoveUp = true;
            bool bDurationMoveBack = true;
            bool bpromptColumn = false;
            string CompletionStatusSet = "";

            //Liju
            bool bSetMoveUpIOA = false;
            bool bSetMoveUpMultiTecher = false;
            bool bSetMoveDownIOA = false;
            bool bSetMoveDownMultiTecher = false;
            bool bStepMoveUpIOA = false;
            bool bStepMoveUpMultiTecher = false;
            bool bStepMoveDownIOA = false;
            bool bStepMoveDownMultiTecher = false;
            bool bPromptMoveUpIOA = false;
            bool bPromptMoveUpMultiTecher = false;
            bool bPromptMoveDownIOA = false;
            bool bPromptMoveDownMultiTecher = false;
            bool bTotalDurationMoveUpbIOAReqd = false;
            bool bTotalDurationMoveUpbMultiTchr = false;
            bool bTotalDurationMoveDownbIOAReqd = false;
            bool bTotalDurationMoveDownbMultiTchr = false;
            bool bStepTotalDurationMoveUpbIOAReqd = false;
            bool bStepTotalDurationMoveUpbMultiTchr = false;
            bool bStepTotalDurationMoveDownbIOAReqd = false;
            bool bStepTotalDurationMoveDownbMultiTchr = false;
            bool bPromptTotalDurationMoveUpbIOAReqd = false;
            bool bPromptTotalDurationMoveUpbMultiTchr = false;
            bool bPromptTotalDurationMoveDownbIOAReqd = false;
            bool bPromptTotalDurationMoveDownbMultiTchr = false;


            bool bAvgDurationMoveUpbIOAReqd = false;
            bool bAvgDurationMoveUpbMultiTchr = false;
            bool bAvgDurationMoveDownbIOAReqd = false;
            bool bAvgDurationMoveDownbMultiTchr = false;
            bool bStepAvgDurationMoveUpbIOAReqd = false;
            bool bStepAvgDurationMoveUpbMultiTchr = false;
            bool bStepAvgDurationMoveDownbIOAReqd = false;
            bool bStepAvgDurationMoveDownbMultiTchr = false;
            bool bPromptAvgDurationMoveUpbIOAReqd = false;
            bool bPromptAvgDurationMoveUpbMultiTchr = false;
            bool bPromptAvgDurationMoveDownbIOAReqd = false;
            bool bPromptAvgDurationMoveDownbMultiTchr = false;

            bool bFrequencyMoveUpbIOAReqd = false;
            bool bFrequencyMoveUpbMultiTchr = false;
            bool bFrequencyMoveDownbIOAReqd = false;
            bool bFrequencyMoveDownbMultiTchr = false;

            bool bStepFrequencyMoveUpbIOAReqd = false;
            bool bStepFrequencyMoveUpbMultiTchr = false;
            bool bStepFrequencyMoveDownbIOAReqd = false;
            bool bStepFrequencyMoveDownbMultiTchr = false;

            bool bPromptFrequencyMoveUpbIOAReqd = false;
            bool bPromptFrequencyMoveUpbMultiTchr = false;
            bool bPromptFrequencyMoveDownbIOAReqd = false;
            bool bPromptFrequencyMoveDownbMultiTchr = false;

            bool bIndallMoveUpbIOAReqd = false;
            bool bIndallMoveUpbMultiTchr = false;
            bool bIndallMoveDownbIOAReqd = false;
            bool bIndallMoveDownbMultiTchr = false;

            bool bPromptIndallMoveUpbIOAReqd = false;
            bool bPromptIndallMoveUpbMultiTchr = false;
            bool bPromptIndallMoveDownbIOAReqd = false;
            bool bPromptIndallMoveDownbMultiTchr = false;

            bool bCustomMoveupIOA = false;
            bool bCustomMovedownIOA = false;
            bool bCustomMoveupMultiTchr = false;
            bool bCustomMovedownMultiTchr = false;
            bool isColNA = false;
            bool bsetUp = false;
            bool bsetDown = false;
            #endregion
            int nextSet = 0;
            int nextStep = 0;


            bool GlobalSetMoveBack = false;
            bool GlobalSetMoveUp = false;

            foreach (DataRow dr in dt.Rows)
            {
                int set_moveupCount = 0;
                int set_movedownCount = 0;
                int step_moveupCount = 0;
                int step_movedownCount = 0;
                int prompt_moveupCount = 0;
                int prompt_movedownCount = 0;


                //bSetMoveUp = true;
                //bSetMoveBack = true;
                //bPromptMoveUp = true;
                //bPromptMoveBack = true;
                strQry = " SELECT Hdr.SkillType, Hdr.LessonPlanId, ISNULL(MAX(NextSetId),0) NextSetId,ISNULL(MAX(NextSetNmbr),0) NextSetNmbr " +
                 " ,ISNULL(MAX(NextStepId),0)NextStepId,ISNULL(MAX(NextPromptId),0)NextPromptId" +
                 " FROM DSTempHdr Hdr LEFT JOIN StdtDSStat Stat  ON Hdr.DSTempHdrId = Stat.DSTempHdrId " +
                  " WHERE Hdr.DSTempHdrId= " + oTemp.TemplateId + " GROUP BY Hdr.SkillType, Hdr.LessonPlanId ";

                reader = oData.ReturnDataReader(strQry, false);
                if (reader.Read())
                {
                    iCurrentSetId = Convert.ToInt32(reader["NextSetId"]);
                    Session["iCurrentSetId"] = iCurrentSetId;
                    iCurrentSetNbr = Convert.ToInt32(reader["NextSetNmbr"]);
                    iCurrentStep = Convert.ToInt32(reader["NextStepId"]);
                    Session["iCurrentStep"] = iCurrentStep;
                    sCurrentPrompt = reader["NextPromptId"].ToString();
                    sLessonPrompt = reader["NextPromptId"].ToString();
                    Session["sCurrentPrompt"] = sCurrentPrompt;
                    sCurrentLessonPrompt = sCurrentPrompt;
                    sSkillType = reader["SkillType"].ToString();
                    sLessonPlanId = Convert.ToInt32(reader["LessonPlanId"]);
                }
                reader.Close();
                int iColId = Convert.ToInt32(dr["DSTempSetColId"].ToString());
                string sColName = dr["ColName"].ToString();
                string coltypeCode = dr["ColTypeCd"].ToString();
                #region chained
                if (sSkillType == "Chained")
                {
                    //if (chainedInptData == null)
                    chainedInptData = new Chained.InputData();
                    #region setrules
                    Rules TempRules = new Rules();
                    TempRules = GetSetRules(oTemp.TemplateId, iColId);
                    if (TempRules != null)
                    {
                        set_moveupCount = TempRules.moveup;
                        set_movedownCount = TempRules.movedown;
                        if (bsetUp == true || set_moveupCount > 0)
                            bsetUp = true;
                        if (bsetDown == true || set_movedownCount > 0)
                            bsetDown = true;
                        if (TempRules.count > 0)
                        {

                            //Liju
                            bSetMoveUpIOA = bSetMoveUpIOA | TempRules.pctIndMoveUp.bIOARequird | TempRules.pctAccyMoveUp.bIOARequird | TempRules.pctlearnedStepMoveUp.bIOARequird | TempRules.Set_ExcludeCrntStepMoveUp.bIOARequird;
                            bSetMoveUpMultiTecher = bSetMoveUpMultiTecher | TempRules.pctIndMoveUp.bMultiTeacherRequired | TempRules.pctAccyMoveUp.bMultiTeacherRequired | TempRules.pctlearnedStepMoveUp.bMultiTeacherRequired | TempRules.Set_ExcludeCrntStepMoveUp.bMultiTeacherRequired;
                            bSetMoveDownIOA = bSetMoveDownIOA | TempRules.pctIndMoveDown.bIOARequird | TempRules.pctAccyMoveDown.bIOARequird | TempRules.pctlearnedStepMoveDown.bIOARequird | TempRules.Set_ExcludeCrntStepMoveDown.bIOARequird;
                            bSetMoveDownMultiTecher = bSetMoveDownMultiTecher | TempRules.pctIndMoveDown.bMultiTeacherRequired | TempRules.pctAccyMoveDown.bMultiTeacherRequired | TempRules.pctlearnedStepMoveDown.bMultiTeacherRequired | TempRules.Set_ExcludeCrntStepMoveDown.bMultiTeacherRequired;


                            chainedInptData.PercentAccuracy.BarCondition = TempRules.pctAccyMoveUp.iScoreRequired;
                            chainedInptData.PercentAccuracy.ConsecutiveSuccess = TempRules.pctAccyMoveUp.bConsequetiveIndex;
                            chainedInptData.PercentAccuracy.TotalTrial = TempRules.pctAccyMoveUp.iTotalInstance;
                            chainedInptData.PercentAccuracy.SuccessNeeded = TempRules.pctAccyMoveUp.iTotalCorrectInstance;
                            chainedInptData.PercentAccuracy.bIOAReqd = TempRules.pctAccyMoveUp.bIOARequird;
                            chainedInptData.PercentAccuracy.bMultiTchr = TempRules.pctAccyMoveUp.bMultiTeacherRequired;
							chainedInptData.PercentAccuracy.ConsecutiveAverage = TempRules.pctAccyMoveUp.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                            chainedInptData.PercentAccuracy.ConsecutiveAverageValue = TempRules.pctAccyMoveUp.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//



                            chainedInptData.IncludeMistrials = TempRules.bIncludeMisTrail;

                            chainedInptData.PercentIndependence.BarCondition = TempRules.pctIndMoveUp.iScoreRequired;
                            chainedInptData.PercentIndependence.ConsecutiveSuccess = TempRules.pctIndMoveUp.bConsequetiveIndex;
                            chainedInptData.PercentIndependence.TotalTrial = TempRules.pctIndMoveUp.iTotalInstance;
                            chainedInptData.PercentIndependence.SuccessNeeded = TempRules.pctIndMoveUp.iTotalCorrectInstance;
                            chainedInptData.PercentIndependence.bIOAReqd = TempRules.pctIndMoveUp.bIOARequird;
                            chainedInptData.PercentIndependence.bMultiTchr = TempRules.pctIndMoveUp.bMultiTeacherRequired;
                            chainedInptData.PercentIndependence.ConsecutiveAverage = TempRules.pctIndMoveUp.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                            chainedInptData.PercentIndependence.ConsecutiveAverageValue = TempRules.pctIndMoveUp.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                            chainedInptData.MoveBackPercentAccuracy.BarCondition = TempRules.pctAccyMoveDown.iScoreRequired;
                            chainedInptData.MoveBackPercentAccuracy.ConsecutiveFailures = TempRules.pctAccyMoveDown.bConsequetiveIndex;
                            chainedInptData.MoveBackPercentAccuracy.TotalTrial = TempRules.pctAccyMoveDown.iTotalInstance;
                            chainedInptData.MoveBackPercentAccuracy.FailureNeeded = TempRules.pctAccyMoveDown.iTotalCorrectInstance;
                            chainedInptData.MoveBackPercentAccuracy.bIOAReqd = TempRules.pctAccyMoveDown.bIOARequird;
                            chainedInptData.MoveBackPercentAccuracy.bMultiTchr = TempRules.pctAccyMoveDown.bMultiTeacherRequired;
							chainedInptData.MoveBackPercentAccuracy.ConsecutiveAverageFailure = TempRules.pctAccyMoveDown.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                            chainedInptData.MoveBackPercentAccuracy.ConsecutiveAverageFailValue = TempRules.pctAccyMoveDown.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                            chainedInptData.CustomPercent.BarCondition = TempRules.pctCustomMoveUp.iScoreRequired;
                            chainedInptData.CustomPercent.ConsecutiveSuccess = TempRules.pctCustomMoveUp.bConsequetiveIndex;
                            chainedInptData.CustomPercent.TotalTrial = TempRules.pctCustomMoveUp.iTotalInstance;
                            chainedInptData.CustomPercent.SuccessNeeded = TempRules.pctCustomMoveUp.iTotalCorrectInstance;
                            chainedInptData.CustomPercent.bIOAReqd = TempRules.pctCustomMoveUp.bIOARequird;
                            chainedInptData.CustomPercent.bMultiTchr = TempRules.pctCustomMoveUp.bMultiTeacherRequired;
                            chainedInptData.CustomPercent.ConsecutiveAverage = TempRules.pctCustomMoveUp.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                            chainedInptData.CustomPercent.ConsecutiveAverageValue = TempRules.pctCustomMoveUp.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                            chainedInptData.MoveBackCustom.BarCondition = TempRules.pctCustomMoveDown.iScoreRequired;
                            chainedInptData.MoveBackCustom.ConsecutiveFailures = TempRules.pctCustomMoveDown.bConsequetiveIndex;
                            chainedInptData.MoveBackCustom.TotalTrial = TempRules.pctCustomMoveDown.iTotalInstance;
                            chainedInptData.MoveBackCustom.FailureNeeded = TempRules.pctCustomMoveDown.iTotalCorrectInstance;
                            chainedInptData.MoveBackCustom.bIOAReqd = TempRules.pctCustomMoveDown.bIOARequird;
                            chainedInptData.MoveBackCustom.bMultiTchr = TempRules.pctCustomMoveDown.bMultiTeacherRequired;
                            chainedInptData.MoveBackCustom.ConsecutiveAverageFailure = TempRules.pctCustomMoveDown.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                            chainedInptData.MoveBackCustom.ConsecutiveAverageFailValue = TempRules.pctCustomMoveDown.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                            chainedInptData.MoveBackPercentIndependence.BarCondition = TempRules.pctIndMoveDown.iScoreRequired;
                            chainedInptData.MoveBackPercentIndependence.ConsecutiveFailures = TempRules.pctIndMoveDown.bConsequetiveIndex;
                            chainedInptData.MoveBackPercentIndependence.TotalTrial = TempRules.pctIndMoveDown.iTotalInstance;
                            chainedInptData.MoveBackPercentIndependence.FailureNeeded = TempRules.pctIndMoveDown.iTotalCorrectInstance;
                            chainedInptData.MoveBackPercentIndependence.bIOAReqd = TempRules.pctIndMoveDown.bIOARequird;
                            chainedInptData.MoveBackPercentIndependence.bMultiTchr = TempRules.pctIndMoveDown.bMultiTeacherRequired;
                            chainedInptData.MoveBackPercentIndependence.ConsecutiveAverageFailure = TempRules.pctIndMoveDown.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                            chainedInptData.MoveBackPercentIndependence.ConsecutiveAverageFailValue = TempRules.pctIndMoveDown.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                            chainedInptData.PercentAllIndependence.BarCondition = TempRules.pctIndAllMoveUp.iScoreRequired;
                            chainedInptData.PercentAllIndependence.ConsecutiveSuccess = TempRules.pctIndAllMoveUp.bConsequetiveIndex;
                            chainedInptData.PercentAllIndependence.TotalTrial = TempRules.pctIndAllMoveUp.iTotalInstance;
                            chainedInptData.PercentAllIndependence.SuccessNeeded = TempRules.pctIndAllMoveUp.iTotalCorrectInstance;
                            chainedInptData.PercentAllIndependence.bIOAReqd = TempRules.pctIndAllMoveUp.bIOARequird;
                            chainedInptData.PercentAllIndependence.bMultiTchr = TempRules.pctIndAllMoveUp.bMultiTeacherRequired;
                            chainedInptData.PercentAllIndependence.ConsecutiveAverage = TempRules.pctIndAllMoveUp.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                            chainedInptData.PercentAllIndependence.ConsecutiveAverageValue = TempRules.pctIndAllMoveUp.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                            chainedInptData.MoveBackPercentAllIndependence.BarCondition = TempRules.pctIndAllMoveDown.iScoreRequired;
                            chainedInptData.MoveBackPercentAllIndependence.ConsecutiveFailures = TempRules.pctIndAllMoveDown.bConsequetiveIndex;
                            chainedInptData.MoveBackPercentAllIndependence.TotalTrial = TempRules.pctIndAllMoveDown.iTotalInstance;
                            chainedInptData.MoveBackPercentAllIndependence.FailureNeeded = TempRules.pctIndAllMoveDown.iTotalCorrectInstance;
                            chainedInptData.MoveBackPercentAllIndependence.bIOAReqd = TempRules.pctIndAllMoveDown.bIOARequird;
                            chainedInptData.MoveBackPercentAllIndependence.bMultiTchr = TempRules.pctIndAllMoveDown.bMultiTeacherRequired;
                            chainedInptData.MoveBackPercentAllIndependence.ConsecutiveAverageFailure = TempRules.pctIndAllMoveDown.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                            chainedInptData.MoveBackPercentAllIndependence.ConsecutiveAverageFailValue = TempRules.pctIndAllMoveDown.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                            chainedInptData.AvgDurationMoveUp.BarCondition = TempRules.pctAvgDurationMoveUp.iScoreRequired;
                            chainedInptData.AvgDurationMoveUp.ConsecutiveSuccess = TempRules.pctAvgDurationMoveUp.bConsequetiveIndex;
                            chainedInptData.AvgDurationMoveUp.TotalTrial = TempRules.pctAvgDurationMoveUp.iTotalInstance;
                            chainedInptData.AvgDurationMoveUp.SuccessNeeded = TempRules.pctAvgDurationMoveUp.iTotalCorrectInstance;
                            chainedInptData.AvgDurationMoveUp.bIOAReqd = TempRules.pctAvgDurationMoveUp.bIOARequird;
                            chainedInptData.AvgDurationMoveUp.bMultiTchr = TempRules.pctAvgDurationMoveUp.bMultiTeacherRequired;
                            chainedInptData.AvgDurationMoveUp.ConsecutiveAverage = TempRules.pctAvgDurationMoveUp.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                            chainedInptData.AvgDurationMoveUp.ConsecutiveAverageValue = TempRules.pctAvgDurationMoveUp.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                            chainedInptData.TotalDurationMoveUp.BarCondition = TempRules.pctTotalDurationMoveUp.iScoreRequired;
                            chainedInptData.TotalDurationMoveUp.ConsecutiveSuccess = TempRules.pctTotalDurationMoveUp.bConsequetiveIndex;
                            chainedInptData.TotalDurationMoveUp.TotalTrial = TempRules.pctTotalDurationMoveUp.iTotalInstance;
                            chainedInptData.TotalDurationMoveUp.SuccessNeeded = TempRules.pctTotalDurationMoveUp.iTotalCorrectInstance;
                            chainedInptData.TotalDurationMoveUp.bIOAReqd = TempRules.pctTotalDurationMoveUp.bIOARequird;
                            chainedInptData.TotalDurationMoveUp.bMultiTchr = TempRules.pctTotalDurationMoveUp.bMultiTeacherRequired;
                            chainedInptData.TotalDurationMoveUp.ConsecutiveAverage = TempRules.pctTotalDurationMoveUp.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                            chainedInptData.TotalDurationMoveUp.ConsecutiveAverageValue = TempRules.pctTotalDurationMoveUp.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                            chainedInptData.FrequencyMoveUp.BarCondition = TempRules.pctFrequencyMoveUp.iScoreRequired;
                            chainedInptData.FrequencyMoveUp.ConsecutiveSuccess = TempRules.pctFrequencyMoveUp.bConsequetiveIndex;
                            chainedInptData.FrequencyMoveUp.TotalTrial = TempRules.pctFrequencyMoveUp.iTotalInstance;
                            chainedInptData.FrequencyMoveUp.SuccessNeeded = TempRules.pctFrequencyMoveUp.iTotalCorrectInstance;
                            chainedInptData.FrequencyMoveUp.bIOAReqd = TempRules.pctFrequencyMoveUp.bIOARequird;
                            chainedInptData.FrequencyMoveUp.bMultiTchr = TempRules.pctFrequencyMoveUp.bMultiTeacherRequired;
                            chainedInptData.FrequencyMoveUp.ConsecutiveAverage = TempRules.pctFrequencyMoveUp.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                            chainedInptData.FrequencyMoveUp.ConsecutiveAverageValue = TempRules.pctFrequencyMoveUp.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                            chainedInptData.AvgDurationMoveDown.BarCondition = TempRules.pctAvgDurationMoveDown.iScoreRequired;
                            chainedInptData.AvgDurationMoveDown.ConsecutiveFailures = TempRules.pctAvgDurationMoveDown.bConsequetiveIndex;
                            chainedInptData.AvgDurationMoveDown.TotalTrial = TempRules.pctAvgDurationMoveDown.iTotalInstance;
                            chainedInptData.AvgDurationMoveDown.FailureNeeded = TempRules.pctAvgDurationMoveDown.iTotalCorrectInstance;
                            chainedInptData.AvgDurationMoveDown.bIOAReqd = TempRules.pctAvgDurationMoveDown.bIOARequird;
                            chainedInptData.AvgDurationMoveDown.bMultiTchr = TempRules.pctAvgDurationMoveDown.bMultiTeacherRequired;
                            chainedInptData.AvgDurationMoveDown.ConsecutiveAverageFailure = TempRules.pctAvgDurationMoveDown.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                            chainedInptData.AvgDurationMoveDown.ConsecutiveAverageFailValue = TempRules.pctAvgDurationMoveDown.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                            chainedInptData.TotalDurationMoveDown.BarCondition = TempRules.pctTotalDurationMoveDown.iScoreRequired;
                            chainedInptData.TotalDurationMoveDown.ConsecutiveFailures = TempRules.pctTotalDurationMoveDown.bConsequetiveIndex;
                            chainedInptData.TotalDurationMoveDown.TotalTrial = TempRules.pctTotalDurationMoveDown.iTotalInstance;
                            chainedInptData.TotalDurationMoveDown.FailureNeeded = TempRules.pctTotalDurationMoveDown.iTotalCorrectInstance;
                            chainedInptData.TotalDurationMoveDown.bIOAReqd = TempRules.pctTotalDurationMoveDown.bIOARequird;
                            chainedInptData.TotalDurationMoveDown.bMultiTchr = TempRules.pctTotalDurationMoveDown.bMultiTeacherRequired;
                            chainedInptData.TotalDurationMoveDown.ConsecutiveAverageFailure = TempRules.pctTotalDurationMoveDown.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                            chainedInptData.TotalDurationMoveDown.ConsecutiveAverageFailValue = TempRules.pctTotalDurationMoveDown.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                            chainedInptData.FrequencyMoveDown.BarCondition = TempRules.pctFrequencyMoveDown.iScoreRequired;
                            chainedInptData.FrequencyMoveDown.ConsecutiveFailures = TempRules.pctFrequencyMoveDown.bConsequetiveIndex;
                            chainedInptData.FrequencyMoveDown.TotalTrial = TempRules.pctFrequencyMoveDown.iTotalInstance;
                            chainedInptData.FrequencyMoveDown.FailureNeeded = TempRules.pctFrequencyMoveDown.iTotalCorrectInstance;
                            chainedInptData.FrequencyMoveDown.bIOAReqd = TempRules.pctFrequencyMoveDown.bIOARequird;
                            chainedInptData.FrequencyMoveDown.bMultiTchr = TempRules.pctFrequencyMoveDown.bMultiTeacherRequired;
                            chainedInptData.FrequencyMoveDown.ConsecutiveAverageFailure = TempRules.pctFrequencyMoveDown.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                            chainedInptData.FrequencyMoveDown.ConsecutiveAverageFailValue = TempRules.pctFrequencyMoveDown.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                            chainedInptData.SetLearnedStepMoveUp.BarCondition = TempRules.pctlearnedStepMoveUp.iScoreRequired;
                            chainedInptData.SetLearnedStepMoveUp.ConsecutiveSuccess = TempRules.pctlearnedStepMoveUp.bConsequetiveIndex;
                            chainedInptData.SetLearnedStepMoveUp.TotalTrial = TempRules.pctlearnedStepMoveUp.iTotalInstance;
                            chainedInptData.SetLearnedStepMoveUp.SuccessNeeded = TempRules.pctlearnedStepMoveUp.iTotalCorrectInstance;
                            chainedInptData.SetLearnedStepMoveUp.bIOAReqd = TempRules.pctlearnedStepMoveUp.bIOARequird;
                            chainedInptData.SetLearnedStepMoveUp.bMultiTchr = TempRules.pctlearnedStepMoveUp.bMultiTeacherRequired;
                            chainedInptData.SetLearnedStepMoveUp.ConsecutiveAverage = TempRules.pctlearnedStepMoveUp.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                            chainedInptData.SetLearnedStepMoveUp.ConsecutiveAverageValue = TempRules.pctlearnedStepMoveUp.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                            chainedInptData.SetLearnedStepMoveBack.BarCondition = TempRules.pctlearnedStepMoveDown.iScoreRequired;
                            chainedInptData.SetLearnedStepMoveBack.ConsecutiveFailures = TempRules.pctlearnedStepMoveDown.bConsequetiveIndex;
                            chainedInptData.SetLearnedStepMoveBack.TotalTrial = TempRules.pctlearnedStepMoveDown.iTotalInstance;
                            chainedInptData.SetLearnedStepMoveBack.FailureNeeded = TempRules.pctlearnedStepMoveDown.iTotalCorrectInstance;
                            chainedInptData.SetLearnedStepMoveBack.bIOAReqd = TempRules.pctlearnedStepMoveDown.bIOARequird;
                            chainedInptData.SetLearnedStepMoveBack.bMultiTchr = TempRules.pctlearnedStepMoveDown.bMultiTeacherRequired;
                            chainedInptData.SetLearnedStepMoveBack.ConsecutiveAverageFailure = TempRules.pctlearnedStepMoveDown.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                            chainedInptData.SetLearnedStepMoveBack.ConsecutiveAverageFailValue = TempRules.pctlearnedStepMoveDown.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                            chainedInptData.SetExcludeCrntStepMoveUp.BarCondition = TempRules.Set_ExcludeCrntStepMoveUp.iScoreRequired;
                            chainedInptData.SetExcludeCrntStepMoveUp.ConsecutiveSuccess = TempRules.Set_ExcludeCrntStepMoveUp.bConsequetiveIndex;
                            chainedInptData.SetExcludeCrntStepMoveUp.TotalTrial = TempRules.Set_ExcludeCrntStepMoveUp.iTotalInstance;
                            chainedInptData.SetExcludeCrntStepMoveUp.SuccessNeeded = TempRules.Set_ExcludeCrntStepMoveUp.iTotalCorrectInstance;
                            chainedInptData.SetExcludeCrntStepMoveUp.bIOAReqd = TempRules.Set_ExcludeCrntStepMoveUp.bIOARequird;
                            chainedInptData.SetExcludeCrntStepMoveUp.bMultiTchr = TempRules.Set_ExcludeCrntStepMoveUp.bMultiTeacherRequired;
                            chainedInptData.SetExcludeCrntStepMoveUp.ConsecutiveAverage = TempRules.Set_ExcludeCrntStepMoveUp.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                            chainedInptData.SetExcludeCrntStepMoveUp.ConsecutiveAverageValue = TempRules.Set_ExcludeCrntStepMoveUp.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                            chainedInptData.SetExcludeCrntStepMoveBack.BarCondition = TempRules.Set_ExcludeCrntStepMoveDown.iScoreRequired;
                            chainedInptData.SetExcludeCrntStepMoveBack.ConsecutiveFailures = TempRules.Set_ExcludeCrntStepMoveDown.bConsequetiveIndex;
                            chainedInptData.SetExcludeCrntStepMoveBack.TotalTrial = TempRules.Set_ExcludeCrntStepMoveDown.iTotalInstance;
                            chainedInptData.SetExcludeCrntStepMoveBack.FailureNeeded = TempRules.Set_ExcludeCrntStepMoveDown.iTotalCorrectInstance;
                            chainedInptData.SetExcludeCrntStepMoveBack.bIOAReqd = TempRules.Set_ExcludeCrntStepMoveDown.bIOARequird;
                            chainedInptData.SetExcludeCrntStepMoveBack.bMultiTchr = TempRules.Set_ExcludeCrntStepMoveDown.bMultiTeacherRequired;
                            chainedInptData.SetExcludeCrntStepMoveBack.ConsecutiveAverageFailure = TempRules.Set_ExcludeCrntStepMoveDown.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                            chainedInptData.SetExcludeCrntStepMoveBack.ConsecutiveAverageFailValue = TempRules.Set_ExcludeCrntStepMoveDown.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                            chainedInptData.SetTotalCorrectMoveUp.BarCondition = TempRules.pctTotalCorrectMoveUp.iScoreRequired;
                            chainedInptData.SetTotalCorrectMoveUp.ConsecutiveSuccess = TempRules.pctTotalCorrectMoveUp.bConsequetiveIndex;
                            chainedInptData.SetTotalCorrectMoveUp.TotalTrial = TempRules.pctTotalCorrectMoveUp.iTotalInstance;
                            chainedInptData.SetTotalCorrectMoveUp.SuccessNeeded = TempRules.pctTotalCorrectMoveUp.iTotalCorrectInstance;
                            chainedInptData.SetTotalCorrectMoveUp.bIOAReqd = TempRules.pctTotalCorrectMoveUp.bIOARequird;
                            chainedInptData.SetTotalCorrectMoveUp.bMultiTchr = TempRules.pctTotalCorrectMoveUp.bMultiTeacherRequired;
                            chainedInptData.SetTotalCorrectMoveUp.ConsecutiveAverage = TempRules.pctTotalCorrectMoveUp.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                            chainedInptData.SetTotalCorrectMoveUp.ConsecutiveAverageValue = TempRules.pctTotalCorrectMoveUp.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                            chainedInptData.SetTotalCorrectMoveBack.BarCondition = TempRules.pctTotalCorrectMoveDown.iScoreRequired;
                            chainedInptData.SetTotalCorrectMoveBack.ConsecutiveFailures = TempRules.pctTotalCorrectMoveDown.bConsequetiveIndex;
                            chainedInptData.SetTotalCorrectMoveBack.TotalTrial = TempRules.pctTotalCorrectMoveDown.iTotalInstance;
                            chainedInptData.SetTotalCorrectMoveBack.FailureNeeded = TempRules.pctTotalCorrectMoveDown.iTotalCorrectInstance;
                            chainedInptData.SetTotalCorrectMoveBack.bIOAReqd = TempRules.pctTotalCorrectMoveDown.bIOARequird;
                            chainedInptData.SetTotalCorrectMoveBack.bMultiTchr = TempRules.pctTotalCorrectMoveDown.bMultiTeacherRequired;
                            chainedInptData.SetTotalCorrectMoveBack.ConsecutiveAverageFailure = TempRules.pctTotalCorrectMoveDown.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                            chainedInptData.SetTotalCorrectMoveBack.ConsecutiveAverageFailValue = TempRules.pctTotalCorrectMoveDown.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                            chainedInptData.SetTotalIncorrectMoveBack.BarCondition = TempRules.pctTotalIncorrectMoveDown.iScoreRequired;
                            chainedInptData.SetTotalIncorrectMoveBack.ConsecutiveFailures = TempRules.pctTotalIncorrectMoveDown.bConsequetiveIndex;
                            chainedInptData.SetTotalIncorrectMoveBack.TotalTrial = TempRules.pctTotalIncorrectMoveDown.iTotalInstance;
                            chainedInptData.SetTotalIncorrectMoveBack.FailureNeeded = TempRules.pctTotalIncorrectMoveDown.iTotalCorrectInstance;
                            chainedInptData.SetTotalIncorrectMoveBack.bIOAReqd = TempRules.pctTotalIncorrectMoveDown.bIOARequird;
                            chainedInptData.SetTotalIncorrectMoveBack.bMultiTchr = TempRules.pctTotalIncorrectMoveDown.bMultiTeacherRequired;
                            chainedInptData.SetTotalIncorrectMoveBack.ConsecutiveAverageFailure = TempRules.pctTotalIncorrectMoveDown.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                            chainedInptData.SetTotalIncorrectMoveBack.ConsecutiveAverageFailValue = TempRules.pctTotalIncorrectMoveDown.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                            //chainedInptData.IOARequired = TempRules.bIOARequird;
                            //chainedInptData.MultiTeacherRequired = TempRules.bMultiTeacherRequired;
                            getPromptNA(oTemp.TemplateId, Convert.ToInt32(dr["DSTempSetColId"].ToString()), TempRules);
                            if (!bSetPromptMoveupNA)
                            {
                                bSetPromptMoveupNA = TempRules.NAPromptMoveup;
                            }
                            if (!bSetPromptMovedownNA)
                            {
                                bSetPromptMovedownNA = TempRules.NAPromptMoveDown;
                            }

                        }
                    }
                    #endregion
                    #region promptrules
                    TempRules = new Rules();
                    TempRules = GetPromptRules(oTemp.TemplateId, Convert.ToInt32(dr["DSTempSetColId"].ToString()));

                    if (TempRules != null)
                    {
                        prompt_moveupCount = TempRules.moveup;
                        prompt_movedownCount = TempRules.movedown;
                        if (TempRules.count > 0)
                        {
                            bPrompt = true;
                            chainedInptData.PromptHirecharchy = true;
                            //Liju
                            bPromptMoveUpIOA = bPromptMoveUpIOA | TempRules.pctIndMoveUp.bIOARequird | TempRules.pctAccyMoveUp.bIOARequird | TempRules.pctlearnedStepMoveUp.bIOARequird | TempRules.PromptExcludeCrntStepMoveUp.bIOARequird;
                            bPromptMoveUpMultiTecher = bPromptMoveUpMultiTecher | TempRules.pctIndMoveUp.bMultiTeacherRequired | TempRules.pctAccyMoveUp.bMultiTeacherRequired | TempRules.pctlearnedStepMoveUp.bMultiTeacherRequired | TempRules.PromptExcludeCrntStepMoveUp.bMultiTeacherRequired;
                            bPromptMoveDownIOA = bPromptMoveDownIOA | TempRules.pctIndMoveDown.bIOARequird | TempRules.pctAccyMoveDown.bIOARequird | TempRules.pctlearnedStepMoveDown.bIOARequird | TempRules.PromptExcludeCrntStepMoveDown.bIOARequird;
                            bPromptMoveDownMultiTecher = bPromptMoveDownMultiTecher | TempRules.pctIndMoveDown.bMultiTeacherRequired | TempRules.pctAccyMoveDown.bMultiTeacherRequired | TempRules.pctlearnedStepMoveDown.bMultiTeacherRequired | TempRules.PromptExcludeCrntStepMoveDown.bMultiTeacherRequired;


                            chainedInptData.PromptPercentAccuracy.BarCondition = TempRules.pctAccyMoveUp.iScoreRequired;
                            chainedInptData.PromptPercentAccuracy.ConsecutiveSuccess = TempRules.pctAccyMoveUp.bConsequetiveIndex;
                            chainedInptData.PromptPercentAccuracy.TotalTrial = TempRules.pctAccyMoveUp.iTotalInstance;
                            chainedInptData.PromptPercentAccuracy.SuccessNeeded = TempRules.pctAccyMoveUp.iTotalCorrectInstance;
                            chainedInptData.PromptPercentAccuracy.bIOAReqd = TempRules.pctAccyMoveUp.bIOARequird;
                            chainedInptData.PromptPercentAccuracy.bMultiTchr = TempRules.pctAccyMoveUp.bMultiTeacherRequired;
                            chainedInptData.PromptPercentAccuracy.ConsecutiveAverage = TempRules.pctAccyMoveUp.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                            chainedInptData.PromptPercentAccuracy.ConsecutiveAverageValue = TempRules.pctAccyMoveUp.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//
                            
                            chainedInptData.IncludeMistrials = TempRules.bIncludeMisTrail;

                            chainedInptData.PromptPercentIndependence.BarCondition = TempRules.pctIndMoveUp.iScoreRequired;
                            chainedInptData.PromptPercentIndependence.ConsecutiveSuccess = TempRules.pctIndMoveUp.bConsequetiveIndex;
                            chainedInptData.PromptPercentIndependence.TotalTrial = TempRules.pctIndMoveUp.iTotalInstance;
                            chainedInptData.PromptPercentIndependence.SuccessNeeded = TempRules.pctIndMoveUp.iTotalCorrectInstance;
                            chainedInptData.PromptPercentIndependence.bIOAReqd = TempRules.pctIndMoveUp.bIOARequird;
                            chainedInptData.PromptPercentIndependence.bMultiTchr = TempRules.pctIndMoveUp.bMultiTeacherRequired;
                            chainedInptData.PromptPercentIndependence.ConsecutiveAverage = TempRules.pctIndMoveUp.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                            chainedInptData.PromptPercentIndependence.ConsecutiveAverageValue = TempRules.pctIndMoveUp.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                            chainedInptData.MoveBackPromptPercentAccuracy.BarCondition = TempRules.pctAccyMoveDown.iScoreRequired;
                            chainedInptData.MoveBackPromptPercentAccuracy.ConsecutiveFailures = TempRules.pctAccyMoveDown.bConsequetiveIndex;
                            chainedInptData.MoveBackPromptPercentAccuracy.TotalTrial = TempRules.pctAccyMoveDown.iTotalInstance;
                            chainedInptData.MoveBackPromptPercentAccuracy.FailureNeeded = TempRules.pctAccyMoveDown.iTotalCorrectInstance;
                            chainedInptData.MoveBackPromptPercentAccuracy.bIOAReqd = TempRules.pctAccyMoveDown.bIOARequird;
                            chainedInptData.MoveBackPromptPercentAccuracy.bMultiTchr = TempRules.pctAccyMoveDown.bMultiTeacherRequired;
							chainedInptData.MoveBackPromptPercentAccuracy.ConsecutiveAverageFailure = TempRules.pctAccyMoveDown.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                            chainedInptData.MoveBackPromptPercentAccuracy.ConsecutiveAverageFailValue = TempRules.pctAccyMoveDown.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//
                            
                            chainedInptData.MoveBackPromptPercentIndependence.BarCondition = TempRules.pctIndMoveDown.iScoreRequired;
                            chainedInptData.MoveBackPromptPercentIndependence.ConsecutiveFailures = TempRules.pctIndMoveDown.bConsequetiveIndex;
                            chainedInptData.MoveBackPromptPercentIndependence.TotalTrial = TempRules.pctIndMoveDown.iTotalInstance;
                            chainedInptData.MoveBackPromptPercentIndependence.FailureNeeded = TempRules.pctIndMoveDown.iTotalCorrectInstance;
                            chainedInptData.MoveBackPromptPercentIndependence.bIOAReqd = TempRules.pctIndMoveDown.bIOARequird;
                            chainedInptData.MoveBackPromptPercentIndependence.bMultiTchr = TempRules.pctIndMoveDown.bMultiTeacherRequired;
                            chainedInptData.MoveBackPromptPercentIndependence.ConsecutiveAverageFailure = TempRules.pctIndMoveDown.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                            chainedInptData.MoveBackPromptPercentIndependence.ConsecutiveAverageFailValue = TempRules.pctIndMoveDown.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                            chainedInptData.PromptPercentAllIndependence.BarCondition = TempRules.pctIndAllMoveUp.iScoreRequired;
                            chainedInptData.PromptPercentAllIndependence.ConsecutiveSuccess = TempRules.pctIndAllMoveUp.bConsequetiveIndex;
                            chainedInptData.PromptPercentAllIndependence.TotalTrial = TempRules.pctIndAllMoveUp.iTotalInstance;
                            chainedInptData.PromptPercentAllIndependence.SuccessNeeded = TempRules.pctIndAllMoveUp.iTotalCorrectInstance;
                            chainedInptData.PromptPercentAllIndependence.bIOAReqd = TempRules.pctIndAllMoveUp.bIOARequird;
                            chainedInptData.PromptPercentAllIndependence.bMultiTchr = TempRules.pctIndAllMoveUp.bMultiTeacherRequired;
                            chainedInptData.PromptPercentAllIndependence.ConsecutiveAverage = TempRules.pctIndAllMoveUp.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                            chainedInptData.PromptPercentAllIndependence.ConsecutiveAverageValue = TempRules.pctIndAllMoveUp.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                            chainedInptData.MoveBackPromptPercentAllIndependence.BarCondition = TempRules.pctIndAllMoveDown.iScoreRequired;
                            chainedInptData.MoveBackPromptPercentAllIndependence.ConsecutiveFailures = TempRules.pctIndAllMoveDown.bConsequetiveIndex;
                            chainedInptData.MoveBackPromptPercentAllIndependence.TotalTrial = TempRules.pctIndAllMoveDown.iTotalInstance;
                            chainedInptData.MoveBackPromptPercentAllIndependence.FailureNeeded = TempRules.pctIndAllMoveDown.iTotalCorrectInstance;
                            chainedInptData.MoveBackPromptPercentAllIndependence.bIOAReqd = TempRules.pctIndAllMoveDown.bIOARequird;
                            chainedInptData.MoveBackPromptPercentAllIndependence.bMultiTchr = TempRules.pctIndAllMoveDown.bMultiTeacherRequired;
                            chainedInptData.MoveBackPromptPercentAllIndependence.ConsecutiveAverageFailure = TempRules.pctIndAllMoveDown.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                            chainedInptData.MoveBackPromptPercentAllIndependence.ConsecutiveAverageFailValue = TempRules.pctIndAllMoveDown.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                            chainedInptData.PromptExcludeCrntStepMoveUp.BarCondition = TempRules.PromptExcludeCrntStepMoveUp.iScoreRequired;
                            chainedInptData.PromptExcludeCrntStepMoveUp.ConsecutiveSuccess = TempRules.PromptExcludeCrntStepMoveUp.bConsequetiveIndex;
                            chainedInptData.PromptExcludeCrntStepMoveUp.TotalTrial = TempRules.PromptExcludeCrntStepMoveUp.iTotalInstance;
                            chainedInptData.PromptExcludeCrntStepMoveUp.SuccessNeeded = TempRules.PromptExcludeCrntStepMoveUp.iTotalCorrectInstance;
                            chainedInptData.PromptExcludeCrntStepMoveUp.bIOAReqd = TempRules.PromptExcludeCrntStepMoveUp.bIOARequird;
                            chainedInptData.PromptExcludeCrntStepMoveUp.bMultiTchr = TempRules.PromptExcludeCrntStepMoveUp.bMultiTeacherRequired;
                            chainedInptData.PromptExcludeCrntStepMoveUp.ConsecutiveAverage = TempRules.PromptExcludeCrntStepMoveUp.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                            chainedInptData.PromptExcludeCrntStepMoveUp.ConsecutiveAverageValue = TempRules.PromptExcludeCrntStepMoveUp.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                            chainedInptData.PromptExcludeCrntStepMoveBack.BarCondition = TempRules.PromptExcludeCrntStepMoveDown.iScoreRequired;
                            chainedInptData.PromptExcludeCrntStepMoveBack.ConsecutiveFailures = TempRules.PromptExcludeCrntStepMoveDown.bConsequetiveIndex;
                            chainedInptData.PromptExcludeCrntStepMoveBack.TotalTrial = TempRules.PromptExcludeCrntStepMoveDown.iTotalInstance;
                            chainedInptData.PromptExcludeCrntStepMoveBack.FailureNeeded = TempRules.PromptExcludeCrntStepMoveDown.iTotalCorrectInstance;
                            chainedInptData.PromptExcludeCrntStepMoveBack.bIOAReqd = TempRules.PromptExcludeCrntStepMoveDown.bIOARequird;
                            chainedInptData.PromptExcludeCrntStepMoveBack.bMultiTchr = TempRules.PromptExcludeCrntStepMoveDown.bMultiTeacherRequired;
                            chainedInptData.PromptExcludeCrntStepMoveBack.ConsecutiveAverageFailure = TempRules.PromptExcludeCrntStepMoveDown.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                            chainedInptData.PromptExcludeCrntStepMoveBack.ConsecutiveAverageFailValue = TempRules.PromptExcludeCrntStepMoveDown.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                            chainedInptData.PromptLearnedStepMoveUp.BarCondition = TempRules.pctlearnedStepMoveUp.iScoreRequired;
                            chainedInptData.PromptLearnedStepMoveUp.ConsecutiveSuccess = TempRules.pctlearnedStepMoveUp.bConsequetiveIndex;
                            chainedInptData.PromptLearnedStepMoveUp.TotalTrial = TempRules.pctlearnedStepMoveUp.iTotalInstance;
                            chainedInptData.PromptLearnedStepMoveUp.SuccessNeeded = TempRules.pctlearnedStepMoveUp.iTotalCorrectInstance;
                            chainedInptData.PromptLearnedStepMoveUp.bIOAReqd = TempRules.pctlearnedStepMoveUp.bIOARequird;
                            chainedInptData.PromptLearnedStepMoveUp.bMultiTchr = TempRules.pctlearnedStepMoveUp.bMultiTeacherRequired;
                            chainedInptData.PromptLearnedStepMoveUp.ConsecutiveAverage = TempRules.pctlearnedStepMoveUp.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                            chainedInptData.PromptLearnedStepMoveUp.ConsecutiveAverageValue = TempRules.pctlearnedStepMoveUp.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                            chainedInptData.PromptLearnedStepMoveBack.BarCondition = TempRules.pctlearnedStepMoveDown.iScoreRequired;
                            chainedInptData.PromptLearnedStepMoveBack.ConsecutiveFailures = TempRules.pctlearnedStepMoveDown.bConsequetiveIndex;
                            chainedInptData.PromptLearnedStepMoveBack.TotalTrial = TempRules.pctlearnedStepMoveDown.iTotalInstance;
                            chainedInptData.PromptLearnedStepMoveBack.FailureNeeded = TempRules.pctlearnedStepMoveDown.iTotalCorrectInstance;
                            chainedInptData.PromptLearnedStepMoveBack.bIOAReqd = TempRules.pctlearnedStepMoveDown.bIOARequird;
                            chainedInptData.PromptLearnedStepMoveBack.bMultiTchr = TempRules.pctlearnedStepMoveDown.bMultiTeacherRequired;
                            chainedInptData.PromptLearnedStepMoveBack.ConsecutiveAverageFailure = TempRules.pctlearnedStepMoveDown.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                            chainedInptData.PromptLearnedStepMoveBack.ConsecutiveAverageFailValue = TempRules.pctlearnedStepMoveDown.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                            chainedInptData.PromptTotalCorrectMoveUp.BarCondition = TempRules.pctTotalCorrectMoveUp.iScoreRequired;
                            chainedInptData.PromptTotalCorrectMoveUp.ConsecutiveSuccess = TempRules.pctTotalCorrectMoveUp.bConsequetiveIndex;
                            chainedInptData.PromptTotalCorrectMoveUp.TotalTrial = TempRules.pctTotalCorrectMoveUp.iTotalInstance;
                            chainedInptData.PromptTotalCorrectMoveUp.SuccessNeeded = TempRules.pctTotalCorrectMoveUp.iTotalCorrectInstance;
                            chainedInptData.PromptTotalCorrectMoveUp.bIOAReqd = TempRules.pctTotalCorrectMoveUp.bIOARequird;
                            chainedInptData.PromptTotalCorrectMoveUp.bMultiTchr = TempRules.pctTotalCorrectMoveUp.bMultiTeacherRequired;
                            chainedInptData.PromptTotalCorrectMoveUp.ConsecutiveAverage = TempRules.pctTotalCorrectMoveUp.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                            chainedInptData.PromptTotalCorrectMoveUp.ConsecutiveAverageValue = TempRules.pctTotalCorrectMoveUp.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                            chainedInptData.PromptTotalCorrectMoveBack.BarCondition = TempRules.pctTotalCorrectMoveDown.iScoreRequired;
                            chainedInptData.PromptTotalCorrectMoveBack.ConsecutiveFailures = TempRules.pctTotalCorrectMoveDown.bConsequetiveIndex;
                            chainedInptData.PromptTotalCorrectMoveBack.TotalTrial = TempRules.pctTotalCorrectMoveDown.iTotalInstance;
                            chainedInptData.PromptTotalCorrectMoveBack.FailureNeeded = TempRules.pctTotalCorrectMoveDown.iTotalCorrectInstance;
                            chainedInptData.PromptTotalCorrectMoveBack.bIOAReqd = TempRules.pctTotalCorrectMoveDown.bIOARequird;
                            chainedInptData.PromptTotalCorrectMoveBack.bMultiTchr = TempRules.pctTotalCorrectMoveDown.bMultiTeacherRequired;
                            chainedInptData.PromptTotalCorrectMoveBack.ConsecutiveAverageFailure = TempRules.pctTotalCorrectMoveDown.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                            chainedInptData.PromptTotalCorrectMoveBack.ConsecutiveAverageFailValue = TempRules.pctTotalCorrectMoveDown.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                            chainedInptData.PromptTotalIncorrectMoveBack.BarCondition = TempRules.pctTotalIncorrectMoveDown.iScoreRequired;
                            chainedInptData.PromptTotalIncorrectMoveBack.ConsecutiveFailures = TempRules.pctTotalIncorrectMoveDown.bConsequetiveIndex;
                            chainedInptData.PromptTotalIncorrectMoveBack.TotalTrial = TempRules.pctTotalIncorrectMoveDown.iTotalInstance;
                            chainedInptData.PromptTotalIncorrectMoveBack.FailureNeeded = TempRules.pctTotalIncorrectMoveDown.iTotalCorrectInstance;
                            chainedInptData.PromptTotalIncorrectMoveBack.bIOAReqd = TempRules.pctTotalIncorrectMoveDown.bIOARequird;
                            chainedInptData.PromptTotalIncorrectMoveBack.bMultiTchr = TempRules.pctTotalIncorrectMoveDown.bMultiTeacherRequired;
                            chainedInptData.PromptTotalIncorrectMoveBack.ConsecutiveAverageFailure = TempRules.pctTotalIncorrectMoveDown.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                            chainedInptData.PromptTotalIncorrectMoveBack.ConsecutiveAverageFailValue = TempRules.pctTotalIncorrectMoveDown.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                            chainedInptData.AvgDurationMoveUp.BarCondition = TempRules.pctAvgDurationMoveUp.iScoreRequired;
                            chainedInptData.AvgDurationMoveUp.ConsecutiveSuccess = TempRules.pctAvgDurationMoveUp.bConsequetiveIndex;
                            chainedInptData.AvgDurationMoveUp.TotalTrial = TempRules.pctAvgDurationMoveUp.iTotalInstance;
                            chainedInptData.AvgDurationMoveUp.SuccessNeeded = TempRules.pctAvgDurationMoveUp.iTotalCorrectInstance;
                            chainedInptData.AvgDurationMoveUp.bIOAReqd = TempRules.pctAvgDurationMoveUp.bIOARequird;
                            chainedInptData.AvgDurationMoveUp.bMultiTchr = TempRules.pctAvgDurationMoveUp.bMultiTeacherRequired;
                            chainedInptData.AvgDurationMoveUp.ConsecutiveAverage = TempRules.pctAvgDurationMoveUp.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                            chainedInptData.AvgDurationMoveUp.ConsecutiveAverageValue = TempRules.pctAvgDurationMoveUp.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                            chainedInptData.TotalDurationMoveUp.BarCondition = TempRules.pctTotalDurationMoveUp.iScoreRequired;
                            chainedInptData.TotalDurationMoveUp.ConsecutiveSuccess = TempRules.pctTotalDurationMoveUp.bConsequetiveIndex;
                            chainedInptData.TotalDurationMoveUp.TotalTrial = TempRules.pctTotalDurationMoveUp.iTotalInstance;
                            chainedInptData.TotalDurationMoveUp.SuccessNeeded = TempRules.pctTotalDurationMoveUp.iTotalCorrectInstance;
                            chainedInptData.TotalDurationMoveUp.bIOAReqd = TempRules.pctTotalDurationMoveUp.bIOARequird;
                            chainedInptData.TotalDurationMoveUp.bMultiTchr = TempRules.pctTotalDurationMoveUp.bMultiTeacherRequired;
                            chainedInptData.TotalDurationMoveUp.ConsecutiveAverage = TempRules.pctTotalDurationMoveUp.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                            chainedInptData.TotalDurationMoveUp.ConsecutiveAverageValue = TempRules.pctTotalDurationMoveUp.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                            chainedInptData.AvgDurationMoveDown.BarCondition = TempRules.pctAvgDurationMoveDown.iScoreRequired;
                            chainedInptData.AvgDurationMoveDown.ConsecutiveFailures = TempRules.pctAvgDurationMoveDown.bConsequetiveIndex;
                            chainedInptData.AvgDurationMoveDown.TotalTrial = TempRules.pctAvgDurationMoveDown.iTotalInstance;
                            chainedInptData.AvgDurationMoveDown.FailureNeeded = TempRules.pctAvgDurationMoveDown.iTotalCorrectInstance;
                            chainedInptData.AvgDurationMoveDown.bIOAReqd = TempRules.pctAvgDurationMoveDown.bIOARequird;
                            chainedInptData.AvgDurationMoveDown.bMultiTchr = TempRules.pctAvgDurationMoveDown.bMultiTeacherRequired;
                            chainedInptData.AvgDurationMoveDown.ConsecutiveAverageFailure = TempRules.pctAvgDurationMoveDown.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                            chainedInptData.AvgDurationMoveDown.ConsecutiveAverageFailValue = TempRules.pctAvgDurationMoveDown.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                            chainedInptData.TotalDurationMoveDown.BarCondition = TempRules.pctTotalDurationMoveDown.iScoreRequired;
                            chainedInptData.TotalDurationMoveDown.ConsecutiveFailures = TempRules.pctTotalDurationMoveDown.bConsequetiveIndex;
                            chainedInptData.TotalDurationMoveDown.TotalTrial = TempRules.pctTotalDurationMoveDown.iTotalInstance;
                            chainedInptData.TotalDurationMoveDown.FailureNeeded = TempRules.pctTotalDurationMoveDown.iTotalCorrectInstance;
                            chainedInptData.TotalDurationMoveDown.bIOAReqd = TempRules.pctTotalDurationMoveDown.bIOARequird;
                            chainedInptData.TotalDurationMoveDown.bMultiTchr = TempRules.pctTotalDurationMoveDown.bMultiTeacherRequired;
                            chainedInptData.TotalDurationMoveDown.ConsecutiveAverageFailure = TempRules.pctTotalDurationMoveDown.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                            chainedInptData.TotalDurationMoveDown.ConsecutiveAverageFailValue = TempRules.pctTotalDurationMoveDown.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                            /*if (!chainedInptData.IOARequired)
                                chainedInptData.IOARequired = TempRules.bIOARequird;
                            if (!chainedInptData.MultiTeacherRequired)
                                chainedInptData.MultiTeacherRequired = TempRules.bMultiTeacherRequired;*/
                        }
                    }
                    #endregion
                    #region steprules
                    TempRules = new Rules();
                    TempRules = GetStepRules(oTemp.TemplateId, iColId);
                    if (TempRules != null)
                    {
                        step_moveupCount = TempRules.moveup;
                        step_movedownCount = TempRules.movedown;
                        if (TempRules.count > 0)
                        {

                            //Liju
                            bStepMoveUpIOA = bStepMoveUpIOA | TempRules.pctIndMoveUp.bIOARequird | TempRules.pctAccyMoveUp.bIOARequird | TempRules.pctlearnedStepMoveUp.bIOARequird | TempRules.excludeCrntStepMoveUp.bIOARequird;
                            bStepMoveUpMultiTecher = bStepMoveUpMultiTecher | TempRules.pctIndMoveUp.bMultiTeacherRequired | TempRules.pctAccyMoveUp.bMultiTeacherRequired | TempRules.pctlearnedStepMoveUp.bMultiTeacherRequired | TempRules.excludeCrntStepMoveUp.bMultiTeacherRequired;
                            bStepMoveDownIOA = bStepMoveDownIOA | TempRules.pctIndMoveDown.bIOARequird | TempRules.pctAccyMoveDown.bIOARequird | TempRules.pctlearnedStepMoveDown.bIOARequird | TempRules.excludeCrntStepMoveDown.bIOARequird;
                            bStepMoveDownMultiTecher = bStepMoveDownMultiTecher | TempRules.pctIndMoveDown.bMultiTeacherRequired | TempRules.pctAccyMoveDown.bMultiTeacherRequired | TempRules.pctlearnedStepMoveDown.bMultiTeacherRequired | TempRules.excludeCrntStepMoveDown.bMultiTeacherRequired;

                            chainedInptData.StepPercentAccuracy.BarCondition = TempRules.pctAccyMoveUp.iScoreRequired;
                            chainedInptData.StepPercentAccuracy.ConsecutiveSuccess = TempRules.pctAccyMoveUp.bConsequetiveIndex;
                            chainedInptData.StepPercentAccuracy.TotalTrial = TempRules.pctAccyMoveUp.iTotalInstance;
                            chainedInptData.StepPercentAccuracy.SuccessNeeded = TempRules.pctAccyMoveUp.iTotalCorrectInstance;
                            chainedInptData.StepPercentAccuracy.bIOAReqd = TempRules.pctAccyMoveUp.bIOARequird;
                            chainedInptData.StepPercentAccuracy.bMultiTchr = TempRules.pctAccyMoveUp.bMultiTeacherRequired;
							chainedInptData.StepPercentAccuracy.ConsecutiveAverage = TempRules.pctAccyMoveUp.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
							chainedInptData.StepPercentAccuracy.ConsecutiveAverageValue = TempRules.pctAccyMoveUp.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//                            
                            
                            chainedInptData.IncludeMistrials = TempRules.bIncludeMisTrail;

                            chainedInptData.StepPercentIndependence.BarCondition = TempRules.pctIndMoveUp.iScoreRequired;
                            chainedInptData.StepPercentIndependence.ConsecutiveSuccess = TempRules.pctIndMoveUp.bConsequetiveIndex;
                            chainedInptData.StepPercentIndependence.TotalTrial = TempRules.pctIndMoveUp.iTotalInstance;
                            chainedInptData.StepPercentIndependence.SuccessNeeded = TempRules.pctIndMoveUp.iTotalCorrectInstance;
                            chainedInptData.StepPercentIndependence.bIOAReqd = TempRules.pctIndMoveUp.bIOARequird;
                            chainedInptData.StepPercentIndependence.bMultiTchr = TempRules.pctIndMoveUp.bMultiTeacherRequired;
                            chainedInptData.StepPercentIndependence.ConsecutiveAverage = TempRules.pctIndMoveUp.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                            chainedInptData.StepPercentIndependence.ConsecutiveAverageValue = TempRules.pctIndMoveUp.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                            chainedInptData.StepMoveBackPercentAccuracy.BarCondition = TempRules.pctAccyMoveDown.iScoreRequired;
                            chainedInptData.StepMoveBackPercentAccuracy.ConsecutiveFailures = TempRules.pctAccyMoveDown.bConsequetiveIndex;
                            chainedInptData.StepMoveBackPercentAccuracy.TotalTrial = TempRules.pctAccyMoveDown.iTotalInstance;
                            chainedInptData.StepMoveBackPercentAccuracy.FailureNeeded = TempRules.pctAccyMoveDown.iTotalCorrectInstance;
                            chainedInptData.StepMoveBackPercentAccuracy.bIOAReqd = TempRules.pctAccyMoveDown.bIOARequird;
                            chainedInptData.StepMoveBackPercentAccuracy.bMultiTchr = TempRules.pctAccyMoveDown.bMultiTeacherRequired;
							chainedInptData.StepMoveBackPercentAccuracy.ConsecutiveAverageFailure = TempRules.pctAccyMoveDown.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                            chainedInptData.StepMoveBackPercentAccuracy.ConsecutiveAverageFailValue = TempRules.pctAccyMoveDown.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                            chainedInptData.StepMoveBackPercentIndependence.BarCondition = TempRules.pctIndMoveDown.iScoreRequired;
                            chainedInptData.StepMoveBackPercentIndependence.ConsecutiveFailures = TempRules.pctIndMoveDown.bConsequetiveIndex;
                            chainedInptData.StepMoveBackPercentIndependence.TotalTrial = TempRules.pctIndMoveDown.iTotalInstance;
                            chainedInptData.StepMoveBackPercentIndependence.FailureNeeded = TempRules.pctIndMoveDown.iTotalCorrectInstance;
                            chainedInptData.StepMoveBackPercentIndependence.bIOAReqd = TempRules.pctIndMoveDown.bIOARequird;
                            chainedInptData.StepMoveBackPercentIndependence.bMultiTchr = TempRules.pctIndMoveDown.bMultiTeacherRequired;
                            chainedInptData.StepMoveBackPercentIndependence.ConsecutiveAverageFailure = TempRules.pctIndMoveDown.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                            chainedInptData.StepMoveBackPercentIndependence.ConsecutiveAverageFailValue = TempRules.pctIndMoveDown.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                            chainedInptData.StepPercentAllIndependence.BarCondition = TempRules.pctIndAllMoveUp.iScoreRequired;
                            chainedInptData.StepPercentAllIndependence.ConsecutiveSuccess = TempRules.pctIndAllMoveUp.bConsequetiveIndex;
                            chainedInptData.StepPercentAllIndependence.TotalTrial = TempRules.pctIndAllMoveUp.iTotalInstance;
                            chainedInptData.StepPercentAllIndependence.SuccessNeeded = TempRules.pctIndAllMoveUp.iTotalCorrectInstance;
                            chainedInptData.StepPercentAllIndependence.bIOAReqd = TempRules.pctIndAllMoveUp.bIOARequird;
                            chainedInptData.StepPercentAllIndependence.bMultiTchr = TempRules.pctIndAllMoveUp.bMultiTeacherRequired;
                            chainedInptData.StepPercentAllIndependence.ConsecutiveAverage = TempRules.pctIndAllMoveUp.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                            chainedInptData.StepPercentAllIndependence.ConsecutiveAverageValue = TempRules.pctIndAllMoveUp.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                            chainedInptData.StepMoveBackPercentAllIndependence.BarCondition = TempRules.pctIndAllMoveDown.iScoreRequired;
                            chainedInptData.StepMoveBackPercentAllIndependence.ConsecutiveFailures = TempRules.pctIndAllMoveDown.bConsequetiveIndex;
                            chainedInptData.StepMoveBackPercentAllIndependence.TotalTrial = TempRules.pctIndAllMoveDown.iTotalInstance;
                            chainedInptData.StepMoveBackPercentAllIndependence.FailureNeeded = TempRules.pctIndAllMoveDown.iTotalCorrectInstance;
                            chainedInptData.StepMoveBackPercentAllIndependence.bIOAReqd = TempRules.pctIndAllMoveDown.bIOARequird;
                            chainedInptData.StepMoveBackPercentAllIndependence.bMultiTchr = TempRules.pctIndAllMoveDown.bMultiTeacherRequired;
                            chainedInptData.StepMoveBackPercentAllIndependence.ConsecutiveAverageFailure = TempRules.pctIndAllMoveDown.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                            chainedInptData.StepMoveBackPercentAllIndependence.ConsecutiveAverageFailValue = TempRules.pctIndAllMoveDown.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                            chainedInptData.LearnedStepMoveUp.BarCondition = TempRules.pctlearnedStepMoveUp.iScoreRequired;
                            chainedInptData.LearnedStepMoveUp.ConsecutiveSuccess = TempRules.pctlearnedStepMoveUp.bConsequetiveIndex;
                            chainedInptData.LearnedStepMoveUp.TotalTrial = TempRules.pctlearnedStepMoveUp.iTotalInstance;
                            chainedInptData.LearnedStepMoveUp.SuccessNeeded = TempRules.pctlearnedStepMoveUp.iTotalCorrectInstance;
                            chainedInptData.LearnedStepMoveUp.bIOAReqd = TempRules.pctlearnedStepMoveUp.bIOARequird;
                            chainedInptData.LearnedStepMoveUp.bMultiTchr = TempRules.pctlearnedStepMoveUp.bMultiTeacherRequired;
                            chainedInptData.LearnedStepMoveUp.ConsecutiveAverage = TempRules.pctlearnedStepMoveUp.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                            chainedInptData.LearnedStepMoveUp.ConsecutiveAverageValue = TempRules.pctlearnedStepMoveUp.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                            chainedInptData.LearnedStepMoveBack.BarCondition = TempRules.pctlearnedStepMoveDown.iScoreRequired;
                            chainedInptData.LearnedStepMoveBack.ConsecutiveFailures = TempRules.pctlearnedStepMoveDown.bConsequetiveIndex;
                            chainedInptData.LearnedStepMoveBack.TotalTrial = TempRules.pctlearnedStepMoveDown.iTotalInstance;
                            chainedInptData.LearnedStepMoveBack.FailureNeeded = TempRules.pctlearnedStepMoveDown.iTotalCorrectInstance;
                            chainedInptData.LearnedStepMoveBack.bIOAReqd = TempRules.pctlearnedStepMoveDown.bIOARequird;
                            chainedInptData.LearnedStepMoveBack.bMultiTchr = TempRules.pctlearnedStepMoveDown.bMultiTeacherRequired;
                            chainedInptData.LearnedStepMoveBack.ConsecutiveAverageFailure = TempRules.pctlearnedStepMoveDown.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                            chainedInptData.LearnedStepMoveBack.ConsecutiveAverageFailValue = TempRules.pctlearnedStepMoveDown.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//


                            chainedInptData.ExcludeCrntStepMoveUp.BarCondition = TempRules.excludeCrntStepMoveUp.iScoreRequired;
                            chainedInptData.ExcludeCrntStepMoveUp.ConsecutiveSuccess = TempRules.excludeCrntStepMoveUp.bConsequetiveIndex;
                            chainedInptData.ExcludeCrntStepMoveUp.TotalTrial = TempRules.excludeCrntStepMoveUp.iTotalInstance;
                            chainedInptData.ExcludeCrntStepMoveUp.SuccessNeeded = TempRules.excludeCrntStepMoveUp.iTotalCorrectInstance;
                            chainedInptData.ExcludeCrntStepMoveUp.bIOAReqd = TempRules.excludeCrntStepMoveUp.bIOARequird;
                            chainedInptData.ExcludeCrntStepMoveUp.bMultiTchr = TempRules.excludeCrntStepMoveUp.bMultiTeacherRequired;
                            chainedInptData.ExcludeCrntStepMoveUp.ConsecutiveAverage = TempRules.excludeCrntStepMoveUp.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                            chainedInptData.ExcludeCrntStepMoveUp.ConsecutiveAverageValue = TempRules.excludeCrntStepMoveUp.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                            chainedInptData.ExcludeCrntStepMoveBack.BarCondition = TempRules.excludeCrntStepMoveDown.iScoreRequired;
                            chainedInptData.ExcludeCrntStepMoveBack.ConsecutiveFailures = TempRules.excludeCrntStepMoveDown.bConsequetiveIndex;
                            chainedInptData.ExcludeCrntStepMoveBack.TotalTrial = TempRules.excludeCrntStepMoveDown.iTotalInstance;
                            chainedInptData.ExcludeCrntStepMoveBack.FailureNeeded = TempRules.excludeCrntStepMoveDown.iTotalCorrectInstance;
                            chainedInptData.ExcludeCrntStepMoveBack.bIOAReqd = TempRules.excludeCrntStepMoveDown.bIOARequird;
                            chainedInptData.ExcludeCrntStepMoveBack.bMultiTchr = TempRules.excludeCrntStepMoveDown.bMultiTeacherRequired;
                            chainedInptData.ExcludeCrntStepMoveBack.ConsecutiveAverageFailure = TempRules.excludeCrntStepMoveDown.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                            chainedInptData.ExcludeCrntStepMoveBack.ConsecutiveAverageFailValue = TempRules.excludeCrntStepMoveDown.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                            chainedInptData.StepTotalCorrectMoveUp.BarCondition = TempRules.pctTotalCorrectMoveUp.iScoreRequired;
                            chainedInptData.StepTotalCorrectMoveUp.ConsecutiveSuccess = TempRules.pctTotalCorrectMoveUp.bConsequetiveIndex;
                            chainedInptData.StepTotalCorrectMoveUp.TotalTrial = TempRules.pctTotalCorrectMoveUp.iTotalInstance;
                            chainedInptData.StepTotalCorrectMoveUp.SuccessNeeded = TempRules.pctTotalCorrectMoveUp.iTotalCorrectInstance;
                            chainedInptData.StepTotalCorrectMoveUp.bIOAReqd = TempRules.pctTotalCorrectMoveUp.bIOARequird;
                            chainedInptData.StepTotalCorrectMoveUp.bMultiTchr = TempRules.pctTotalCorrectMoveUp.bMultiTeacherRequired;
                            chainedInptData.StepTotalCorrectMoveUp.ConsecutiveAverage = TempRules.pctTotalCorrectMoveUp.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                            chainedInptData.StepTotalCorrectMoveUp.ConsecutiveAverageValue = TempRules.pctTotalCorrectMoveUp.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                            chainedInptData.StepTotalCorrectMoveBack.BarCondition = TempRules.pctTotalCorrectMoveDown.iScoreRequired;
                            chainedInptData.StepTotalCorrectMoveBack.ConsecutiveFailures = TempRules.pctTotalCorrectMoveDown.bConsequetiveIndex;
                            chainedInptData.StepTotalCorrectMoveBack.TotalTrial = TempRules.pctTotalCorrectMoveDown.iTotalInstance;
                            chainedInptData.StepTotalCorrectMoveBack.FailureNeeded = TempRules.pctTotalCorrectMoveDown.iTotalCorrectInstance;
                            chainedInptData.StepTotalCorrectMoveBack.bIOAReqd = TempRules.pctTotalCorrectMoveDown.bIOARequird;
                            chainedInptData.StepTotalCorrectMoveBack.bMultiTchr = TempRules.pctTotalCorrectMoveDown.bMultiTeacherRequired;
                            chainedInptData.StepTotalCorrectMoveBack.ConsecutiveAverageFailure = TempRules.pctTotalCorrectMoveDown.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                            chainedInptData.StepTotalCorrectMoveBack.ConsecutiveAverageFailValue = TempRules.pctTotalCorrectMoveDown.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                            chainedInptData.StepTotalIncorrectMoveBack.BarCondition = TempRules.pctTotalIncorrectMoveDown.iScoreRequired;
                            chainedInptData.StepTotalIncorrectMoveBack.ConsecutiveFailures = TempRules.pctTotalIncorrectMoveDown.bConsequetiveIndex;
                            chainedInptData.StepTotalIncorrectMoveBack.TotalTrial = TempRules.pctTotalIncorrectMoveDown.iTotalInstance;
                            chainedInptData.StepTotalIncorrectMoveBack.FailureNeeded = TempRules.pctTotalIncorrectMoveDown.iTotalCorrectInstance;
                            chainedInptData.StepTotalIncorrectMoveBack.bIOAReqd = TempRules.pctTotalIncorrectMoveDown.bIOARequird;
                            chainedInptData.StepTotalIncorrectMoveBack.bMultiTchr = TempRules.pctTotalIncorrectMoveDown.bMultiTeacherRequired;
                            chainedInptData.StepTotalIncorrectMoveBack.ConsecutiveAverageFailure = TempRules.pctTotalIncorrectMoveDown.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                            chainedInptData.StepTotalIncorrectMoveBack.ConsecutiveAverageFailValue = TempRules.pctTotalIncorrectMoveDown.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                            chainedInptData.AvgDurationMoveUp.BarCondition = TempRules.pctAvgDurationMoveUp.iScoreRequired;
                            chainedInptData.AvgDurationMoveUp.ConsecutiveSuccess = TempRules.pctAvgDurationMoveUp.bConsequetiveIndex;
                            chainedInptData.AvgDurationMoveUp.TotalTrial = TempRules.pctAvgDurationMoveUp.iTotalInstance;
                            chainedInptData.AvgDurationMoveUp.SuccessNeeded = TempRules.pctAvgDurationMoveUp.iTotalCorrectInstance;
                            chainedInptData.AvgDurationMoveUp.bIOAReqd = TempRules.pctAvgDurationMoveUp.bIOARequird;
                            chainedInptData.AvgDurationMoveUp.bMultiTchr = TempRules.pctAvgDurationMoveUp.bMultiTeacherRequired;
                            chainedInptData.AvgDurationMoveUp.ConsecutiveAverage = TempRules.pctAvgDurationMoveUp.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                            chainedInptData.AvgDurationMoveUp.ConsecutiveAverageValue = TempRules.pctAvgDurationMoveUp.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                            chainedInptData.TotalDurationMoveUp.BarCondition = TempRules.pctTotalDurationMoveUp.iScoreRequired;
                            chainedInptData.TotalDurationMoveUp.ConsecutiveSuccess = TempRules.pctTotalDurationMoveUp.bConsequetiveIndex;
                            chainedInptData.TotalDurationMoveUp.TotalTrial = TempRules.pctTotalDurationMoveUp.iTotalInstance;
                            chainedInptData.TotalDurationMoveUp.SuccessNeeded = TempRules.pctTotalDurationMoveUp.iTotalCorrectInstance;
                            chainedInptData.TotalDurationMoveUp.bIOAReqd = TempRules.pctTotalDurationMoveUp.bIOARequird;
                            chainedInptData.TotalDurationMoveUp.bMultiTchr = TempRules.pctTotalDurationMoveUp.bMultiTeacherRequired;
                            chainedInptData.TotalDurationMoveUp.ConsecutiveAverage = TempRules.pctTotalDurationMoveUp.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                            chainedInptData.TotalDurationMoveUp.ConsecutiveAverageValue = TempRules.pctTotalDurationMoveUp.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                            chainedInptData.AvgDurationMoveDown.BarCondition = TempRules.pctAvgDurationMoveDown.iScoreRequired;
                            chainedInptData.AvgDurationMoveDown.ConsecutiveFailures = TempRules.pctAvgDurationMoveDown.bConsequetiveIndex;
                            chainedInptData.AvgDurationMoveDown.TotalTrial = TempRules.pctAvgDurationMoveDown.iTotalInstance;
                            chainedInptData.AvgDurationMoveDown.FailureNeeded = TempRules.pctAvgDurationMoveDown.iTotalCorrectInstance;
                            chainedInptData.AvgDurationMoveDown.bIOAReqd = TempRules.pctAvgDurationMoveDown.bIOARequird;
                            chainedInptData.AvgDurationMoveDown.bMultiTchr = TempRules.pctAvgDurationMoveDown.bMultiTeacherRequired;
                            chainedInptData.AvgDurationMoveDown.ConsecutiveAverageFailure = TempRules.pctAvgDurationMoveDown.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                            chainedInptData.AvgDurationMoveDown.ConsecutiveAverageFailValue = TempRules.pctAvgDurationMoveDown.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                            chainedInptData.TotalDurationMoveDown.BarCondition = TempRules.pctTotalDurationMoveDown.iScoreRequired;
                            chainedInptData.TotalDurationMoveDown.ConsecutiveFailures = TempRules.pctTotalDurationMoveDown.bConsequetiveIndex;
                            chainedInptData.TotalDurationMoveDown.TotalTrial = TempRules.pctTotalDurationMoveDown.iTotalInstance;
                            chainedInptData.TotalDurationMoveDown.FailureNeeded = TempRules.pctTotalDurationMoveDown.iTotalCorrectInstance;
                            chainedInptData.TotalDurationMoveDown.bIOAReqd = TempRules.pctTotalDurationMoveDown.bIOARequird;
                            chainedInptData.TotalDurationMoveDown.bMultiTchr = TempRules.pctTotalDurationMoveDown.bMultiTeacherRequired;
                            chainedInptData.TotalDurationMoveDown.ConsecutiveAverageFailure = TempRules.pctTotalDurationMoveDown.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                            chainedInptData.TotalDurationMoveDown.ConsecutiveAverageFailValue = TempRules.pctTotalDurationMoveDown.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                            //getPromptNA(oTemp.TemplateId, Convert.ToInt32(dr["DSTempSetColId"].ToString()), TempRules);
                            //if (!bPromptMoveupNA)
                            //{
                            //    bPromptMoveupNA = TempRules.NAPromptMoveup;
                            //}
                            //if (!bPromptMovedownNA)
                            //{
                            //    bPromptMovedownNA = TempRules.NAPromptMoveDown;
                            //}

                            getstepNA(oTemp.TemplateId, Convert.ToInt32(dr["DSTempSetColId"].ToString()), TempRules);
                            if (!bStepPromptMoveupNA)
                            {
                                bStepPromptMoveupNA = TempRules.NAStepMoveup;
                            }
                            if (!bStepPromptMovedownNA)
                            {
                                bStepPromptMovedownNA = TempRules.NAStepMoveDown;
                            }



                            /*if (!chainedInptData.IOARequired)
                                chainedInptData.IOARequired = TempRules.bIOARequird;
                            if (!chainedInptData.MultiTeacherRequired)
                                chainedInptData.MultiTeacherRequired = TempRules.bMultiTeacherRequired;*/
                        }
                    }
                    #endregion
                    chainedCols.Add(sColName, chainedInptData);
                    //if (chainedInptData.PromptHirecharchy == false)
                    //{
                    //    prompt = "-,+";
                    //    //promptUsed = prompt.Split(',');
                    //    sCurrentPrompt = "+";
                    //    TargetPrompt = "+";
                    //    promptUsed = new string[1];
                    //    promptUsed[0] = "+";

                    //}
                    //else
                    //{
                    Prompt[] arPromtList = GetPrompts(oTemp.TemplateId);
                    promptUsed = new string[arPromtList.Count()];
                    LessonpromptUsed = new string[arPromtList.Count()];
                    LessonpromptUsedOther = new string[arPromtList.Count()];
                    bPromtHirchy = true;
                    for (int iCount = 0; iCount < arPromtList.Count(); iCount++)
                    {
                        promptUsed[iCount] = arPromtList[iCount].promptId.ToString();
                        LessonpromptUsed[iCount] = arPromtList[iCount].promptId.ToString();
                        LessonpromptUsedOther[iCount] = arPromtList[iCount].promptId.ToString();
                        if (!String.IsNullOrEmpty(sCurrentLessonPrompt) && sCurrentLessonPrompt != "0")
                        {
                            if (arPromtList[iCount].promptId.ToString() == sCurrentLessonPrompt)
                                crntPrmtIndex = iCount;
                        }
                    }

                    if (!chainedInptData.PromptHirecharchy)
                        bPromtHirchy = false;


                    if (promptUsed.Length > 0)
                    {
                        TargetPrompt = promptUsed[promptUsed.Length - 1];
                        LessonTargetPrompt = TargetPrompt;

                        if (String.IsNullOrEmpty(sCurrentLessonPrompt) || sCurrentLessonPrompt == "0")
                        {
                            sCurrentPrompt = promptUsed[0];
                            Session["sCurrentPrompt"] = sCurrentPrompt;
                            sCurrentLessonPrompt = sCurrentPrompt;
                        }
                    }
                    //}

                    if (dr["ColTypeCd"].ToString() == "+/-")
                    {
                        prompt = "-,+";
                        //promptUsed = prompt.Split(',');
                        sCurrentPrompt = "+";
                        TargetPrompt = "+";
                        promptUsed = new string[1];
                        promptUsed[0] = "+";
                    }
                    if (dr["ColTypeCd"].ToString() == "Prompt")
                    {
                        bpromptColumn = true;
                    }
                    DiscreteTrials TrialLists = new DiscreteTrials();
                    reader.Close();
                    int counter = chainedCols.Count;
                    int ind = 0;


                    oDisc = new DiscreteSession();
                    TrialLists = oDisc.GetTrialLists(oSession.StudentId, oTemp.TemplateId, iCurrentSetId, iCurrentStep, chainedCols[sColName].RequiredSession(), sColName, false, hfPlusMinusResp.Value, coltypeCode, oDS.ChainType);

                    //if (chainedInptData.MultiTeacherRequired)
                    bMultyTchr = oDisc.MultiTeacherStatus(oSession.StudentId, oTemp.TemplateId);
                    // else
                    //    bMultyTchr = false;

                    // if (chainedInptData.IOARequired)
                    bIOA = oDisc.IOAStats(oSession.StudentId, oTemp.TemplateId);
                    // else
                    //    bIOA = false;
                    //Trials = trails.GetTrialLists(8, 1, ht[key].RequiredSession(), key);
                    string stepValue = TrialLists.value;                    
                    int reqSess = chainedCols[sColName].RequiredSession();
                    chainedCols[sColName].SessionCount = TrialLists.sessionCount;
                    chainedCols[sColName].StepCount = TrialLists.trialsCount;
                    chainedCols[sColName].PromptsUsed = promptUsed;                    
                    chainedCols[sColName].TotalSets = TrialLists.totalSet;
                    chainedCols[sColName].NoPromptsUsed = LessonpromptUsed;
                    chainedCols[sColName].sCurrentLessonPrompt = sCurrentLessonPrompt;
                    chainedCols[sColName].StepPrompts = oDisc.GetStepPrompts(Convert.ToInt32(dr["DSTempSetColId"].ToString()), StdtSessHdrId);
                    chainedCols[sColName].multiMeasure = false;

                    string crctResponse = "+";
                    if ((hfPlusMinusResp.Value == "+") || (hfPlusMinusResp.Value == "-"))
                    {
                        crctResponse = hfPlusMinusResp.Value;
                    }
                    chainedCols[sColName].CorrectResp = crctResponse;
                    chainedInptData.next = oDS.CrntStep;
                    //chainedInptData.marked = marked_count;

                    int iTrailCount = TrialLists.trialsCount;
                    string sEventType = "";
                    bool bcustMoveUp = false;
                    bool bCustMoveDown = false;
                    bool bTotDurationMoveUp = true;
                    bool bTotDurationMoveDown = true;
                    bool bstepTotDurationMoveUp = true;
                    bool bstepTotDurationMoveDown = true;
                    bool bPromptTotDurationMoveUp = true;
                    bool bPromptTotDurationMoveDown = true;

                    bool bAvgDurationMoveUp = true;
                    bool bAvgDurationMoveDown = true;
                    bool bstepAvgDurationMoveUp = true;
                    bool bstepAvgDurationMoveDown = true;
                    bool bPromptAvgDurationMoveUp = true;
                    bool bPromptAvgDurationMoveDown = true;

                    bool bFrequencyMoveUp = true;
                    bool bFrequencyMoveDown = true;
                    bool bstepFrequencyMoveUp = true;
                    bool bstepFrequencyMoveDown = true;
                    bool bPromptFrequencyMoveUp = true;
                    bool bPromptFrequencyMoveDown = true;

                    bool bIndallMoveUp = true;
                    bool bIndallMoveDown = true;
                    bool bstepIndallMoveUp = true;
                    bool bstepIndallMoveDown = true;
                    bool bPromptIndallMoveUp = true;
                    bool bPromptIndallMoveDown = true;

                    bool bLearnedMoveUp = true;
                    bool bLearnedMoveDown = true;
                    bool bstepLearnedMoveUp = true;
                    bool bstepLearnedMoveDown = true;
                    bool bPromptLearnedMoveUp = true;
                    bool bPromptLearnedMoveDown = true;

                    bool FreqDurTextFlag = false;

                    int next = oDS.CrntStep;
                    int MoveUpstat = 1;

                    if (chainedCols[sColName].StepCount == 0)
                    {
                        if (count - 1 == loop)
                        {
                            if (hfProbe.Value == "Probe")
                            {
                                return;
                            }
                        }
                        else
                        {
                            loop++;
                            continue;
                        }
                    }
                    string strPromptCriteria = "";
                    int promptUp = 0, promptDown = 0;
                    string sqlStr1;
                    strPromptCriteria = "SELECT  Count(DR.DSTempRuleId)	FROM DSTempHdr DT  INNER JOIN DSTempSetCol DST ON DT.DSTempHdrId = DST.DSTempHdrId " +
                        "INNER JOIN DSTempSetColCalc DC ON DST.DSTempSetColId = DC.DSTempSetColId  INNER JOIN DSTempRule DR ON DR.DSTempSetColCalcId = DC.DSTempSetColCalcId " +
                        "WHERE (DT.DSTempHdrId =" + oTemp.TemplateId + ")AND DR.RuleType='PROMPT' AND DR.CriteriaType='MOVE UP' " +//AND DR.DSTempSetColId=" + iColId +
                        " AND DR.ActiveInd='A' AND DR.IsNA=1";
                    promptUp = Convert.ToInt32(oData.FetchValue(strPromptCriteria));
                    strPromptCriteria = "SELECT  Count(DR.DSTempRuleId)	FROM DSTempHdr DT  INNER JOIN DSTempSetCol DST ON DT.DSTempHdrId = DST.DSTempHdrId " +
                        "INNER JOIN DSTempSetColCalc DC ON DST.DSTempSetColId = DC.DSTempSetColId  INNER JOIN DSTempRule DR ON DR.DSTempSetColCalcId = DC.DSTempSetColCalcId " +
                        "WHERE (DT.DSTempHdrId =" + oTemp.TemplateId + ")AND DR.RuleType='PROMPT' AND DR.CriteriaType='MOVE DOWN' " +//AND DR.DSTempSetColId=" + iColId +
                        " AND DR.ActiveInd='A' AND DR.IsNA=1";

                    promptDown = Convert.ToInt32(oData.FetchValue(strPromptCriteria));
                    chainedCols[sColName].promptUp = promptUp;
                    chainedCols[sColName].promptDown = promptDown;

                    string strqry1 = " select case when'%Independent of All Steps' in(SELECT  DC.CalcType FROM DSTempHdr DT " +
                                     " INNER JOIN DSTempSetCol DST ON DT.DSTempHdrId = DST.DSTempHdrId " +
                                     "INNER JOIN DSTempSetColCalc DC ON DST.DSTempSetColId = DC.DSTempSetColId" +
                                     " WHERE DT.DSTempHdrId =" + oTemp.TemplateId + ") then 'true' else 'false' end";
                    object colt = oData.FetchValue(strqry1);

                    if (chainedCols[sColName].StepCount > 0)
                    {
                        sesResultchain = new Chained.Result[chainedCols.Count];
                        if ((oDS.ChainType == "Forward chain" || oDS.ChainType == "Backward chain") && (dr["ColTypeCd"].ToString() == "Duration"
                            || dr["ColTypeCd"].ToString() == "Text" || dr["ColTypeCd"].ToString() == "Frequency" || dr["ColTypeCd"].ToString() == "Prompt" || (dr["ColTypeCd"].ToString() == "+/-" && colt.ToString() == "true")))
                        {
                            #region text
                            if (dr["ColTypeCd"].ToString() == "Text")
                            {
                                bool status = false;
                                TempRules = GetSetRules(oTemp.TemplateId, iColId);
                                colCalId = Convert.ToInt32(ViewState["colCalId"]);
                                if (TempRules.pctCustomMoveUp.iScoreRequired > 0)
                                {
                                    bcustMoveUp = ValidateUp(oSession.StudentId, colCalId, TempRules.pctCustomMoveUp.iScoreRequired, reqSess,
                                        TempRules.pctCustomMoveUp.iTotalCorrectInstance, TempRules.pctCustomMoveUp.bConsequetiveIndex, status);
                                }
                                if (TempRules.pctCustomMoveDown.iScoreRequired > 0)
                                {
                                    bCustMoveDown = ValidateDown(oSession.StudentId, colCalId, TempRules.pctCustomMoveDown.iScoreRequired, reqSess,
                                        TempRules.pctCustomMoveDown.iTotalCorrectInstance, TempRules.pctCustomMoveDown.bConsequetiveIndex, status);
                                }
                            }
                            #endregion
                            #region Duration
                            else if (dr["ColTypeCd"].ToString() == "Duration")
                            {
                                int colId = Convert.ToInt32(dr["DSTempSetColId"]);
                                string selqry1 = "select Moveupstat from dstempsetcol DsCol inner join DSTempHdr Hdr on Hdr.DSTempHdrId=DsCol.DSTempHdrId where dsCol.DSTempHdrId=" + oTemp.TemplateId + " And DSTempSetColId= " + colId;
                                object stat = oData.FetchValue(selqry1);
                                if (stat != null)
                                    MoveUpstat = Convert.ToInt16(stat);
                                #region MoveUp in Less than critera-Default
                                if (MoveUpstat == 1)
                                {
                                    freqdureloop++;
                                    bool status = true;
                                    CompletionStatusSet = "";
                                    //TempRules = GetPromptRules(oTemp.TemplateId, iColId);
                                    avgDurationId = Convert.ToInt32(ViewState["avgDurationId"]);
                                    totDuraionId = Convert.ToInt32(ViewState["totDuraionId"]);
                                    TempRules = GetPromptRules(oTemp.TemplateId, iColId);

                                    //tr 02_07_2019
                                    //avg duration
                                    //prompt chained
                                    if (promptUp >= 1)
                                        bPromptAvgDurationMoveUp = false;
                                    if (TempRules.pctAvgDurationMoveUp.iScoreRequired > 0)
                                    {
                                        bPromptAvgDurationMoveUp = ValidateUp(oSession.StudentId, avgDurationId, TempRules.pctAvgDurationMoveUp.iScoreRequired, reqSess,
                                            TempRules.pctAvgDurationMoveUp.iTotalCorrectInstance, TempRules.pctAvgDurationMoveUp.bConsequetiveIndex, status);

                                        bRuleStatusIOA = oDisc.checkConditionIOA(bPromptMoveUpIOA, bIOA);
                                        bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bPromptMoveUpMultiTecher, bMultyTchr);
                                        if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                        {
                                            //if (promptUp >= 1)
                                            //    bPromptFrequencyMoveUp = false;
                                            if (bPromptAvgDurationMoveUp)
                                            {
                                                if (sCurrentPrompt != LessonpromptUsed[LessonpromptUsed.Length - 1])
                                                {
                                                    int iPromptIndex = Chained.Model.PromptIndex(LessonpromptUsed, sCurrentPrompt);
                                                    if (iPromptIndex < LessonpromptUsed.Length)
                                                    {
                                                        sNextLessonPrompt = LessonpromptUsed[iPromptIndex + 1];
                                                        bPromptMoveUp = true;
                                                        bAvgDurationMoveUp = false;
                                                        bAvgDurationMoveDown = false;
                                                    }
                                                    else
                                                        bPromptAvgDurationMoveUp = false;
                                                }
                                                else
                                                    bPromptAvgDurationMoveUp = false;
                                            }
                                        }
                                    }
                                    else
                                        bPromptAvgDurationMoveUp = false;

                                    if (!bPromptAvgDurationMoveUp)
                                    {
                                        if (promptDown >= 1)
                                            bPromptAvgDurationMoveDown = false;
                                        if (TempRules.pctAvgDurationMoveDown.iScoreRequired > 0)
                                        {
                                            bPromptAvgDurationMoveDown = ValidateDown(oSession.StudentId, avgDurationId, TempRules.pctAvgDurationMoveDown.iScoreRequired, reqSess,
                                                TempRules.pctAvgDurationMoveDown.iTotalCorrectInstance, TempRules.pctAvgDurationMoveDown.bConsequetiveIndex, status);

                                            bRuleStatusIOA = oDisc.checkConditionIOA(bPromptMoveDownIOA, bIOA);
                                            bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bPromptMoveDownMultiTecher, bMultyTchr);
                                            if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                            {
                                                //if (promptDown >= 1)
                                                //    bPromptFrequencyMoveDown = false;
                                                if (bPromptAvgDurationMoveDown)
                                                {
                                                    if (sCurrentPrompt != LessonpromptUsed[0])
                                                    {
                                                        int iPromptIndex = Chained.Model.PromptIndex(LessonpromptUsed, sCurrentPrompt);
                                                        if (iPromptIndex > 0)
                                                        {
                                                            sNextLessonPrompt = LessonpromptUsed[iPromptIndex - 1];
                                                            bPromptMoveBack = true;
                                                            bAvgDurationMoveDown = false;
                                                            bAvgDurationMoveUp = false;
                                                        }
                                                        else
                                                            bPromptAvgDurationMoveDown = false;
                                                    }
                                                    else
                                                        bPromptAvgDurationMoveDown = false;
                                                }

                                            }
                                        }
                                        else
                                            bPromptAvgDurationMoveDown = false;



                                        //step chained
                                        if (!bPromptAvgDurationMoveUp && !bPromptAvgDurationMoveDown)
                                        {
                                            TempRules = GetStepRules(oTemp.TemplateId, iColId);
                                            if (TempRules.pctAvgDurationMoveUp.iScoreRequired > 0)
                                            {
                                                bstepAvgDurationMoveUp = ValidateUp(oSession.StudentId, avgDurationId, TempRules.pctAvgDurationMoveUp.iScoreRequired, reqSess,
                                                    TempRules.pctAvgDurationMoveUp.iTotalCorrectInstance, TempRules.pctAvgDurationMoveUp.bConsequetiveIndex, status);

                                                int stepcount = TrialLists.trialsCount;

                                                bRuleStatusIOA = oDisc.checkConditionIOA(bStepMoveUpIOA, bIOA);
                                                bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bStepMoveUpMultiTecher, bMultyTchr);
                                                if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                {
                                                    if (bstepAvgDurationMoveUp)
                                                    {
                                                        //if (oDS.CrntStep != stepcount)
                                                        //{
                                                        if (oDS.CrntStep < stepcount)
                                                        {
                                                            nextStep = oDS.CrntStep + 1;

                                                            if (oDS.CrntStep == stepcount)
                                                            {
                                                                nextStep = stepcount;
                                                            }
                                                            if (bStepMoveUp && bstepAvgDurationMoveUp)
                                                                bStepMoveUp = true;
                                                            bAvgDurationMoveUp = false;
                                                            bAvgDurationMoveDown = false;

                                                        }
                                                        else
                                                            bstepAvgDurationMoveUp = false;
                                                        //} 

                                                        //    else
                                                        //        bstepFrequencyMoveUp = false;
                                                    }

                                                }
                                            }
                                        }
                                        else
                                            bstepAvgDurationMoveUp = false;

                                        if (!bPromptAvgDurationMoveUp && !bPromptAvgDurationMoveDown)
                                        {
                                            if (TempRules.pctAvgDurationMoveDown.iScoreRequired > 0)
                                            {
                                                bstepAvgDurationMoveDown = ValidateDown(oSession.StudentId, avgDurationId, TempRules.pctAvgDurationMoveDown.iScoreRequired, reqSess,
                                                    TempRules.pctAvgDurationMoveDown.iTotalCorrectInstance, TempRules.pctAvgDurationMoveDown.bConsequetiveIndex, status);

                                                int stepcount = TrialLists.trialsCount;

                                                bRuleStatusIOA = oDisc.checkConditionIOA(bStepMoveDownIOA, bIOA);
                                                bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bStepMoveDownMultiTecher, bMultyTchr);
                                                if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                {
                                                    //if (promptDown >= 1)
                                                    //    bPromptFrequencyMoveDown = false;
                                                    if (bstepAvgDurationMoveDown)
                                                    {
                                                        //    if (oDS.CrntStep != stepcount)
                                                        //{
                                                        if (oDS.CrntStep <= stepcount)
                                                        {
                                                            nextStep = oDS.CrntStep - 1;
                                                            if (bStepMoveBack && bstepAvgDurationMoveDown)
                                                                bStepMoveBack = true;

                                                            if (oDS.CrntStep == 1)
                                                            {
                                                                nextStep = 1;
                                                                bstepAvgDurationMoveDown = false;
                                                            }
                                                            bAvgDurationMoveUp = false;
                                                            bAvgDurationMoveDown = false;
                                                        }
                                                        else
                                                            bstepAvgDurationMoveDown = false;
                                                        //} 

                                                        //    else
                                                        //        bstepFrequencyMoveDown = false;
                                                    }

                                                }
                                            }
                                        }
                                        else
                                            bstepAvgDurationMoveDown = false;

                                        //set chained
                                        if (!bstepAvgDurationMoveUp && !bstepAvgDurationMoveDown && !bPromptAvgDurationMoveUp && !bPromptAvgDurationMoveDown)
                                        {
                                            TempRules = GetSetRules(oTemp.TemplateId, iColId);

                                            if (TempRules.pctAvgDurationMoveUp.iScoreRequired > 0)
                                            {
                                                bAvgDurationMoveUp = ValidateUp(oSession.StudentId, avgDurationId, TempRules.pctAvgDurationMoveUp.iScoreRequired, reqSess,
                                                    TempRules.pctAvgDurationMoveUp.iTotalCorrectInstance, TempRules.pctAvgDurationMoveUp.bConsequetiveIndex, status);
                                                int setcount = TrialLists.totalSet;

                                                bRuleStatusIOA = oDisc.checkConditionIOA(bSetMoveUpIOA, bIOA);
                                                bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bSetMoveUpMultiTecher, bMultyTchr);
                                                if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                {

                                                    if (bAvgDurationMoveUp)
                                                    {
                                                        if (oDS.CrntSetNbr < setcount)
                                                            nextSet = oDS.CrntSetNbr + 1;
                                                        if (oDS.CrntSetNbr == setcount)
                                                        {
                                                            nextSet = setcount;
                                                            CompletionStatusSet = "COMPLETED";
                                                        }
                                                        if (CompletionStatusSet == "COMPLETED")
                                                        {
                                                            bSetCompleted = true;
                                                        }
                                                        else
                                                        {
                                                            bSetCompleted = false;
                                                        }
                                                        if (bSetMoveUp && bAvgDurationMoveUp)
                                                            bSetMoveUp = true;
                                                    }
                                                }



                                            }
                                            if (TempRules.pctAvgDurationMoveDown.iScoreRequired > 0)
                                            {
                                                bAvgDurationMoveDown = ValidateDown(oSession.StudentId, avgDurationId, TempRules.pctAvgDurationMoveDown.iScoreRequired, reqSess,
                                                    TempRules.pctAvgDurationMoveDown.iTotalCorrectInstance, TempRules.pctAvgDurationMoveDown.bConsequetiveIndex, status);
                                                int setcount = TrialLists.totalSet;

                                                bRuleStatusIOA = oDisc.checkConditionIOA(bSetMoveDownIOA, bIOA);
                                                bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bSetMoveDownMultiTecher, bMultyTchr);
                                                if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                {

                                                    if (bAvgDurationMoveDown)
                                                    {
                                                        if (oDS.CrntSetNbr <= setcount)
                                                            nextSet = oDS.CrntSetNbr - 1;
                                                        if (oDS.CrntSetNbr == 1)
                                                            nextSet = 1;
                                                        if (bSetMoveBack && bAvgDurationMoveDown)
                                                            bSetMoveBack = true;
                                                    }
                                                }

                                            }

                                        }
                                        FreqDurTextFlag = true;

                                    }
                                    //avg duration
                                    TempRules = GetPromptRules(oTemp.TemplateId, iColId);
                                    //total duration chained
                                    if (TempRules.pctTotalDurationMoveUp.iTotalCorrectInstance > 0)
                                    {
                                        if (promptUp >= 1)
                                            bPromptTotDurationMoveUp = false;
                                        if (TempRules.pctTotalDurationMoveUp.iScoreRequired > 0)
                                        {
                                            bPromptTotDurationMoveUp = ValidateUp(oSession.StudentId, totDuraionId, TempRules.pctTotalDurationMoveUp.iScoreRequired, reqSess,
                                                TempRules.pctTotalDurationMoveUp.iTotalCorrectInstance, TempRules.pctTotalDurationMoveUp.bConsequetiveIndex, status);

                                            bRuleStatusIOA = oDisc.checkConditionIOA(bPromptMoveUpIOA, bIOA);
                                            bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bPromptMoveUpMultiTecher, bMultyTchr);
                                            if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                            {
                                                //if (promptUp >= 1)
                                                //    bPromptFrequencyMoveUp = false;
                                                if (bPromptTotDurationMoveUp)
                                                {
                                                    if (sCurrentPrompt != LessonpromptUsed[LessonpromptUsed.Length - 1])
                                                    {
                                                        int iPromptIndex = Chained.Model.PromptIndex(LessonpromptUsed, sCurrentPrompt);
                                                        if (iPromptIndex < LessonpromptUsed.Length)
                                                        {
                                                            sNextLessonPrompt = LessonpromptUsed[iPromptIndex + 1];
                                                            bPromptMoveUp = true;
                                                            bTotDurationMoveUp = false;
                                                            bTotDurationMoveDown = false;
                                                        }
                                                        else
                                                            bPromptTotDurationMoveUp = false;
                                                    }
                                                    else
                                                        bPromptTotDurationMoveUp = false;
                                                }
                                            }
                                        }
                                    }
                                        else
                                            bPromptTotDurationMoveUp = false;
                                        if (!bPromptTotDurationMoveUp)
                                        {
                                            if (promptDown >= 1)
                                                bPromptTotDurationMoveDown = false;
                                            if (TempRules.pctTotalDurationMoveDown.iScoreRequired > 0)
                                            {
                                                bPromptTotDurationMoveDown = ValidateDown(oSession.StudentId, totDuraionId, TempRules.pctTotalDurationMoveDown.iScoreRequired, reqSess,
                                                    TempRules.pctTotalDurationMoveDown.iTotalCorrectInstance, TempRules.pctTotalDurationMoveDown.bConsequetiveIndex, status);

                                                bRuleStatusIOA = oDisc.checkConditionIOA(bPromptMoveDownIOA, bIOA);
                                                bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bPromptMoveDownMultiTecher, bMultyTchr);
                                                if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                {
                                                    //if (promptDown >= 1)
                                                    //    bPromptFrequencyMoveDown = false;
                                                    if (bPromptTotDurationMoveDown)
                                                    {
                                                        if (sCurrentPrompt != LessonpromptUsed[0])
                                                        {
                                                            int iPromptIndex = Chained.Model.PromptIndex(LessonpromptUsed, sCurrentPrompt);
                                                            if (iPromptIndex > 0)
                                                            {
                                                                sNextLessonPrompt = LessonpromptUsed[iPromptIndex - 1];
                                                                bPromptMoveBack = true;
                                                                bTotDurationMoveDown = false;
                                                                bTotDurationMoveUp = false;
                                                            }
                                                            else
                                                                bPromptTotDurationMoveDown = false;
                                                        }
                                                        else
                                                            bPromptTotDurationMoveDown = false;
                                                    }

                                                }
                                            }
                                        else
                                            bPromptTotDurationMoveDown = false;
                                        //total duration
                                        //tr 02_07_2019

                                        //step chained
                                        if (!bPromptTotDurationMoveUp && !bPromptTotDurationMoveDown)
                                        {
                                            TempRules = GetStepRules(oTemp.TemplateId, iColId);
                                            if (TempRules.pctTotalDurationMoveUp.iScoreRequired > 0)
                                            {
                                                bstepTotDurationMoveUp = ValidateUp(oSession.StudentId, totDuraionId, TempRules.pctTotalDurationMoveUp.iScoreRequired, reqSess,
                                                    TempRules.pctTotalDurationMoveUp.iTotalCorrectInstance, TempRules.pctTotalDurationMoveUp.bConsequetiveIndex, status);

                                                int stepcount = TrialLists.trialsCount;

                                                bRuleStatusIOA = oDisc.checkConditionIOA(bStepMoveUpIOA, bIOA);
                                                bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bStepMoveUpMultiTecher, bMultyTchr);
                                                if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                {
                                                    if (bstepTotDurationMoveUp)
                                                    {
                                                        //if (oDS.CrntStep != stepcount)
                                                        //{
                                                        if (oDS.CrntStep < stepcount)
                                                        {
                                                            nextStep = oDS.CrntStep + 1;

                                                            if (oDS.CrntStep == stepcount)
                                                            {
                                                                nextStep = stepcount;
                                                            }
                                                            if (bStepMoveUp && bstepTotDurationMoveUp)
                                                                bStepMoveUp = true;
                                                            bTotDurationMoveUp = false;
                                                            bTotDurationMoveDown = false;

                                                        }
                                                        else
                                                            bstepTotDurationMoveUp = false;
                                                        //} 

                                                        //    else
                                                        //        bstepFrequencyMoveUp = false;
                                                    }

                                                }
                                            }
                                        }
                                        else
                                            bstepTotDurationMoveUp = false;

                                        if (!bPromptTotDurationMoveUp && !bPromptTotDurationMoveDown)
                                        {
                                            if (TempRules.pctTotalDurationMoveDown.iScoreRequired > 0)
                                            {
                                                bstepTotDurationMoveDown = ValidateDown(oSession.StudentId, totDuraionId, TempRules.pctTotalDurationMoveDown.iScoreRequired, reqSess,
                                                    TempRules.pctTotalDurationMoveDown.iTotalCorrectInstance, TempRules.pctTotalDurationMoveDown.bConsequetiveIndex, status);

                                                int stepcount = TrialLists.trialsCount;

                                                bRuleStatusIOA = oDisc.checkConditionIOA(bStepMoveDownIOA, bIOA);
                                                bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bStepMoveDownMultiTecher, bMultyTchr);
                                                if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                {
                                                    //if (promptDown >= 1)
                                                    //    bPromptFrequencyMoveDown = false;
                                                    if (bstepTotDurationMoveDown)
                                                    {
                                                        //    if (oDS.CrntStep != stepcount)
                                                        //{
                                                        if (oDS.CrntStep <= stepcount)
                                                        {
                                                            nextStep = oDS.CrntStep - 1;
                                                            if (bStepMoveBack && bstepTotDurationMoveDown)
                                                                bStepMoveBack = true;

                                                            if (oDS.CrntStep == 1)
                                                            {
                                                                nextStep = 1;
                                                                bstepTotDurationMoveDown = false;
                                                            }
                                                            bTotDurationMoveUp = false;
                                                            bTotDurationMoveDown = false;
                                                        }
                                                        else
                                                            bstepTotDurationMoveDown = false;
                                                        //} 

                                                        //    else
                                                        //        bstepFrequencyMoveDown = false;
                                                    }

                                                }
                                            }
                                        }
                                        else
                                            bstepTotDurationMoveDown = false;

                                        if (!bstepTotDurationMoveUp && !bstepTotDurationMoveDown && !bPromptTotDurationMoveUp && !bPromptTotDurationMoveDown)
                                        {
                                            TempRules = GetSetRules(oTemp.TemplateId, iColId);

                                            if (TempRules.pctTotalDurationMoveUp.iScoreRequired > 0)
                                            {
                                                //CompletionStatusSet = "";
                                                bTotDurationMoveUp = ValidateUp(oSession.StudentId, totDuraionId, TempRules.pctTotalDurationMoveUp.iScoreRequired, reqSess,
                                                    TempRules.pctTotalDurationMoveUp.iTotalCorrectInstance, TempRules.pctTotalDurationMoveUp.bConsequetiveIndex, status);
                                                int setcount = TrialLists.totalSet;

                                                bRuleStatusIOA = oDisc.checkConditionIOA(bSetMoveUpIOA, bIOA);
                                                bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bSetMoveUpMultiTecher, bMultyTchr);
                                                if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                {

                                                    if (bTotDurationMoveUp)
                                                    {
                                                        if (oDS.CrntSetNbr < setcount)
                                                            nextSet = oDS.CrntSetNbr + 1;
                                                        if (oDS.CrntSetNbr == setcount)
                                                        {
                                                            nextSet = setcount;
                                                            CompletionStatusSet = "COMPLETED";
                                                        }
                                                        if (CompletionStatusSet == "COMPLETED")
                                                        {
                                                            bSetCompleted = true;
                                                        }
                                                        else
                                                        {
                                                            bSetCompleted = false;
                                                        }
                                                        if (bSetMoveUp && bTotDurationMoveUp)
                                                            bSetMoveUp = true;
                                                    }
                                                }


                                            }
                                            if (TempRules.pctTotalDurationMoveDown.iScoreRequired > 0)
                                            {
                                                bTotDurationMoveDown = ValidateDown(oSession.StudentId, totDuraionId, TempRules.pctTotalDurationMoveDown.iScoreRequired, reqSess,
                                                    TempRules.pctTotalDurationMoveDown.iTotalCorrectInstance, TempRules.pctTotalDurationMoveDown.bConsequetiveIndex, status);
                                                int setcount = TrialLists.totalSet;

                                                bRuleStatusIOA = oDisc.checkConditionIOA(bSetMoveDownIOA, bIOA);
                                                bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bSetMoveDownMultiTecher, bMultyTchr);
                                                if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                {

                                                    if (bTotDurationMoveDown)
                                                    {
                                                        if (oDS.CrntSetNbr <= setcount)
                                                            nextSet = oDS.CrntSetNbr - 1;
                                                        if (oDS.CrntSetNbr == 1)
                                                            nextSet = 1;
                                                        if (bSetMoveBack && bTotDurationMoveDown)
                                                            bSetMoveBack = true;
                                                    }
                                                }
                                            }
                                        }

                                        FreqDurTextFlag = true;
                                    }
                                }
                                #endregion
                                //Code added for List 5 Task #9 16-feb-2021 change Moveup/down Criteria for Frequncy and Duration START--
                                #region MoveUp in More than critera
                                else if (MoveUpstat == 0)
                                {
                                    freqdureloop++;
                                    bool status = true;
                                    CompletionStatusSet = "";
                                    //TempRules = GetPromptRules(oTemp.TemplateId, iColId);
                                    avgDurationId = Convert.ToInt32(ViewState["avgDurationId"]);
                                    totDuraionId = Convert.ToInt32(ViewState["totDuraionId"]);
                                    TempRules = GetPromptRules(oTemp.TemplateId, iColId);

                                    //tr 02_07_2019
                                    //avg duration
                                    //prompt chained
                                    if (promptUp >= 1)
                                        bPromptAvgDurationMoveUp = false;
                                    if (TempRules.pctAvgDurationMoveUp.iScoreRequired > 0)
                                    {
                                        bPromptAvgDurationMoveUp = ValidateDown(oSession.StudentId, avgDurationId, TempRules.pctAvgDurationMoveUp.iScoreRequired, reqSess,
                                            TempRules.pctAvgDurationMoveUp.iTotalCorrectInstance, TempRules.pctAvgDurationMoveUp.bConsequetiveIndex, status);

                                        bRuleStatusIOA = oDisc.checkConditionIOA(bPromptMoveUpIOA, bIOA);
                                        bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bPromptMoveUpMultiTecher, bMultyTchr);
                                        if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                        {
                                            //if (promptUp >= 1)
                                            //    bPromptFrequencyMoveUp = false;
                                            if (bPromptAvgDurationMoveUp)
                                            {
                                                if (sCurrentPrompt != LessonpromptUsed[LessonpromptUsed.Length - 1])
                                                {
                                                    int iPromptIndex = Chained.Model.PromptIndex(LessonpromptUsed, sCurrentPrompt);
                                                    if (iPromptIndex < LessonpromptUsed.Length)
                                                    {
                                                        sNextLessonPrompt = LessonpromptUsed[iPromptIndex + 1];
                                                        bPromptMoveUp = true;
                                                        bAvgDurationMoveUp = false;
                                                        bAvgDurationMoveDown = false;
                                                    }
                                                    else
                                                        bPromptAvgDurationMoveUp = false;
                                                }
                                                else
                                                    bPromptAvgDurationMoveUp = false;
                                            }
                                        }
                                    }
                                    else
                                        bPromptAvgDurationMoveUp = false;

                                    if (!bPromptAvgDurationMoveUp)
                                    {
                                        if (promptDown >= 1)
                                            bPromptAvgDurationMoveDown = false;
                                        if (TempRules.pctAvgDurationMoveDown.iScoreRequired > 0)
                                        {
                                            bPromptAvgDurationMoveDown = ValidateUp(oSession.StudentId, avgDurationId, TempRules.pctAvgDurationMoveDown.iScoreRequired, reqSess,
                                                TempRules.pctAvgDurationMoveDown.iTotalCorrectInstance, TempRules.pctAvgDurationMoveDown.bConsequetiveIndex, status);

                                            bRuleStatusIOA = oDisc.checkConditionIOA(bPromptMoveDownIOA, bIOA);
                                            bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bPromptMoveDownMultiTecher, bMultyTchr);
                                            if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                            {
                                                //if (promptDown >= 1)
                                                //    bPromptFrequencyMoveDown = false;
                                                if (bPromptAvgDurationMoveDown)
                                                {
                                                    if (sCurrentPrompt != LessonpromptUsed[0])
                                                    {
                                                        int iPromptIndex = Chained.Model.PromptIndex(LessonpromptUsed, sCurrentPrompt);
                                                        if (iPromptIndex > 0)
                                                        {
                                                            sNextLessonPrompt = LessonpromptUsed[iPromptIndex - 1];
                                                            bPromptMoveBack = true;
                                                            bAvgDurationMoveDown = false;
                                                            bAvgDurationMoveUp = false;
                                                        }
                                                        else
                                                            bPromptAvgDurationMoveDown = false;
                                                    }
                                                    else
                                                        bPromptAvgDurationMoveDown = false;
                                                }

                                            }
                                        }
                                        else
                                            bPromptAvgDurationMoveDown = false;



                                        //step chained
                                        if (!bPromptAvgDurationMoveUp && !bPromptAvgDurationMoveDown)
                                        {
                                            TempRules = GetStepRules(oTemp.TemplateId, iColId);
                                            if (TempRules.pctAvgDurationMoveUp.iScoreRequired > 0)
                                            {
                                                bstepAvgDurationMoveUp = ValidateDown(oSession.StudentId, avgDurationId, TempRules.pctAvgDurationMoveUp.iScoreRequired, reqSess,
                                                    TempRules.pctAvgDurationMoveUp.iTotalCorrectInstance, TempRules.pctAvgDurationMoveUp.bConsequetiveIndex, status);

                                                int stepcount = TrialLists.trialsCount;

                                                bRuleStatusIOA = oDisc.checkConditionIOA(bStepMoveUpIOA, bIOA);
                                                bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bStepMoveUpMultiTecher, bMultyTchr);
                                                if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                {
                                                    if (bstepAvgDurationMoveUp)
                                                    {
                                                        //if (oDS.CrntStep != stepcount)
                                                        //{
                                                        if (oDS.CrntStep < stepcount)
                                                        {
                                                            nextStep = oDS.CrntStep + 1;

                                                            if (oDS.CrntStep == stepcount)
                                                            {
                                                                nextStep = stepcount;
                                                            }
                                                            if (bStepMoveUp && bstepAvgDurationMoveUp)
                                                                bStepMoveUp = true;
                                                            bAvgDurationMoveUp = false;
                                                            bAvgDurationMoveDown = false;

                                                        }
                                                        else
                                                            bstepAvgDurationMoveUp = false;
                                                        //} 

                                                        //    else
                                                        //        bstepFrequencyMoveUp = false;
                                                    }

                                                }
                                            }
                                        }
                                        else
                                            bstepAvgDurationMoveUp = false;

                                        if (!bPromptAvgDurationMoveUp && !bPromptAvgDurationMoveDown)
                                        {
                                            if (TempRules.pctAvgDurationMoveDown.iScoreRequired > 0)
                                            {
                                                bstepAvgDurationMoveDown = ValidateUp(oSession.StudentId, avgDurationId, TempRules.pctAvgDurationMoveDown.iScoreRequired, reqSess,
                                                    TempRules.pctAvgDurationMoveDown.iTotalCorrectInstance, TempRules.pctAvgDurationMoveDown.bConsequetiveIndex, status);

                                                int stepcount = TrialLists.trialsCount;

                                                bRuleStatusIOA = oDisc.checkConditionIOA(bStepMoveDownIOA, bIOA);
                                                bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bStepMoveDownMultiTecher, bMultyTchr);
                                                if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                {
                                                    //if (promptDown >= 1)
                                                    //    bPromptFrequencyMoveDown = false;
                                                    if (bstepAvgDurationMoveDown)
                                                    {
                                                        //    if (oDS.CrntStep != stepcount)
                                                        //{
                                                        if (oDS.CrntStep <= stepcount)
                                                        {
                                                            nextStep = oDS.CrntStep - 1;
                                                            if (bStepMoveBack && bstepAvgDurationMoveDown)
                                                                bStepMoveBack = true;

                                                            if (oDS.CrntStep == 1)
                                                            {
                                                                nextStep = 1;
                                                                bstepAvgDurationMoveDown = false;
                                                            }
                                                            bAvgDurationMoveUp = false;
                                                            bAvgDurationMoveDown = false;
                                                        }
                                                        else
                                                            bstepAvgDurationMoveDown = false;
                                                        //} 

                                                        //    else
                                                        //        bstepFrequencyMoveDown = false;
                                                    }

                                                }
                                            }
                                        }
                                        else
                                            bstepAvgDurationMoveDown = false;

                                        //set chained
                                        if (!bstepAvgDurationMoveUp && !bstepAvgDurationMoveDown && !bPromptAvgDurationMoveUp && !bPromptAvgDurationMoveDown)
                                        {
                                            TempRules = GetSetRules(oTemp.TemplateId, iColId);

                                            if (TempRules.pctAvgDurationMoveUp.iScoreRequired > 0)
                                            {
                                                bAvgDurationMoveUp = ValidateDown(oSession.StudentId, avgDurationId, TempRules.pctAvgDurationMoveUp.iScoreRequired, reqSess,
                                                    TempRules.pctAvgDurationMoveUp.iTotalCorrectInstance, TempRules.pctAvgDurationMoveUp.bConsequetiveIndex, status);
                                                int setcount = TrialLists.totalSet;

                                                bRuleStatusIOA = oDisc.checkConditionIOA(bSetMoveUpIOA, bIOA);
                                                bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bSetMoveUpMultiTecher, bMultyTchr);
                                                if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                {

                                                    if (bAvgDurationMoveUp)
                                                    {
                                                        if (oDS.CrntSetNbr < setcount)
                                                            nextSet = oDS.CrntSetNbr + 1;
                                                        if (oDS.CrntSetNbr == setcount)
                                                        {
                                                            nextSet = setcount;
                                                            CompletionStatusSet = "COMPLETED";
                                                        }
                                                        if (CompletionStatusSet == "COMPLETED")
                                                        {
                                                            bSetCompleted = true;
                                                        }
                                                        else
                                                        {
                                                            bSetCompleted = false;
                                                        }
                                                        if (bSetMoveUp && bAvgDurationMoveUp)
                                                            bSetMoveUp = true;
                                                    }
                                                }



                                            }
                                            if (TempRules.pctAvgDurationMoveDown.iScoreRequired > 0)
                                            {
                                                bAvgDurationMoveDown = ValidateUp(oSession.StudentId, avgDurationId, TempRules.pctAvgDurationMoveDown.iScoreRequired, reqSess,
                                                    TempRules.pctAvgDurationMoveDown.iTotalCorrectInstance, TempRules.pctAvgDurationMoveDown.bConsequetiveIndex, status);
                                                int setcount = TrialLists.totalSet;

                                                bRuleStatusIOA = oDisc.checkConditionIOA(bSetMoveDownIOA, bIOA);
                                                bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bSetMoveDownMultiTecher, bMultyTchr);
                                                if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                {

                                                    if (bAvgDurationMoveDown)
                                                    {
                                                        if (oDS.CrntSetNbr <= setcount)
                                                            nextSet = oDS.CrntSetNbr - 1;
                                                        if (oDS.CrntSetNbr == 1)
                                                            nextSet = 1;
                                                        if (bSetMoveBack && bAvgDurationMoveDown)
                                                            bSetMoveBack = true;
                                                    }
                                                }

                                            }

                                        }
                                        FreqDurTextFlag = true;

                                    }
                                    //avg duration
                                    TempRules = GetPromptRules(oTemp.TemplateId, iColId);
                                    //total duration chained
                                    if (TempRules.pctTotalDurationMoveUp.iTotalCorrectInstance > 0)
                                    {
                                        if (promptUp >= 1)
                                            bPromptTotDurationMoveUp = false;
                                        if (TempRules.pctTotalDurationMoveUp.iScoreRequired > 0)
                                        {
                                            bPromptTotDurationMoveUp = ValidateDown(oSession.StudentId, totDuraionId, TempRules.pctTotalDurationMoveUp.iScoreRequired, reqSess,
                                                TempRules.pctTotalDurationMoveUp.iTotalCorrectInstance, TempRules.pctTotalDurationMoveUp.bConsequetiveIndex, status);

                                            bRuleStatusIOA = oDisc.checkConditionIOA(bPromptMoveUpIOA, bIOA);
                                            bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bPromptMoveUpMultiTecher, bMultyTchr);
                                            if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                            {
                                                //if (promptUp >= 1)
                                                //    bPromptFrequencyMoveUp = false;
                                                if (bPromptTotDurationMoveUp)
                                                {
                                                    if (sCurrentPrompt != LessonpromptUsed[LessonpromptUsed.Length - 1])
                                                    {
                                                        int iPromptIndex = Chained.Model.PromptIndex(LessonpromptUsed, sCurrentPrompt);
                                                        if (iPromptIndex < LessonpromptUsed.Length)
                                                        {
                                                            sNextLessonPrompt = LessonpromptUsed[iPromptIndex + 1];
                                                            bPromptMoveUp = true;
                                                            bTotDurationMoveUp = false;
                                                            bTotDurationMoveDown = false;
                                                        }
                                                        else
                                                            bPromptTotDurationMoveUp = false;
                                                    }
                                                    else
                                                        bPromptTotDurationMoveUp = false;
                                                }
                                            }
                                        }
                                    }
                                    else
                                        bPromptTotDurationMoveUp = false;
                                    if (!bPromptTotDurationMoveUp)
                                    {
                                        if (promptDown >= 1)
                                            bPromptTotDurationMoveDown = false;
                                        if (TempRules.pctTotalDurationMoveDown.iScoreRequired > 0)
                                        {
                                            bPromptTotDurationMoveDown = ValidateUp(oSession.StudentId, totDuraionId, TempRules.pctTotalDurationMoveDown.iScoreRequired, reqSess,
                                                TempRules.pctTotalDurationMoveDown.iTotalCorrectInstance, TempRules.pctTotalDurationMoveDown.bConsequetiveIndex, status);

                                            bRuleStatusIOA = oDisc.checkConditionIOA(bPromptMoveDownIOA, bIOA);
                                            bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bPromptMoveDownMultiTecher, bMultyTchr);
                                            if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                            {
                                                //if (promptDown >= 1)
                                                //    bPromptFrequencyMoveDown = false;
                                                if (bPromptTotDurationMoveDown)
                                                {
                                                    if (sCurrentPrompt != LessonpromptUsed[0])
                                                    {
                                                        int iPromptIndex = Chained.Model.PromptIndex(LessonpromptUsed, sCurrentPrompt);
                                                        if (iPromptIndex > 0)
                                                        {
                                                            sNextLessonPrompt = LessonpromptUsed[iPromptIndex - 1];
                                                            bPromptMoveBack = true;
                                                            bTotDurationMoveDown = false;
                                                            bTotDurationMoveUp = false;
                                                        }
                                                        else
                                                            bPromptTotDurationMoveDown = false;
                                                    }
                                                    else
                                                        bPromptTotDurationMoveDown = false;
                                                }

                                            }
                                        }
                                        else
                                            bPromptTotDurationMoveDown = false;
                                        //total duration
                                        //tr 02_07_2019

                                        //step chained
                                        if (!bPromptTotDurationMoveUp && !bPromptTotDurationMoveDown)
                                        {
                                            TempRules = GetStepRules(oTemp.TemplateId, iColId);
                                            if (TempRules.pctTotalDurationMoveUp.iScoreRequired > 0)
                                            {
                                                bstepTotDurationMoveUp = ValidateDown(oSession.StudentId, totDuraionId, TempRules.pctTotalDurationMoveUp.iScoreRequired, reqSess,
                                                    TempRules.pctTotalDurationMoveUp.iTotalCorrectInstance, TempRules.pctTotalDurationMoveUp.bConsequetiveIndex, status);

                                                int stepcount = TrialLists.trialsCount;

                                                bRuleStatusIOA = oDisc.checkConditionIOA(bStepMoveUpIOA, bIOA);
                                                bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bStepMoveUpMultiTecher, bMultyTchr);
                                                if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                {
                                                    if (bstepTotDurationMoveUp)
                                                    {
                                                        //if (oDS.CrntStep != stepcount)
                                                        //{
                                                        if (oDS.CrntStep < stepcount)
                                                        {
                                                            nextStep = oDS.CrntStep + 1;

                                                            if (oDS.CrntStep == stepcount)
                                                            {
                                                                nextStep = stepcount;
                                                            }
                                                            if (bStepMoveUp && bstepTotDurationMoveUp)
                                                                bStepMoveUp = true;
                                                            bTotDurationMoveUp = false;
                                                            bTotDurationMoveDown = false;

                                                        }
                                                        else
                                                            bstepTotDurationMoveUp = false;
                                                        //} 

                                                        //    else
                                                        //        bstepFrequencyMoveUp = false;
                                                    }

                                                }
                                            }
                                        }
                                        else
                                            bstepTotDurationMoveUp = false;

                                        if (!bPromptTotDurationMoveUp && !bPromptTotDurationMoveDown)
                                        {
                                            if (TempRules.pctTotalDurationMoveDown.iScoreRequired > 0)
                                            {
                                                bstepTotDurationMoveDown = ValidateUp(oSession.StudentId, totDuraionId, TempRules.pctTotalDurationMoveDown.iScoreRequired, reqSess,
                                                    TempRules.pctTotalDurationMoveDown.iTotalCorrectInstance, TempRules.pctTotalDurationMoveDown.bConsequetiveIndex, status);

                                                int stepcount = TrialLists.trialsCount;

                                                bRuleStatusIOA = oDisc.checkConditionIOA(bStepMoveDownIOA, bIOA);
                                                bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bStepMoveDownMultiTecher, bMultyTchr);
                                                if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                {
                                                    //if (promptDown >= 1)
                                                    //    bPromptFrequencyMoveDown = false;
                                                    if (bstepTotDurationMoveDown)
                                                    {
                                                        //    if (oDS.CrntStep != stepcount)
                                                        //{
                                                        if (oDS.CrntStep <= stepcount)
                                                        {
                                                            nextStep = oDS.CrntStep - 1;
                                                            if (bStepMoveBack && bstepTotDurationMoveDown)
                                                                bStepMoveBack = true;

                                                            if (oDS.CrntStep == 1)
                                                            {
                                                                nextStep = 1;
                                                                bstepTotDurationMoveDown = false;
                                                            }
                                                            bTotDurationMoveUp = false;
                                                            bTotDurationMoveDown = false;
                                                        }
                                                        else
                                                            bstepTotDurationMoveDown = false;
                                                        //} 

                                                        //    else
                                                        //        bstepFrequencyMoveDown = false;
                                                    }

                                                }
                                            }
                                        }
                                        else
                                            bstepTotDurationMoveDown = false;

                                        if (!bstepTotDurationMoveUp && !bstepTotDurationMoveDown && !bPromptTotDurationMoveUp && !bPromptTotDurationMoveDown)
                                        {
                                            TempRules = GetSetRules(oTemp.TemplateId, iColId);

                                            if (TempRules.pctTotalDurationMoveUp.iScoreRequired > 0)
                                            {
                                                //CompletionStatusSet = "";
                                                bTotDurationMoveUp = ValidateDown(oSession.StudentId, totDuraionId, TempRules.pctTotalDurationMoveUp.iScoreRequired, reqSess,
                                                    TempRules.pctTotalDurationMoveUp.iTotalCorrectInstance, TempRules.pctTotalDurationMoveUp.bConsequetiveIndex, status);
                                                int setcount = TrialLists.totalSet;

                                                bRuleStatusIOA = oDisc.checkConditionIOA(bSetMoveUpIOA, bIOA);
                                                bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bSetMoveUpMultiTecher, bMultyTchr);
                                                if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                {

                                                    if (bTotDurationMoveUp)
                                                    {
                                                        if (oDS.CrntSetNbr < setcount)
                                                            nextSet = oDS.CrntSetNbr + 1;
                                                        if (oDS.CrntSetNbr == setcount)
                                                        {
                                                            nextSet = setcount;
                                                            CompletionStatusSet = "COMPLETED";
                                                        }
                                                        if (CompletionStatusSet == "COMPLETED")
                                                        {
                                                            bSetCompleted = true;
                                                        }
                                                        else
                                                        {
                                                            bSetCompleted = false;
                                                        }
                                                        if (bSetMoveUp && bTotDurationMoveUp)
                                                            bSetMoveUp = true;
                                                    }
                                                }


                                            }
                                            if (TempRules.pctTotalDurationMoveDown.iScoreRequired > 0)
                                            {
                                                bTotDurationMoveDown = ValidateUp(oSession.StudentId, totDuraionId, TempRules.pctTotalDurationMoveDown.iScoreRequired, reqSess,
                                                    TempRules.pctTotalDurationMoveDown.iTotalCorrectInstance, TempRules.pctTotalDurationMoveDown.bConsequetiveIndex, status);
                                                int setcount = TrialLists.totalSet;

                                                bRuleStatusIOA = oDisc.checkConditionIOA(bSetMoveDownIOA, bIOA);
                                                bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bSetMoveDownMultiTecher, bMultyTchr);
                                                if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                {

                                                    if (bTotDurationMoveDown)
                                                    {
                                                        if (oDS.CrntSetNbr <= setcount)
                                                            nextSet = oDS.CrntSetNbr - 1;
                                                        if (oDS.CrntSetNbr == 1)
                                                            nextSet = 1;
                                                        if (bSetMoveBack && bTotDurationMoveDown)
                                                            bSetMoveBack = true;
                                                    }
                                                }
                                            }
                                        }

                                        FreqDurTextFlag = true;
                                    }

                                #endregion
                                    //Code added for List 5 Task #9 16-feb-2021 change Moveup/down Criteria for Frequncy and Duration END--
                                }
                            }
                            #endregion
                            #region comment
                            //    bool status = true;
                            //    TempRules = GetSetRules(oTemp.TemplateId, iColId);
                            //    avgDurationId = Convert.ToInt32(ViewState["avgDurationId"]);
                            //    totDuraionId = Convert.ToInt32(ViewState["totDuraionId"]);
                            //    if (TempRules.pctAvgDurationMoveUp.iScoreRequired > 0)
                            //    {
                            //        bAvgDurationMoveUp = ValidateUp(oSession.StudentId, avgDurationId, TempRules.pctAvgDurationMoveUp.iScoreRequired, reqSess,
                            //            TempRules.pctAvgDurationMoveUp.iTotalCorrectInstance, TempRules.pctAvgDurationMoveUp.bConsequetiveIndex, status);
                            //    }
                            //    if (TempRules.pctAvgDurationMoveDown.iScoreRequired > 0)
                            //    {
                            //        bAvgDurationMoveDown = ValidateDown(oSession.StudentId, avgDurationId, TempRules.pctAvgDurationMoveDown.iScoreRequired, reqSess,
                            //            TempRules.pctAvgDurationMoveDown.iTotalCorrectInstance, TempRules.pctAvgDurationMoveDown.bConsequetiveIndex, status);
                            //    }
                            //    if (TempRules.pctTotalDurationMoveUp.iScoreRequired > 0)
                            //    {
                            //        bTotDurationMoveUp = ValidateUp(oSession.StudentId, totDuraionId, TempRules.pctTotalDurationMoveUp.iScoreRequired, reqSess,
                            //            TempRules.pctTotalDurationMoveUp.iTotalCorrectInstance, TempRules.pctTotalDurationMoveUp.bConsequetiveIndex, status);
                            //    }
                            //    if (TempRules.pctTotalDurationMoveDown.iScoreRequired > 0)
                            //    {
                            //        bTotDurationMoveDown = ValidateDown(oSession.StudentId, totDuraionId, TempRules.pctTotalDurationMoveDown.iScoreRequired, reqSess,
                            //            TempRules.pctTotalDurationMoveDown.iTotalCorrectInstance, TempRules.pctTotalDurationMoveDown.bConsequetiveIndex, status);
                            //    }
                            //    if ((bAvgDurationMoveUp == false) || (bTotDurationMoveUp == false))
                            //    {
                            //        bDurationMoveUp = false;
                            //    }
                            //    if ((bAvgDurationMoveDown == false) || (bTotDurationMoveDown == false))
                            //    {
                            //        bDurationMoveBack = false;
                            //    }

                            //}
                            #endregion
                            #region Frequency
                            else if (dr["ColTypeCd"].ToString() == "Frequency")
                            {
                                int colId = Convert.ToInt32(dr["DSTempSetColId"]);
                                string selqry1 = "select Moveupstat from dstempsetcol DsCol inner join DSTempHdr Hdr on Hdr.DSTempHdrId=DsCol.DSTempHdrId where dsCol.DSTempHdrId=" + oTemp.TemplateId + " And DSTempSetColId= " + colId;
                                object stat = oData.FetchValue(selqry1);
                                if (stat != null)
                                    MoveUpstat = Convert.ToInt16(stat);
                                #region MoveUp on Less than-default
                                if (MoveUpstat == 1)
                                {
                                    freqdureloop++;
                                    bool status = true;
                                    CompletionStatusSet = "";
                                    freqId = Convert.ToInt32(ViewState["freqId"]);

                                    ///for prompt move
                                    ///
                                    TempRules = GetPromptRules(oTemp.TemplateId, iColId);
                                    if (promptUp >= 1)
                                        bPromptFrequencyMoveUp = false;
                                    if (TempRules.pctFrequencyMoveUp.iScoreRequired > 0)
                                    {
                                        bPromptFrequencyMoveUp = ValidateUp(oSession.StudentId, freqId, TempRules.pctFrequencyMoveUp.iScoreRequired, reqSess,
                                            TempRules.pctFrequencyMoveUp.iTotalCorrectInstance, TempRules.pctFrequencyMoveUp.bConsequetiveIndex, status);

                                        bRuleStatusIOA = oDisc.checkConditionIOA(bPromptMoveUpIOA, bIOA);
                                        bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bPromptMoveUpMultiTecher, bMultyTchr);
                                        if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                        {
                                            //if (promptUp >= 1)
                                            //    bPromptFrequencyMoveUp = false;
                                            if (bPromptFrequencyMoveUp)
                                            {
                                                if (sCurrentPrompt != LessonpromptUsed[LessonpromptUsed.Length - 1])
                                                {
                                                    int iPromptIndex = Chained.Model.PromptIndex(LessonpromptUsed, sCurrentPrompt);
                                                    if (iPromptIndex < LessonpromptUsed.Length)
                                                    {
                                                        sNextLessonPrompt = LessonpromptUsed[iPromptIndex + 1];
                                                        bPromptMoveUp = true;
                                                        bFrequencyMoveUp = false;
                                                        bFrequencyMoveDown = false;
                                                    }
                                                    else
                                                        bPromptFrequencyMoveUp = false;
                                                }
                                                else
                                                    bPromptFrequencyMoveUp = false;
                                            }
                                        }
                                    }
                                    else
                                        bPromptFrequencyMoveUp = false;
                                    if (!bPromptFrequencyMoveUp)
                                    {
                                        if (promptDown >= 1)
                                            bPromptFrequencyMoveDown = false;
                                        if (TempRules.pctFrequencyMoveDown.iScoreRequired > 0)
                                        {
                                            bPromptFrequencyMoveDown = ValidateDown(oSession.StudentId, freqId, TempRules.pctFrequencyMoveDown.iScoreRequired, reqSess,
                                                TempRules.pctFrequencyMoveDown.iTotalCorrectInstance, TempRules.pctFrequencyMoveDown.bConsequetiveIndex, status);

                                            bRuleStatusIOA = oDisc.checkConditionIOA(bPromptMoveDownIOA, bIOA);
                                            bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bPromptMoveDownMultiTecher, bMultyTchr);
                                            if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                            {
                                                //if (promptDown >= 1)
                                                //    bPromptFrequencyMoveDown = false;
                                                if (bPromptFrequencyMoveDown)
                                                {
                                                    if (sCurrentPrompt != LessonpromptUsed[0])
                                                    {
                                                        int iPromptIndex = Chained.Model.PromptIndex(LessonpromptUsed, sCurrentPrompt);
                                                        if (iPromptIndex > 0)
                                                        {
                                                            sNextLessonPrompt = LessonpromptUsed[iPromptIndex - 1];
                                                            bPromptMoveBack = true;
                                                            bFrequencyMoveDown = false;
                                                            bFrequencyMoveUp = false;
                                                        }
                                                        else
                                                            bPromptFrequencyMoveDown = false;
                                                    }
                                                    else
                                                        bPromptFrequencyMoveDown = false;
                                                }

                                            }
                                        }
                                    }
                                    else
                                        bPromptFrequencyMoveDown = false;
                                    ///end prompt section
                                    ///

                                    //step 
                                    if (!bPromptFrequencyMoveUp && !bPromptFrequencyMoveDown)
                                    {
                                        TempRules = GetStepRules(oTemp.TemplateId, iColId);
                                        if (TempRules.pctFrequencyMoveUp.iScoreRequired > 0)
                                        {
                                            bstepFrequencyMoveUp = ValidateUp(oSession.StudentId, freqId, TempRules.pctFrequencyMoveUp.iScoreRequired, reqSess,
                                                TempRules.pctFrequencyMoveUp.iTotalCorrectInstance, TempRules.pctFrequencyMoveUp.bConsequetiveIndex, status);

                                            int stepcount = TrialLists.trialsCount;

                                            bRuleStatusIOA = oDisc.checkConditionIOA(bStepMoveUpIOA, bIOA);
                                            bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bStepMoveUpMultiTecher, bMultyTchr);
                                            if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                            {
                                                if (bstepFrequencyMoveUp)
                                                {
                                                    //if (oDS.CrntStep != stepcount)
                                                    //{
                                                    if (oDS.CrntStep < stepcount)
                                                    {
                                                        nextStep = oDS.CrntStep + 1;

                                                        if (oDS.CrntStep == stepcount)
                                                        {
                                                            nextStep = stepcount;
                                                        }
                                                        if (bStepMoveUp && bstepFrequencyMoveUp)
                                                            bStepMoveUp = true;
                                                        bFrequencyMoveUp = false;
                                                        bFrequencyMoveDown = false;

                                                    }
                                                    else
                                                        bstepFrequencyMoveUp = false;
                                                    //} 

                                                    //    else
                                                    //        bstepFrequencyMoveUp = false;
                                                }

                                            }
                                        }
                                    }
                                    else
                                        bstepFrequencyMoveUp = false;

                                    if (!bPromptFrequencyMoveUp && !bPromptFrequencyMoveDown)
                                    {
                                        if (TempRules.pctFrequencyMoveDown.iScoreRequired > 0)
                                        {
                                            bstepFrequencyMoveDown = ValidateDown(oSession.StudentId, freqId, TempRules.pctFrequencyMoveDown.iScoreRequired, reqSess,
                                                TempRules.pctFrequencyMoveDown.iTotalCorrectInstance, TempRules.pctFrequencyMoveDown.bConsequetiveIndex, status);

                                            int stepcount = TrialLists.trialsCount;

                                            bRuleStatusIOA = oDisc.checkConditionIOA(bStepMoveDownIOA, bIOA);
                                            bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bStepMoveDownMultiTecher, bMultyTchr);
                                            if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                            {
                                                //if (promptDown >= 1)
                                                //    bPromptFrequencyMoveDown = false;
                                                if (bstepFrequencyMoveDown)
                                                {
                                                    //    if (oDS.CrntStep != stepcount)
                                                    //{
                                                    if (oDS.CrntStep <= stepcount)
                                                    {
                                                        nextStep = oDS.CrntStep - 1;
                                                        if (bStepMoveBack && bstepFrequencyMoveDown)
                                                            bStepMoveBack = true;

                                                        if (oDS.CrntStep == 1)
                                                        {
                                                            nextStep = 1;
                                                            bstepFrequencyMoveDown = false;
                                                        }
                                                        bFrequencyMoveDown = false;
                                                        bFrequencyMoveUp = false;
                                                    }
                                                    else
                                                        bstepFrequencyMoveDown = false;
                                                    //} 

                                                    //    else
                                                    //        bstepFrequencyMoveDown = false;
                                                }

                                            }
                                        }
                                    }
                                    else
                                        bstepFrequencyMoveDown = false;


                                    //set 
                                    if (!bstepFrequencyMoveUp && !bstepFrequencyMoveDown)
                                    {
                                        TempRules = GetSetRules(oTemp.TemplateId, iColId);

                                        if (TempRules.pctFrequencyMoveUp.iScoreRequired > 0)
                                        {
                                            bFrequencyMoveUp = ValidateUp(oSession.StudentId, freqId, TempRules.pctFrequencyMoveUp.iScoreRequired, reqSess,
                                                TempRules.pctFrequencyMoveUp.iTotalCorrectInstance, TempRules.pctFrequencyMoveUp.bConsequetiveIndex, status);
                                            int setcount = TrialLists.totalSet;

                                            bRuleStatusIOA = oDisc.checkConditionIOA(bSetMoveUpIOA, bIOA);
                                            bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bSetMoveUpMultiTecher, bMultyTchr);
                                            if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                            {

                                                if (bFrequencyMoveUp)
                                                {

                                                    if (oDS.CrntSetNbr < setcount)
                                                        nextSet = oDS.CrntSetNbr + 1;
                                                    if (oDS.CrntSetNbr == setcount)
                                                    {
                                                        nextSet = setcount;
                                                        CompletionStatusSet = "COMPLETED";
                                                    }
                                                    if (bSetMoveUp && bFrequencyMoveUp)
                                                        bSetMoveUp = true;
                                                }
                                            }
                                        }
                                        if (TempRules.pctFrequencyMoveDown.iScoreRequired > 0)
                                        {
                                            bFrequencyMoveDown = ValidateDown(oSession.StudentId, freqId, TempRules.pctFrequencyMoveDown.iScoreRequired, reqSess,
                                                TempRules.pctFrequencyMoveDown.iTotalCorrectInstance, TempRules.pctFrequencyMoveDown.bConsequetiveIndex, status);
                                            int setcount = TrialLists.totalSet;

                                            bRuleStatusIOA = oDisc.checkConditionIOA(bSetMoveDownIOA, bIOA);
                                            bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bSetMoveDownMultiTecher, bMultyTchr);
                                            if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                            {

                                                if (bFrequencyMoveDown)
                                                {
                                                    if (oDS.CrntSetNbr <= setcount)
                                                        nextSet = oDS.CrntSetNbr - 1;
                                                    if (oDS.CrntSetNbr == 1)
                                                        nextSet = 1;
                                                    if (bSetMoveBack && bTotDurationMoveDown)
                                                        bSetMoveBack = true;
                                                }
                                            }
                                        }
                                    }
                                    FreqDurTextFlag = true;
                                }
                                #endregion
                                //Code added for List 5 Task #9 16-feb-2021 change Moveup/down Criteria for Frequncy and Duration START--
                                #region MoveUp on MoreThan
                                else if (MoveUpstat == 0)
                                {
                                    freqdureloop++;
                                    bool status = true;
                                    CompletionStatusSet = "";
                                    freqId = Convert.ToInt32(ViewState["freqId"]);

                                    ///for prompt move
                                    ///
                                    TempRules = GetPromptRules(oTemp.TemplateId, iColId);
                                    if (promptUp >= 1)
                                        bPromptFrequencyMoveUp = false;
                                    if (TempRules.pctFrequencyMoveUp.iScoreRequired > 0)
                                    {
                                        bPromptFrequencyMoveUp = ValidateDown(oSession.StudentId, freqId, TempRules.pctFrequencyMoveUp.iScoreRequired, reqSess,
                                            TempRules.pctFrequencyMoveUp.iTotalCorrectInstance, TempRules.pctFrequencyMoveUp.bConsequetiveIndex, status);

                                        bRuleStatusIOA = oDisc.checkConditionIOA(bPromptMoveUpIOA, bIOA);
                                        bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bPromptMoveUpMultiTecher, bMultyTchr);
                                        if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                        {
                                            //if (promptUp >= 1)
                                            //    bPromptFrequencyMoveUp = false;
                                            if (bPromptFrequencyMoveUp)
                                            {
                                                if (sCurrentPrompt != LessonpromptUsed[LessonpromptUsed.Length - 1])
                                                {
                                                    int iPromptIndex = Chained.Model.PromptIndex(LessonpromptUsed, sCurrentPrompt);
                                                    if (iPromptIndex < LessonpromptUsed.Length)
                                                    {
                                                        sNextLessonPrompt = LessonpromptUsed[iPromptIndex + 1];
                                                        bPromptMoveUp = true;
                                                        bFrequencyMoveUp = false;
                                                        bFrequencyMoveDown = false;
                                                    }
                                                    else
                                                        bPromptFrequencyMoveUp = false;
                                                }
                                                else
                                                    bPromptFrequencyMoveUp = false;
                                            }
                                        }
                                    }
                                    else
                                        bPromptFrequencyMoveUp = false;
                                    if (!bPromptFrequencyMoveUp)
                                    {
                                        if (promptDown >= 1)
                                            bPromptFrequencyMoveDown = false;
                                        if (TempRules.pctFrequencyMoveDown.iScoreRequired > 0)
                                        {
                                            bPromptFrequencyMoveDown = ValidateUp(oSession.StudentId, freqId, TempRules.pctFrequencyMoveDown.iScoreRequired, reqSess,
                                                TempRules.pctFrequencyMoveDown.iTotalCorrectInstance, TempRules.pctFrequencyMoveDown.bConsequetiveIndex, status);

                                            bRuleStatusIOA = oDisc.checkConditionIOA(bPromptMoveDownIOA, bIOA);
                                            bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bPromptMoveDownMultiTecher, bMultyTchr);
                                            if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                            {
                                                //if (promptDown >= 1)
                                                //    bPromptFrequencyMoveDown = false;
                                                if (bPromptFrequencyMoveDown)
                                                {
                                                    if (sCurrentPrompt != LessonpromptUsed[0])
                                                    {
                                                        int iPromptIndex = Chained.Model.PromptIndex(LessonpromptUsed, sCurrentPrompt);
                                                        if (iPromptIndex > 0)
                                                        {
                                                            sNextLessonPrompt = LessonpromptUsed[iPromptIndex - 1];
                                                            bPromptMoveBack = true;
                                                            bFrequencyMoveDown = false;
                                                            bFrequencyMoveUp = false;
                                                        }
                                                        else
                                                            bPromptFrequencyMoveDown = false;
                                                    }
                                                    else
                                                        bPromptFrequencyMoveDown = false;
                                                }

                                            }
                                        }
                                    }
                                    else
                                        bPromptFrequencyMoveDown = false;
                                    ///end prompt section
                                    ///

                                    //step 
                                    if (!bPromptFrequencyMoveUp && !bPromptFrequencyMoveDown)
                                    {
                                        TempRules = GetStepRules(oTemp.TemplateId, iColId);
                                        if (TempRules.pctFrequencyMoveUp.iScoreRequired > 0)
                                        {
                                            bstepFrequencyMoveUp = ValidateDown(oSession.StudentId, freqId, TempRules.pctFrequencyMoveUp.iScoreRequired, reqSess,
                                                TempRules.pctFrequencyMoveUp.iTotalCorrectInstance, TempRules.pctFrequencyMoveUp.bConsequetiveIndex, status);

                                            int stepcount = TrialLists.trialsCount;

                                            bRuleStatusIOA = oDisc.checkConditionIOA(bStepMoveUpIOA, bIOA);
                                            bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bStepMoveUpMultiTecher, bMultyTchr);
                                            if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                            {
                                                if (bstepFrequencyMoveUp)
                                                {
                                                    //if (oDS.CrntStep != stepcount)
                                                    //{
                                                    if (oDS.CrntStep < stepcount)
                                                    {
                                                        nextStep = oDS.CrntStep + 1;

                                                        if (oDS.CrntStep == stepcount)
                                                        {
                                                            nextStep = stepcount;
                                                        }
                                                        if (bStepMoveUp && bstepFrequencyMoveUp)
                                                            bStepMoveUp = true;
                                                        bFrequencyMoveUp = false;
                                                        bFrequencyMoveDown = false;

                                                    }
                                                    else
                                                        bstepFrequencyMoveUp = false;
                                                    //} 

                                                    //    else
                                                    //        bstepFrequencyMoveUp = false;
                                                }

                                            }
                                        }
                                    }
                                    else
                                        bstepFrequencyMoveUp = false;

                                    if (!bPromptFrequencyMoveUp && !bPromptFrequencyMoveDown)
                                    {
                                        if (TempRules.pctFrequencyMoveDown.iScoreRequired > 0)
                                        {
                                            bstepFrequencyMoveDown = ValidateUp(oSession.StudentId, freqId, TempRules.pctFrequencyMoveDown.iScoreRequired, reqSess,
                                                TempRules.pctFrequencyMoveDown.iTotalCorrectInstance, TempRules.pctFrequencyMoveDown.bConsequetiveIndex, status);

                                            int stepcount = TrialLists.trialsCount;

                                            bRuleStatusIOA = oDisc.checkConditionIOA(bStepMoveDownIOA, bIOA);
                                            bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bStepMoveDownMultiTecher, bMultyTchr);
                                            if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                            {
                                                //if (promptDown >= 1)
                                                //    bPromptFrequencyMoveDown = false;
                                                if (bstepFrequencyMoveDown)
                                                {
                                                    //    if (oDS.CrntStep != stepcount)
                                                    //{
                                                    if (oDS.CrntStep <= stepcount)
                                                    {
                                                        nextStep = oDS.CrntStep - 1;
                                                        if (bStepMoveBack && bstepFrequencyMoveDown)
                                                            bStepMoveBack = true;

                                                        if (oDS.CrntStep == 1)
                                                        {
                                                            nextStep = 1;
                                                            bstepFrequencyMoveDown = false;
                                                        }
                                                        bFrequencyMoveDown = false;
                                                        bFrequencyMoveUp = false;
                                                    }
                                                    else
                                                        bstepFrequencyMoveDown = false;
                                                    //} 

                                                    //    else
                                                    //        bstepFrequencyMoveDown = false;
                                                }

                                            }
                                        }
                                    }
                                    else
                                        bstepFrequencyMoveDown = false;


                                    //set 
                                    if (!bstepFrequencyMoveUp && !bstepFrequencyMoveDown)
                                    {
                                        TempRules = GetSetRules(oTemp.TemplateId, iColId);

                                        if (TempRules.pctFrequencyMoveUp.iScoreRequired > 0)
                                        {
                                            bFrequencyMoveUp = ValidateDown(oSession.StudentId, freqId, TempRules.pctFrequencyMoveUp.iScoreRequired, reqSess,
                                                TempRules.pctFrequencyMoveUp.iTotalCorrectInstance, TempRules.pctFrequencyMoveUp.bConsequetiveIndex, status);
                                            int setcount = TrialLists.totalSet;

                                            bRuleStatusIOA = oDisc.checkConditionIOA(bSetMoveUpIOA, bIOA);
                                            bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bSetMoveUpMultiTecher, bMultyTchr);
                                            if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                            {

                                                if (bFrequencyMoveUp)
                                                {

                                                    if (oDS.CrntSetNbr < setcount)
                                                        nextSet = oDS.CrntSetNbr + 1;
                                                    if (oDS.CrntSetNbr == setcount)
                                                    {
                                                        nextSet = setcount;
                                                        CompletionStatusSet = "COMPLETED";
                                                    }
                                                    if (bSetMoveUp && bFrequencyMoveUp)
                                                        bSetMoveUp = true;
                                                }
                                            }
                                        }
                                        if (TempRules.pctFrequencyMoveDown.iScoreRequired > 0)
                                        {
                                            bFrequencyMoveDown = ValidateUp(oSession.StudentId, freqId, TempRules.pctFrequencyMoveDown.iScoreRequired, reqSess,
                                                TempRules.pctFrequencyMoveDown.iTotalCorrectInstance, TempRules.pctFrequencyMoveDown.bConsequetiveIndex, status);
                                            int setcount = TrialLists.totalSet;

                                            bRuleStatusIOA = oDisc.checkConditionIOA(bSetMoveDownIOA, bIOA);
                                            bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bSetMoveDownMultiTecher, bMultyTchr);
                                            if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                            {

                                                if (bFrequencyMoveDown)
                                                {
                                                    if (oDS.CrntSetNbr <= setcount)
                                                        nextSet = oDS.CrntSetNbr - 1;
                                                    if (oDS.CrntSetNbr == 1)
                                                        nextSet = 1;
                                                    if (bSetMoveBack && bTotDurationMoveDown)
                                                        bSetMoveBack = true;
                                                }
                                            }
                                        }
                                    }
                                    FreqDurTextFlag = true;
                                }
                                #endregion
                                //Code added for List 5 Task #9 16-feb-2021 change Moveup/down Criteria for Frequncy and Duration END--
                            }

                            #endregion
                            #region percent independent of all steps
                            else if (dr["ColTypeCd"].ToString() == "Prompt")
                            {
                                TempRules = GetPromptRules(oTemp.TemplateId, iColId);
                                freqdureloop++;
                                bool status = true;
                                CompletionStatusSet = "";
                                //for prompt move
                                IndeallId = Convert.ToInt32(ViewState["IndeallId"]);
                                TempRules = GetPromptRules(oTemp.TemplateId, iColId);
                                if (promptUp >= 1)
                                    bPromptIndallMoveUp = false;
                                if (TempRules.pctIndAllMoveUp.iTotalCorrectInstance > 0)
                                {
                                    bPromptIndallMoveUp = ValidateUp1(oSession.StudentId, IndeallId, TempRules.pctIndAllMoveUp.iScoreRequired, reqSess,
                                        TempRules.pctIndAllMoveUp.iTotalCorrectInstance, TempRules.pctIndAllMoveUp.bConsequetiveIndex, status);

                                    bRuleStatusIOA = oDisc.checkConditionIOA(bPromptIndallMoveUpbIOAReqd, bIOA);
                                    bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bPromptIndallMoveUpbMultiTchr, bMultyTchr);
                                    if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                    {
                                        if (bPromptIndallMoveUp)
                                        {
                                            if (sCurrentPrompt != LessonpromptUsed[LessonpromptUsed.Length - 1])
                                            {
                                                int iPromptIndex = Chained.Model.PromptIndex(LessonpromptUsed, sCurrentPrompt);
                                                if (iPromptIndex < LessonpromptUsed.Length)
                                                {
                                                    sNextLessonPrompt = LessonpromptUsed[iPromptIndex + 1];
                                                    bPromptMoveUp = true;
                                                    bIndallMoveUp = false;
                                                    bIndallMoveDown = false;
                                                }
                                                else
                                                    bPromptIndallMoveUp = false;
                                            }
                                            else
                                                bPromptIndallMoveUp = false;
                                        }
                                        else
                                            bPromptMoveUp = false;
                                    }
                                }
                                else
                                    bPromptIndallMoveUp = false;

                                //step move up
                                if (!bPromptIndallMoveUp)
                                {
                                    TempRules = GetStepRules(oTemp.TemplateId, iColId);
                                    if (TempRules.pctIndAllMoveUp.iScoreRequired > 0)
                                    {
                                        bstepIndallMoveUp = ValidateUp1(oSession.StudentId, IndeallId, TempRules.pctIndAllMoveUp.iScoreRequired, reqSess,
                                            TempRules.pctIndAllMoveUp.iTotalCorrectInstance, TempRules.pctIndAllMoveUp.bConsequetiveIndex, status);

                                        int stepcount = TrialLists.trialsCount;

                                        bRuleStatusIOA = oDisc.checkConditionIOA(bStepMoveUpIOA, bIOA);
                                        bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bStepMoveUpMultiTecher, bMultyTchr);
                                        if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                        {
                                            if (bstepIndallMoveUp)
                                            {
                                                if (oDS.CrntStep < stepcount)
                                                {
                                                    nextStep = oDS.CrntStep + 1;

                                                    if (oDS.CrntStep == stepcount)
                                                    {
                                                        nextStep = stepcount;
                                                    }
                                                    if (bStepMoveUp && bstepIndallMoveUp)
                                                        bStepMoveUp = true;
                                                    else
                                                        bStepMoveUp = false;
                                                }
                                                else
                                                    bstepIndallMoveUp = false;
                                            }
                                            else
                                                bstepIndallMoveUp = false;
                                        }
                                    }
                                    else
                                        bstepIndallMoveUp = false;
                                }
                                else
                                    bstepIndallMoveUp = false;

                                //set move up
                                if (!bstepIndallMoveUp)
                                {
                                    TempRules = GetSetRules(oTemp.TemplateId, iColId);

                                    if (TempRules.pctIndAllMoveUp.iScoreRequired > 0)
                                    {
                                        bIndallMoveUp = ValidateUp1(oSession.StudentId, IndeallId, TempRules.pctIndAllMoveUp.iScoreRequired, reqSess,
                                            TempRules.pctIndAllMoveUp.iTotalCorrectInstance, TempRules.pctIndAllMoveUp.bConsequetiveIndex, status);
                                        int setcount = TrialLists.totalSet;

                                        bRuleStatusIOA = oDisc.checkConditionIOA(bSetMoveUpIOA, bIOA);
                                        bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bSetMoveUpMultiTecher, bMultyTchr);
                                        if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                        {

                                            if (bIndallMoveUp)
                                            {

                                                if (oDS.CrntSetNbr < setcount)
                                                    nextSet = oDS.CrntSetNbr + 1;
                                                if (oDS.CrntSetNbr == setcount)
                                                {
                                                    nextSet = setcount;
                                                    CompletionStatusSet = "COMPLETED";
                                                }
                                                if (bSetMoveUp && bIndallMoveUp)
                                                    bSetMoveUp = true;
                                                else
                                                    bSetMoveUp = false;
                                            }
                                            else
                                                bIndallMoveUp = false;
                                        }
                                    }
                                    else
                                        bIndallMoveUp = false;
                                }
                                else
                                    bIndallMoveUp = false;
                                FreqDurTextFlag = true;
                            }
                            //#endregion


                            #endregion
                            #region +/-
                            else if (dr["ColTypeCd"].ToString() == "+/-")
                            {
                                TempRules = GetPromptRules(oTemp.TemplateId, iColId);
                                freqdureloop++;
                                bool status = true;
                                CompletionStatusSet = "";
                                //for prompt move
                                IndeallId = Convert.ToInt32(ViewState["IndeallId"]);
                                TempRules = GetPromptRules(oTemp.TemplateId, iColId);
                                if (promptUp >= 1)
                                    bPromptIndallMoveUp = false;
                                if (TempRules.pctIndAllMoveUp.iTotalCorrectInstance > 0)
                                {
                                    bPromptIndallMoveUp = ValidateUp1(oSession.StudentId, IndeallId, TempRules.pctIndAllMoveUp.iScoreRequired, reqSess,
                                        TempRules.pctIndAllMoveUp.iTotalCorrectInstance, TempRules.pctIndAllMoveUp.bConsequetiveIndex, status);

                                    bRuleStatusIOA = oDisc.checkConditionIOA(bPromptIndallMoveUpbIOAReqd, bIOA);
                                    bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bPromptIndallMoveUpbMultiTchr, bMultyTchr);
                                    if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                    {
                                        if (bPromptIndallMoveUp)
                                        {
                                            if (sCurrentLessonPrompt != LessonpromptUsed[LessonpromptUsed.Length - 1])
                                            {
                                                int iPromptIndex = Chained.Model.PromptIndex(LessonpromptUsed, sCurrentLessonPrompt);
                                                if (iPromptIndex < LessonpromptUsed.Length)
                                                {
                                                    sNextLessonPrompt = LessonpromptUsed[iPromptIndex + 1];
                                                    bPromptMoveUp = true;
                                                    bIndallMoveUp = false;
                                                    bIndallMoveDown = false;
                                                }
                                                else
                                                    bPromptIndallMoveUp = false;
                                            }
                                            else
                                                bPromptIndallMoveUp = false;
                                        }
                                        else
                                            bPromptMoveUp = false;
                                    }
                                }
                                else
                                    bPromptIndallMoveUp = false;

                                //step move up
                                if (!bPromptIndallMoveUp)
                                {
                                    TempRules = GetStepRules(oTemp.TemplateId, iColId);
                                    if (TempRules.pctIndAllMoveUp.iScoreRequired > 0)
                                    {
                                        bstepIndallMoveUp = ValidateUp1(oSession.StudentId, IndeallId, TempRules.pctIndAllMoveUp.iScoreRequired, reqSess,
                                            TempRules.pctIndAllMoveUp.iTotalCorrectInstance, TempRules.pctIndAllMoveUp.bConsequetiveIndex, status);

                                        int stepcount = TrialLists.trialsCount;

                                        bRuleStatusIOA = oDisc.checkConditionIOA(bStepMoveUpIOA, bIOA);
                                        bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bStepMoveUpMultiTecher, bMultyTchr);
                                        if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                        {
                                            if (bstepIndallMoveUp)
                                            {
                                                if (oDS.CrntStep < stepcount)
                                                {
                                                    nextStep = oDS.CrntStep + 1;

                                                    if (oDS.CrntStep == stepcount)
                                                    {
                                                        nextStep = stepcount;
                                                    }
                                                    if (bStepMoveUp && bstepIndallMoveUp)
                                                        bStepMoveUp = true;
                                                    else
                                                        bStepMoveUp = false;
                                                }
                                                else
                                                    bstepIndallMoveUp = false;
                                            }
                                            else
                                                bstepIndallMoveUp = false;
                                        }
                                    }
                                    else
                                        bstepIndallMoveUp = false;
                                }
                                else
                                    bstepIndallMoveUp = false;

                                //set move up
                                if (!bstepIndallMoveUp)
                                {
                                    TempRules = GetSetRules(oTemp.TemplateId, iColId);

                                    if (TempRules.pctIndAllMoveUp.iScoreRequired > 0)
                                    {
                                        bIndallMoveUp = ValidateUp1(oSession.StudentId, IndeallId, TempRules.pctIndAllMoveUp.iScoreRequired, reqSess,
                                            TempRules.pctIndAllMoveUp.iTotalCorrectInstance, TempRules.pctIndAllMoveUp.bConsequetiveIndex, status);
                                        int setcount = TrialLists.totalSet;

                                        bRuleStatusIOA = oDisc.checkConditionIOA(bSetMoveUpIOA, bIOA);
                                        bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bSetMoveUpMultiTecher, bMultyTchr);
                                        if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                        {

                                            if (bIndallMoveUp)
                                            {

                                                if (oDS.CrntSetNbr < setcount)
                                                    nextSet = oDS.CrntSetNbr + 1;
                                                if (oDS.CrntSetNbr == setcount)
                                                {
                                                    nextSet = setcount;
                                                    CompletionStatusSet = "COMPLETED";
                                                }
                                                if (bSetMoveUp && bIndallMoveUp)
                                                    bSetMoveUp = true;
                                                else
                                                    bSetMoveUp = false;
                                            }
                                            else
                                                bIndallMoveUp = false;
                                        }
                                    }
                                    else
                                        bIndallMoveUp = false;
                                }
                                else
                                    bIndallMoveUp = false;
                                FreqDurTextFlag = true;
                            }
                            //#endregion


                            #endregion
                        }

                        if (oDS.ChainType == "Total Task")
                        {
                            bool stepLevelPrompt = false;
                            if (Session["StepLevelPrompt"] != null && Convert.ToBoolean(Session["StepLevelPrompt"]) == true)
                            {
                                stepLevelPrompt = true;
                            }
                            bStepMoveUp = false; bStepMoveBack = false;
                            //new
                            #region Duration
                            if (dr["ColTypeCd"].ToString() == "Duration")
                            {
                                int colId = Convert.ToInt32(dr["DSTempSetColId"]);
                                string selqry1 = "select Moveupstat from dstempsetcol DsCol inner join DSTempHdr Hdr on Hdr.DSTempHdrId=DsCol.DSTempHdrId where dsCol.DSTempHdrId=" + oTemp.TemplateId + " And DSTempSetColId= " + colId;
                                object stat = oData.FetchValue(selqry1);
                                if (stat != null)
                                    MoveUpstat = Convert.ToInt16(stat);
                                #region MoveUp on Less Than- Default
                                if (MoveUpstat == 1)
                                {
                                    TempRules = GetPromptRules(oTemp.TemplateId, iColId);

                                    if (TempRules.pctAvgDurationMoveUp.iScoreRequired == 0 || TempRules.pctAvgDurationMoveDown.iScoreRequired == 0)
                                    {
                                        freqdureloop++;
                                        bool status = true;
                                        CompletionStatusSet = "";
                                        TempRules = GetSetRules(oTemp.TemplateId, iColId);
                                        avgDurationId = Convert.ToInt32(ViewState["avgDurationId"]);
                                        totDuraionId = Convert.ToInt32(ViewState["totDuraionId"]);
                                        if (TempRules.pctAvgDurationMoveUp.iScoreRequired > 0)
                                        {
                                            bAvgDurationMoveUp = ValidateUp(oSession.StudentId, avgDurationId, TempRules.pctAvgDurationMoveUp.iScoreRequired, reqSess,
                                                TempRules.pctAvgDurationMoveUp.iTotalCorrectInstance, TempRules.pctAvgDurationMoveUp.bConsequetiveIndex, status);
                                            int setcount = TrialLists.totalSet;

                                            bRuleStatusIOA = oDisc.checkConditionIOA(bAvgDurationMoveUpbIOAReqd, bIOA);
                                            bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bAvgDurationMoveUpbMultiTchr, bMultyTchr);
                                            if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                            {

                                                if (bAvgDurationMoveUp)
                                                {
                                                    if (oDS.CrntSetNbr < setcount)
                                                        nextSet = oDS.CrntSetNbr + 1;
                                                    if (oDS.CrntSetNbr == setcount)
                                                    {
                                                        nextSet = setcount;
                                                        CompletionStatusSet = "COMPLETED";
                                                    }
                                                    if (CompletionStatusSet == "COMPLETED")
                                                    {
                                                        bSetCompleted = true;
                                                    }
                                                    else
                                                    {
                                                        bSetCompleted = false;
                                                    }
                                                    if (bSetMoveUp && bAvgDurationMoveUp)
                                                        bSetMoveUp = true;
                                                }
                                            }



                                        }
                                        if (TempRules.pctAvgDurationMoveDown.iScoreRequired > 0)
                                        {
                                            bAvgDurationMoveDown = ValidateDown(oSession.StudentId, avgDurationId, TempRules.pctAvgDurationMoveDown.iScoreRequired, reqSess,
                                                TempRules.pctAvgDurationMoveDown.iTotalCorrectInstance, TempRules.pctAvgDurationMoveDown.bConsequetiveIndex, status);
                                            int setcount = TrialLists.totalSet;

                                            bRuleStatusIOA = oDisc.checkConditionIOA(bAvgDurationMoveDownbIOAReqd, bIOA);
                                            bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bAvgDurationMoveDownbMultiTchr, bMultyTchr);
                                            if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                            {

                                                if (bAvgDurationMoveDown)
                                                {
                                                    if (oDS.CrntSetNbr <= setcount)
                                                        nextSet = oDS.CrntSetNbr - 1;
                                                    if (oDS.CrntSetNbr == 1)
                                                        nextSet = 1;
                                                    if (bSetMoveBack && bAvgDurationMoveDown)
                                                        bSetMoveBack = true;
                                                }
                                            }

                                        }
                                        FreqDurTextFlag = true;
                                    }
                                    else
                                    {
                                        freqdureloop++;
                                        bool status = true;
                                        CompletionStatusSet = "";
                                        avgDurationId = Convert.ToInt32(ViewState["avgDurationId"]);
                                        totDuraionId = Convert.ToInt32(ViewState["totDuraionId"]);
                                        TempRules = GetPromptRules(oTemp.TemplateId, iColId);

                                        //avg duration
                                        if (TempRules.pctAvgDurationMoveUp.iTotalCorrectInstance > 0)
                                        {
                                            if (promptUp >= 1)
                                                bPromptAvgDurationMoveUp = false;
                                            if (TempRules.pctAvgDurationMoveUp.iScoreRequired > 0)
                                            {
                                                bPromptAvgDurationMoveUp = ValidateUp(oSession.StudentId, avgDurationId, TempRules.pctAvgDurationMoveUp.iScoreRequired, reqSess,
                                                    TempRules.pctAvgDurationMoveUp.iTotalCorrectInstance, TempRules.pctAvgDurationMoveUp.bConsequetiveIndex, status);

                                                bRuleStatusIOA = oDisc.checkConditionIOA(bPromptMoveUpIOA, bIOA);
                                                bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bPromptMoveUpMultiTecher, bMultyTchr);
                                                if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                {
                                                    bPromptAvgDurationMoveUp = false;
                                                    if (bPromptAvgDurationMoveUp)
                                                    {
                                                        if (sCurrentPrompt != LessonpromptUsed[LessonpromptUsed.Length - 1])
                                                        {
                                                            int iPromptIndex = DiscreetTrial.Model.PromptIndex(LessonpromptUsed, sCurrentPrompt);
                                                            if (iPromptIndex < LessonpromptUsed.Length)
                                                            {
                                                                sNextLessonPrompt = LessonpromptUsed[iPromptIndex + 1];
                                                                bPromptMoveUp = true;
                                                                bAvgDurationMoveUp = false;
                                                                bAvgDurationMoveDown = false;
                                                            }
                                                            else
                                                                bPromptAvgDurationMoveUp = false;
                                                        }
                                                        else
                                                            bPromptAvgDurationMoveUp = false;
                                                    }
                                                }
                                            }
                                            else
                                                bPromptAvgDurationMoveUp = false;
                                            if (!bPromptAvgDurationMoveUp)
                                            {
                                                if (promptDown >= 1)
                                                    bPromptAvgDurationMoveDown = false;
                                                if (TempRules.pctAvgDurationMoveDown.iScoreRequired > 0)
                                                {
                                                    bPromptAvgDurationMoveDown = ValidateDown(oSession.StudentId, avgDurationId, TempRules.pctAvgDurationMoveDown.iScoreRequired, reqSess,
                                                        TempRules.pctAvgDurationMoveDown.iTotalCorrectInstance, TempRules.pctAvgDurationMoveDown.bConsequetiveIndex, status);

                                                    bRuleStatusIOA = oDisc.checkConditionIOA(bPromptMoveDownIOA, bIOA);
                                                    bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bPromptMoveDownMultiTecher, bMultyTchr);
                                                    if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                    {

                                                        if (bPromptAvgDurationMoveDown)
                                                        {
                                                            if (sCurrentPrompt != LessonpromptUsed[0])
                                                            {
                                                                int iPromptIndex = DiscreetTrial.Model.PromptIndex(LessonpromptUsed, sCurrentPrompt);
                                                                if (iPromptIndex > 0)
                                                                {
                                                                    sNextLessonPrompt = LessonpromptUsed[iPromptIndex - 1];
                                                                    bPromptMoveBack = true;
                                                                    bAvgDurationMoveDown = false;
                                                                    bAvgDurationMoveUp = false;
                                                                }
                                                                else
                                                                    bPromptAvgDurationMoveDown = false;
                                                            }
                                                            else
                                                                bPromptAvgDurationMoveDown = false;
                                                        }

                                                    }
                                                }
                                            }
                                            else
                                                bPromptAvgDurationMoveDown = false;

                                            if (!bPromptAvgDurationMoveUp && !bPromptAvgDurationMoveDown)
                                            {
                                                TempRules = GetSetRules(oTemp.TemplateId, iColId);

                                                if (TempRules.pctAvgDurationMoveUp.iScoreRequired > 0)
                                                {
                                                    bAvgDurationMoveUp = ValidateUp(oSession.StudentId, avgDurationId, TempRules.pctAvgDurationMoveUp.iScoreRequired, reqSess,
                                                        TempRules.pctAvgDurationMoveUp.iTotalCorrectInstance, TempRules.pctAvgDurationMoveUp.bConsequetiveIndex, status);
                                                    int setcount = TrialLists.totalSet;

                                                    bRuleStatusIOA = oDisc.checkConditionIOA(bSetMoveUpIOA, bIOA);
                                                    bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bSetMoveUpMultiTecher, bMultyTchr);
                                                    if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                    {

                                                        if (bAvgDurationMoveUp)
                                                        {
                                                            if (oDS.CrntSetNbr < setcount)
                                                                nextSet = oDS.CrntSetNbr + 1;
                                                            if (oDS.CrntSetNbr == setcount)
                                                            {
                                                                nextSet = setcount;
                                                                CompletionStatusSet = "COMPLETED";
                                                            }
                                                            if (CompletionStatusSet == "COMPLETED")
                                                            {
                                                                bSetCompleted = true;
                                                            }
                                                            else
                                                            {
                                                                bSetCompleted = false;
                                                            }
                                                            if (bSetMoveUp && bAvgDurationMoveUp)
                                                                bSetMoveUp = true;
                                                        }
                                                    }



                                                }
                                                if (TempRules.pctAvgDurationMoveDown.iScoreRequired > 0)
                                                {
                                                    bAvgDurationMoveDown = ValidateDown(oSession.StudentId, avgDurationId, TempRules.pctAvgDurationMoveDown.iScoreRequired, reqSess,
                                                        TempRules.pctAvgDurationMoveDown.iTotalCorrectInstance, TempRules.pctAvgDurationMoveDown.bConsequetiveIndex, status);
                                                    int setcount = TrialLists.totalSet;

                                                    bRuleStatusIOA = oDisc.checkConditionIOA(bSetMoveDownIOA, bIOA);
                                                    bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bSetMoveDownMultiTecher, bMultyTchr);
                                                    if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                    {

                                                        if (bAvgDurationMoveDown)
                                                        {
                                                            if (oDS.CrntSetNbr <= setcount)
                                                                nextSet = oDS.CrntSetNbr - 1;
                                                            if (oDS.CrntSetNbr == 1)
                                                                nextSet = 1;
                                                            if (bSetMoveBack && bAvgDurationMoveDown)
                                                                bSetMoveBack = true;
                                                        }
                                                    }

                                                }

                                            }
                                        }
                                        FreqDurTextFlag = true;
                                    }
                                    TempRules = GetPromptRules(oTemp.TemplateId, iColId);
                                    if (TempRules.pctTotalDurationMoveUp.iScoreRequired == 0 || TempRules.pctTotalDurationMoveDown.iScoreRequired == 0)
                                    {
                                        freqdureloop++;
                                        bool status = true;
                                        CompletionStatusSet = "";
                                        TempRules = GetSetRules(oTemp.TemplateId, iColId);
                                        avgDurationId = Convert.ToInt32(ViewState["avgDurationId"]);
                                        totDuraionId = Convert.ToInt32(ViewState["totDuraionId"]);
                                        if (TempRules.pctTotalDurationMoveUp.iScoreRequired > 0)
                                        {
                                            CompletionStatusSet = "";
                                            bTotDurationMoveUp = ValidateUp(oSession.StudentId, totDuraionId, TempRules.pctTotalDurationMoveUp.iScoreRequired, reqSess,
                                                TempRules.pctTotalDurationMoveUp.iTotalCorrectInstance, TempRules.pctTotalDurationMoveUp.bConsequetiveIndex, status);
                                            int setcount = TrialLists.totalSet;

                                            bRuleStatusIOA = oDisc.checkConditionIOA(bTotalDurationMoveUpbIOAReqd, bIOA);
                                            bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bTotalDurationMoveUpbMultiTchr, bMultyTchr);
                                            if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                            {

                                                if (bTotDurationMoveUp)
                                                {
                                                    if (oDS.CrntSetNbr < setcount)
                                                        nextSet = oDS.CrntSetNbr + 1;
                                                    if (oDS.CrntSetNbr == setcount)
                                                    {
                                                        nextSet = setcount;
                                                        CompletionStatusSet = "COMPLETED";
                                                    }
                                                    if (CompletionStatusSet == "COMPLETED")
                                                    {
                                                        bSetCompleted = true;
                                                    }
                                                    else
                                                    {
                                                        bSetCompleted = false;
                                                    }
                                                    if (bSetMoveUp && bTotDurationMoveUp)
                                                        bSetMoveUp = true;
                                                }
                                            }


                                        }
                                        if (TempRules.pctTotalDurationMoveDown.iScoreRequired > 0)
                                        {
                                            bTotDurationMoveDown = ValidateDown(oSession.StudentId, totDuraionId, TempRules.pctTotalDurationMoveDown.iScoreRequired, reqSess,
                                                TempRules.pctTotalDurationMoveDown.iTotalCorrectInstance, TempRules.pctTotalDurationMoveDown.bConsequetiveIndex, status);
                                            int setcount = TrialLists.totalSet;

                                            bRuleStatusIOA = oDisc.checkConditionIOA(bTotalDurationMoveDownbIOAReqd, bIOA);
                                            bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bTotalDurationMoveDownbMultiTchr, bMultyTchr);
                                            if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                            {

                                                if (bTotDurationMoveDown)
                                                {
                                                    if (oDS.CrntSetNbr <= setcount)
                                                        nextSet = oDS.CrntSetNbr - 1;
                                                    if (oDS.CrntSetNbr == 1)
                                                        nextSet = 1;
                                                    if (bSetMoveBack && bTotDurationMoveDown)
                                                        bSetMoveBack = true;
                                                }
                                            }




                                        }

                                        FreqDurTextFlag = true;
                                    }
                                    else
                                    {
                                        freqdureloop++;
                                        bool status = true;
                                        CompletionStatusSet = "";
                                        avgDurationId = Convert.ToInt32(ViewState["avgDurationId"]);
                                        totDuraionId = Convert.ToInt32(ViewState["totDuraionId"]);
                                        TempRules = GetPromptRules(oTemp.TemplateId, iColId);

                                        if (TempRules.pctTotalDurationMoveUp.iTotalCorrectInstance > 0)
                                        {
                                            if (promptUp >= 1)
                                                bPromptTotDurationMoveUp = false;
                                            if (TempRules.pctTotalDurationMoveUp.iScoreRequired > 0)
                                            {
                                                bPromptTotDurationMoveUp = ValidateUp(oSession.StudentId, totDuraionId, TempRules.pctTotalDurationMoveUp.iScoreRequired, reqSess,
                                                    TempRules.pctTotalDurationMoveUp.iTotalCorrectInstance, TempRules.pctTotalDurationMoveUp.bConsequetiveIndex, status);

                                                bRuleStatusIOA = oDisc.checkConditionIOA(bPromptMoveUpIOA, bIOA);
                                                bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bPromptMoveUpMultiTecher, bMultyTchr);
                                                if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                {

                                                    if (bPromptTotDurationMoveUp)
                                                    {
                                                        if (sCurrentPrompt != LessonpromptUsed[LessonpromptUsed.Length - 1])
                                                        {
                                                            int iPromptIndex = DiscreetTrial.Model.PromptIndex(LessonpromptUsed, sCurrentPrompt);
                                                            if (iPromptIndex < LessonpromptUsed.Length)
                                                            {
                                                                sNextLessonPrompt = LessonpromptUsed[iPromptIndex + 1];
                                                                bPromptMoveUp = true;
                                                                bTotDurationMoveUp = false;
                                                                bTotDurationMoveDown = false;
                                                            }
                                                            else
                                                                bPromptTotDurationMoveUp = false;
                                                        }
                                                        else
                                                            bPromptTotDurationMoveUp = false;
                                                    }
                                                }
                                            }
                                            else
                                                bPromptTotDurationMoveUp = false;
                                            if (!bPromptTotDurationMoveUp)
                                            {
                                                if (promptDown >= 1)
                                                    bPromptTotDurationMoveDown = false;
                                                if (TempRules.pctTotalDurationMoveDown.iScoreRequired > 0)
                                                {
                                                    bPromptTotDurationMoveDown = ValidateDown(oSession.StudentId, totDuraionId, TempRules.pctTotalDurationMoveDown.iScoreRequired, reqSess,
                                                        TempRules.pctTotalDurationMoveDown.iTotalCorrectInstance, TempRules.pctTotalDurationMoveDown.bConsequetiveIndex, status);

                                                    bRuleStatusIOA = oDisc.checkConditionIOA(bPromptMoveDownIOA, bIOA);
                                                    bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bPromptMoveDownMultiTecher, bMultyTchr);
                                                    if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                    {

                                                        if (bPromptTotDurationMoveDown)
                                                        {
                                                            if (sCurrentPrompt != LessonpromptUsed[0])
                                                            {
                                                                int iPromptIndex = DiscreetTrial.Model.PromptIndex(LessonpromptUsed, sCurrentPrompt);
                                                                if (iPromptIndex > 0)
                                                                {
                                                                    sNextLessonPrompt = LessonpromptUsed[iPromptIndex - 1];
                                                                    bPromptMoveBack = true;
                                                                    bTotDurationMoveDown = false;
                                                                    bTotDurationMoveUp = false;
                                                                }
                                                                else
                                                                    bPromptTotDurationMoveDown = false;
                                                            }
                                                            else
                                                                bPromptTotDurationMoveDown = false;
                                                        }

                                                    }
                                                }
                                            }
                                            else
                                                bPromptTotDurationMoveDown = false;
                                            //total duration


                                            if (!bPromptTotDurationMoveUp && !bPromptTotDurationMoveDown)
                                            {
                                                TempRules = GetSetRules(oTemp.TemplateId, iColId);

                                                if (TempRules.pctTotalDurationMoveUp.iScoreRequired > 0)
                                                {
                                                    CompletionStatusSet = "";
                                                    bTotDurationMoveUp = ValidateUp(oSession.StudentId, totDuraionId, TempRules.pctTotalDurationMoveUp.iScoreRequired, reqSess,
                                                        TempRules.pctTotalDurationMoveUp.iTotalCorrectInstance, TempRules.pctTotalDurationMoveUp.bConsequetiveIndex, status);
                                                    int setcount = TrialLists.totalSet;

                                                    bRuleStatusIOA = oDisc.checkConditionIOA(bSetMoveUpIOA, bIOA);
                                                    bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bSetMoveUpMultiTecher, bMultyTchr);
                                                    if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                    {

                                                        if (bTotDurationMoveUp)
                                                        {
                                                            if (oDS.CrntSetNbr < setcount)
                                                                nextSet = oDS.CrntSetNbr + 1;
                                                            if (oDS.CrntSetNbr == setcount)
                                                            {
                                                                nextSet = setcount;
                                                                CompletionStatusSet = "COMPLETED";
                                                            }
                                                            if (CompletionStatusSet == "COMPLETED")
                                                            {
                                                                bSetCompleted = true;
                                                            }
                                                            else
                                                            {
                                                                bSetCompleted = false;
                                                            }
                                                            if (bSetMoveUp && bTotDurationMoveUp)
                                                                bSetMoveUp = true;
                                                        }
                                                    }


                                                }
                                                if (TempRules.pctTotalDurationMoveDown.iScoreRequired > 0)
                                                {
                                                    bTotDurationMoveDown = ValidateDown(oSession.StudentId, totDuraionId, TempRules.pctTotalDurationMoveDown.iScoreRequired, reqSess,
                                                        TempRules.pctTotalDurationMoveDown.iTotalCorrectInstance, TempRules.pctTotalDurationMoveDown.bConsequetiveIndex, status);
                                                    int setcount = TrialLists.totalSet;

                                                    bRuleStatusIOA = oDisc.checkConditionIOA(bSetMoveDownIOA, bIOA);
                                                    bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bSetMoveDownMultiTecher, bMultyTchr);
                                                    if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                    {

                                                        if (bTotDurationMoveDown)
                                                        {
                                                            if (oDS.CrntSetNbr <= setcount)
                                                                nextSet = oDS.CrntSetNbr - 1;
                                                            if (oDS.CrntSetNbr == 1)
                                                                nextSet = 1;
                                                            if (bSetMoveBack && bTotDurationMoveDown)
                                                                bSetMoveBack = true;
                                                        }
                                                    }
                                                }
                                            }

                                        }
                                        FreqDurTextFlag = true;
                                    }


                                }
                                #endregion
                                //Code added for List 5 Task #9 16-feb-2021 change Moveup/down Criteria for Frequncy and Duration START--
                                #region MoveUp on More Than
                                else if (MoveUpstat == 0)
                                {
                                    TempRules = GetPromptRules(oTemp.TemplateId, iColId);

                                    if (TempRules.pctAvgDurationMoveUp.iScoreRequired == 0 || TempRules.pctAvgDurationMoveDown.iScoreRequired == 0)
                                    {
                                        freqdureloop++;
                                        bool status = true;
                                        CompletionStatusSet = "";
                                        TempRules = GetSetRules(oTemp.TemplateId, iColId);
                                        avgDurationId = Convert.ToInt32(ViewState["avgDurationId"]);
                                        totDuraionId = Convert.ToInt32(ViewState["totDuraionId"]);
                                        if (TempRules.pctAvgDurationMoveUp.iScoreRequired > 0)
                                        {
                                            bAvgDurationMoveUp = ValidateDown(oSession.StudentId, avgDurationId, TempRules.pctAvgDurationMoveUp.iScoreRequired, reqSess,
                                                TempRules.pctAvgDurationMoveUp.iTotalCorrectInstance, TempRules.pctAvgDurationMoveUp.bConsequetiveIndex, status);
                                            int setcount = TrialLists.totalSet;

                                            bRuleStatusIOA = oDisc.checkConditionIOA(bAvgDurationMoveUpbIOAReqd, bIOA);
                                            bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bAvgDurationMoveUpbMultiTchr, bMultyTchr);
                                            if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                            {

                                                if (bAvgDurationMoveUp)
                                                {
                                                    if (oDS.CrntSetNbr < setcount)
                                                        nextSet = oDS.CrntSetNbr + 1;
                                                    if (oDS.CrntSetNbr == setcount)
                                                    {
                                                        nextSet = setcount;
                                                        CompletionStatusSet = "COMPLETED";
                                                    }
                                                    if (CompletionStatusSet == "COMPLETED")
                                                    {
                                                        bSetCompleted = true;
                                                    }
                                                    else
                                                    {
                                                        bSetCompleted = false;
                                                    }
                                                    if (bSetMoveUp && bAvgDurationMoveUp)
                                                        bSetMoveUp = true;
                                                }
                                            }



                                        }
                                        if (TempRules.pctAvgDurationMoveDown.iScoreRequired > 0)
                                        {
                                            bAvgDurationMoveDown = ValidateUp(oSession.StudentId, avgDurationId, TempRules.pctAvgDurationMoveDown.iScoreRequired, reqSess,
                                                TempRules.pctAvgDurationMoveDown.iTotalCorrectInstance, TempRules.pctAvgDurationMoveDown.bConsequetiveIndex, status);
                                            int setcount = TrialLists.totalSet;

                                            bRuleStatusIOA = oDisc.checkConditionIOA(bAvgDurationMoveDownbIOAReqd, bIOA);
                                            bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bAvgDurationMoveDownbMultiTchr, bMultyTchr);
                                            if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                            {

                                                if (bAvgDurationMoveDown)
                                                {
                                                    if (oDS.CrntSetNbr <= setcount)
                                                        nextSet = oDS.CrntSetNbr - 1;
                                                    if (oDS.CrntSetNbr == 1)
                                                        nextSet = 1;
                                                    if (bSetMoveBack && bAvgDurationMoveDown)
                                                        bSetMoveBack = true;
                                                }
                                            }

                                        }
                                        FreqDurTextFlag = true;
                                    }
                                    else
                                    {
                                        freqdureloop++;
                                        bool status = true;
                                        CompletionStatusSet = "";
                                        avgDurationId = Convert.ToInt32(ViewState["avgDurationId"]);
                                        totDuraionId = Convert.ToInt32(ViewState["totDuraionId"]);
                                        TempRules = GetPromptRules(oTemp.TemplateId, iColId);

                                        //avg duration
                                        if (TempRules.pctAvgDurationMoveUp.iTotalCorrectInstance > 0)
                                        {
                                            if (promptUp >= 1)
                                                bPromptAvgDurationMoveUp = false;
                                            if (TempRules.pctAvgDurationMoveUp.iScoreRequired > 0)
                                            {
                                                bPromptAvgDurationMoveUp = ValidateDown(oSession.StudentId, avgDurationId, TempRules.pctAvgDurationMoveUp.iScoreRequired, reqSess,
                                                    TempRules.pctAvgDurationMoveUp.iTotalCorrectInstance, TempRules.pctAvgDurationMoveUp.bConsequetiveIndex, status);

                                                bRuleStatusIOA = oDisc.checkConditionIOA(bPromptMoveUpIOA, bIOA);
                                                bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bPromptMoveUpMultiTecher, bMultyTchr);
                                                if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                {
                                                    bPromptAvgDurationMoveUp = false;
                                                    if (bPromptAvgDurationMoveUp)
                                                    {
                                                        if (sCurrentPrompt != LessonpromptUsed[LessonpromptUsed.Length - 1])
                                                        {
                                                            int iPromptIndex = DiscreetTrial.Model.PromptIndex(LessonpromptUsed, sCurrentPrompt);
                                                            if (iPromptIndex < LessonpromptUsed.Length)
                                                            {
                                                                sNextLessonPrompt = LessonpromptUsed[iPromptIndex + 1];
                                                                bPromptMoveUp = true;
                                                                bAvgDurationMoveUp = false;
                                                                bAvgDurationMoveDown = false;
                                                            }
                                                            else
                                                                bPromptAvgDurationMoveUp = false;
                                                        }
                                                        else
                                                            bPromptAvgDurationMoveUp = false;
                                                    }
                                                }
                                            }
                                            else
                                                bPromptAvgDurationMoveUp = false;
                                            if (!bPromptAvgDurationMoveUp)
                                            {
                                                if (promptDown >= 1)
                                                    bPromptAvgDurationMoveDown = false;
                                                if (TempRules.pctAvgDurationMoveDown.iScoreRequired > 0)
                                                {
                                                    bPromptAvgDurationMoveDown = ValidateUp(oSession.StudentId, avgDurationId, TempRules.pctAvgDurationMoveDown.iScoreRequired, reqSess,
                                                        TempRules.pctAvgDurationMoveDown.iTotalCorrectInstance, TempRules.pctAvgDurationMoveDown.bConsequetiveIndex, status);

                                                    bRuleStatusIOA = oDisc.checkConditionIOA(bPromptMoveDownIOA, bIOA);
                                                    bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bPromptMoveDownMultiTecher, bMultyTchr);
                                                    if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                    {

                                                        if (bPromptAvgDurationMoveDown)
                                                        {
                                                            if (sCurrentPrompt != LessonpromptUsed[0])
                                                            {
                                                                int iPromptIndex = DiscreetTrial.Model.PromptIndex(LessonpromptUsed, sCurrentPrompt);
                                                                if (iPromptIndex > 0)
                                                                {
                                                                    sNextLessonPrompt = LessonpromptUsed[iPromptIndex - 1];
                                                                    bPromptMoveBack = true;
                                                                    bAvgDurationMoveDown = false;
                                                                    bAvgDurationMoveUp = false;
                                                                }
                                                                else
                                                                    bPromptAvgDurationMoveDown = false;
                                                            }
                                                            else
                                                                bPromptAvgDurationMoveDown = false;
                                                        }

                                                    }
                                                }
                                            }
                                            else
                                                bPromptAvgDurationMoveDown = false;

                                            if (!bPromptAvgDurationMoveUp && !bPromptAvgDurationMoveDown)
                                            {
                                                TempRules = GetSetRules(oTemp.TemplateId, iColId);

                                                if (TempRules.pctAvgDurationMoveUp.iScoreRequired > 0)
                                                {
                                                    bAvgDurationMoveUp = ValidateDown(oSession.StudentId, avgDurationId, TempRules.pctAvgDurationMoveUp.iScoreRequired, reqSess,
                                                        TempRules.pctAvgDurationMoveUp.iTotalCorrectInstance, TempRules.pctAvgDurationMoveUp.bConsequetiveIndex, status);
                                                    int setcount = TrialLists.totalSet;

                                                    bRuleStatusIOA = oDisc.checkConditionIOA(bSetMoveUpIOA, bIOA);
                                                    bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bSetMoveUpMultiTecher, bMultyTchr);
                                                    if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                    {

                                                        if (bAvgDurationMoveUp)
                                                        {
                                                            if (oDS.CrntSetNbr < setcount)
                                                                nextSet = oDS.CrntSetNbr + 1;
                                                            if (oDS.CrntSetNbr == setcount)
                                                            {
                                                                nextSet = setcount;
                                                                CompletionStatusSet = "COMPLETED";
                                                            }
                                                            if (CompletionStatusSet == "COMPLETED")
                                                            {
                                                                bSetCompleted = true;
                                                            }
                                                            else
                                                            {
                                                                bSetCompleted = false;
                                                            }
                                                            if (bSetMoveUp && bAvgDurationMoveUp)
                                                                bSetMoveUp = true;
                                                        }
                                                    }



                                                }
                                                if (TempRules.pctAvgDurationMoveDown.iScoreRequired > 0)
                                                {
                                                    bAvgDurationMoveDown = ValidateUp(oSession.StudentId, avgDurationId, TempRules.pctAvgDurationMoveDown.iScoreRequired, reqSess,
                                                        TempRules.pctAvgDurationMoveDown.iTotalCorrectInstance, TempRules.pctAvgDurationMoveDown.bConsequetiveIndex, status);
                                                    int setcount = TrialLists.totalSet;

                                                    bRuleStatusIOA = oDisc.checkConditionIOA(bSetMoveDownIOA, bIOA);
                                                    bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bSetMoveDownMultiTecher, bMultyTchr);
                                                    if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                    {

                                                        if (bAvgDurationMoveDown)
                                                        {
                                                            if (oDS.CrntSetNbr <= setcount)
                                                                nextSet = oDS.CrntSetNbr - 1;
                                                            if (oDS.CrntSetNbr == 1)
                                                                nextSet = 1;
                                                            if (bSetMoveBack && bAvgDurationMoveDown)
                                                                bSetMoveBack = true;
                                                        }
                                                    }

                                                }

                                            }
                                        }
                                        FreqDurTextFlag = true;
                                    }
                                    TempRules = GetPromptRules(oTemp.TemplateId, iColId);
                                    if (TempRules.pctTotalDurationMoveUp.iScoreRequired == 0 || TempRules.pctTotalDurationMoveDown.iScoreRequired == 0)
                                    {
                                        freqdureloop++;
                                        bool status = true;
                                        CompletionStatusSet = "";
                                        TempRules = GetSetRules(oTemp.TemplateId, iColId);
                                        avgDurationId = Convert.ToInt32(ViewState["avgDurationId"]);
                                        totDuraionId = Convert.ToInt32(ViewState["totDuraionId"]);
                                        if (TempRules.pctTotalDurationMoveUp.iScoreRequired > 0)
                                        {
                                            CompletionStatusSet = "";
                                            bTotDurationMoveUp = ValidateDown(oSession.StudentId, totDuraionId, TempRules.pctTotalDurationMoveUp.iScoreRequired, reqSess,
                                                TempRules.pctTotalDurationMoveUp.iTotalCorrectInstance, TempRules.pctTotalDurationMoveUp.bConsequetiveIndex, status);
                                            int setcount = TrialLists.totalSet;

                                            bRuleStatusIOA = oDisc.checkConditionIOA(bTotalDurationMoveUpbIOAReqd, bIOA);
                                            bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bTotalDurationMoveUpbMultiTchr, bMultyTchr);
                                            if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                            {

                                                if (bTotDurationMoveUp)
                                                {
                                                    if (oDS.CrntSetNbr < setcount)
                                                        nextSet = oDS.CrntSetNbr + 1;
                                                    if (oDS.CrntSetNbr == setcount)
                                                    {
                                                        nextSet = setcount;
                                                        CompletionStatusSet = "COMPLETED";
                                                    }
                                                    if (CompletionStatusSet == "COMPLETED")
                                                    {
                                                        bSetCompleted = true;
                                                    }
                                                    else
                                                    {
                                                        bSetCompleted = false;
                                                    }
                                                    if (bSetMoveUp && bTotDurationMoveUp)
                                                        bSetMoveUp = true;
                                                }
                                            }


                                        }
                                        if (TempRules.pctTotalDurationMoveDown.iScoreRequired > 0)
                                        {
                                            bTotDurationMoveDown = ValidateUp(oSession.StudentId, totDuraionId, TempRules.pctTotalDurationMoveDown.iScoreRequired, reqSess,
                                                TempRules.pctTotalDurationMoveDown.iTotalCorrectInstance, TempRules.pctTotalDurationMoveDown.bConsequetiveIndex, status);
                                            int setcount = TrialLists.totalSet;

                                            bRuleStatusIOA = oDisc.checkConditionIOA(bTotalDurationMoveDownbIOAReqd, bIOA);
                                            bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bTotalDurationMoveDownbMultiTchr, bMultyTchr);
                                            if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                            {

                                                if (bTotDurationMoveDown)
                                                {
                                                    if (oDS.CrntSetNbr <= setcount)
                                                        nextSet = oDS.CrntSetNbr - 1;
                                                    if (oDS.CrntSetNbr == 1)
                                                        nextSet = 1;
                                                    if (bSetMoveBack && bTotDurationMoveDown)
                                                        bSetMoveBack = true;
                                                }
                                            }




                                        }

                                        FreqDurTextFlag = true;
                                    }
                                    else
                                    {
                                        freqdureloop++;
                                        bool status = true;
                                        CompletionStatusSet = "";
                                        avgDurationId = Convert.ToInt32(ViewState["avgDurationId"]);
                                        totDuraionId = Convert.ToInt32(ViewState["totDuraionId"]);
                                        TempRules = GetPromptRules(oTemp.TemplateId, iColId);

                                        if (TempRules.pctTotalDurationMoveUp.iTotalCorrectInstance > 0)
                                        {
                                            if (promptUp >= 1)
                                                bPromptTotDurationMoveUp = false;
                                            if (TempRules.pctTotalDurationMoveUp.iScoreRequired > 0)
                                            {
                                                bPromptTotDurationMoveUp = ValidateDown(oSession.StudentId, totDuraionId, TempRules.pctTotalDurationMoveUp.iScoreRequired, reqSess,
                                                    TempRules.pctTotalDurationMoveUp.iTotalCorrectInstance, TempRules.pctTotalDurationMoveUp.bConsequetiveIndex, status);

                                                bRuleStatusIOA = oDisc.checkConditionIOA(bPromptMoveUpIOA, bIOA);
                                                bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bPromptMoveUpMultiTecher, bMultyTchr);
                                                if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                {

                                                    if (bPromptTotDurationMoveUp)
                                                    {
                                                        if (sCurrentPrompt != LessonpromptUsed[LessonpromptUsed.Length - 1])
                                                        {
                                                            int iPromptIndex = DiscreetTrial.Model.PromptIndex(LessonpromptUsed, sCurrentPrompt);
                                                            if (iPromptIndex < LessonpromptUsed.Length)
                                                            {
                                                                sNextLessonPrompt = LessonpromptUsed[iPromptIndex + 1];
                                                                bPromptMoveUp = true;
                                                                bTotDurationMoveUp = false;
                                                                bTotDurationMoveDown = false;
                                                            }
                                                            else
                                                                bPromptTotDurationMoveUp = false;
                                                        }
                                                        else
                                                            bPromptTotDurationMoveUp = false;
                                                    }
                                                }
                                            }
                                            else
                                                bPromptTotDurationMoveUp = false;
                                            if (!bPromptTotDurationMoveUp)
                                            {
                                                if (promptDown >= 1)
                                                    bPromptTotDurationMoveDown = false;
                                                if (TempRules.pctTotalDurationMoveDown.iScoreRequired > 0)
                                                {
                                                    bPromptTotDurationMoveDown = ValidateUp(oSession.StudentId, totDuraionId, TempRules.pctTotalDurationMoveDown.iScoreRequired, reqSess,
                                                        TempRules.pctTotalDurationMoveDown.iTotalCorrectInstance, TempRules.pctTotalDurationMoveDown.bConsequetiveIndex, status);

                                                    bRuleStatusIOA = oDisc.checkConditionIOA(bPromptMoveDownIOA, bIOA);
                                                    bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bPromptMoveDownMultiTecher, bMultyTchr);
                                                    if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                    {

                                                        if (bPromptTotDurationMoveDown)
                                                        {
                                                            if (sCurrentPrompt != LessonpromptUsed[0])
                                                            {
                                                                int iPromptIndex = DiscreetTrial.Model.PromptIndex(LessonpromptUsed, sCurrentPrompt);
                                                                if (iPromptIndex > 0)
                                                                {
                                                                    sNextLessonPrompt = LessonpromptUsed[iPromptIndex - 1];
                                                                    bPromptMoveBack = true;
                                                                    bTotDurationMoveDown = false;
                                                                    bTotDurationMoveUp = false;
                                                                }
                                                                else
                                                                    bPromptTotDurationMoveDown = false;
                                                            }
                                                            else
                                                                bPromptTotDurationMoveDown = false;
                                                        }

                                                    }
                                                }
                                            }
                                            else
                                                bPromptTotDurationMoveDown = false;
                                            //total duration


                                            if (!bPromptTotDurationMoveUp && !bPromptTotDurationMoveDown)
                                            {
                                                TempRules = GetSetRules(oTemp.TemplateId, iColId);

                                                if (TempRules.pctTotalDurationMoveUp.iScoreRequired > 0)
                                                {
                                                    CompletionStatusSet = "";
                                                    bTotDurationMoveUp = ValidateDown(oSession.StudentId, totDuraionId, TempRules.pctTotalDurationMoveUp.iScoreRequired, reqSess,
                                                        TempRules.pctTotalDurationMoveUp.iTotalCorrectInstance, TempRules.pctTotalDurationMoveUp.bConsequetiveIndex, status);
                                                    int setcount = TrialLists.totalSet;

                                                    bRuleStatusIOA = oDisc.checkConditionIOA(bSetMoveUpIOA, bIOA);
                                                    bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bSetMoveUpMultiTecher, bMultyTchr);
                                                    if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                    {

                                                        if (bTotDurationMoveUp)
                                                        {
                                                            if (oDS.CrntSetNbr < setcount)
                                                                nextSet = oDS.CrntSetNbr + 1;
                                                            if (oDS.CrntSetNbr == setcount)
                                                            {
                                                                nextSet = setcount;
                                                                CompletionStatusSet = "COMPLETED";
                                                            }
                                                            if (CompletionStatusSet == "COMPLETED")
                                                            {
                                                                bSetCompleted = true;
                                                            }
                                                            else
                                                            {
                                                                bSetCompleted = false;
                                                            }
                                                            if (bSetMoveUp && bTotDurationMoveUp)
                                                                bSetMoveUp = true;
                                                        }
                                                    }


                                                }
                                                if (TempRules.pctTotalDurationMoveDown.iScoreRequired > 0)
                                                {
                                                    bTotDurationMoveDown = ValidateUp(oSession.StudentId, totDuraionId, TempRules.pctTotalDurationMoveDown.iScoreRequired, reqSess,
                                                        TempRules.pctTotalDurationMoveDown.iTotalCorrectInstance, TempRules.pctTotalDurationMoveDown.bConsequetiveIndex, status);
                                                    int setcount = TrialLists.totalSet;

                                                    bRuleStatusIOA = oDisc.checkConditionIOA(bSetMoveDownIOA, bIOA);
                                                    bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bSetMoveDownMultiTecher, bMultyTchr);
                                                    if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                    {

                                                        if (bTotDurationMoveDown)
                                                        {
                                                            if (oDS.CrntSetNbr <= setcount)
                                                                nextSet = oDS.CrntSetNbr - 1;
                                                            if (oDS.CrntSetNbr == 1)
                                                                nextSet = 1;
                                                            if (bSetMoveBack && bTotDurationMoveDown)
                                                                bSetMoveBack = true;
                                                        }
                                                    }
                                                }
                                            }

                                        }
                                        FreqDurTextFlag = true;
                                    }


                                }
                                #endregion
                                //Code added for List 5 Task #9 16-feb-2021 change Moveup/down Criteria for Frequncy and Duration END--
                            }
                            #endregion
                            #region Frequency
                            else if (dr["ColTypeCd"].ToString() == "Frequency")
                            {
                                int colId = Convert.ToInt32(dr["DSTempSetColId"]);
                                string selqry1 = "select Moveupstat from dstempsetcol DsCol inner join DSTempHdr Hdr on Hdr.DSTempHdrId=DsCol.DSTempHdrId where dsCol.DSTempHdrId=" + oTemp.TemplateId + " And DSTempSetColId= " + colId;
                                object stat = oData.FetchValue(selqry1);
                                if (stat != null)
                                    MoveUpstat = Convert.ToInt16(stat);
                                #region MoveUp on Less than-default
                                if (MoveUpstat == 1)
                                {
                                    TempRules = GetPromptRules(oTemp.TemplateId, iColId);
                                    if (TempRules.pctFrequencyMoveUp.iScoreRequired == 0 || TempRules.pctFrequencyMoveDown.iScoreRequired == 0)
                                    {
                                        freqdureloop++;
                                        bool status = true;
                                        CompletionStatusSet = "";
                                        TempRules = GetSetRules(oTemp.TemplateId, iColId);
                                        freqId = Convert.ToInt32(ViewState["freqId"]);
                                        if (TempRules.pctFrequencyMoveUp.iScoreRequired > 0)
                                        {
                                            bFrequencyMoveUp = ValidateUp(oSession.StudentId, freqId, TempRules.pctFrequencyMoveUp.iScoreRequired, reqSess,
                                                TempRules.pctFrequencyMoveUp.iTotalCorrectInstance, TempRules.pctFrequencyMoveUp.bConsequetiveIndex, status);
                                            int setcount = TrialLists.totalSet;

                                            bRuleStatusIOA = oDisc.checkConditionIOA(bFrequencyMoveUpbIOAReqd, bIOA);
                                            bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bFrequencyMoveUpbMultiTchr, bMultyTchr);
                                            if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                            {

                                                if (bFrequencyMoveUp)
                                                {

                                                    if (oDS.CrntSetNbr < setcount)
                                                        nextSet = oDS.CrntSetNbr + 1;
                                                    if (oDS.CrntSetNbr == setcount)
                                                    {
                                                        nextSet = setcount;
                                                        CompletionStatusSet = "COMPLETED";
                                                    }
                                                    if (bSetMoveUp && bFrequencyMoveUp)
                                                        bSetMoveUp = true;
                                                }
                                            }
                                        }
                                        if (TempRules.pctFrequencyMoveDown.iScoreRequired > 0)
                                        {
                                            bFrequencyMoveDown = ValidateDown(oSession.StudentId, freqId, TempRules.pctFrequencyMoveDown.iScoreRequired, reqSess,
                                                TempRules.pctFrequencyMoveDown.iTotalCorrectInstance, TempRules.pctFrequencyMoveDown.bConsequetiveIndex, status);
                                            int setcount = TrialLists.totalSet;

                                            bRuleStatusIOA = oDisc.checkConditionIOA(bFrequencyMoveDownbIOAReqd, bIOA);
                                            bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bFrequencyMoveDownbMultiTchr, bMultyTchr);
                                            if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                            {

                                                if (bFrequencyMoveDown)
                                                {
                                                    if (oDS.CrntSetNbr <= setcount)
                                                        nextSet = oDS.CrntSetNbr - 1;
                                                    if (oDS.CrntSetNbr == 1)
                                                        nextSet = 1;
                                                    if (bSetMoveBack && bFrequencyMoveDown)
                                                        bSetMoveBack = true;
                                                }
                                            }
                                        }
                                        FreqDurTextFlag = true;


                                    }

                                    else
                                    {
                                        freqdureloop++;
                                        bool status = true;
                                        CompletionStatusSet = "";
                                        freqId = Convert.ToInt32(ViewState["freqId"]);
                                        //for prompt move
                                        TempRules = GetPromptRules(oTemp.TemplateId, iColId);
                                        if (promptUp >= 1)
                                            bPromptFrequencyMoveUp = false;
                                        if (TempRules.pctFrequencyMoveUp.iScoreRequired > 0)
                                        {
                                            bPromptFrequencyMoveUp = ValidateUp(oSession.StudentId, freqId, TempRules.pctFrequencyMoveUp.iScoreRequired, reqSess,
                                                TempRules.pctFrequencyMoveUp.iTotalCorrectInstance, TempRules.pctFrequencyMoveUp.bConsequetiveIndex, status);

                                            bRuleStatusIOA = oDisc.checkConditionIOA(bPromptFrequencyMoveUpbIOAReqd, bIOA);
                                            bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bPromptFrequencyMoveUpbMultiTchr, bMultyTchr);
                                            if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                            {
                                                if (bPromptFrequencyMoveUp)
                                                {
                                                    if (sCurrentPrompt != LessonpromptUsed[LessonpromptUsed.Length - 1])
                                                    {
                                                        int iPromptIndex = DiscreetTrial.Model.PromptIndex(LessonpromptUsed, sCurrentPrompt);
                                                        if (iPromptIndex < LessonpromptUsed.Length)
                                                        {
                                                            sNextLessonPrompt = LessonpromptUsed[iPromptIndex + 1];
                                                            bPromptMoveUp = true;
                                                            bFrequencyMoveUp = false;
                                                            bFrequencyMoveDown = false;
                                                        }
                                                        else
                                                            bPromptFrequencyMoveUp = false;
                                                    }
                                                    else
                                                        bPromptFrequencyMoveUp = false;
                                                }
                                            }
                                        }
                                        else
                                            bPromptFrequencyMoveUp = false;
                                        if (!bPromptFrequencyMoveUp)
                                        {
                                            if (promptDown >= 1)
                                                bPromptFrequencyMoveDown = false;
                                            if (TempRules.pctFrequencyMoveDown.iScoreRequired > 0)
                                            {
                                                bPromptFrequencyMoveDown = ValidateDown(oSession.StudentId, freqId, TempRules.pctFrequencyMoveDown.iScoreRequired, reqSess,
                                                    TempRules.pctFrequencyMoveDown.iTotalCorrectInstance, TempRules.pctFrequencyMoveDown.bConsequetiveIndex, status);

                                                bRuleStatusIOA = oDisc.checkConditionIOA(bPromptFrequencyMoveDownbIOAReqd, bIOA);
                                                bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bPromptFrequencyMoveDownbMultiTchr, bMultyTchr);
                                                if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                {
                                                    if (bPromptFrequencyMoveDown)
                                                    {
                                                        if (sCurrentPrompt != LessonpromptUsed[0])
                                                        {
                                                            int iPromptIndex = DiscreetTrial.Model.PromptIndex(LessonpromptUsed, sCurrentPrompt);
                                                            if (iPromptIndex > 0)
                                                            {
                                                                sNextLessonPrompt = LessonpromptUsed[iPromptIndex - 1];
                                                                bPromptMoveBack = true;
                                                                bFrequencyMoveDown = false;
                                                                bFrequencyMoveUp = false;
                                                            }
                                                            else
                                                                bPromptFrequencyMoveDown = false;
                                                        }
                                                        else
                                                            bPromptFrequencyMoveDown = false;
                                                    }

                                                }
                                            }
                                        }
                                        else
                                            bPromptFrequencyMoveDown = false;
                                        //end prompt section

                                        if (!bPromptFrequencyMoveUp && !bPromptFrequencyMoveDown)
                                        {
                                            TempRules = GetSetRules(oTemp.TemplateId, iColId);

                                            if (TempRules.pctFrequencyMoveUp.iScoreRequired > 0)
                                            {
                                                bFrequencyMoveUp = ValidateUp(oSession.StudentId, freqId, TempRules.pctFrequencyMoveUp.iScoreRequired, reqSess,
                                                    TempRules.pctFrequencyMoveUp.iTotalCorrectInstance, TempRules.pctFrequencyMoveUp.bConsequetiveIndex, status);
                                                int setcount = TrialLists.totalSet;

                                                bRuleStatusIOA = oDisc.checkConditionIOA(bFrequencyMoveUpbIOAReqd, bIOA);
                                                bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bFrequencyMoveUpbMultiTchr, bMultyTchr);
                                                if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                {

                                                    if (bFrequencyMoveUp)
                                                    {

                                                        if (oDS.CrntSetNbr < setcount)
                                                            nextSet = oDS.CrntSetNbr + 1;
                                                        if (oDS.CrntSetNbr == setcount)
                                                        {
                                                            nextSet = setcount;
                                                            CompletionStatusSet = "COMPLETED";
                                                        }
                                                        if (bSetMoveUp && bFrequencyMoveUp)
                                                            bSetMoveUp = true;
                                                    }
                                                }
                                            }
                                            if (TempRules.pctFrequencyMoveDown.iScoreRequired > 0)
                                            {
                                                bFrequencyMoveDown = ValidateDown(oSession.StudentId, freqId, TempRules.pctFrequencyMoveDown.iScoreRequired, reqSess,
                                                    TempRules.pctFrequencyMoveDown.iTotalCorrectInstance, TempRules.pctFrequencyMoveDown.bConsequetiveIndex, status);
                                                int setcount = TrialLists.totalSet;

                                                bRuleStatusIOA = oDisc.checkConditionIOA(bFrequencyMoveDownbIOAReqd, bIOA);
                                                bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bFrequencyMoveDownbMultiTchr, bMultyTchr);
                                                if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                {

                                                    if (bFrequencyMoveDown)
                                                    {
                                                        if (oDS.CrntSetNbr <= setcount)
                                                            nextSet = oDS.CrntSetNbr - 1;
                                                        if (oDS.CrntSetNbr == 1)
                                                            nextSet = 1;
                                                        if (bSetMoveBack && bFrequencyMoveDown)
                                                            bSetMoveBack = true;
                                                    }
                                                }
                                            }
                                        }
                                        FreqDurTextFlag = true;

                                    }
                                }
                                #endregion
                                //Code added for List 5 Task #9 16-feb-2021 change Moveup/down Criteria for Frequncy and Duration START--
                                #region MoveUp on More Than
                                else if (MoveUpstat == 0)
                                {
                                    TempRules = GetPromptRules(oTemp.TemplateId, iColId);
                                    if (TempRules.pctFrequencyMoveUp.iScoreRequired == 0 || TempRules.pctFrequencyMoveDown.iScoreRequired == 0)
                                    {
                                        freqdureloop++;
                                        bool status = true;
                                        CompletionStatusSet = "";
                                        TempRules = GetSetRules(oTemp.TemplateId, iColId);
                                        freqId = Convert.ToInt32(ViewState["freqId"]);
                                        if (TempRules.pctFrequencyMoveUp.iScoreRequired > 0)
                                        {
                                            bFrequencyMoveUp = ValidateDown(oSession.StudentId, freqId, TempRules.pctFrequencyMoveUp.iScoreRequired, reqSess,
                                                TempRules.pctFrequencyMoveUp.iTotalCorrectInstance, TempRules.pctFrequencyMoveUp.bConsequetiveIndex, status);
                                            int setcount = TrialLists.totalSet;

                                            bRuleStatusIOA = oDisc.checkConditionIOA(bFrequencyMoveUpbIOAReqd, bIOA);
                                            bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bFrequencyMoveUpbMultiTchr, bMultyTchr);
                                            if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                            {

                                                if (bFrequencyMoveUp)
                                                {

                                                    if (oDS.CrntSetNbr < setcount)
                                                        nextSet = oDS.CrntSetNbr + 1;
                                                    if (oDS.CrntSetNbr == setcount)
                                                    {
                                                        nextSet = setcount;
                                                        CompletionStatusSet = "COMPLETED";
                                                    }
                                                    if (bSetMoveUp && bFrequencyMoveUp)
                                                        bSetMoveUp = true;
                                                }
                                            }
                                        }
                                        if (TempRules.pctFrequencyMoveDown.iScoreRequired > 0)
                                        {
                                            bFrequencyMoveDown = ValidateUp(oSession.StudentId, freqId, TempRules.pctFrequencyMoveDown.iScoreRequired, reqSess,
                                                TempRules.pctFrequencyMoveDown.iTotalCorrectInstance, TempRules.pctFrequencyMoveDown.bConsequetiveIndex, status);
                                            int setcount = TrialLists.totalSet;

                                            bRuleStatusIOA = oDisc.checkConditionIOA(bFrequencyMoveDownbIOAReqd, bIOA);
                                            bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bFrequencyMoveDownbMultiTchr, bMultyTchr);
                                            if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                            {

                                                if (bFrequencyMoveDown)
                                                {
                                                    if (oDS.CrntSetNbr <= setcount)
                                                        nextSet = oDS.CrntSetNbr - 1;
                                                    if (oDS.CrntSetNbr == 1)
                                                        nextSet = 1;
                                                    if (bSetMoveBack && bFrequencyMoveDown)
                                                        bSetMoveBack = true;
                                                }
                                            }
                                        }
                                        FreqDurTextFlag = true;


                                    }

                                    else
                                    {
                                        freqdureloop++;
                                        bool status = true;
                                        CompletionStatusSet = "";
                                        freqId = Convert.ToInt32(ViewState["freqId"]);
                                        //for prompt move
                                        TempRules = GetPromptRules(oTemp.TemplateId, iColId);
                                        if (promptUp >= 1)
                                            bPromptFrequencyMoveUp = false;
                                        if (TempRules.pctFrequencyMoveUp.iScoreRequired > 0)
                                        {
                                            bPromptFrequencyMoveUp = ValidateDown(oSession.StudentId, freqId, TempRules.pctFrequencyMoveUp.iScoreRequired, reqSess,
                                                TempRules.pctFrequencyMoveUp.iTotalCorrectInstance, TempRules.pctFrequencyMoveUp.bConsequetiveIndex, status);

                                            bRuleStatusIOA = oDisc.checkConditionIOA(bPromptFrequencyMoveUpbIOAReqd, bIOA);
                                            bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bPromptFrequencyMoveUpbMultiTchr, bMultyTchr);
                                            if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                            {
                                                if (bPromptFrequencyMoveUp)
                                                {
                                                    if (sCurrentPrompt != LessonpromptUsed[LessonpromptUsed.Length - 1])
                                                    {
                                                        int iPromptIndex = DiscreetTrial.Model.PromptIndex(LessonpromptUsed, sCurrentPrompt);
                                                        if (iPromptIndex < LessonpromptUsed.Length)
                                                        {
                                                            sNextLessonPrompt = LessonpromptUsed[iPromptIndex + 1];
                                                            bPromptMoveUp = true;
                                                            bFrequencyMoveUp = false;
                                                            bFrequencyMoveDown = false;
                                                        }
                                                        else
                                                            bPromptFrequencyMoveUp = false;
                                                    }
                                                    else
                                                        bPromptFrequencyMoveUp = false;
                                                }
                                            }
                                        }
                                        else
                                            bPromptFrequencyMoveUp = false;
                                        if (!bPromptFrequencyMoveUp)
                                        {
                                            if (promptDown >= 1)
                                                bPromptFrequencyMoveDown = false;
                                            if (TempRules.pctFrequencyMoveDown.iScoreRequired > 0)
                                            {
                                                bPromptFrequencyMoveDown = ValidateUp(oSession.StudentId, freqId, TempRules.pctFrequencyMoveDown.iScoreRequired, reqSess,
                                                    TempRules.pctFrequencyMoveDown.iTotalCorrectInstance, TempRules.pctFrequencyMoveDown.bConsequetiveIndex, status);

                                                bRuleStatusIOA = oDisc.checkConditionIOA(bPromptFrequencyMoveDownbIOAReqd, bIOA);
                                                bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bPromptFrequencyMoveDownbMultiTchr, bMultyTchr);
                                                if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                {
                                                    if (bPromptFrequencyMoveDown)
                                                    {
                                                        if (sCurrentPrompt != LessonpromptUsed[0])
                                                        {
                                                            int iPromptIndex = DiscreetTrial.Model.PromptIndex(LessonpromptUsed, sCurrentPrompt);
                                                            if (iPromptIndex > 0)
                                                            {
                                                                sNextLessonPrompt = LessonpromptUsed[iPromptIndex - 1];
                                                                bPromptMoveBack = true;
                                                                bFrequencyMoveDown = false;
                                                                bFrequencyMoveUp = false;
                                                            }
                                                            else
                                                                bPromptFrequencyMoveDown = false;
                                                        }
                                                        else
                                                            bPromptFrequencyMoveDown = false;
                                                    }

                                                }
                                            }
                                        }
                                        else
                                            bPromptFrequencyMoveDown = false;
                                        //end prompt section

                                        if (!bPromptFrequencyMoveUp && !bPromptFrequencyMoveDown)
                                        {
                                            TempRules = GetSetRules(oTemp.TemplateId, iColId);

                                            if (TempRules.pctFrequencyMoveUp.iScoreRequired > 0)
                                            {
                                                bFrequencyMoveUp = ValidateDown(oSession.StudentId, freqId, TempRules.pctFrequencyMoveUp.iScoreRequired, reqSess,
                                                    TempRules.pctFrequencyMoveUp.iTotalCorrectInstance, TempRules.pctFrequencyMoveUp.bConsequetiveIndex, status);
                                                int setcount = TrialLists.totalSet;

                                                bRuleStatusIOA = oDisc.checkConditionIOA(bFrequencyMoveUpbIOAReqd, bIOA);
                                                bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bFrequencyMoveUpbMultiTchr, bMultyTchr);
                                                if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                {

                                                    if (bFrequencyMoveUp)
                                                    {

                                                        if (oDS.CrntSetNbr < setcount)
                                                            nextSet = oDS.CrntSetNbr + 1;
                                                        if (oDS.CrntSetNbr == setcount)
                                                        {
                                                            nextSet = setcount;
                                                            CompletionStatusSet = "COMPLETED";
                                                        }
                                                        if (bSetMoveUp && bFrequencyMoveUp)
                                                            bSetMoveUp = true;
                                                    }
                                                }
                                            }
                                            if (TempRules.pctFrequencyMoveDown.iScoreRequired > 0)
                                            {
                                                bFrequencyMoveDown = ValidateUp(oSession.StudentId, freqId, TempRules.pctFrequencyMoveDown.iScoreRequired, reqSess,
                                                    TempRules.pctFrequencyMoveDown.iTotalCorrectInstance, TempRules.pctFrequencyMoveDown.bConsequetiveIndex, status);
                                                int setcount = TrialLists.totalSet;

                                                bRuleStatusIOA = oDisc.checkConditionIOA(bFrequencyMoveDownbIOAReqd, bIOA);
                                                bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bFrequencyMoveDownbMultiTchr, bMultyTchr);
                                                if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                {

                                                    if (bFrequencyMoveDown)
                                                    {
                                                        if (oDS.CrntSetNbr <= setcount)
                                                            nextSet = oDS.CrntSetNbr - 1;
                                                        if (oDS.CrntSetNbr == 1)
                                                            nextSet = 1;
                                                        if (bSetMoveBack && bFrequencyMoveDown)
                                                            bSetMoveBack = true;
                                                    }
                                                }
                                            }
                                        }
                                        FreqDurTextFlag = true;

                                    }
                                }
                                #endregion
                                //Code added for List 5 Task #9 16-feb-2021 change Moveup/down Criteria for Frequncy and Duration END--
                            }
                            #endregion
                            //new
                            //if (chainedCols[sColName].SessionCount >= chainedCols[sColName].RequiredSession())
                            //{
                            //else
                            //{
                            chainedCols[sColName].TotalTaskMode = true;
                            chainedCols[sColName].SetInputData(iCurrentStep.ToString(), sCurrentPrompt, TargetPrompt, iCurrentSetNbr.ToString(), TrialLists.totalSet.ToString(), TrialLists.arTrials);
                            sesResultchain[index] = Chained.Model.ExecuteForTotalTask(chainedCols[sColName], stepLevelPrompt, bpromptColumn);
                            bRuleStatusIOA = oDisc.checkConditionIOA(chainedInptData.IOARequired, bIOA);
                            bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(chainedInptData.MultiTeacherRequired, bMultyTchr);
                            if (sesResultchain[index].StepPrompts != null)
                            {
                                //ash: do not perform the below code if the col is used is criteria and score is NA
                                if (checkIfScoreIsNA(chainedCols[sColName].IsInfluencedBy(MoveType.PromptMoveDown), iColId) != true && checkIfScoreIsNA(chainedCols[sColName].IsInfluencedBy(MoveType.StepMoveDown), iColId) != true && checkIfScoreIsNA(chainedCols[sColName].IsInfluencedBy(MoveType.SetMoveDown), iColId) != true)
                                {
                                    DataTable dtstepIDs = oData.ReturnDataTable("SELECT DSTempStepId FROM StdtSessionStep WHERE StdtSessionHdrId=" + StdtSessHdrId, false);
                                    int indexB = 0;
                                    foreach (DataRow drstepID in dtstepIDs.Rows)
                                    {
                                        string updStepStat = "UPDATE StdtDSStepStat SET PromptId=" + sesResultchain[index].StepPrompts[indexB] + ",ModifiedBy=" + oSession.LoginId + " ,ModifiedOn=GETDATE() WHERE " +
                                            "DSTempSetColId=" + dr["DSTempSetColId"].ToString() + " AND DSTempStepId=" + drstepID["DSTempStepId"].ToString() + "";
                                        oData.Execute(updStepStat);
                                        indexB++;
                                    }
                                }
                            }

                        //}
                            #region %independent of all steps
                            else if (dr["ColTypeCd"].ToString() == "Prompt" && colt.ToString() == "true")
                            {
                                TempRules = GetPromptRules(oTemp.TemplateId, iColId);
                                freqdureloop++;
                                bool status = true;
                                bool check = true;
                                bool check1 = true;
                                CompletionStatusSet = "";
                                //for prompt move
                                IndeallId = Convert.ToInt32(ViewState["IndeallId"]);
                                TempRules = GetPromptRules(oTemp.TemplateId, iColId);
                                if (promptUp >= 1)
                                    bPromptIndallMoveUp = false;
                                if (TempRules.pctIndAllMoveUp.iTotalCorrectInstance > 0)
                                {
                                    bPromptIndallMoveUp = ValidateUp1(oSession.StudentId, IndeallId, TempRules.pctIndAllMoveUp.iScoreRequired, reqSess,
                                        TempRules.pctIndAllMoveUp.iTotalCorrectInstance, TempRules.pctIndAllMoveUp.bConsequetiveIndex, status);

                                    bRuleStatusIOA = oDisc.checkConditionIOA(bPromptIndallMoveUpbIOAReqd, bIOA);
                                    bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bPromptIndallMoveUpbMultiTchr, bMultyTchr);
                                    if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                    {
                                        if (bPromptIndallMoveUp)
                                        {
                                            if (sCurrentPrompt != LessonpromptUsed[LessonpromptUsed.Length - 1])
                                            {
                                                int iPromptIndex = Chained.Model.PromptIndex(LessonpromptUsed, sCurrentPrompt);
                                                if (iPromptIndex < LessonpromptUsed.Length)
                                                {
                                                    sNextLessonPrompt = LessonpromptUsed[iPromptIndex + 1];
                                                    bPromptMoveUp = true;
                                                    bIndallMoveUp = false;
                                                    bIndallMoveDown = false;
                                                }
                                                else
                                                    bPromptIndallMoveUp = false;
                                            }
                                            else
                                                bPromptIndallMoveUp = false;
                                        }
                                    }
                                }
                                else

                                    bPromptIndallMoveUp = false;

                                int iPromptIndex1 = Chained.Model.PromptIndex(LessonpromptUsed, sCurrentPrompt);
                                if (iPromptIndex1 > 0 || LessonpromptUsed.Length == 1)
                                {

                                    check = false;
                                }

                                if (!bPromptIndallMoveUp)
                                {
                                    if (promptDown >= 1)
                                        bPromptIndallMoveDown = false;
                                    if (TempRules.pctIndAllMoveDown.iTotalCorrectInstance > 0)
                                    {
                                        bPromptIndallMoveDown = ValidateDown1(oSession.StudentId, IndeallId, TempRules.pctIndAllMoveDown.iScoreRequired, reqSess,
                                            TempRules.pctIndAllMoveDown.iTotalCorrectInstance, TempRules.pctIndAllMoveDown.bConsequetiveIndex, status);

                                        bRuleStatusIOA = oDisc.checkConditionIOA(bPromptIndallMoveDownbIOAReqd, bIOA);
                                        bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bPromptIndallMoveDownbMultiTchr, bMultyTchr);
                                        if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                        {
                                            if (bPromptIndallMoveDown)
                                            {
                                                if (sCurrentPrompt != LessonpromptUsed[0])
                                                {
                                                    int iPromptIndex = Chained.Model.PromptIndex(LessonpromptUsed, sCurrentPrompt);
                                                    if (iPromptIndex > 0)
                                                    {
                                                        sNextLessonPrompt = LessonpromptUsed[iPromptIndex - 1];
                                                        bPromptMoveBack = true;
                                                        bIndallMoveDown = false;
                                                        bIndallMoveUp = false;
                                                    }
                                                    else
                                                        bPromptIndallMoveDown = false;
                                                }
                                                else
                                                    bPromptIndallMoveDown = false;
                                            }

                                        }


                                    }
                                    else
                                    {
                                        bPromptIndallMoveDown = false;
                                        check1 = false;
                                    }
                                }
                                else
                                    bPromptIndallMoveDown = false;
                                //end prompt section
                                // set move up

                                if (!bPromptIndallMoveUp && !bPromptIndallMoveDown)
                                {
                                    TempRules = GetSetRules(oTemp.TemplateId, iColId);

                                    if (TempRules.pctIndAllMoveUp.iTotalCorrectInstance > 0 && !check)
                                    {
                                        bIndallMoveUp = ValidateUp1(oSession.StudentId, IndeallId, TempRules.pctIndAllMoveUp.iScoreRequired, reqSess,
                                            TempRules.pctIndAllMoveUp.iTotalCorrectInstance, TempRules.pctIndAllMoveUp.bConsequetiveIndex, status);
                                        int setcount = TrialLists.totalSet;

                                        bRuleStatusIOA = oDisc.checkConditionIOA(bIndallMoveUpbIOAReqd, bIOA);
                                        bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bIndallMoveUpbMultiTchr, bMultyTchr);
                                        if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                        {

                                            if (bIndallMoveUp)
                                            {

                                                if (oDS.CrntSetNbr < setcount)
                                                    nextSet = oDS.CrntSetNbr + 1;
                                                if (oDS.CrntSetNbr == setcount)
                                                {
                                                    nextSet = setcount;
                                                    CompletionStatusSet = "COMPLETED";
                                                }
                                                if (bSetMoveUp && bIndallMoveUp)
                                                    bSetMoveUp = true;
                                                else
                                                    bSetMoveUp = false;
                                            }
                                            else
                                                bSetMoveUp = false;
                                        }
                                    }
                                    if ((TempRules.pctIndAllMoveDown.iTotalCorrectInstance > 0 && check) || (TempRules.pctIndAllMoveDown.iTotalCorrectInstance > 0 && !check1))
                                    {
                                        bIndallMoveDown = ValidateDown1(oSession.StudentId, IndeallId, TempRules.pctIndAllMoveDown.iScoreRequired, reqSess,
                                            TempRules.pctIndAllMoveDown.iTotalCorrectInstance, TempRules.pctIndAllMoveDown.bConsequetiveIndex, status);
                                        int setcount = TrialLists.totalSet;

                                        bRuleStatusIOA = oDisc.checkConditionIOA(bIndallMoveDownbIOAReqd, bIOA);
                                        bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bIndallMoveDownbMultiTchr, bMultyTchr);
                                        if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                        {

                                            if (bIndallMoveDown)
                                            {
                                                if (oDS.CrntSetNbr <= setcount)
                                                    nextSet = oDS.CrntSetNbr - 1;
                                                if (oDS.CrntSetNbr == 1)
                                                {
                                                    nextSet = 1;
                                                    bSetMoveBack = false;
                                                }
                                                if (bSetMoveBack && bIndallMoveDown)
                                                    bSetMoveBack = true;
                                                else
                                                    bSetMoveBack = false;
                                            }
                                            else
                                                bSetMoveBack = false;
                                        }
                                    }
                                    else
                                    {
                                        bSetMoveBack = false;
                                    }
                                }

                                FreqDurTextFlag = true;
                            }

                            #endregion
                            #region +/- %insependent of all steps
                            else if (dr["ColTypeCd"].ToString() == "+/-" && colt.ToString() == "true")
                            {
                                TempRules = GetPromptRules(oTemp.TemplateId, iColId);
                                freqdureloop++;
                                bool status = true;
                                bool check = true;
                                bool check1 = true;
                                CompletionStatusSet = "";
                                //for prompt move
                                IndeallId = Convert.ToInt32(ViewState["IndeallId"]);
                                TempRules = GetPromptRules(oTemp.TemplateId, iColId);
                                if (promptUp >= 1)
                                    bPromptIndallMoveUp = false;
                                if (TempRules.pctIndAllMoveUp.iTotalCorrectInstance > 0)
                                {
                                    bPromptIndallMoveUp = ValidateUp1(oSession.StudentId, IndeallId, TempRules.pctIndAllMoveUp.iScoreRequired, reqSess,
                                        TempRules.pctIndAllMoveUp.iTotalCorrectInstance, TempRules.pctIndAllMoveUp.bConsequetiveIndex, status);

                                    bRuleStatusIOA = oDisc.checkConditionIOA(bPromptIndallMoveUpbIOAReqd, bIOA);
                                    bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bPromptIndallMoveUpbMultiTchr, bMultyTchr);
                                    if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                    {
                                        if (bPromptIndallMoveUp)
                                        {
                                            if (sCurrentLessonPrompt != LessonpromptUsed[LessonpromptUsed.Length - 1])
                                            {
                                                int iPromptIndex = Chained.Model.PromptIndex(LessonpromptUsed, sCurrentLessonPrompt);
                                                if (iPromptIndex < LessonpromptUsed.Length)
                                                {
                                                    sNextLessonPrompt = LessonpromptUsed[iPromptIndex + 1];
                                                    bPromptMoveUp = true;
                                                    bIndallMoveUp = false;
                                                    bIndallMoveDown = false;
                                                }
                                                else
                                                    bPromptIndallMoveUp = false;
                                            }
                                            else
                                                bPromptIndallMoveUp = false;
                                        }
                                    }
                                }
                                else
                                    bPromptIndallMoveUp = false;
                                int iPromptIndex1 = Chained.Model.PromptIndex(LessonpromptUsed, sCurrentLessonPrompt);
                                if (iPromptIndex1 > 0 || LessonpromptUsed.Length == 1)
                                {

                                    check = false;
                                }
                                if (!bPromptIndallMoveUp)
                                {
                                    if (promptDown >= 1)
                                        bPromptIndallMoveDown = false;
                                    if (TempRules.pctIndAllMoveDown.iTotalCorrectInstance > 0)
                                    {
                                        bPromptIndallMoveDown = ValidateDown1(oSession.StudentId, IndeallId, TempRules.pctIndAllMoveDown.iScoreRequired, reqSess,
                                            TempRules.pctIndAllMoveDown.iTotalCorrectInstance, TempRules.pctIndAllMoveDown.bConsequetiveIndex, status);

                                        bRuleStatusIOA = oDisc.checkConditionIOA(bPromptIndallMoveDownbIOAReqd, bIOA);
                                        bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bPromptIndallMoveDownbMultiTchr, bMultyTchr);
                                        if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                        {
                                            if (bPromptIndallMoveDown)
                                            {
                                                if (sCurrentLessonPrompt != LessonpromptUsed[0])
                                                {
                                                    int iPromptIndex = Chained.Model.PromptIndex(LessonpromptUsed, sCurrentLessonPrompt);
                                                    if (iPromptIndex > 0)
                                                    {
                                                        sNextLessonPrompt = LessonpromptUsed[iPromptIndex - 1];
                                                        bPromptMoveBack = true;
                                                        bIndallMoveDown = false;
                                                        bIndallMoveUp = false;
                                                    }
                                                    else
                                                        bPromptIndallMoveDown = false;
                                                }
                                                else
                                                    bPromptIndallMoveDown = false;
                                            }

                                        }

                                    }
                                    else
                                    {
                                        bPromptIndallMoveDown = false;
                                        check1 = false;
                                    }
                                }
                                else
                                    bPromptIndallMoveDown = false;
                                //end prompt section

                                // set move up
                                if (!bPromptIndallMoveUp && !bPromptIndallMoveDown)
                                {
                                    TempRules = GetSetRules(oTemp.TemplateId, iColId);

                                    if (TempRules.pctIndAllMoveUp.iTotalCorrectInstance > 0 && !check)
                                    {
                                        bIndallMoveUp = ValidateUp1(oSession.StudentId, IndeallId, TempRules.pctIndAllMoveUp.iScoreRequired, reqSess,
                                            TempRules.pctIndAllMoveUp.iTotalCorrectInstance, TempRules.pctIndAllMoveUp.bConsequetiveIndex, status);
                                        int setcount = TrialLists.totalSet;

                                        bRuleStatusIOA = oDisc.checkConditionIOA(bIndallMoveUpbIOAReqd, bIOA);
                                        bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bIndallMoveUpbMultiTchr, bMultyTchr);
                                        if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                        {

                                            if (bIndallMoveUp)
                                            {
                                                if (oDS.CrntSetNbr < setcount)
                                                    nextSet = oDS.CrntSetNbr + 1;
                                                if (oDS.CrntSetNbr == setcount)
                                                {
                                                    nextSet = setcount;
                                                    CompletionStatusSet = "COMPLETED";
                                                }
                                                if (bSetMoveUp && bIndallMoveUp)
                                                    bSetMoveUp = true;
                                                else
                                                    bSetMoveUp = false;
                                            }
                                            else
                                                bSetMoveUp = false;
                                        }
                                    }
                                    if ((TempRules.pctIndAllMoveDown.iTotalCorrectInstance > 0 && check) || (TempRules.pctIndAllMoveDown.iTotalCorrectInstance > 0 && !check1))
                                    {
                                        bIndallMoveDown = ValidateDown1(oSession.StudentId, IndeallId, TempRules.pctIndAllMoveDown.iScoreRequired, reqSess,
                                            TempRules.pctIndAllMoveDown.iTotalCorrectInstance, TempRules.pctIndAllMoveDown.bConsequetiveIndex, status);
                                        int setcount = TrialLists.totalSet;

                                        bRuleStatusIOA = oDisc.checkConditionIOA(bIndallMoveDownbIOAReqd, bIOA);
                                        bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bIndallMoveDownbMultiTchr, bMultyTchr);
                                        if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                        {

                                            if (bIndallMoveDown)
                                            {
                                                if (oDS.CrntSetNbr <= setcount)
                                                    nextSet = oDS.CrntSetNbr - 1;
                                                if (oDS.CrntSetNbr == 1)
                                                {
                                                    nextSet = 1;
                                                    bSetMoveBack = false;
                                                }
                                                if (bSetMoveBack && bIndallMoveDown)
                                                    bSetMoveBack = true;
                                                else
                                                    bSetMoveBack = false;
                                            }
                                            else
                                                bSetMoveBack = false;
                                        }
                                    }
                                    else
                                    {
                                        bSetMoveBack = false;
                                    }
                                }

                                FreqDurTextFlag = true;
                            }
                            #endregion

                        }
                        else
                        {
                            ////////////////////////// New Step level criteria execution////////////////////// Strats Here ///// Arun M//////
                            #region start New Step level criteria execution

                            int iCurrentStepExecuting = Convert.ToInt32(iCurrentStep);
                            bool bPrevStepFailed = false;
                            chainedCols[sColName].promptType = oDS.PromptProc;
                            //Check for all previous step that it all succeeds to move forward
                            for (int istep = 1; istep < iCurrentStepExecuting; istep++)
                            {
                                TrialLists = oDisc.GetTrialListsForPreStep(oSession.StudentId, oTemp.TemplateId, iCurrentSetId, istep, chainedCols[sColName].RequiredSession(), sColName, false, hfPlusMinusResp.Value, coltypeCode, oDS.ChainType);
                                chainedCols[sColName].SessionCount = TrialLists.sessionCount;
                                sesResultchain[index] = null;
                                chainedCols[sColName].SetInputData(istep.ToString(), TargetPrompt, TargetPrompt, iCurrentSetNbr.ToString(), TrialLists.totalSet.ToString(), TrialLists.arTrials);
                                int nullCnt = 0;
                                for (int k = 0; k < chainedCols[sColName].Sessions.Length; k++)
                                {
                                    if (!chainedCols[sColName].Sessions[k].Steps[istep - 1].Score.Contains(":"))
                                    {
                                        if ((chainedCols[sColName].Sessions[k].Steps[istep - 1].Score == null) || (chainedCols[sColName].Sessions[k].Steps[istep - 1].Score.ToString() == ""))
                                        {
                                            nullCnt++;
                                        }
                                    }
                                }
                                if (nullCnt != Convert.ToInt32(chainedCols[sColName].Sessions.Length))
                                {
                                    sesResultchain[index] = Chained.Model.Execute(chainedCols[sColName], true, bpromptColumn, oDS.ChainType);

                                    //inputData.SetInputData(istep.ToString(), TargetPrompt, TargetPrompt, CurrentSet, TotalSets, Trials);
                                    //res = Model.Execute(inputData);

                                    //if it dosent move forward then we need to fall back to this step


                                    // if (TrialLists.sessionCount == chainedCols[sColName].RequiredSession())
                                    // {
                                    if (sesResultchain[index].MovedBackStep || sesResultchain[index].MovedBackPrompt)
                                    {
                                        sesResultchain[index].MovedBackPrompt = false;
                                        sesResultchain[index].MovedForwardPrompt = false;
                                        sesResultchain[index].MovedBackStep = false;
                                        sesResultchain[index].MovedForwardStep = false;
                                        sesResultchain[index].MovedBackSet = false;
                                        sesResultchain[index].MovedForwardSet = false;
                                        sesResultchain[index].MoveForwardPromptStep = false;
                                        sesResultchain[index].MoveBackPromptStep = false;

                                        if (!bStepCountCriteria)
                                        {
                                            bPrevStepFailed = true;


                                            //########
                                            //Move Back Current Step to istep
                                            int iPrompts = 0;
                                            string sEventAlertStatu = "";

                                            //bRuleStatusIOA = oDisc.checkConditionIOA(chainedInptData.IOARequired, bIOA);
                                            // bRuleStatusMultiTchr = oDisc.checkConditionIOA(chainedInptData.MultiTeacherRequired, bMultyTchr);
                                            if (sesResultchain[0] != null)
                                            {
                                                //ash: do not perform the below code if the col is used is criteria and score is NA
                                                if (checkIfScoreIsNA(chainedCols[sColName].IsInfluencedBy(MoveType.PromptMoveDown), iColId) != true && checkIfScoreIsNA(chainedCols[sColName].IsInfluencedBy(MoveType.StepMoveDown), iColId) != true && checkIfScoreIsNA(chainedCols[sColName].IsInfluencedBy(MoveType.SetMoveDown), iColId) != true)
                                                {
                                                    //if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                    //{

                                                    DataTable dtModificatn = GetModificationDetails("STEP", oTemp.TemplateId);
                                                    if (dtModificatn != null)
                                                    {
                                                        if (dtModificatn.Rows.Count > 0)
                                                        {
                                                            bool mod_flag = CheckStepModification(Convert.ToInt32(dtModificatn.Rows[0]["ModificationRule"].ToString()), oTemp.TemplateId, iCurrentSetId, iCurrentStep);

                                                            if (mod_flag)
                                                            {
                                                                oData = new clsData();
                                                                string selqry = "SELECT ISNULL(ModificationInd, 0) as ModificationInd FROM DSTempHdr WHERE DSTempHdrId=" + oTemp.TemplateId;
                                                                object mod = oData.FetchValue(selqry);
                                                                if (mod != null)
                                                                {
                                                                    if (Convert.ToBoolean(mod) != true)
                                                                    {
                                                                        string insqry = "INSERT INTO StdtSessEvent(SchoolId,ClassId,StudentId,DSTempHdrId,StdtSessEventType,EvntTs,SessionNbr,EventType)VALUES" +
                                                                        "(" + oSession.SchoolId + "," + oSession.Classid + "," + oSession.StudentId + "," + oTemp.TemplateId + ",'MODIFICATION',GETDATE()," + iSessionNmbr + ",'EV')";
                                                                        oData.Execute(insqry);

                                                                        string updqry = "UPDATE DSTempHdr SET ModificationInd=1,ModifiedBy=" + oSession.LoginId + ",ModifiedOn=GETDATE() WHERE DSTempHdrId=" + oTemp.TemplateId;
                                                                        oData.Execute(updqry);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    if (bPrompt)
                                                    {
                                                        if (oDS.PromptProc != "NA")
                                                        {
                                                            if ((oDS.PromptProc == "Least-to-Most") || (oDS.PromptProc == "Graduated Guidance"))
                                                            {
                                                                iPrompts = Convert.ToInt32(LessonpromptUsed[LessonpromptUsed.Length - 1]);
                                                                sesResultchain[0].NextPrompt = iPrompts.ToString();
                                                            }
                                                            else
                                                            {
                                                                iPrompts = Convert.ToInt32(LessonpromptUsed[0]);

                                                            }
                                                        }
                                                    }
                                                    string strQuery = "Select DSTempStepId from DSTempStep where  SortOrder= " + istep + " and DSTempSetId=" + oDS.CrntSet + " AND IsDynamic=0 and DSTempHdrId=" + oTemp.TemplateId;
                                                    int retunID = Convert.ToInt32(oData.FetchValue(strQuery));
                                                    sEventType = "STEP MOVEDOWN";
                                                    if (bPrompt)
                                                        oDisc.updateStepStatus(oSession.SchoolId, oSession.Classid, oSession.StudentId, iCurrentStep, iCurrentSetId, oTemp.TemplateId, iPrompts, istep.ToString(), sesResultchain[0].CompletionStatus, sEventType, iSessionNmbr, oSession.LoginId, sLessonPlanId);
                                                    else
                                                        oDisc.updateStepStatus(oSession.SchoolId, oSession.Classid, oSession.StudentId, retunID, iCurrentSetId, oTemp.TemplateId, istep.ToString(), sesResultchain[0].CompletionStatus, sEventType, iSessionNmbr, oSession.LoginId, sLessonPlanId);
                                                    //oDisc.updateStepStatus(oSession.SchoolId, oSession.Classid, oSession.StudentId, oTemp.TemplateId, sesResultchain[0].NextStep.ToString(), sesResultchain[0].CompletionStatus, sEventType, iSessionNmbr, oSession.LoginId);
                                                    //if (sesResultchain[0].CompletionStatus == "COMPLETED")
                                                    //{
                                                    //    oDisc.insertEventStatus(oSession.SchoolId, oSession.Classid, oSession.StudentId, oTemp.TemplateId, sesResultchain[0].CompletionStatus, sEventType, iSessionNmbr);
                                                    //}
                                                    bStepCountCriteria = true;
                                                    // }
                                                }
                                            }
                                            else
                                            {
                                                sesResultchain[0].CompletionStatus = "NOT COMPLETED";
                                                if (!bRuleStatusIOA)
                                                {
                                                    // Functionto reset rule type values in StdtEvent Table
                                                    oDisc.resetEvntStatus(oSession.Classid, oSession.StudentId, oTemp.TemplateId);
                                                    sEventAlertStatu = "IOAEvntStatus=true,Step_MoveDown=true";
                                                    // Functionto Update rule Events values in StdtEvent Table
                                                    oDisc.UpdateAlertEvent(oTemp.TemplateId, sEventAlertStatu);
                                                }
                                                if (!bRuleStatusMultiTchr)
                                                {
                                                    // Functionto reset rule type values in StdtEvent Table
                                                    oDisc.resetEvntStatus(oSession.Classid, oSession.StudentId, oTemp.TemplateId);
                                                    sEventAlertStatu = "MultiTchrEvntStatus=true,Step_MoveDown=true";
                                                    // Functionto Update rule Events values in StdtEvent Table
                                                    oDisc.UpdateAlertEvent(oTemp.TemplateId, sEventAlertStatu);
                                                }
                                            }








                                            //Update the status table
                                            //############

                                            //break from the loop
                                            break;
                                        }
                                    }
                                }
                                //}
                            }

                            //Check for current step only if the Previous Step succeeds
                            if (!bPrevStepFailed)
                            {
                                bStepCountCriteria = false;
                                sesResultchain[index] = null;
                                TrialLists = oDisc.GetTrialLists(oSession.StudentId, oTemp.TemplateId, iCurrentSetId, iCurrentStep, chainedCols[sColName].RequiredSession(), sColName, false, hfPlusMinusResp.Value, coltypeCode, oDS.ChainType);
                                chainedCols[sColName].SessionCount = TrialLists.sessionCount;
                                chainedCols[sColName].SetInputData(iCurrentStep.ToString(), sCurrentPrompt, TargetPrompt, iCurrentSetNbr.ToString(), TrialLists.totalSet.ToString(), TrialLists.arTrials);
                                sesResultchain[index] = Chained.Model.Execute(chainedCols[sColName], false, bpromptColumn, oDS.ChainType);
                            }
                            ////////////////////////// New Step level criteria execution////////////////////// Ends Here ///// Arun M//////
                            #endregion
                            //chainedCols[sColName].SetInputData(iCurrentStep.ToString(), sCurrentPrompt, TargetPrompt, iCurrentSetNbr.ToString(), TrialLists.totalSet.ToString(), TrialLists.arTrials);
                            //sesResultchain[index] = Chained.Model.Execute(chainedCols[sColName]);

                            //For Accuracy Excluding Current Step......

                            if (iCurrentStep > 1)
                            {
                                if ((chainedInptData.ExcludeCrntStepMoveUp.BarCondition > 0) || (chainedInptData.ExcludeCrntStepMoveBack.BarCondition > 0))
                                {
                                    int stepmoveupCond = chainedInptData.ExcludeCrntStepMoveUp.BarCondition;
                                    int stepmovedownCond = chainedInptData.ExcludeCrntStepMoveBack.BarCondition;
                                    chainedCols[sColName].StepPercentAccuracy.BarCondition = chainedInptData.ExcludeCrntStepMoveUp.BarCondition;
                                    chainedCols[sColName].StepPercentAccuracy.ConsecutiveSuccess = chainedInptData.ExcludeCrntStepMoveUp.ConsecutiveSuccess;
                                    chainedCols[sColName].StepPercentAccuracy.TotalTrial = chainedInptData.ExcludeCrntStepMoveUp.TotalTrial;
                                    chainedCols[sColName].StepPercentAccuracy.SuccessNeeded = chainedInptData.ExcludeCrntStepMoveUp.SuccessNeeded;
                                    chainedCols[sColName].StepPercentAccuracy.bIOAReqd = chainedInptData.ExcludeCrntStepMoveUp.bIOAReqd;
                                    chainedCols[sColName].StepPercentAccuracy.bMultiTchr = chainedInptData.ExcludeCrntStepMoveUp.bMultiTchr;

                                    chainedCols[sColName].StepMoveBackPercentAccuracy.BarCondition = chainedInptData.ExcludeCrntStepMoveBack.BarCondition;
                                    chainedCols[sColName].StepMoveBackPercentAccuracy.ConsecutiveFailures = chainedInptData.ExcludeCrntStepMoveBack.ConsecutiveFailures;
                                    chainedCols[sColName].StepMoveBackPercentAccuracy.TotalTrial = chainedInptData.ExcludeCrntStepMoveBack.TotalTrial;
                                    chainedCols[sColName].StepMoveBackPercentAccuracy.FailureNeeded = chainedInptData.ExcludeCrntStepMoveBack.FailureNeeded;
                                    chainedCols[sColName].StepMoveBackPercentAccuracy.bIOAReqd = chainedInptData.ExcludeCrntStepMoveBack.bIOAReqd;
                                    chainedCols[sColName].StepMoveBackPercentAccuracy.bMultiTchr = chainedInptData.ExcludeCrntStepMoveBack.bMultiTchr;


                                    if ((stepmoveupCond > 0) || (stepmovedownCond > 0))
                                    {
                                        if (sesResultchain[index].MovedForwardStep || sesResultchain[index].MovedBackStep)
                                        {
                                            bool stepMoveUpflag = sesResultchain[index].MovedForwardStep;
                                            bool stepMoveDownflag = sesResultchain[index].MovedBackStep;
                                            TrialLists = oDisc.GetTrialLists(oSession.StudentId, oTemp.TemplateId, iCurrentSetId, iCurrentStep, chainedCols[sColName].RequiredSession(), sColName, true, hfPlusMinusResp.Value, coltypeCode, oDS.ChainType);
                                            chainedCols[sColName].StepCount = TrialLists.trialsCount;

                                            chainedCols[sColName].SetInputData((iCurrentStep - 1).ToString(), sCurrentPrompt, TargetPrompt, iCurrentSetNbr.ToString(), TrialLists.totalSet.ToString(), TrialLists.arTrials);
                                            sesResultchain[index] = Chained.Model.Execute(chainedCols[sColName], false, bpromptColumn, oDS.ChainType);

                                            //Check move up
                                            if (chainedInptData.StepPercentAccuracy.BarCondition > 0)
                                            {
                                                if (sesResultchain[index].MovedForwardStep)
                                                {
                                                    sesResultchain[index].MovedForwardStep = stepMoveUpflag;
                                                }
                                            }
                                            else if (stepmoveupCond > 0)
                                            {
                                                sesResultchain[index].MovedForwardStep = stepMoveUpflag;
                                            }

                                            //Check move down
                                            if (chainedInptData.StepMoveBackPercentAccuracy.BarCondition > 0)
                                            {
                                                if (sesResultchain[index].MovedBackStep)
                                                {
                                                    sesResultchain[index].MovedBackStep = stepMoveDownflag;
                                                }
                                            }
                                            else if (stepmovedownCond > 0)
                                            {
                                                sesResultchain[index].MovedBackStep = stepMoveDownflag;
                                            }
                                            if (sesResultchain[index].MovedBackStep)
                                            {
                                                if ((iCurrentStep - 1) == 1)
                                                {
                                                    sesResultchain[index].NextStep = sesResultchain[index].NextStep - 1;
                                                }
                                            }

                                            if (iCurrentStep == 2)
                                            {
                                                if (sesResultchain[index].MovedBackSet)
                                                {
                                                    //if (TrialLists.totalSet > 1)
                                                    //{
                                                    //    sesResultchain[index].MovedBackSet = true;
                                                    //    sesResultchain[index].NextSet = chainedCols[sColName].CurrentSet - 1;

                                                    //}
                                                    //else
                                                    //{
                                                    sesResultchain[index].MovedBackSet = false;
                                                    sesResultchain[index].MovedBackStep = true;
                                                    sesResultchain[index].NextStep = sesResultchain[index].NextStep - 1;
                                                    //  }

                                                }
                                            }

                                            sesResultchain[index].NextStep++;
                                            if (sesResultchain[index].NextStep > (chainedCols[sColName].StepCount + 1))
                                            {
                                                sesResultchain[index].NextStep--;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        TrialLists = oDisc.GetTrialLists(oSession.StudentId, oTemp.TemplateId, iCurrentSetId, iCurrentStep, chainedCols[sColName].RequiredSession(), sColName, true, hfPlusMinusResp.Value, coltypeCode, oDS.ChainType);
                                        chainedCols[sColName].StepCount = TrialLists.trialsCount;

                                        chainedCols[sColName].SetInputData((iCurrentStep - 1).ToString(), sCurrentPrompt, TargetPrompt, iCurrentSetNbr.ToString(), TrialLists.totalSet.ToString(), TrialLists.arTrials);
                                        sesResultchain[index] = Chained.Model.Execute(chainedCols[sColName], false, bpromptColumn, oDS.ChainType);


                                        if (sesResultchain[index].MovedBackStep)
                                        {
                                            if ((iCurrentStep - 1) == 1)
                                            {
                                                sesResultchain[index].NextStep = sesResultchain[index].NextStep - 1;
                                            }
                                        }

                                        if (iCurrentStep == 2)
                                        {
                                            if (sesResultchain[index].MovedBackSet)
                                            {
                                                //if (TrialLists.totalSet > 1)
                                                //{
                                                //    sesResultchain[index].MovedBackSet = true;
                                                //    sesResultchain[index].NextSet = chainedCols[sColName].CurrentSet - 1;

                                                //}
                                                //else
                                                //{
                                                sesResultchain[index].MovedBackSet = false;
                                                sesResultchain[index].MovedBackStep = true;
                                                sesResultchain[index].NextStep = sesResultchain[index].NextStep - 1;
                                                // }
                                            }
                                        }


                                        sesResultchain[index].NextStep++;

                                        if (sesResultchain[index].NextStep > (chainedCols[sColName].StepCount + 1))
                                        {
                                            sesResultchain[index].NextStep--;
                                        }
                                    }

                                }
                                //if ((chainedInptData.PromptExcludeCrntStepMoveUp.BarCondition > 0) || (chainedInptData.PromptExcludeCrntStepMoveBack.BarCondition > 0))
                                //{
                                //    int promptmoveupCond = chainedInptData.PromptPercentAccuracy.BarCondition;
                                //    int promptmovedownCond = chainedInptData.MoveBackPromptPercentAccuracy.BarCondition;
                                //    chainedCols[sColName].PromptPercentAccuracy.BarCondition = chainedInptData.PromptExcludeCrntStepMoveUp.BarCondition;
                                //    chainedCols[sColName].PromptPercentAccuracy.ConsecutiveSuccess = chainedInptData.PromptExcludeCrntStepMoveUp.ConsecutiveSuccess;
                                //    chainedCols[sColName].PromptPercentAccuracy.TotalTrial = chainedInptData.PromptExcludeCrntStepMoveUp.TotalTrial;
                                //    chainedCols[sColName].PromptPercentAccuracy.SuccessNeeded = chainedInptData.PromptExcludeCrntStepMoveUp.SuccessNeeded;
                                //    chainedCols[sColName].PromptPercentAccuracy.bIOAReqd = chainedInptData.PromptExcludeCrntStepMoveUp.bIOAReqd;
                                //    chainedCols[sColName].PromptPercentAccuracy.bMultiTchr = chainedInptData.PromptExcludeCrntStepMoveUp.bMultiTchr;

                                //    chainedCols[sColName].MoveBackPromptPercentAccuracy.BarCondition = chainedInptData.PromptExcludeCrntStepMoveBack.BarCondition;
                                //    chainedCols[sColName].MoveBackPromptPercentAccuracy.ConsecutiveFailures = chainedInptData.PromptExcludeCrntStepMoveBack.ConsecutiveFailures;
                                //    chainedCols[sColName].MoveBackPromptPercentAccuracy.TotalTrial = chainedInptData.PromptExcludeCrntStepMoveBack.TotalTrial;
                                //    chainedCols[sColName].MoveBackPromptPercentAccuracy.FailureNeeded = chainedInptData.PromptExcludeCrntStepMoveBack.FailureNeeded;
                                //    chainedCols[sColName].MoveBackPromptPercentAccuracy.bIOAReqd = chainedInptData.PromptExcludeCrntStepMoveBack.bIOAReqd;
                                //    chainedCols[sColName].MoveBackPromptPercentAccuracy.bMultiTchr = chainedInptData.PromptExcludeCrntStepMoveBack.bMultiTchr;


                                //    if ((promptmoveupCond > 0) || (promptmovedownCond > 0))
                                //    {
                                //        if (sesResultchain[index].MovedForwardPrompt || sesResultchain[index].MovedBackPrompt)
                                //        {
                                //            TrialLists = oDisc.GetTrialLists(oSession.StudentId, oTemp.TemplateId, iCurrentSetId, iCurrentStep, chainedCols[sColName].RequiredSession(), sColName, true);
                                //            chainedCols[sColName].StepCount = TrialLists.trialsCount;

                                //            chainedCols[sColName].SetInputData((iCurrentStep - 1).ToString(), sCurrentPrompt, TargetPrompt, iCurrentSetNbr.ToString(), TrialLists.totalSet.ToString(), TrialLists.arTrials);
                                //            sesResultchain[index] = Chained.Model.Execute(chainedCols[sColName]);
                                //        }
                                //    }
                                //    else
                                //    {
                                //        TrialLists = oDisc.GetTrialLists(oSession.StudentId, oTemp.TemplateId, iCurrentSetId, iCurrentStep, chainedCols[sColName].RequiredSession(), sColName, true);
                                //        chainedCols[sColName].StepCount = TrialLists.trialsCount;

                                //        chainedCols[sColName].SetInputData((iCurrentStep - 1).ToString(), sCurrentPrompt, TargetPrompt, iCurrentSetNbr.ToString(), TrialLists.totalSet.ToString(), TrialLists.arTrials);
                                //        sesResultchain[index] = Chained.Model.Execute(chainedCols[sColName]);
                                //    }

                                //}
                            }
                        }



                        if (dr["ColTypeCd"].ToString() == "Duration")
                        {

                            if (bstepAvgDurationMoveUp && bStepMoveUp)
                                bStepMoveUp = true;
                            else
                                bStepMoveUp = false;

                            if (bAvgDurationMoveUp && bSetMoveUp)
                                bSetMoveUp = true;
                            else
                                bSetMoveUp = false;

                            if (bstepAvgDurationMoveDown && bStepMoveUp)
                                bStepMoveUp = true;
                            else
                                bStepMoveUp = false;

                            if (bAvgDurationMoveDown && bSetMoveBack)
                                bSetMoveBack = true;
                            else
                                bSetMoveBack = false;

                            if (bstepTotDurationMoveUp && bStepMoveUp)
                                bStepMoveUp = true;
                            else
                                bStepMoveUp = false;

                            if (bTotDurationMoveUp && bSetMoveUp)
                                bSetMoveUp = true;
                            else
                                bSetMoveUp = false;

                            if (bstepTotDurationMoveDown && bStepMoveUp)
                                bStepMoveUp = true;
                            else
                                bStepMoveUp = false;

                            if (bTotDurationMoveDown && bSetMoveBack)
                                bSetMoveBack = true;
                            else
                                bSetMoveBack = false;
                            if (CompletionStatusSet == "COMPLETED")
                            {
                                bSetCompleted = true;
                            }

                        }
                        else if (dr["ColTypeCd"].ToString() == "Frequency")
                        {
                            if (bstepFrequencyMoveUp && bStepMoveUp)
                                bStepMoveUp = true;
                            else
                                bStepMoveUp = false;

                            if (bFrequencyMoveUp && bSetMoveUp)
                                bSetMoveUp = true;
                            else
                                bSetMoveUp = false;

                            if (bstepFrequencyMoveDown && bStepMoveUp)
                                bStepMoveUp = true;
                            else
                                bStepMoveUp = false;
                            if (bFrequencyMoveDown && bSetMoveBack)
                                bSetMoveBack = true;
                            else
                                bSetMoveBack = false;
                            if (bPromptFrequencyMoveUp && bPromptMoveUp)
                                bPromptMoveUp = true;
                            if (CompletionStatusSet == "COMPLETED")
                            {
                                bSetCompleted = true;
                            }
                        }
                        else if (dr["ColTypeCd"].ToString() == "Text")
                        {
                            if (bcustMoveUp && bSetMoveUp)
                                bSetMoveUp = true;
                            if (bCustMoveDown && bSetMoveBack)
                                bSetMoveBack = true;
                        }
                        else if (colt.ToString() == "true")
                        {

                            TempRules = GetStepRules(oTemp.TemplateId, iColId);
                            if (TempRules.pctIndAllMoveUp.iTotalCorrectInstance > 0)
                            {
                                if (bstepIndallMoveUp && bStepMoveUp)
                                    bStepMoveUp = true;
                                else
                                    bStepMoveUp = false;
                            }
                            else
                            {
                                bStepMoveUp = sesResultchain[0].MovedForwardStep;
                                nextStep = sesResultchain[0].NextStep;
                            }

                            TempRules = GetSetRules(oTemp.TemplateId, iColId);
                            if (TempRules.pctIndAllMoveUp.iTotalCorrectInstance > 0)
                            {
                                if (bIndallMoveUp && bSetMoveUp)
                                    bSetMoveUp = true;
                                else
                                    bSetMoveUp = false;
                            }
                            else
                            {
                                bSetMoveUp = sesResultchain[0].MovedForwardSet;
                                nextSet = sesResultchain[0].NextSet;
                            }
                            TempRules = GetPromptRules(oTemp.TemplateId, iColId);
                            if (TempRules.pctIndAllMoveUp.iTotalCorrectInstance > 0)
                            {
                                if (bPromptIndallMoveUp && bPromptMoveUp)
                                    bPromptMoveUp = true;
                                else
                                    bPromptMoveUp = false;
                            }

                            if (CompletionStatusSet == "COMPLETED")
                            {
                                bSetCompleted = true;
                            }
                            else
                            {
                                if (TempRules.pctIndAllMoveUp.iTotalCorrectInstance == 0)
                                {
                                    CompletionStatusSet = sesResultchain[0].CompletionStatus;
                                    if (CompletionStatusSet == "COMPLETED")
                                    {
                                        bSetCompleted = true;
                                        bSetMoveUp = true;
                                    }

                                }

                            }
                            if (oDS.ChainType == "Forward chain" || oDS.ChainType == "Backward chain")
                            {
                                bStepMoveBack = sesResultchain[index].MovedBackStep;
                                bSetMoveBack = sesResultchain[index].MovedBackSet;
                                bPromptMoveBack = sesResultchain[index].MovedBackPrompt;


                                if (bSetMoveBack)
                                {
                                    nextSet = sesResultchain[0].NextSet;
                                }
                                else
                                {
                                    TempRules = GetSetRules(oTemp.TemplateId, iColId);
                                    if (TempRules.pctIndAllMoveUp.iTotalCorrectInstance == 0)
                                    {
                                        nextSet = sesResultchain[0].NextSet;
                                    }

                                }
                                TempRules = GetStepRules(oTemp.TemplateId, iColId);

                                if (bStepMoveBack)
                                {
                                    nextStep = sesResultchain[0].NextStep;
                                }
                                else
                                    if (TempRules.pctIndAllMoveUp.iTotalCorrectInstance == 0)
                                    {

                                        nextStep = sesResultchain[0].NextStep;
                                    }

                                if (bPromptMoveBack)
                                {
                                    sNextLessonPrompt = sesResultchain[0].NextPrompt;
                                }
                                else
                                {
                                    TempRules = GetPromptRules(oTemp.TemplateId, iColId);
                                    if (TempRules.pctIndAllMoveUp.iTotalCorrectInstance == 0)
                                    {
                                        sNextLessonPrompt = sesResultchain[0].NextPrompt;
                                    }
                                }
                            }
                            else
                            {
                                TempRules = GetSetRules(oTemp.TemplateId, iColId);
                                if (TempRules.pctIndAllMoveUp.iTotalCorrectInstance == 0)
                                {

                                    bSetMoveBack = sesResultchain[index].MovedBackSet;
                                }
                                else
                                {
                                    if (bIndallMoveDown && bSetMoveBack)
                                        bSetMoveBack = true;
                                    else
                                        bSetMoveBack = false;

                                }

                            }


                        }
                        else
                        {

                            if (sesResultchain[index] != null)
                            {
                                if (set_moveupCount > 0 || bsetUp == true)
                                {
                                    if (bSetMoveUp && chainedCols[sColName].IsInfluencedBy(MoveType.SetMoveUp))
                                    {
                                        bSetMoveUp = sesResultchain[0].MovedForwardSet;
                                        nextSet = sesResultchain[0].NextSet;
                                        CompletionStatusSet = sesResultchain[index].CompletionStatus;
                                        if (CompletionStatusSet == "COMPLETED")
                                        {
                                            bSetCompleted = true;
                                            bSetMoveUp = true;
                                        }
                                        else
                                            bSetCompleted = false;

                                        if (bSetMoveUp) bSetMoveBack = false;
                                    }
                                }
                                else
                                    bSetMoveUp = false;
                                if (set_movedownCount > 0 || bsetDown == true)
                                {
                                    if (bSetMoveBack && chainedCols[sColName].IsInfluencedBy(MoveType.SetMoveDown))
                                    {
                                        if (iCurrentSetNbr > 1)
                                        {
                                            bSetMoveBack = sesResultchain[0].MovedBackSet;
                                            nextSet = sesResultchain[0].NextSet;
                                            if (bSetMoveBack)
                                                bSetCompleted = false;
                                            if (bSetMoveBack) bSetMoveUp = false;
                                        }
                                        else
                                        {
                                            bSetMoveBack = false;
                                        }
                                    }
                                }
                                else
                                    bSetMoveBack = false;
                            }
                        }
                        if (sesResultchain[index] != null)
                        {
                            if (prompt_moveupCount > 0)
                            {
                                if (sesResultchain[index].MovedForwardPrompt && chainedCols[sColName].IsInfluencedBy(MoveType.PromptMoveup))
                                {
                                    bPromptMoveUp = true;
                                    bStepMoveUp = false;
                                    sNextLessonPrompt = sesResultchain[index].NextPrompt;
                                    if (!bpromptColumn)
                                    {
                                        if (LessonpromptUsedOther.Length > crntPrmtIndex + 1)
                                            sNextLessonPrompt = LessonpromptUsedOther[crntPrmtIndex + 1];
                                        else
                                            bPromptMoveUp = false;
                                    }
                                    //bStepMoveUp = sesResultchain[0].MovedForwardStep;
                                    //bSetMoveUp = sesResultchain[0].MovedForwardSet;
                                    //bStepMoveBack = sesResultchain[0].MovedBackStep;
                                    //bSetMoveBack = sesResultchain[0].MovedBackSet;
                                }
                            }
                            else
                            {
                                if (bPromptMoveupNA || bSetPromptMoveupNA)
                                {
                                    bPromptMoveUp = false;
                                }
                            }

                            if (prompt_movedownCount > 0)
                            {
                                if (sesResultchain[index].MovedBackPrompt && chainedCols[sColName].IsInfluencedBy(MoveType.PromptMoveDown))
                                {
                                    bPromptMoveBack = true;
                                    sNextLessonPrompt = sesResultchain[index].NextPrompt;
                                    if (!bpromptColumn)
                                    {
                                        if (crntPrmtIndex > 0)
                                            sNextLessonPrompt = LessonpromptUsedOther[crntPrmtIndex - 1];
                                        else
                                            bPromptMoveBack = false;
                                    }
                                    //bStepMoveUp = sesResultchain[0].MovedForwardStep;
                                    //bSetMoveUp = sesResultchain[0].MovedForwardSet;
                                    //bStepMoveBack = sesResultchain[0].MovedBackStep;
                                    //bSetMoveBack = sesResultchain[0].MovedBackSet;
                                }
                            }
                            else
                            {
                                if (bPromptMovedownNA || bSetPromptMovedownNA)
                                {
                                    bPromptMoveBack = false;
                                }
                            }

                            if (oDS.ChainType == "Total Task")
                            {
                                //bool flag = true;
                                //if (sesResultchain[index].StepPrompts != null)
                                //{
                                //    foreach (string iprompt in sesResultchain[index].StepPrompts)
                                //    {
                                //        if (iprompt != TargetPrompt)
                                //        {
                                //            flag = false;
                                //            break;
                                //        }
                                //    }
                                //}
                                //if (!flag)
                                //{
                                //    if (sesResultchain[index].MoveForwardPromptStep)
                                //    {
                                //        bPromptMoveUp = false;
                                //        bStepMoveUp = false;
                                //        bSetMoveUp = false;
                                //        bStepMoveBack = false;
                                //        bSetMoveBack = false;
                                //    }
                                //    if (sesResultchain[index].MoveBackPromptStep)
                                //    {
                                //        bPromptMoveBack = false;
                                //        bStepMoveUp = false;
                                //        bSetMoveUp = false;
                                //        bStepMoveBack = false;
                                //        bSetMoveBack = false;
                                //    }
                                //}
                            }
                            if (step_moveupCount > 0)
                            {
                                if (bStepMoveUp && chainedCols[sColName].IsInfluencedBy(MoveType.StepMoveUp))
                                {
                                    bStepMoveUp = sesResultchain[0].MovedForwardStep;
                                    nextStep = sesResultchain[0].NextStep;
                                }
                            }
                            //else
                            //    bStepMoveUp = false;
                            if (step_movedownCount > 0)
                            {
                                if (bStepMoveBack && chainedCols[sColName].IsInfluencedBy(MoveType.StepMoveDown))
                                {
                                    bStepMoveBack = sesResultchain[0].MovedBackStep;
                                    nextStep = sesResultchain[0].NextStep;
                                }
                            }

                            else if (bStepPromptMovedownNA == true)

                                bStepMoveBack = false;
                            //else
                            //    bStepMoveBack = false;

                        }
                        loop++;

                    }
                    else
                    {
                        loop++;
                        //bSetMoveUp = false;
                        //bSetMoveBack = false;
                        //bPromptMoveUp = false;
                        //bPromptMoveBack = false;
                        //bStepMoveUp = false;
                        //bStepMoveBack = false;
                    }
                    //if ((!bPrompt) && (sesResult[0].NextPrompt.ToString() == "*"))
                    //{
                    string sEventAlertStatus = "";
                    int iPrompt = 0;

                    //ash: set isColNA to true if the col is used is criteria and its score is NA
                    if (checkIfScoreIsNA(chainedCols[sColName].IsInfluencedBy(MoveType.PromptMoveDown), iColId) == true || checkIfScoreIsNA(chainedCols[sColName].IsInfluencedBy(MoveType.StepMoveDown), iColId) == true || checkIfScoreIsNA(chainedCols[sColName].IsInfluencedBy(MoveType.SetMoveDown), iColId) == true)
                    {
                        isColNA = true;
                    }

                    if (count == loop && isColNA == false)
                    {

                        if (bSetMoveBack && chainedCols[sColName].IsInfluencedBy(MoveType.SetMoveDown))
                        {
                            bStepMoveUp = false;
                            bStepMoveBack = false;
                        }
                        if (bStepMoveUp && chainedCols[sColName].IsInfluencedBy(MoveType.StepMoveUp))
                        {
                            bSetMoveUp = false;
                            bSetMoveBack = false;
                        }
                        if (bStepMoveBack && chainedCols[sColName].IsInfluencedBy(MoveType.StepMoveDown))
                        {
                            bSetMoveUp = false;
                            bSetMoveBack = false;
                        }

                        if ((bPromtHirchy && (LessonTargetPrompt.Trim() != sCurrentLessonPrompt.Trim())))
                        {
                            if (oDS.ChainType == "Total Task")
                            {
                                if (Session["StepLevelPrompt"] != null && Convert.ToBoolean(Session["StepLevelPrompt"]) == false)
                                {
                                    bStepMoveUp = false;
                                    bSetMoveUp = false;
                                    bSetCompleted = false;
                                }
                            }
                            else
                            {
                                if (bStepMoveUp)
                                {
                                    if (prompt_moveupCount > 0)
                                    {
                                        bPromptMoveUp = true;
                                        bStepMoveUp = false;
                                        bSetMoveUp = false;
                                        bSetCompleted = false;
                                        if (LessonpromptUsedOther.Length > crntPrmtIndex + 1)
                                            sNextLessonPrompt = LessonpromptUsedOther[crntPrmtIndex + 1];
                                        else
                                        {
                                            bPromptMoveUp = false;
                                            bStepMoveUp = true;
                                        }
                                    }
                                    else
                                    {
                                        bStepMoveUp = false;
                                        bSetMoveUp = false;
                                        bSetCompleted = false;
                                    }
                                }



                            }
                        }
                        oDisc = new DiscreteSession();
                        #region setmoveup
                        if (bSetMoveUp)
                        {
                            string sLPused = "";
                            if (LessonpromptUsed.Length == 0)
                                sLPused = "0";
                            else
                                sLPused = LessonpromptUsed[LessonpromptUsed.Length - 1];
                            if ((bPromtHirchy && oDS.ChainType == "Total Task" &&
                                Session["StepLevelPrompt"] != null && Convert.ToBoolean(Session["StepLevelPrompt"]) == false
                                && LessonpromptUsed != null && sLessonPrompt == sLPused)
                                || !bPromtHirchy || (bPromtHirchy && oDS.ChainType == "Total Task" &&
                                Session["StepLevelPrompt"] != null && Convert.ToBoolean(Session["StepLevelPrompt"]) == true)
                                || (bPromtHirchy && oDS.ChainType != "Total Task" && LessonpromptUsed != null &&
                                sLessonPrompt == LessonpromptUsed[LessonpromptUsed.Length - 1]))
                            {
                                if (sesResultchain != null)
                                {
                                    if (sesResultchain[0] != null)
                                    {
                                        bRuleStatusIOA = oDisc.checkConditionIOA(bSetMoveUpIOA, bIOA);
                                        bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bSetMoveUpMultiTecher, bMultyTchr);

                                        //bRuleStatusIOA = oDisc.checkConditionIOA(chainedInptData.IOARequired, bIOA);
                                        //bRuleStatusMultiTchr = oDisc.checkConditionIOA(chainedInptData.MultiTeacherRequired, bMultyTchr);
                                        if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                        {
                                            if (nextSet == 0) { nextSet = 1; }
                                            else
                                            {
                                                if ((bPrompt) || (LessonpromptUsed.Length > 0))
                                                {
                                                    if (oDS.PromptProc != "NA")
                                                    {
                                                        if ((oDS.PromptProc == "Least-to-Most") || (oDS.PromptProc == "Graduated Guidance"))
                                                        {

                                                            iPrompt = Convert.ToInt32(LessonpromptUsed[LessonpromptUsed.Length - 1]);
                                                            sesResultchain[0].NextPrompt = iPrompt.ToString();
                                                        }
                                                        else
                                                        {
                                                            iPrompt = Convert.ToInt32(LessonpromptUsed[0]);

                                                        }
                                                    }
                                                }
                                                sEventType = "SET MOVEUP";
                                                if (bPrompt)
                                                {
                                                    //if (sesResultchain[0].CompletionStatus == "COMPLETED")
                                                    if (sesResultchain[0].CompletionStatus == "COMPLETED" || CompletionStatusSet == "COMPLETED")
                                                    {
                                                        oDisc.updateSetStatus(oSession.SchoolId, oSession.Classid, oSession.StudentId, oTemp.TemplateId, iCurrentSetId, Convert.ToInt32(LessonTargetPrompt), nextSet.ToString(), CompletionStatusSet, sEventType, iSessionNmbr, oSession.LoginId, sLessonPlanId);

                                                    }
                                                    else
                                                    {
                                                        oDisc.updateSetStatus(oSession.SchoolId, oSession.Classid, oSession.StudentId, oTemp.TemplateId, iCurrentSetId, iPrompt, nextSet.ToString(), CompletionStatusSet, sEventType, iSessionNmbr, oSession.LoginId, sLessonPlanId);
                                                    }
                                                }
                                                else
                                                {
                                                    if (LessonpromptUsed.Length > 0)
                                                    {
                                                        if (bSetPromptMoveupNA)
                                                        {
                                                            if (oDS.PromptProc != "NA")
                                                            {
                                                                if ((oDS.PromptProc == "Least-to-Most") || (oDS.PromptProc == "Graduated Guidance"))
                                                                {
                                                                    iPrompt = Convert.ToInt32(LessonpromptUsed[LessonpromptUsed.Length - 1]);
                                                                    sesResultchain[0].NextPrompt = iPrompt.ToString();
                                                                }
                                                                else
                                                                {
                                                                    iPrompt = Convert.ToInt32(LessonpromptUsed[0]);
                                                                }
                                                            }
                                                            //if (sesResultchain[0].CompletionStatus == "COMPLETED")
                                                            if (sesResultchain[0].CompletionStatus == "COMPLETED" || CompletionStatusSet == "COMPLETED")
                                                            {
                                                                oDisc.updateSetStatus(oSession.SchoolId, oSession.Classid, oSession.StudentId, oTemp.TemplateId, iCurrentSetId, Convert.ToInt32(LessonTargetPrompt), nextSet.ToString(), CompletionStatusSet, sEventType, iSessionNmbr, oSession.LoginId, sLessonPlanId);

                                                            }
                                                            else
                                                            {
                                                                oDisc.updateSetStatus(oSession.SchoolId, oSession.Classid, oSession.StudentId, oTemp.TemplateId, iCurrentSetId, iPrompt, nextSet.ToString(), CompletionStatusSet, sEventType, iSessionNmbr, oSession.LoginId, sLessonPlanId);
                                                            }
                                                        }
                                                        else
                                                            oDisc.updateSetStatus(oSession.SchoolId, oSession.Classid, oSession.StudentId, oTemp.TemplateId, iCurrentSetId, nextSet.ToString(), CompletionStatusSet, sEventType, iSessionNmbr, oSession.LoginId, sLessonPlanId);
                                                    }
                                                    else
                                                        oDisc.updateSetStatus(oSession.SchoolId, oSession.Classid, oSession.StudentId, oTemp.TemplateId, iCurrentSetId, nextSet.ToString(), CompletionStatusSet, sEventType, iSessionNmbr, oSession.LoginId, sLessonPlanId);

                                                }
                                                bPromptMoveUp = false;
                                                //oDisc.updateSetStatus(oSession.SchoolId, oSession.Classid, oSession.StudentId, oTemp.TemplateId, sesResultchain[0].NextSet.ToString(), sesResultchain[0].CompletionStatus, sEventType, iSessionNmbr, oSession.LoginId);
                                                //if (sesResultchain[0].CompletionStatus == "COMPLETED")
                                                //{
                                                //    oDisc.insertEventStatus(oSession.SchoolId, oSession.Classid, oSession.StudentId, oTemp.TemplateId, sesResultchain[0].CompletionStatus, sEventType, iSessionNmbr);
                                                //}
                                                if (oDS.ChainType == "Total Task")
                                                {
                                                    if (sesResultchain[0].CompletionStatus == "COMPLETED")
                                                    {
                                                        oDisc.updateStepPromptForTotalTask(oTemp.TemplateId, oSession.StudentId, oSession.LoginId, Convert.ToInt32(LessonTargetPrompt));
                                                    }
                                                    else
                                                    {
                                                        oDisc.updateStepPromptForTotalTask(oTemp.TemplateId, oSession.StudentId, oSession.LoginId, iPrompt);
                                                    }
                                                }
                                            }
                                        }
                                        else
                                        {
                                            sesResultchain[0].CompletionStatus = "NOT COMPLETED";
                                            bSetCompleted = false;
                                            if (!bRuleStatusIOA)
                                            {

                                                // Functionto reset rule type values in StdtEvent Table
                                                oDisc.resetEvntStatus(oSession.Classid, oSession.StudentId, oTemp.TemplateId);
                                                sEventAlertStatus = "IOAEvntStatus=true,Set_MoveUp=true";
                                                // Functionto Update rule Events values in StdtEvent Table
                                                oDisc.UpdateAlertEvent(oTemp.TemplateId, sEventAlertStatus);
                                            }
                                            if (!bRuleStatusMultiTchr)
                                            {
                                                // Functionto reset rule type values in StdtEvent Table
                                                oDisc.resetEvntStatus(oSession.Classid, oSession.StudentId, oTemp.TemplateId);
                                                sEventAlertStatus = "MultiTchrEvntStatus=true,Set_MoveUp=true";
                                                // Functionto Update rule Events values in StdtEvent Table
                                                oDisc.UpdateAlertEvent(oTemp.TemplateId, sEventType);
                                            }
                                        }
                                    }
                                    else
                                    {
                                        bSetCompleted = false;
                                    }
                                }
                            }


                            DisplayIOA_MTstatus(bRuleStatusIOA, bRuleStatusMultiTchr, oDS.CrntSet, bSetMoveUp, "Set");
                        }
                        #endregion
                        #region setmoveback
                        if (bSetMoveBack)
                        {
                            bRuleStatusIOA = oDisc.checkConditionIOA(bSetMoveDownIOA, bIOA);
                            bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bSetMoveDownMultiTecher, bMultyTchr);
                            if (sesResultchain != null)
                            {
                                if (sesResultchain[0] != null)
                                {
                                    if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                    {
                                        if (nextSet == 0) { nextSet = 1; }
                                        else
                                        {
                                            DataTable dtModificatn = GetModificationDetails("SET", oTemp.TemplateId);
                                            if (dtModificatn != null)
                                            {
                                                if (dtModificatn.Rows.Count > 0)
                                                {
                                                    bool mod_flag = CheckSetModification(Convert.ToInt32(dtModificatn.Rows[0]["ModificationRule"].ToString()), oTemp.TemplateId, iCurrentSetId);

                                                    //if (mod_flag)
                                                    //{
                                                    //    oData = new clsData();
                                                    //    string updqry = "UPDATE DSTempHdr SET ModificationInd=1,ModifiedBy=" + oSession.LoginId + ",ModifiedOn=GETDATE() WHERE DSTempHdrId=" + oTemp.TemplateId;
                                                    //    oData.Execute(updqry);
                                                    //}
                                                    if (mod_flag)
                                                    {
                                                        oData = new clsData();
                                                        string selqry = "SELECT ISNULL(ModificationInd, 0) as ModificationInd FROM DSTempHdr WHERE DSTempHdrId=" + oTemp.TemplateId;
                                                        object mod = oData.FetchValue(selqry);
                                                        if (mod != null)
                                                        {
                                                            if (Convert.ToBoolean(mod) != true)
                                                            {
                                                                string insqry = "INSERT INTO StdtSessEvent(SchoolId,ClassId,StudentId,DSTempHdrId,StdtSessEventType,EvntTs,SessionNbr,EventType)VALUES" +
                                                                "(" + oSession.SchoolId + "," + oSession.Classid + "," + oSession.StudentId + "," + oTemp.TemplateId + ",'MODIFICATION',GETDATE()," + iSessionNmbr + ",'EV')";
                                                                oData.Execute(insqry);

                                                                string updqry = "UPDATE DSTempHdr SET ModificationInd=1,ModifiedBy=" + oSession.LoginId + ",ModifiedOn=GETDATE() WHERE DSTempHdrId=" + oTemp.TemplateId;
                                                                oData.Execute(updqry);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            if ((bPrompt) || (LessonpromptUsed.Length > 0))
                                            {
                                                if (oDS.PromptProc != "NA")
                                                {
                                                    if ((oDS.PromptProc == "Least-to-Most") || (oDS.PromptProc == "Graduated Guidance"))
                                                    {
                                                        iPrompt = Convert.ToInt32(LessonpromptUsed[LessonpromptUsed.Length - 1]);
                                                        sesResultchain[0].NextPrompt = iPrompt.ToString();
                                                    }
                                                    else
                                                    {
                                                        iPrompt = Convert.ToInt32(LessonpromptUsed[0]);

                                                    }
                                                }
                                            }
                                            sEventType = "SET MOVEDOWN";
                                            if (bPrompt)
                                                oDisc.updateSetStatus(oSession.SchoolId, oSession.Classid, oSession.StudentId, oTemp.TemplateId, iCurrentSetId, iPrompt, nextSet.ToString(), sesResultchain[0].CompletionStatus, sEventType, iSessionNmbr, oSession.LoginId, sLessonPlanId);
                                            else
                                            {
                                                if (LessonpromptUsed.Length > 0)
                                                {
                                                    if (bSetPromptMovedownNA)
                                                    {
                                                        if (oDS.PromptProc != "NA")
                                                        {
                                                            if ((oDS.PromptProc == "Least-to-Most") || (oDS.PromptProc == "Graduated Guidance"))
                                                            {
                                                                iPrompt = Convert.ToInt32(LessonpromptUsed[LessonpromptUsed.Length - 1]);
                                                                sesResultchain[0].NextPrompt = iPrompt.ToString();
                                                            }
                                                            else
                                                            {
                                                                iPrompt = Convert.ToInt32(LessonpromptUsed[0]);
                                                            }
                                                        }
                                                        oDisc.updateSetStatus(oSession.SchoolId, oSession.Classid, oSession.StudentId, oTemp.TemplateId, iCurrentSetId, iPrompt, nextSet.ToString(), sesResultchain[0].CompletionStatus, sEventType, iSessionNmbr, oSession.LoginId, sLessonPlanId);
                                                    }
                                                    else
                                                        oDisc.updateSetStatus(oSession.SchoolId, oSession.Classid, oSession.StudentId, oTemp.TemplateId, iCurrentSetId, nextSet.ToString(), sesResultchain[0].CompletionStatus, sEventType, iSessionNmbr, oSession.LoginId, sLessonPlanId);
                                                }
                                                else
                                                    oDisc.updateSetStatus(oSession.SchoolId, oSession.Classid, oSession.StudentId, oTemp.TemplateId, iCurrentSetId, nextSet.ToString(), sesResultchain[0].CompletionStatus, sEventType, iSessionNmbr, oSession.LoginId, sLessonPlanId);


                                            }
                                            //oDisc.updateSetStatus(oSession.SchoolId, oSession.Classid, oSession.StudentId, oTemp.TemplateId, sesResultchain[0].NextSet.ToString(), sesResultchain[0].CompletionStatus, sEventType, iSessionNmbr, oSession.LoginId);
                                            //if (sesResultchain[0].CompletionStatus == "COMPLETED")
                                            //{
                                            //    oDisc.insertEventStatus(oSession.SchoolId, oSession.Classid, oSession.StudentId, oTemp.TemplateId, sesResultchain[0].CompletionStatus, sEventType, iSessionNmbr);
                                            //}
                                            if (oDS.ChainType == "Total Task")
                                            {
                                                oDisc.updateStepPromptForTotalTask(oTemp.TemplateId, oSession.StudentId, oSession.LoginId, Convert.ToInt32(iPrompt));
                                            }
                                        }
                                    }
                                    else
                                    {
                                        sesResultchain[0].CompletionStatus = "NOT COMPLETED";
                                        bSetCompleted = false;
                                        if (!bRuleStatusIOA)
                                        {
                                            // Functionto reset rule type values in StdtEvent Table
                                            oDisc.resetEvntStatus(oSession.Classid, oSession.StudentId, oTemp.TemplateId);
                                            sEventAlertStatus = "IOAEvntStatus=true,Set_MoveDown=true";
                                            // Functionto Update rule Events values in StdtEvent Table
                                            oDisc.UpdateAlertEvent(oTemp.TemplateId, sEventAlertStatus);
                                        }
                                        if (!bRuleStatusMultiTchr)
                                        {
                                            // Functionto reset rule type values in StdtEvent Table
                                            oDisc.resetEvntStatus(oSession.Classid, oSession.StudentId, oTemp.TemplateId);
                                            sEventAlertStatus = "MultiTchrEvntStatus=true,Set_MoveDown=true";
                                            // Functionto Update rule Events values in StdtEvent Table
                                            oDisc.UpdateAlertEvent(oTemp.TemplateId, sEventType);
                                        }
                                    }
                                }
                            }
                            DisplayIOA_MTstatus(bRuleStatusIOA, bRuleStatusMultiTchr, oDS.CrntSet, bSetMoveBack, "Set");
                        }
                        #endregion
                        #region stepmoveup
                        if (bStepMoveUp)
                        {
                            bRuleStatusIOA = oDisc.checkConditionIOA(bStepMoveUpIOA, bIOA);
                            bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bStepMoveUpMultiTecher, bMultyTchr);
                            if (sesResultchain != null)
                            {
                                if (sesResultchain[0] != null)
                                {
                                    if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                    {
                                        if (nextStep == 0) { nextStep = 1; }
                                        else
                                        {
                                            if ((bPrompt) || (LessonpromptUsed.Length > 0))
                                            {
                                                if (oDS.PromptProc != "NA")
                                                {
                                                    if ((oDS.PromptProc == "Least-to-Most") || (oDS.PromptProc == "Graduated Guidance"))
                                                    {
                                                        iPrompt = Convert.ToInt32(LessonpromptUsed[LessonpromptUsed.Length - 1]);
                                                        sesResultchain[0].NextPrompt = iPrompt.ToString();
                                                    }
                                                    else
                                                    {
                                                        iPrompt = Convert.ToInt32(LessonpromptUsed[0]);
                                                    }
                                                }
                                            }
                                            sEventType = "STEP MOVEUP";
                                            if (bPrompt)
                                                oDisc.updateStepStatus(oSession.SchoolId, oSession.Classid, oSession.StudentId, iCurrentStep, iCurrentSetId, oTemp.TemplateId, iPrompt, nextStep.ToString(), sesResultchain[0].CompletionStatus, sEventType, iSessionNmbr, oSession.LoginId, sLessonPlanId);
                                            else
                                            {
                                                if (LessonpromptUsed.Length > 0)
                                                {
                                                    if (bPromptMoveupNA)
                                                    {
                                                        if (oDS.PromptProc != "NA")
                                                        {
                                                            if ((oDS.PromptProc == "Least-to-Most") || (oDS.PromptProc == "Graduated Guidance"))
                                                            {
                                                                iPrompt = Convert.ToInt32(LessonpromptUsed[LessonpromptUsed.Length - 1]);
                                                                sesResultchain[0].NextPrompt = iPrompt.ToString();
                                                            }
                                                            else
                                                            {
                                                                iPrompt = Convert.ToInt32(LessonpromptUsed[0]);
                                                            }
                                                        }
                                                        oDisc.updateStepStatus(oSession.SchoolId, oSession.Classid, oSession.StudentId, iCurrentStep, iCurrentSetId, oTemp.TemplateId, iPrompt, nextStep.ToString(), sesResultchain[0].CompletionStatus, sEventType, iSessionNmbr, oSession.LoginId, sLessonPlanId);
                                                    }
                                                    else
                                                        oDisc.updateStepStatus(oSession.SchoolId, oSession.Classid, oSession.StudentId, iCurrentStep, iCurrentSetId, oTemp.TemplateId, nextStep.ToString(), sesResultchain[0].CompletionStatus, sEventType, iSessionNmbr, oSession.LoginId, sLessonPlanId);
                                                }
                                                else
                                                    oDisc.updateStepStatus(oSession.SchoolId, oSession.Classid, oSession.StudentId, iCurrentStep, iCurrentSetId, oTemp.TemplateId, nextStep.ToString(), sesResultchain[0].CompletionStatus, sEventType, iSessionNmbr, oSession.LoginId, sLessonPlanId);
                                            }
                                            bPromptMoveUp = false;
                                            //oDisc.updateStepStatus(oSession.SchoolId, oSession.Classid, oSession.StudentId, oTemp.TemplateId, sesResultchain[0].NextStep.ToString(), sesResultchain[0].CompletionStatus, sEventType, iSessionNmbr, oSession.LoginId);
                                            //if (sesResultchain[0].CompletionStatus == "COMPLETED")
                                            //{
                                            //    oDisc.insertEventStatus(oSession.SchoolId, oSession.Classid, oSession.StudentId, oTemp.TemplateId, sesResultchain[0].CompletionStatus, sEventType, iSessionNmbr);
                                            //}
                                        }
                                    }
                                    else
                                    {
                                        sesResultchain[0].CompletionStatus = "NOT COMPLETED";
                                        bSetCompleted = false;
                                        if (!bRuleStatusIOA)
                                        {
                                            // Functionto reset rule type values in StdtEvent Table
                                            oDisc.resetEvntStatus(oSession.Classid, oSession.StudentId, oTemp.TemplateId);
                                            sEventAlertStatus = "IOAEvntStatus=true,Step_MoveUp=true";
                                            // Functionto Update rule Events values in StdtEvent Table
                                            oDisc.UpdateAlertEvent(oTemp.TemplateId, sEventAlertStatus);
                                        }
                                        if (!bRuleStatusMultiTchr)
                                        {
                                            // Functionto reset rule type values in StdtEvent Table
                                            oDisc.resetEvntStatus(oSession.Classid, oSession.StudentId, oTemp.TemplateId);
                                            sEventAlertStatus = "MultiTchrEvntStatus=true,Step_MoveUp=true";
                                            // Functionto Update rule Events values in StdtEvent Table
                                            oDisc.UpdateAlertEvent(oTemp.TemplateId, sEventType);
                                        }
                                    }
                                }
                            }
                            DisplayIOA_MTstatus(bRuleStatusIOA, bRuleStatusMultiTchr, oDS.CrntStep, bStepMoveUp, "Step");
                        }
                        #endregion
                        #region stepmoveback
                        if (bStepMoveBack)
                        {
                            bRuleStatusIOA = oDisc.checkConditionIOA(bStepMoveDownIOA, bIOA);
                            bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bStepMoveDownMultiTecher, bMultyTchr);
                            if (sesResultchain != null)
                            {
                                if (sesResultchain[0] != null)
                                {
                                    if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                    {
                                        if (nextStep == 0) { nextStep = 1; }
                                        else
                                        {
                                            DataTable dtModificatn = GetModificationDetails("STEP", oTemp.TemplateId);
                                            if (dtModificatn != null)
                                            {
                                                if (dtModificatn.Rows.Count > 0)
                                                {
                                                    bool mod_flag = CheckStepModification(Convert.ToInt32(dtModificatn.Rows[0]["ModificationRule"].ToString()), oTemp.TemplateId, iCurrentSetId, iCurrentStep);

                                                    if (mod_flag)
                                                    {
                                                        oData = new clsData();
                                                        string selqry = "SELECT ISNULL(ModificationInd, 0) as ModificationInd FROM DSTempHdr WHERE DSTempHdrId=" + oTemp.TemplateId;
                                                        object mod = oData.FetchValue(selqry);
                                                        if (mod != null)
                                                        {
                                                            if (Convert.ToBoolean(mod) != true)
                                                            {
                                                                string insqry = "INSERT INTO StdtSessEvent(SchoolId,ClassId,StudentId,DSTempHdrId,StdtSessEventType,EvntTs,SessionNbr,EventType)VALUES" +
                                                                "(" + oSession.SchoolId + "," + oSession.Classid + "," + oSession.StudentId + "," + oTemp.TemplateId + ",'MODIFICATION',GETDATE()," + iSessionNmbr + ",'EV')";
                                                                oData.Execute(insqry);

                                                                string updqry = "UPDATE DSTempHdr SET ModificationInd=1,ModifiedBy=" + oSession.LoginId + ",ModifiedOn=GETDATE() WHERE DSTempHdrId=" + oTemp.TemplateId;
                                                                oData.Execute(updqry);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            if ((bPrompt) || (LessonpromptUsed.Length > 0))
                                            {
                                                if (oDS.PromptProc != "NA")
                                                {
                                                    if ((oDS.PromptProc == "Least-to-Most") || (oDS.PromptProc == "Graduated Guidance"))
                                                    {
                                                        iPrompt = Convert.ToInt32(LessonpromptUsed[LessonpromptUsed.Length - 1]);
                                                        sesResultchain[0].NextPrompt = iPrompt.ToString();
                                                    }
                                                    else
                                                    {
                                                        iPrompt = Convert.ToInt32(LessonpromptUsed[0]);
                                                    }
                                                }
                                            }
                                            sEventType = "STEP MOVEDOWN";
                                            if (bPrompt)
                                                oDisc.updateStepStatus(oSession.SchoolId, oSession.Classid, oSession.StudentId, iCurrentStep, iCurrentSetId, oTemp.TemplateId, iPrompt, nextStep.ToString(), sesResultchain[0].CompletionStatus, sEventType, iSessionNmbr, oSession.LoginId, sLessonPlanId);
                                            else
                                            {
                                                if (LessonpromptUsed.Length > 0)
                                                {
                                                    if (bPromptMovedownNA)
                                                    {
                                                        if (oDS.PromptProc != "NA")
                                                        {
                                                            if ((oDS.PromptProc == "Least-to-Most") || (oDS.PromptProc == "Graduated Guidance"))
                                                            {
                                                                iPrompt = Convert.ToInt32(LessonpromptUsed[LessonpromptUsed.Length - 1]);
                                                                sesResultchain[0].NextPrompt = iPrompt.ToString();
                                                            }
                                                            else
                                                            {
                                                                iPrompt = Convert.ToInt32(LessonpromptUsed[0]);
                                                            }
                                                        }
                                                        oDisc.updateStepStatus(oSession.SchoolId, oSession.Classid, oSession.StudentId, iCurrentStep, iCurrentSetId, oTemp.TemplateId, iPrompt, nextStep.ToString(), sesResultchain[0].CompletionStatus, sEventType, iSessionNmbr, oSession.LoginId, sLessonPlanId);
                                                    }
                                                    else
                                                        oDisc.updateStepStatus(oSession.SchoolId, oSession.Classid, oSession.StudentId, iCurrentStep, iCurrentSetId, oTemp.TemplateId, nextStep.ToString(), sesResultchain[0].CompletionStatus, sEventType, iSessionNmbr, oSession.LoginId, sLessonPlanId);
                                                }
                                                else
                                                    oDisc.updateStepStatus(oSession.SchoolId, oSession.Classid, oSession.StudentId, iCurrentStep, iCurrentSetId, oTemp.TemplateId, nextStep.ToString(), sesResultchain[0].CompletionStatus, sEventType, iSessionNmbr, oSession.LoginId, sLessonPlanId);
                                            }
                                            //oDisc.updateStepStatus(oSession.SchoolId, oSession.Classid, oSession.StudentId, oTemp.TemplateId, sesResultchain[0].NextStep.ToString(), sesResultchain[0].CompletionStatus, sEventType, iSessionNmbr, oSession.LoginId);
                                            //if (sesResultchain[0].CompletionStatus == "COMPLETED")
                                            //{
                                            //    oDisc.insertEventStatus(oSession.SchoolId, oSession.Classid, oSession.StudentId, oTemp.TemplateId, sesResultchain[0].CompletionStatus, sEventType, iSessionNmbr);
                                            //}
                                        }
                                    }
                                    else
                                    {
                                        sesResultchain[0].CompletionStatus = "NOT COMPLETED";
                                        bSetCompleted = false;
                                        if (!bRuleStatusIOA)
                                        {
                                            // Functionto reset rule type values in StdtEvent Table
                                            oDisc.resetEvntStatus(oSession.Classid, oSession.StudentId, oTemp.TemplateId);
                                            sEventAlertStatus = "IOAEvntStatus=true,Step_MoveDown=true";
                                            // Functionto Update rule Events values in StdtEvent Table
                                            oDisc.UpdateAlertEvent(oTemp.TemplateId, sEventAlertStatus);
                                        }
                                        if (!bRuleStatusMultiTchr)
                                        {
                                            // Functionto reset rule type values in StdtEvent Table
                                            oDisc.resetEvntStatus(oSession.Classid, oSession.StudentId, oTemp.TemplateId);
                                            sEventAlertStatus = "MultiTchrEvntStatus=true,Step_MoveDown=true";
                                            // Functionto Update rule Events values in StdtEvent Table
                                            oDisc.UpdateAlertEvent(oTemp.TemplateId, sEventType);
                                        }
                                    }
                                }
                            }
                            DisplayIOA_MTstatus(bRuleStatusIOA, bRuleStatusMultiTchr, oDS.CrntStep, bStepMoveBack, "Step");
                        }
                        #endregion
                        #region promptmoveup
                        if (bPromptMoveUp)
                        {
                            bRuleStatusIOA = oDisc.checkConditionIOA(bPromptMoveUpIOA, bIOA);
                            bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bPromptMoveUpMultiTecher, bMultyTchr);
                            if (sesResultchain != null)
                            {
                                if (sesResultchain[0] != null)
                                {
                                    if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                    {
                                        sEventType = "PROMPT MOVEUP";
                                        if (sCurrentLessonPrompt == sNextLessonPrompt)
                                        { }
                                        else
                                            oDisc.updatePromptStatus(oSession.SchoolId, oSession.Classid, oSession.StudentId, oTemp.TemplateId, sNextLessonPrompt, sesResultchain[0].CompletionStatus, sEventType, iSessionNmbr, oSession.LoginId, Convert.ToInt32(sCurrentLessonPrompt), iCurrentSetId, iCurrentStep, sLessonPlanId);
                                        //if (sesResultchain[0].CompletionStatus == "COMPLETED")
                                        //{
                                        //    oDisc.insertEventStatus(oSession.SchoolId, oSession.Classid, oSession.StudentId, oTemp.TemplateId, sesResultchain[0].CompletionStatus, sEventType, iSessionNmbr);
                                        //}
                                    }
                                    else
                                    {
                                        //sesResultchain[0].CompletionStatus = "NOT COMPLETED";
                                        bSetCompleted = false;
                                        if (!bRuleStatusIOA)
                                        {
                                            // Functionto reset rule type values in StdtEvent Table
                                            oDisc.resetEvntStatus(oSession.Classid, oSession.StudentId, oTemp.TemplateId);
                                            sEventAlertStatus = "IOAEvntStatus=true,Prompt_MoveUp=true";
                                            // Functionto Update rule Events values in StdtEvent Table
                                            oDisc.UpdateAlertEvent(oTemp.TemplateId, sEventAlertStatus);
                                        }
                                        if (!bRuleStatusMultiTchr)
                                        {
                                            // Functionto reset rule type values in StdtEvent Table
                                            oDisc.resetEvntStatus(oSession.Classid, oSession.StudentId, oTemp.TemplateId);
                                            sEventAlertStatus = "MultiTchrEvntStatus=true,Prompt_MoveUp=true";
                                            // Functionto Update rule Events values in StdtEvent Table
                                            oDisc.UpdateAlertEvent(oTemp.TemplateId, sEventType);
                                        }
                                    }
                                }
                            }
                            DisplayIOA_MTstatus(bRuleStatusIOA, bRuleStatusMultiTchr, oDS.CrntPrompt, bPromptMoveUp, "Prompt");
                        }
                        #endregion
                        #region promptmoveback
                        if (bPromptMoveBack)
                        {
                            bRuleStatusIOA = oDisc.checkConditionIOA(bPromptMoveDownIOA, bIOA);
                            bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bPromptMoveDownMultiTecher, bMultyTchr);
                            if (sesResultchain != null)
                            {
                                if (sesResultchain[0] != null)
                                {
                                    if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                    {
                                        DataTable dtModificatn = GetModificationDetails("PROMPT", oTemp.TemplateId);
                                        if (dtModificatn != null)
                                        {
                                            if (dtModificatn.Rows.Count > 0)
                                            {
                                                bool mod_flag = CheckPromptModification(Convert.ToInt32(dtModificatn.Rows[0]["ModificationRule"].ToString()), oTemp.TemplateId, iCurrentSetId, iCurrentStep, Convert.ToInt32(sCurrentLessonPrompt));

                                                if (mod_flag)
                                                {
                                                    oData = new clsData();
                                                    string selqry = "SELECT ISNULL(ModificationInd, 0) as ModificationInd FROM DSTempHdr WHERE DSTempHdrId=" + oTemp.TemplateId;
                                                    object mod = oData.FetchValue(selqry);
                                                    if (mod != null)
                                                    {
                                                        if (Convert.ToBoolean(mod) != true)
                                                        {
                                                            string insqry = "INSERT INTO StdtSessEvent(SchoolId,ClassId,StudentId,DSTempHdrId,StdtSessEventType,EvntTs,SessionNbr,EventType)VALUES" +
                                                            "(" + oSession.SchoolId + "," + oSession.Classid + "," + oSession.StudentId + "," + oTemp.TemplateId + ",'MODIFICATION',GETDATE()," + iSessionNmbr + ",'EV')";
                                                            oData.Execute(insqry);

                                                            string updqry = "UPDATE DSTempHdr SET ModificationInd=1,ModifiedBy=" + oSession.LoginId + ",ModifiedOn=GETDATE() WHERE DSTempHdrId=" + oTemp.TemplateId;
                                                            oData.Execute(updqry);
                                                        }
                                                    }
                                                }
                                            }
                                        }


                                        sEventType = "PROMPT MOVEDOWN";
                                        oDisc.updatePromptStatus(oSession.SchoolId, oSession.Classid, oSession.StudentId, oTemp.TemplateId, sNextLessonPrompt, sesResultchain[0].CompletionStatus, sEventType, iSessionNmbr, oSession.LoginId, Convert.ToInt32(sCurrentLessonPrompt), iCurrentSetId, iCurrentStep, sLessonPlanId);
                                        //if (sesResultchain[0].CompletionStatus == "COMPLETED")
                                        //{
                                        //    oDisc.insertEventStatus(oSession.SchoolId, oSession.Classid, oSession.StudentId, oTemp.TemplateId, sesResultchain[0].CompletionStatus, sEventType, iSessionNmbr);
                                        //}
                                    }
                                    else
                                    {
                                        //sesResultchain[0].CompletionStatus = "NOT COMPLETED";
                                        bSetCompleted = false;
                                        if (!bRuleStatusIOA)
                                        {
                                            // Functionto reset rule type values in StdtEvent Table
                                            oDisc.resetEvntStatus(oSession.Classid, oSession.StudentId, oTemp.TemplateId);
                                            sEventAlertStatus = "IOAEvntStatus=true,Prompt_MoveDown=true";
                                            // Functionto Update rule Events values in StdtEvent Table
                                            oDisc.UpdateAlertEvent(oTemp.TemplateId, sEventAlertStatus);
                                        }
                                        if (!bRuleStatusMultiTchr)
                                        {
                                            // Functionto reset rule type values in StdtEvent Table
                                            oDisc.resetEvntStatus(oSession.Classid, oSession.StudentId, oTemp.TemplateId);
                                            sEventAlertStatus = "MultiTchrEvntStatus=true,Prompt_MoveDown=true";
                                            // Functionto Update rule Events values in StdtEvent Table
                                            oDisc.UpdateAlertEvent(oTemp.TemplateId, sEventType);
                                        }
                                    }
                                }
                            }
                            DisplayIOA_MTstatus(bRuleStatusIOA, bRuleStatusMultiTchr, oDS.CrntPrompt, bPromptMoveBack, "Prompt");
                        }
                        #endregion
                        if (sesResultchain != null)
                        {
                            if (sesResultchain[0] != null)
                            {
                                if (bSetCompleted)
                                {

                                    //oDisc = new DiscreteSession();
                                    //oDS.CrntStep = sesResultchain[0].NextStep - 1;
                                    //if (bPrompt)
                                    //    oDisc.updateStepStatus(oSession.SchoolId, oSession.Classid, oSession.StudentId, Convert.ToInt32(sesResultchain[0].NextPrompt), oTemp.TemplateId, oDS.CrntStep.ToString(), sesResultchain[0].CompletionStatus, sEventType, iSessionNmbr);
                                    //else
                                    //    oDisc.updateStepStatus(oSession.SchoolId, oSession.Classid, oSession.StudentId, oTemp.TemplateId, oDS.CrntStep.ToString(), sesResultchain[0].CompletionStatus, sEventType, iSessionNmbr);
                                    //oDisc.insertEventStatus(oSession.SchoolId, oSession.Classid, oSession.StudentId, oTemp.TemplateId, sesResultchain[0].CompletionStatus, sEventType, iSessionNmbr);
                                    oDisc.insertEventStatus(oSession.SchoolId, oSession.Classid, oSession.StudentId, oTemp.TemplateId, iCurrentSetId, "COMPLETED", sEventType, iSessionNmbr, oSession.LoginId, sLessonPlanId);
                                    //oDisc.insertEventStatus(oSession.SchoolId, oSession.Classid, oSession.StudentId, oTemp.TemplateId, sesResultchain[0].CompletionStatus, sEventType, iSessionNmbr, oSession.LoginId);

                                }
                                else if (bSetMoveUp == true)
                                {
                                    bRuleStatusIOA = oDisc.checkConditionIOA(bSetMoveUpIOA, bIOA);
                                    bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bSetMoveUpMultiTecher, bMultyTchr);
                                    DisplayIOA_MTstatus(bRuleStatusIOA, bRuleStatusMultiTchr, 0, false, "Complete");
                                }
                            }
                        }
                    }



                }
                #endregion
                #region Discrete
                else if (sSkillType == "Discrete")
                {
                    bool disRuleNAChk = false;
                    discreteInptData = new DiscreetTrial.InputData();
                    #region setrules
                    Rules TempRules = new Rules();
                    TempRules = GetSetRules(oTemp.TemplateId, iColId);
                    if (TempRules != null)
                    {
                        set_moveupCount = TempRules.moveup;
                        set_movedownCount = TempRules.movedown;
                        if (TempRules.count > 0)
                        {
                            //Liju
                            disRuleNAChk = true;
                            bSetMoveUpIOA = bSetMoveUpIOA | TempRules.pctIndMoveUp.bIOARequird | TempRules.pctAccyMoveUp.bIOARequird | TempRules.pctTotalDurationMoveUp.bIOARequird | TempRules.pctAvgDurationMoveUp.bIOARequird | TempRules.pctFrequencyMoveUp.bIOARequird | TempRules.pctCustomMoveUp.bIOARequird | TempRules.pctIndAllMoveUp.bIOARequird;
                            bSetMoveUpMultiTecher = bSetMoveUpMultiTecher | TempRules.pctIndMoveUp.bMultiTeacherRequired | TempRules.pctAccyMoveUp.bMultiTeacherRequired | TempRules.pctTotalDurationMoveUp.bMultiTeacherRequired | TempRules.pctAvgDurationMoveUp.bMultiTeacherRequired | TempRules.pctFrequencyMoveUp.bMultiTeacherRequired | TempRules.pctCustomMoveUp.bMultiTeacherRequired | TempRules.pctIndAllMoveUp.bMultiTeacherRequired;
                            bSetMoveDownIOA = bSetMoveDownIOA | TempRules.pctIndMoveDown.bIOARequird | TempRules.pctAccyMoveDown.bIOARequird | TempRules.pctTotalDurationMoveDown.bIOARequird | TempRules.pctAvgDurationMoveDown.bIOARequird | TempRules.pctFrequencyMoveDown.bIOARequird | TempRules.pctCustomMoveDown.bIOARequird | TempRules.pctIndAllMoveDown.bIOARequird;
                            bSetMoveDownMultiTecher = bSetMoveDownMultiTecher | TempRules.pctIndMoveDown.bMultiTeacherRequired | TempRules.pctAccyMoveDown.bMultiTeacherRequired | TempRules.pctTotalDurationMoveDown.bMultiTeacherRequired | TempRules.pctAvgDurationMoveDown.bMultiTeacherRequired | TempRules.pctFrequencyMoveDown.bMultiTeacherRequired | TempRules.pctCustomMoveDown.bMultiTeacherRequired | TempRules.pctIndAllMoveDown.bMultiTeacherRequired;
                            bTotalDurationMoveUpbIOAReqd = bTotalDurationMoveUpbIOAReqd | TempRules.pctTotalDurationMoveUp.bIOARequird;
                            bTotalDurationMoveUpbMultiTchr = bTotalDurationMoveUpbMultiTchr | TempRules.pctTotalDurationMoveUp.bMultiTeacherRequired;
                            bAvgDurationMoveUpbIOAReqd = bAvgDurationMoveUpbIOAReqd | TempRules.pctAvgDurationMoveUp.bIOARequird;
                            bAvgDurationMoveUpbMultiTchr = bAvgDurationMoveUpbMultiTchr | TempRules.pctAvgDurationMoveUp.bMultiTeacherRequired;
                            bTotalDurationMoveDownbIOAReqd = bTotalDurationMoveDownbIOAReqd | TempRules.pctTotalDurationMoveDown.bIOARequird;
                            bTotalDurationMoveDownbMultiTchr = bTotalDurationMoveDownbMultiTchr | TempRules.pctTotalDurationMoveDown.bMultiTeacherRequired;
                            bAvgDurationMoveDownbIOAReqd = bAvgDurationMoveDownbIOAReqd | TempRules.pctAvgDurationMoveDown.bIOARequird;
                            bAvgDurationMoveDownbMultiTchr = bAvgDurationMoveDownbMultiTchr | TempRules.pctAvgDurationMoveDown.bMultiTeacherRequired;
                            bFrequencyMoveUpbIOAReqd = bFrequencyMoveUpbIOAReqd | TempRules.pctFrequencyMoveUp.bIOARequird;
                            bFrequencyMoveUpbMultiTchr = bFrequencyMoveUpbMultiTchr | TempRules.pctFrequencyMoveUp.bMultiTeacherRequired;
                            bFrequencyMoveDownbIOAReqd = bFrequencyMoveDownbIOAReqd | TempRules.pctFrequencyMoveDown.bIOARequird;
                            bFrequencyMoveDownbMultiTchr = bFrequencyMoveDownbMultiTchr | TempRules.pctFrequencyMoveDown.bMultiTeacherRequired;
                            bCustomMoveupIOA = bCustomMoveupIOA || TempRules.pctCustomMoveUp.bIOARequird;
                            bCustomMovedownIOA = bCustomMovedownIOA || TempRules.pctCustomMoveDown.bIOARequird;
                            bCustomMoveupMultiTchr = bCustomMoveupMultiTchr || TempRules.pctCustomMoveUp.bMultiTeacherRequired;
                            bCustomMovedownMultiTchr = bCustomMovedownMultiTchr || TempRules.pctCustomMoveDown.bMultiTeacherRequired;

                            bIndallMoveUpbIOAReqd = bIndallMoveUpbIOAReqd | TempRules.pctIndAllMoveUp.bIOARequird;
                            bIndallMoveUpbMultiTchr = bIndallMoveUpbMultiTchr | TempRules.pctIndAllMoveUp.bMultiTeacherRequired;
                            bIndallMoveDownbIOAReqd = bIndallMoveDownbIOAReqd | TempRules.pctIndAllMoveDown.bIOARequird;
                            bIndallMoveDownbMultiTchr = bIndallMoveDownbMultiTchr | TempRules.pctIndAllMoveDown.bMultiTeacherRequired;


                            discreteInptData.PercentAccuracy.BarCondition = TempRules.pctAccyMoveUp.iScoreRequired;
                            discreteInptData.PercentAccuracy.ConsecutiveSuccess = TempRules.pctAccyMoveUp.bConsequetiveIndex;
                            discreteInptData.PercentAccuracy.TotalTrial = TempRules.pctAccyMoveUp.iTotalInstance;
                            discreteInptData.PercentAccuracy.SuccessNeeded = TempRules.pctAccyMoveUp.iTotalCorrectInstance;
                            discreteInptData.PercentAccuracy.bIOAReqd = TempRules.pctAccyMoveUp.bIOARequird;
                            discreteInptData.PercentAccuracy.bMultiTchr = TempRules.pctAccyMoveUp.bMultiTeacherRequired;
                            discreteInptData.PercentAccuracy.ConsecutiveAverage = TempRules.pctAccyMoveUp.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                            discreteInptData.PercentAccuracy.ConsecutiveAverageValue = TempRules.pctAccyMoveUp.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                            discreteInptData.IncludeMistrials = TempRules.bIncludeMisTrail;

                            discreteInptData.PercentIndependence.BarCondition = TempRules.pctIndMoveUp.iScoreRequired;
                            discreteInptData.PercentIndependence.ConsecutiveSuccess = TempRules.pctIndMoveUp.bConsequetiveIndex;
                            discreteInptData.PercentIndependence.TotalTrial = TempRules.pctIndMoveUp.iTotalInstance;
                            discreteInptData.PercentIndependence.SuccessNeeded = TempRules.pctIndMoveUp.iTotalCorrectInstance;
                            discreteInptData.PercentIndependence.bIOAReqd = TempRules.pctIndMoveUp.bIOARequird;
                            discreteInptData.PercentIndependence.bMultiTchr = TempRules.pctIndMoveUp.bMultiTeacherRequired;
                            discreteInptData.PercentIndependence.ConsecutiveAverage = TempRules.pctIndMoveUp.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                            discreteInptData.PercentIndependence.ConsecutiveAverageValue = TempRules.pctIndMoveUp.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                            discreteInptData.CustomPercent.BarCondition = TempRules.pctCustomMoveUp.iScoreRequired;
                            discreteInptData.CustomPercent.ConsecutiveSuccess = TempRules.pctCustomMoveUp.bConsequetiveIndex;
                            discreteInptData.CustomPercent.TotalTrial = TempRules.pctCustomMoveUp.iTotalInstance;
                            discreteInptData.CustomPercent.SuccessNeeded = TempRules.pctCustomMoveUp.iTotalCorrectInstance;
                            discreteInptData.CustomPercent.bIOAReqd = TempRules.pctCustomMoveUp.bIOARequird;
                            discreteInptData.CustomPercent.bMultiTchr = TempRules.pctCustomMoveUp.bMultiTeacherRequired;
                            discreteInptData.CustomPercent.ConsecutiveAverage = TempRules.pctCustomMoveUp.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                            discreteInptData.CustomPercent.ConsecutiveAverageValue = TempRules.pctCustomMoveUp.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                            discreteInptData.MoveBackCustom.BarCondition = TempRules.pctCustomMoveDown.iScoreRequired;
                            discreteInptData.MoveBackCustom.ConsecutiveFailures = TempRules.pctCustomMoveDown.bConsequetiveIndex;
                            discreteInptData.MoveBackCustom.TotalTrial = TempRules.pctCustomMoveDown.iTotalInstance;
                            discreteInptData.MoveBackCustom.FailureNeeded = TempRules.pctCustomMoveDown.iTotalCorrectInstance;
                            discreteInptData.MoveBackCustom.bIOAReqd = TempRules.pctCustomMoveDown.bIOARequird;
                            discreteInptData.MoveBackCustom.bMultiTchr = TempRules.pctCustomMoveDown.bMultiTeacherRequired;
                            discreteInptData.MoveBackCustom.ConsecutiveAverageFailure = TempRules.pctCustomMoveDown.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                            discreteInptData.MoveBackCustom.ConsecutiveAverageFailValue = TempRules.pctCustomMoveDown.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                            discreteInptData.MoveBackPercentAccuracy.BarCondition = TempRules.pctAccyMoveDown.iScoreRequired;
                            discreteInptData.MoveBackPercentAccuracy.ConsecutiveFailures = TempRules.pctAccyMoveDown.bConsequetiveIndex;
                            discreteInptData.MoveBackPercentAccuracy.TotalTrial = TempRules.pctAccyMoveDown.iTotalInstance;
                            discreteInptData.MoveBackPercentAccuracy.FailureNeeded = TempRules.pctAccyMoveDown.iTotalCorrectInstance;
                            discreteInptData.MoveBackPercentAccuracy.bIOAReqd = TempRules.pctAccyMoveDown.bIOARequird;
                            discreteInptData.MoveBackPercentAccuracy.bMultiTchr = TempRules.pctAccyMoveDown.bMultiTeacherRequired;
                            discreteInptData.MoveBackPercentAccuracy.ConsecutiveAverageFailure = TempRules.pctAccyMoveDown.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                            discreteInptData.MoveBackPercentAccuracy.ConsecutiveAverageFailValue = TempRules.pctAccyMoveDown.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                            discreteInptData.MoveBackPercentIndependence.BarCondition = TempRules.pctIndMoveDown.iScoreRequired;
                            discreteInptData.MoveBackPercentIndependence.ConsecutiveFailures = TempRules.pctIndMoveDown.bConsequetiveIndex;
                            discreteInptData.MoveBackPercentIndependence.TotalTrial = TempRules.pctIndMoveDown.iTotalInstance;
                            discreteInptData.MoveBackPercentIndependence.FailureNeeded = TempRules.pctIndMoveDown.iTotalCorrectInstance;
                            discreteInptData.MoveBackPercentIndependence.bIOAReqd = TempRules.pctIndMoveDown.bIOARequird;
                            discreteInptData.MoveBackPercentIndependence.bMultiTchr = TempRules.pctIndMoveDown.bMultiTeacherRequired;
                            discreteInptData.MoveBackPercentIndependence.ConsecutiveAverageFailure = TempRules.pctIndMoveDown.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                            discreteInptData.MoveBackPercentIndependence.ConsecutiveAverageFailValue = TempRules.pctIndMoveDown.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                            discreteInptData.PercentAllIndependence.BarCondition = TempRules.pctIndAllMoveUp.iScoreRequired;
                            discreteInptData.PercentAllIndependence.ConsecutiveSuccess = TempRules.pctIndAllMoveUp.bConsequetiveIndex;
                            discreteInptData.PercentAllIndependence.TotalTrial = TempRules.pctIndAllMoveUp.iTotalInstance;
                            discreteInptData.PercentAllIndependence.SuccessNeeded = TempRules.pctIndAllMoveUp.iTotalCorrectInstance;
                            discreteInptData.PercentAllIndependence.bIOAReqd = TempRules.pctIndAllMoveUp.bIOARequird;
                            discreteInptData.PercentAllIndependence.bMultiTchr = TempRules.pctIndAllMoveUp.bMultiTeacherRequired;
                            discreteInptData.PercentAllIndependence.ConsecutiveAverage = TempRules.pctIndAllMoveUp.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                            discreteInptData.PercentAllIndependence.ConsecutiveAverageValue = TempRules.pctIndAllMoveUp.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                            discreteInptData.MoveBackPercentAllIndependence.BarCondition = TempRules.pctIndAllMoveDown.iScoreRequired;
                            discreteInptData.MoveBackPercentAllIndependence.ConsecutiveFailures = TempRules.pctIndAllMoveDown.bConsequetiveIndex;
                            discreteInptData.MoveBackPercentAllIndependence.TotalTrial = TempRules.pctIndAllMoveDown.iTotalInstance;
                            discreteInptData.MoveBackPercentAllIndependence.FailureNeeded = TempRules.pctIndAllMoveDown.iTotalCorrectInstance;
                            discreteInptData.MoveBackPercentAllIndependence.bIOAReqd = TempRules.pctIndAllMoveDown.bIOARequird;
                            discreteInptData.MoveBackPercentAllIndependence.bMultiTchr = TempRules.pctIndAllMoveDown.bMultiTeacherRequired;
                            discreteInptData.MoveBackPercentAllIndependence.ConsecutiveAverageFailure = TempRules.pctIndAllMoveDown.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                            discreteInptData.MoveBackPercentAllIndependence.ConsecutiveAverageFailValue = TempRules.pctIndAllMoveDown.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                            discreteInptData.AvgDurationMoveUp.BarCondition = TempRules.pctAvgDurationMoveUp.iScoreRequired;
                            discreteInptData.AvgDurationMoveUp.ConsecutiveSuccess = TempRules.pctAvgDurationMoveUp.bConsequetiveIndex;
                            discreteInptData.AvgDurationMoveUp.TotalTrial = TempRules.pctAvgDurationMoveUp.iTotalInstance;
                            discreteInptData.AvgDurationMoveUp.SuccessNeeded = TempRules.pctAvgDurationMoveUp.iTotalCorrectInstance;
                            discreteInptData.AvgDurationMoveUp.bIOAReqd = TempRules.pctAvgDurationMoveUp.bIOARequird;
                            discreteInptData.AvgDurationMoveUp.bMultiTchr = TempRules.pctAvgDurationMoveUp.bMultiTeacherRequired;
                            discreteInptData.AvgDurationMoveUp.ConsecutiveAverage = TempRules.pctAvgDurationMoveUp.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                            discreteInptData.AvgDurationMoveUp.ConsecutiveAverageValue = TempRules.pctAvgDurationMoveUp.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                            discreteInptData.TotalDurationMoveUp.BarCondition = TempRules.pctTotalDurationMoveUp.iScoreRequired;
                            discreteInptData.TotalDurationMoveUp.ConsecutiveSuccess = TempRules.pctTotalDurationMoveUp.bConsequetiveIndex;
                            discreteInptData.TotalDurationMoveUp.TotalTrial = TempRules.pctTotalDurationMoveUp.iTotalInstance;
                            discreteInptData.TotalDurationMoveUp.SuccessNeeded = TempRules.pctTotalDurationMoveUp.iTotalCorrectInstance;
                            discreteInptData.TotalDurationMoveUp.bIOAReqd = TempRules.pctTotalDurationMoveUp.bIOARequird;
                            discreteInptData.TotalDurationMoveUp.bMultiTchr = TempRules.pctTotalDurationMoveUp.bMultiTeacherRequired;
                            discreteInptData.TotalDurationMoveUp.ConsecutiveAverage = TempRules.pctTotalDurationMoveUp.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                            discreteInptData.TotalDurationMoveUp.ConsecutiveAverageValue = TempRules.pctTotalDurationMoveUp.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                            discreteInptData.FrequencyMoveUp.BarCondition = TempRules.pctFrequencyMoveUp.iScoreRequired;
                            discreteInptData.FrequencyMoveUp.ConsecutiveSuccess = TempRules.pctFrequencyMoveUp.bConsequetiveIndex;
                            discreteInptData.FrequencyMoveUp.TotalTrial = TempRules.pctFrequencyMoveUp.iTotalInstance;
                            discreteInptData.FrequencyMoveUp.SuccessNeeded = TempRules.pctFrequencyMoveUp.iTotalCorrectInstance;
                            discreteInptData.FrequencyMoveUp.bIOAReqd = TempRules.pctFrequencyMoveUp.bIOARequird;
                            discreteInptData.FrequencyMoveUp.bMultiTchr = TempRules.pctFrequencyMoveUp.bMultiTeacherRequired;
                            discreteInptData.FrequencyMoveUp.ConsecutiveAverage = TempRules.pctFrequencyMoveUp.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                            discreteInptData.FrequencyMoveUp.ConsecutiveAverageValue = TempRules.pctFrequencyMoveUp.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                            discreteInptData.AvgDurationMoveDown.BarCondition = TempRules.pctAvgDurationMoveDown.iScoreRequired;
                            discreteInptData.AvgDurationMoveDown.ConsecutiveFailures = TempRules.pctAvgDurationMoveDown.bConsequetiveIndex;
                            discreteInptData.AvgDurationMoveDown.TotalTrial = TempRules.pctAvgDurationMoveDown.iTotalInstance;
                            discreteInptData.AvgDurationMoveDown.FailureNeeded = TempRules.pctAvgDurationMoveDown.iTotalCorrectInstance;
                            discreteInptData.AvgDurationMoveDown.bIOAReqd = TempRules.pctAvgDurationMoveDown.bIOARequird;
                            discreteInptData.AvgDurationMoveDown.bMultiTchr = TempRules.pctAvgDurationMoveDown.bMultiTeacherRequired;
                            discreteInptData.AvgDurationMoveDown.ConsecutiveAverageFailure = TempRules.pctAvgDurationMoveDown.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                            discreteInptData.AvgDurationMoveDown.ConsecutiveAverageFailValue = TempRules.pctAvgDurationMoveDown.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                            discreteInptData.TotalDurationMoveDown.BarCondition = TempRules.pctTotalDurationMoveDown.iScoreRequired;
                            discreteInptData.TotalDurationMoveDown.ConsecutiveFailures = TempRules.pctTotalDurationMoveDown.bConsequetiveIndex;
                            discreteInptData.TotalDurationMoveDown.TotalTrial = TempRules.pctTotalDurationMoveDown.iTotalInstance;
                            discreteInptData.TotalDurationMoveDown.FailureNeeded = TempRules.pctTotalDurationMoveDown.iTotalCorrectInstance;
                            discreteInptData.TotalDurationMoveDown.bIOAReqd = TempRules.pctTotalDurationMoveDown.bIOARequird;
                            discreteInptData.TotalDurationMoveDown.bMultiTchr = TempRules.pctTotalDurationMoveDown.bMultiTeacherRequired;
                            discreteInptData.TotalDurationMoveDown.ConsecutiveAverageFailure = TempRules.pctTotalDurationMoveDown.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                            discreteInptData.TotalDurationMoveDown.ConsecutiveAverageFailValue = TempRules.pctTotalDurationMoveDown.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                            discreteInptData.FrequencyMoveDown.BarCondition = TempRules.pctFrequencyMoveDown.iScoreRequired;
                            discreteInptData.FrequencyMoveDown.ConsecutiveFailures = TempRules.pctFrequencyMoveDown.bConsequetiveIndex;
                            discreteInptData.FrequencyMoveDown.TotalTrial = TempRules.pctFrequencyMoveDown.iTotalInstance;
                            discreteInptData.FrequencyMoveDown.FailureNeeded = TempRules.pctFrequencyMoveDown.iTotalCorrectInstance;
                            discreteInptData.FrequencyMoveDown.bIOAReqd = TempRules.pctFrequencyMoveDown.bIOARequird;
                            discreteInptData.FrequencyMoveDown.bMultiTchr = TempRules.pctFrequencyMoveDown.bMultiTeacherRequired;
                            discreteInptData.FrequencyMoveDown.ConsecutiveAverageFailure = TempRules.pctFrequencyMoveDown.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                            discreteInptData.FrequencyMoveDown.ConsecutiveAverageFailValue = TempRules.pctFrequencyMoveDown.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                            discreteInptData.SetTotalCorrectMoveUp.BarCondition = TempRules.pctTotalCorrectMoveUp.iScoreRequired;
                            discreteInptData.SetTotalCorrectMoveUp.ConsecutiveSuccess = TempRules.pctTotalCorrectMoveUp.bConsequetiveIndex;
                            discreteInptData.SetTotalCorrectMoveUp.TotalTrial = TempRules.pctTotalCorrectMoveUp.iTotalInstance;
                            discreteInptData.SetTotalCorrectMoveUp.SuccessNeeded = TempRules.pctTotalCorrectMoveUp.iTotalCorrectInstance;
                            discreteInptData.SetTotalCorrectMoveUp.bIOAReqd = TempRules.pctTotalCorrectMoveUp.bIOARequird;
                            discreteInptData.SetTotalCorrectMoveUp.bMultiTchr = TempRules.pctTotalCorrectMoveUp.bMultiTeacherRequired;
                            discreteInptData.SetTotalCorrectMoveUp.ConsecutiveAverage = TempRules.pctTotalCorrectMoveUp.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                            discreteInptData.SetTotalCorrectMoveUp.ConsecutiveAverageValue = TempRules.pctTotalCorrectMoveUp.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                            discreteInptData.SetTotalCorrectMoveBack.BarCondition = TempRules.pctTotalCorrectMoveDown.iScoreRequired;
                            discreteInptData.SetTotalCorrectMoveBack.ConsecutiveFailures = TempRules.pctTotalCorrectMoveDown.bConsequetiveIndex;
                            discreteInptData.SetTotalCorrectMoveBack.TotalTrial = TempRules.pctTotalCorrectMoveDown.iTotalInstance;
                            discreteInptData.SetTotalCorrectMoveBack.FailureNeeded = TempRules.pctTotalCorrectMoveDown.iTotalCorrectInstance;
                            discreteInptData.SetTotalCorrectMoveBack.bIOAReqd = TempRules.pctTotalCorrectMoveDown.bIOARequird;
                            discreteInptData.SetTotalCorrectMoveBack.bMultiTchr = TempRules.pctTotalCorrectMoveDown.bMultiTeacherRequired;
                            discreteInptData.SetTotalCorrectMoveBack.ConsecutiveAverageFailure = TempRules.pctTotalCorrectMoveDown.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                            discreteInptData.SetTotalCorrectMoveBack.ConsecutiveAverageFailValue = TempRules.pctTotalCorrectMoveDown.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                            discreteInptData.SetTotalIncorrectMoveBack.BarCondition = TempRules.pctTotalIncorrectMoveDown.iScoreRequired;
                            discreteInptData.SetTotalIncorrectMoveBack.ConsecutiveFailures = TempRules.pctTotalIncorrectMoveDown.bConsequetiveIndex;
                            discreteInptData.SetTotalIncorrectMoveBack.TotalTrial = TempRules.pctTotalIncorrectMoveDown.iTotalInstance;
                            discreteInptData.SetTotalIncorrectMoveBack.FailureNeeded = TempRules.pctTotalIncorrectMoveDown.iTotalCorrectInstance;
                            discreteInptData.SetTotalIncorrectMoveBack.bIOAReqd = TempRules.pctTotalIncorrectMoveDown.bIOARequird;
                            discreteInptData.SetTotalIncorrectMoveBack.bMultiTchr = TempRules.pctTotalIncorrectMoveDown.bMultiTeacherRequired;
                            discreteInptData.SetTotalIncorrectMoveBack.ConsecutiveAverageFailure = TempRules.pctTotalIncorrectMoveDown.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                            discreteInptData.SetTotalIncorrectMoveBack.ConsecutiveAverageFailValue = TempRules.pctTotalIncorrectMoveDown.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                            /* discreteInptData.IOARequired = TempRules.bIOARequird;
                             discreteInptData.MultiTeacherRequired = TempRules.bMultiTeacherRequired;*/
                        }
                    }
                    #endregion
                    #region promptrules
                    TempRules = new Rules();
                    TempRules = GetPromptRules(oTemp.TemplateId, iColId);
                    if (TempRules.count > 0)
                    {
                        bPrompt = true;
                        discreteInptData.PromptHirecharchy = true;
                        disRuleNAChk = true;
                        //Liju
                        bPromptMoveUpIOA = bPromptMoveUpIOA | TempRules.pctIndMoveUp.bIOARequird | TempRules.pctAccyMoveUp.bIOARequird | TempRules.pctTotalDurationMoveUp.bIOARequird | TempRules.pctAvgDurationMoveUp.bIOARequird | TempRules.pctFrequencyMoveUp.bIOARequird | TempRules.pctCustomMoveUp.bIOARequird;
                        bPromptMoveUpMultiTecher = bPromptMoveUpMultiTecher | TempRules.pctIndMoveUp.bMultiTeacherRequired | TempRules.pctAccyMoveUp.bMultiTeacherRequired | TempRules.pctTotalDurationMoveUp.bMultiTeacherRequired | TempRules.pctAvgDurationMoveUp.bMultiTeacherRequired | TempRules.pctFrequencyMoveUp.bMultiTeacherRequired | TempRules.pctCustomMoveUp.bMultiTeacherRequired;
                        bPromptMoveDownIOA = bPromptMoveDownIOA | TempRules.pctIndMoveDown.bIOARequird | TempRules.pctAccyMoveDown.bIOARequird | TempRules.pctTotalDurationMoveDown.bIOARequird | TempRules.pctAvgDurationMoveDown.bIOARequird | TempRules.pctFrequencyMoveDown.bIOARequird | TempRules.pctCustomMoveDown.bIOARequird;
                        bPromptMoveDownMultiTecher = bPromptMoveDownMultiTecher | TempRules.pctIndMoveDown.bMultiTeacherRequired | TempRules.pctAccyMoveDown.bMultiTeacherRequired | TempRules.pctTotalDurationMoveDown.bMultiTeacherRequired | TempRules.pctAvgDurationMoveDown.bMultiTeacherRequired | TempRules.pctFrequencyMoveDown.bMultiTeacherRequired | TempRules.pctCustomMoveDown.bMultiTeacherRequired;


                        discreteInptData.PromptPercentAccuracy.BarCondition = TempRules.pctAccyMoveUp.iScoreRequired;
                        discreteInptData.PromptPercentAccuracy.ConsecutiveSuccess = TempRules.pctAccyMoveUp.bConsequetiveIndex;
                        discreteInptData.PromptPercentAccuracy.TotalTrial = TempRules.pctAccyMoveUp.iTotalInstance;
                        discreteInptData.PromptPercentAccuracy.SuccessNeeded = TempRules.pctAccyMoveUp.iTotalCorrectInstance;
                        discreteInptData.PromptPercentAccuracy.bIOAReqd = TempRules.pctAccyMoveUp.bIOARequird;
                        discreteInptData.PromptPercentAccuracy.bMultiTchr = TempRules.pctAccyMoveUp.bMultiTeacherRequired;
                        discreteInptData.PromptPercentAccuracy.ConsecutiveAverage = TempRules.pctAccyMoveUp.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                        discreteInptData.PromptPercentAccuracy.ConsecutiveAverageValue = TempRules.pctAccyMoveUp.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                        discreteInptData.PromptPercentIndependence.BarCondition = TempRules.pctIndMoveUp.iScoreRequired;
                        discreteInptData.PromptPercentIndependence.ConsecutiveSuccess = TempRules.pctIndMoveUp.bConsequetiveIndex;
                        discreteInptData.PromptPercentIndependence.TotalTrial = TempRules.pctIndMoveUp.iTotalInstance;
                        discreteInptData.PromptPercentIndependence.SuccessNeeded = TempRules.pctIndMoveUp.iTotalCorrectInstance;
                        discreteInptData.PromptPercentIndependence.bIOAReqd = TempRules.pctIndMoveUp.bIOARequird;
                        discreteInptData.PromptPercentIndependence.bMultiTchr = TempRules.pctIndMoveUp.bMultiTeacherRequired;
                        discreteInptData.PromptPercentIndependence.ConsecutiveAverage = TempRules.pctIndMoveUp.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                        discreteInptData.PromptPercentIndependence.ConsecutiveAverageValue = TempRules.pctIndMoveUp.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                        discreteInptData.MoveBackPromptPercentAccuracy.BarCondition = TempRules.pctAccyMoveDown.iScoreRequired;
                        discreteInptData.MoveBackPromptPercentAccuracy.ConsecutiveFailures = TempRules.pctAccyMoveDown.bConsequetiveIndex;
                        discreteInptData.MoveBackPromptPercentAccuracy.TotalTrial = TempRules.pctAccyMoveDown.iTotalInstance;
                        discreteInptData.MoveBackPromptPercentAccuracy.FailureNeeded = TempRules.pctAccyMoveDown.iTotalCorrectInstance;
                        discreteInptData.MoveBackPromptPercentAccuracy.bIOAReqd = TempRules.pctAccyMoveDown.bIOARequird;
                        discreteInptData.MoveBackPromptPercentAccuracy.bMultiTchr = TempRules.pctAccyMoveDown.bMultiTeacherRequired;
                        discreteInptData.MoveBackPromptPercentAccuracy.ConsecutiveAverageFailure = TempRules.pctAccyMoveDown.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                        discreteInptData.MoveBackPromptPercentAccuracy.ConsecutiveAverageFailValue = TempRules.pctAccyMoveDown.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                        discreteInptData.MoveBackPromptPercentIndependance.BarCondition = TempRules.pctIndMoveDown.iScoreRequired;
                        discreteInptData.MoveBackPromptPercentIndependance.ConsecutiveFailures = TempRules.pctIndMoveDown.bConsequetiveIndex;
                        discreteInptData.MoveBackPromptPercentIndependance.TotalTrial = TempRules.pctIndMoveDown.iTotalInstance;
                        discreteInptData.MoveBackPromptPercentIndependance.FailureNeeded = TempRules.pctIndMoveDown.iTotalCorrectInstance;
                        discreteInptData.MoveBackPromptPercentIndependance.bIOAReqd = TempRules.pctIndMoveDown.bIOARequird;
                        discreteInptData.MoveBackPromptPercentIndependance.bMultiTchr = TempRules.pctIndMoveDown.bMultiTeacherRequired;
                        discreteInptData.MoveBackPromptPercentIndependance.ConsecutiveAverageFailure = TempRules.pctIndMoveDown.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                        discreteInptData.MoveBackPromptPercentIndependance.ConsecutiveAverageFailValue = TempRules.pctIndMoveDown.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                        discreteInptData.PromptPercentAllIndependence.BarCondition = TempRules.pctIndAllMoveUp.iScoreRequired;
                        discreteInptData.PromptPercentAllIndependence.ConsecutiveSuccess = TempRules.pctIndAllMoveUp.bConsequetiveIndex;
                        discreteInptData.PromptPercentAllIndependence.TotalTrial = TempRules.pctIndAllMoveUp.iTotalInstance;
                        discreteInptData.PromptPercentAllIndependence.SuccessNeeded = TempRules.pctIndAllMoveUp.iTotalCorrectInstance;
                        discreteInptData.PromptPercentAllIndependence.bIOAReqd = TempRules.pctIndAllMoveUp.bIOARequird;
                        discreteInptData.PromptPercentAllIndependence.bMultiTchr = TempRules.pctIndAllMoveUp.bMultiTeacherRequired;
                        discreteInptData.PromptPercentAllIndependence.ConsecutiveAverage = TempRules.pctIndAllMoveUp.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                        discreteInptData.PromptPercentAllIndependence.ConsecutiveAverageValue = TempRules.pctIndAllMoveUp.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                        discreteInptData.MoveBackPromptPercentAllIndependance.BarCondition = TempRules.pctIndAllMoveDown.iScoreRequired;
                        discreteInptData.MoveBackPromptPercentAllIndependance.ConsecutiveFailures = TempRules.pctIndAllMoveDown.bConsequetiveIndex;
                        discreteInptData.MoveBackPromptPercentAllIndependance.TotalTrial = TempRules.pctIndAllMoveDown.iTotalInstance;
                        discreteInptData.MoveBackPromptPercentAllIndependance.FailureNeeded = TempRules.pctIndAllMoveDown.iTotalCorrectInstance;
                        discreteInptData.MoveBackPromptPercentAllIndependance.bIOAReqd = TempRules.pctIndAllMoveDown.bIOARequird;
                        discreteInptData.MoveBackPromptPercentAllIndependance.bMultiTchr = TempRules.pctIndAllMoveDown.bMultiTeacherRequired;
                        discreteInptData.MoveBackPromptPercentAllIndependance.ConsecutiveAverageFailure = TempRules.pctIndAllMoveDown.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                        discreteInptData.MoveBackPromptPercentAllIndependance.ConsecutiveAverageFailValue = TempRules.pctIndAllMoveDown.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                        discreteInptData.promptAvgDurationMoveUp.BarCondition = TempRules.pctAvgDurationMoveUp.iScoreRequired;
                        discreteInptData.promptAvgDurationMoveUp.ConsecutiveSuccess = TempRules.pctAvgDurationMoveUp.bConsequetiveIndex;
                        discreteInptData.promptAvgDurationMoveUp.TotalTrial = TempRules.pctAvgDurationMoveUp.iTotalInstance;
                        discreteInptData.promptAvgDurationMoveUp.SuccessNeeded = TempRules.pctAvgDurationMoveUp.iTotalCorrectInstance;
                        discreteInptData.promptAvgDurationMoveUp.bIOAReqd = TempRules.pctAvgDurationMoveUp.bIOARequird;
                        discreteInptData.promptAvgDurationMoveUp.bMultiTchr = TempRules.pctAvgDurationMoveUp.bMultiTeacherRequired;
                        discreteInptData.promptAvgDurationMoveUp.ConsecutiveAverage = TempRules.pctAvgDurationMoveUp.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                        discreteInptData.promptAvgDurationMoveUp.ConsecutiveAverageValue = TempRules.pctAvgDurationMoveUp.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                        discreteInptData.promptTotalDurationMoveUp.BarCondition = TempRules.pctTotalDurationMoveUp.iScoreRequired;
                        discreteInptData.promptTotalDurationMoveUp.ConsecutiveSuccess = TempRules.pctTotalDurationMoveUp.bConsequetiveIndex;
                        discreteInptData.promptTotalDurationMoveUp.TotalTrial = TempRules.pctTotalDurationMoveUp.iTotalInstance;
                        discreteInptData.promptTotalDurationMoveUp.SuccessNeeded = TempRules.pctTotalDurationMoveUp.iTotalCorrectInstance;
                        discreteInptData.promptTotalDurationMoveUp.bIOAReqd = TempRules.pctTotalDurationMoveUp.bIOARequird;
                        discreteInptData.promptTotalDurationMoveUp.bMultiTchr = TempRules.pctTotalDurationMoveUp.bMultiTeacherRequired;
                        discreteInptData.promptTotalDurationMoveUp.ConsecutiveAverage = TempRules.pctTotalDurationMoveUp.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                        discreteInptData.promptTotalDurationMoveUp.ConsecutiveAverageValue = TempRules.pctTotalDurationMoveUp.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//


                        discreteInptData.promptAvgDurationMoveDown.BarCondition = TempRules.pctAvgDurationMoveDown.iScoreRequired;
                        discreteInptData.promptAvgDurationMoveDown.ConsecutiveFailures = TempRules.pctAvgDurationMoveDown.bConsequetiveIndex;
                        discreteInptData.promptAvgDurationMoveDown.TotalTrial = TempRules.pctAvgDurationMoveDown.iTotalInstance;
                        discreteInptData.promptAvgDurationMoveDown.FailureNeeded = TempRules.pctAvgDurationMoveDown.iTotalCorrectInstance;
                        discreteInptData.promptAvgDurationMoveDown.bIOAReqd = TempRules.pctAvgDurationMoveDown.bIOARequird;
                        discreteInptData.promptAvgDurationMoveDown.bMultiTchr = TempRules.pctAvgDurationMoveDown.bMultiTeacherRequired;
                        discreteInptData.promptAvgDurationMoveDown.ConsecutiveAverageFailure = TempRules.pctAvgDurationMoveDown.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                        discreteInptData.promptAvgDurationMoveDown.ConsecutiveAverageFailValue = TempRules.pctAvgDurationMoveDown.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                        discreteInptData.promptTotalDurationMoveDown.BarCondition = TempRules.pctTotalDurationMoveDown.iScoreRequired;
                        discreteInptData.promptTotalDurationMoveDown.ConsecutiveFailures = TempRules.pctTotalDurationMoveDown.bConsequetiveIndex;
                        discreteInptData.promptTotalDurationMoveDown.TotalTrial = TempRules.pctTotalDurationMoveDown.iTotalInstance;
                        discreteInptData.promptTotalDurationMoveDown.FailureNeeded = TempRules.pctTotalDurationMoveDown.iTotalCorrectInstance;
                        discreteInptData.promptTotalDurationMoveDown.bIOAReqd = TempRules.pctTotalDurationMoveDown.bIOARequird;
                        discreteInptData.promptTotalDurationMoveDown.bMultiTchr = TempRules.pctTotalDurationMoveDown.bMultiTeacherRequired;
                        discreteInptData.promptTotalDurationMoveDown.ConsecutiveAverageFailure = TempRules.pctTotalDurationMoveDown.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                        discreteInptData.promptTotalDurationMoveDown.ConsecutiveAverageFailValue = TempRules.pctTotalDurationMoveDown.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//




                        discreteInptData.PromptFrequencyMoveUp.BarCondition = TempRules.pctFrequencyMoveUp.iScoreRequired;
                        discreteInptData.PromptFrequencyMoveUp.ConsecutiveSuccess = TempRules.pctFrequencyMoveUp.bConsequetiveIndex;
                        discreteInptData.PromptFrequencyMoveUp.TotalTrial = TempRules.pctFrequencyMoveUp.iTotalInstance;
                        discreteInptData.PromptFrequencyMoveUp.SuccessNeeded = TempRules.pctFrequencyMoveUp.iTotalCorrectInstance;
                        discreteInptData.PromptFrequencyMoveUp.bIOAReqd = TempRules.pctFrequencyMoveUp.bIOARequird;
                        discreteInptData.PromptFrequencyMoveUp.bMultiTchr = TempRules.pctFrequencyMoveUp.bMultiTeacherRequired;
                        discreteInptData.PromptFrequencyMoveUp.ConsecutiveAverage = TempRules.pctFrequencyMoveUp.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                        discreteInptData.PromptFrequencyMoveUp.ConsecutiveAverageValue = TempRules.pctFrequencyMoveUp.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                        discreteInptData.PromptFrequencyMoveDown.BarCondition = TempRules.pctFrequencyMoveDown.iScoreRequired;
                        discreteInptData.PromptFrequencyMoveDown.ConsecutiveFailures = TempRules.pctFrequencyMoveDown.bConsequetiveIndex;
                        discreteInptData.PromptFrequencyMoveDown.TotalTrial = TempRules.pctFrequencyMoveDown.iTotalInstance;
                        discreteInptData.PromptFrequencyMoveDown.FailureNeeded = TempRules.pctFrequencyMoveDown.iTotalCorrectInstance;
                        discreteInptData.PromptFrequencyMoveDown.bIOAReqd = TempRules.pctFrequencyMoveDown.bIOARequird;
                        discreteInptData.PromptFrequencyMoveDown.bMultiTchr = TempRules.pctFrequencyMoveDown.bMultiTeacherRequired;
                        discreteInptData.PromptFrequencyMoveDown.ConsecutiveAverageFailure = TempRules.pctFrequencyMoveDown.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                        discreteInptData.PromptFrequencyMoveDown.ConsecutiveAverageFailValue = TempRules.pctFrequencyMoveDown.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//


                        discreteInptData.PromptTotalCorrectMoveUp.BarCondition = TempRules.pctTotalCorrectMoveUp.iScoreRequired;
                        discreteInptData.PromptTotalCorrectMoveUp.ConsecutiveSuccess = TempRules.pctTotalCorrectMoveUp.bConsequetiveIndex;
                        discreteInptData.PromptTotalCorrectMoveUp.TotalTrial = TempRules.pctTotalCorrectMoveUp.iTotalInstance;
                        discreteInptData.PromptTotalCorrectMoveUp.SuccessNeeded = TempRules.pctTotalCorrectMoveUp.iTotalCorrectInstance;
                        discreteInptData.PromptTotalCorrectMoveUp.bIOAReqd = TempRules.pctTotalCorrectMoveUp.bIOARequird;
                        discreteInptData.PromptTotalCorrectMoveUp.bMultiTchr = TempRules.pctTotalCorrectMoveUp.bMultiTeacherRequired;
                        discreteInptData.PromptTotalCorrectMoveUp.ConsecutiveAverage = TempRules.pctTotalCorrectMoveUp.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                        discreteInptData.PromptTotalCorrectMoveUp.ConsecutiveAverageValue = TempRules.pctTotalCorrectMoveUp.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                        discreteInptData.PromptTotalCorrectMoveBack.BarCondition = TempRules.pctTotalCorrectMoveDown.iScoreRequired;
                        discreteInptData.PromptTotalCorrectMoveBack.ConsecutiveFailures = TempRules.pctTotalCorrectMoveDown.bConsequetiveIndex;
                        discreteInptData.PromptTotalCorrectMoveBack.TotalTrial = TempRules.pctTotalCorrectMoveDown.iTotalInstance;
                        discreteInptData.PromptTotalCorrectMoveBack.FailureNeeded = TempRules.pctTotalCorrectMoveDown.iTotalCorrectInstance;
                        discreteInptData.PromptTotalCorrectMoveBack.bIOAReqd = TempRules.pctTotalCorrectMoveDown.bIOARequird;
                        discreteInptData.PromptTotalCorrectMoveBack.bMultiTchr = TempRules.pctTotalCorrectMoveDown.bMultiTeacherRequired;
                        discreteInptData.PromptTotalCorrectMoveBack.ConsecutiveAverageFailure = TempRules.pctTotalCorrectMoveDown.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                        discreteInptData.PromptTotalCorrectMoveBack.ConsecutiveAverageFailValue = TempRules.pctTotalCorrectMoveDown.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                        discreteInptData.PromptTotalIncorrectMoveBack.BarCondition = TempRules.pctTotalIncorrectMoveDown.iScoreRequired;
                        discreteInptData.PromptTotalIncorrectMoveBack.ConsecutiveFailures = TempRules.pctTotalIncorrectMoveDown.bConsequetiveIndex;
                        discreteInptData.PromptTotalIncorrectMoveBack.TotalTrial = TempRules.pctTotalIncorrectMoveDown.iTotalInstance;
                        discreteInptData.PromptTotalIncorrectMoveBack.FailureNeeded = TempRules.pctTotalIncorrectMoveDown.iTotalCorrectInstance;
                        discreteInptData.PromptTotalIncorrectMoveBack.bIOAReqd = TempRules.pctTotalIncorrectMoveDown.bIOARequird;
                        discreteInptData.PromptTotalIncorrectMoveBack.bMultiTchr = TempRules.pctTotalIncorrectMoveDown.bMultiTeacherRequired;
                        discreteInptData.PromptTotalIncorrectMoveBack.ConsecutiveAverageFailure = TempRules.pctTotalIncorrectMoveDown.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                        discreteInptData.PromptTotalIncorrectMoveBack.ConsecutiveAverageFailValue = TempRules.pctTotalIncorrectMoveDown.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                        /*  if (!discreteInptData.IOARequired)
                              discreteInptData.IOARequired = TempRules.bIOARequird;
                          if (!discreteInptData.MultiTeacherRequired)
                              discreteInptData.MultiTeacherRequired = TempRules.bMultiTeacherRequired;*/
                    }
                    #endregion
                    discreteCols.Add(sColName, discreteInptData);

                    //if (discreteInptData.PromptHirecharchy == false)
                    //{
                    //    prompt = "-,+";
                    //    //promptUsed = prompt.Split(',');
                    //    sCurrentPrompt = "+";
                    //    TargetPrompt = "+";
                    //    promptUsed = new string[1];
                    //    promptUsed[0] = "+";
                    //}
                    //else
                    //{

                    Prompt[] arPromtList = GetPrompts(oTemp.TemplateId);

                    promptUsed = new string[arPromtList.Count()];
                    LessonpromptUsed = new string[arPromtList.Count()];
                    LessonpromptUsedOther = new string[arPromtList.Count()];
                    bPromtHirchy = true;
                    for (int iCount = 0; iCount < arPromtList.Count(); iCount++)
                    {
                        promptUsed[iCount] = arPromtList[iCount].promptId.ToString();
                        LessonpromptUsed[iCount] = arPromtList[iCount].promptId.ToString();
                        LessonpromptUsedOther[iCount] = arPromtList[iCount].promptId.ToString();
                        if (!String.IsNullOrEmpty(sCurrentLessonPrompt) && sCurrentLessonPrompt != "0")
                        {
                            if (arPromtList[iCount].promptId.ToString() == sCurrentLessonPrompt)
                                crntPrmtIndex = iCount;
                        }
                    }
                    if (promptUsed.Length > 0)
                    {
                        TargetPrompt = promptUsed[promptUsed.Length - 1];
                        LessonTargetPrompt = TargetPrompt;

                        if (String.IsNullOrEmpty(sCurrentLessonPrompt) || sCurrentLessonPrompt == "0")
                        {
                            sCurrentPrompt = promptUsed[0];
                            Session["sCurrentPrompt"] = sCurrentPrompt;
                            sCurrentLessonPrompt = sCurrentPrompt;
                        }
                    }
                    if (!discreteInptData.PromptHirecharchy)
                        bPromtHirchy = false;
                    //}

                    if (dr["ColTypeCd"].ToString() == "+/-")
                    {
                        prompt = "-,+";
                        //promptUsed = prompt.Split(',');
                        sCurrentPrompt = "+";
                        TargetPrompt = "+";
                        promptUsed = new string[1];
                        promptUsed[0] = "+";
                    }
                    string sEventType = "";
                    DiscreteTrials TrialLists = new DiscreteTrials();
                    reader.Close();
                    int counter = discreteCols.Count;
                    int ind = 0;
                    oDisc = new DiscreteSession();
                    TrialLists = oDisc.GetTrialLists(oSession.StudentId, oTemp.TemplateId, iCurrentSetId, iCurrentStep, discreteCols[sColName].RequiredSession(), sColName, false, hfPlusMinusResp.Value, coltypeCode, oDS.ChainType);
                    //if (discreteInptData.MultiTeacherRequired)
                    bMultyTchr = oDisc.MultiTeacherStatus(oSession.StudentId, oTemp.TemplateId);
                    // else
                    //    bMultyTchr = false;

                    // if (discreteInptData.IOARequired)
                    bIOA = oDisc.IOAStats(oSession.StudentId, oTemp.TemplateId);
                    // else
                    //     bIOA = false;
                    //Trials = trails.GetTrialLists(8, 1, ht[key].RequiredSession(), key);
                    discreteCols[sColName].SessionCount = TrialLists.sessionCount;
                    discreteCols[sColName].TrialCount = TrialLists.trialsCount;
                    discreteCols[sColName].PromptsUsed = promptUsed;
                    discreteCols[sColName].NoPromptsUsed = LessonpromptUsed;
                    discreteCols[sColName].sCurrentLessonPrompt = sCurrentLessonPrompt;
                    discreteCols[sColName].TotalSets = TrialLists.totalSet;
                    int reqSess = discreteCols[sColName].RequiredSession();
                    bool bcustMoveUp = false;
                    bool bCustMoveDown = false;
                    bool bTotDurationMoveUp = true;
                    bool bTotDurationMoveDown = true;
                    bool bPromptTotDurationMoveUp = true;
                    bool bPromptTotDurationMoveDown = true;

                    bool bAvgDurationMoveUp = true;
                    bool bAvgDurationMoveDown = true;
                    bool bPromptAvgDurationMoveUp = true;
                    bool bPromptAvgDurationMoveDown = true;

                    bool bFrequencyMoveUp = true;
                    bool bFrequencyMoveDown = true;
                    bool bPromptFrequencyMoveUp = true;
                    bool bPromptFrequencyMoveDown = true;

                    bool bIndallMoveUp = true;
                    bool bIndallMoveDown = true;
                    bool bPromptIndallMoveUp = true;
                    bool bPromptIndallMoveDown = true;
                    int MoveUpstat = 1;
                    string CompletionStatus = "";
                    // CompletionStatusSet = "";
                    bool FreqDurTextFlag = false;

                    if (dr["ColTypeCd"].ToString() == "Text")
                    {
                        FreqDurTextFlag = true;


                    }

                    if (discreteCols[sColName].TrialCount == 0)
                    {
                        if (count - 1 == loop)
                        {
                            if (!disRuleNAChk && count == 1)
                            {
                                return;
                            }
                        }
                        else
                        {
                            loop++;
                            continue;
                        }
                    }


                    //if (discreteCols[sColName].TrialCount == 0)
                    //{
                    //    return;
                    //}

                    string strPromptCriteria = "";
                    int promptUp = 0, promptDown = 0;
                    strPromptCriteria = "SELECT  Count(DR.DSTempRuleId)	FROM DSTempHdr DT  INNER JOIN DSTempSetCol DST ON DT.DSTempHdrId = DST.DSTempHdrId " +
                        "INNER JOIN DSTempSetColCalc DC ON DST.DSTempSetColId = DC.DSTempSetColId  INNER JOIN DSTempRule DR ON DR.DSTempSetColCalcId = DC.DSTempSetColCalcId " +
                        "WHERE (DT.DSTempHdrId =" + oTemp.TemplateId + ")AND DR.RuleType='PROMPT' AND DR.CriteriaType='MOVE UP' " +//AND DR.DSTempSetColId=" + iColId +
                        " AND DR.ActiveInd='A' AND DR.IsNA=1";
                    promptUp = Convert.ToInt32(oData.FetchValue(strPromptCriteria));
                    strPromptCriteria = "SELECT  Count(DR.DSTempRuleId)	FROM DSTempHdr DT  INNER JOIN DSTempSetCol DST ON DT.DSTempHdrId = DST.DSTempHdrId " +
                        "INNER JOIN DSTempSetColCalc DC ON DST.DSTempSetColId = DC.DSTempSetColId  INNER JOIN DSTempRule DR ON DR.DSTempSetColCalcId = DC.DSTempSetColCalcId " +
                        "WHERE (DT.DSTempHdrId =" + oTemp.TemplateId + ")AND DR.RuleType='PROMPT' AND DR.CriteriaType='MOVE DOWN' " +//AND DR.DSTempSetColId=" + iColId +
                        " AND DR.ActiveInd='A' AND DR.IsNA=1";
                    promptDown = Convert.ToInt32(oData.FetchValue(strPromptCriteria));
                    discreteCols[sColName].promptUp = promptUp;
                    discreteCols[sColName].promptDown = promptDown;

                    string strqry2 = " select case when'%Independent of All Steps' in(SELECT  DC.CalcType FROM DSTempHdr DT " +
                                     " INNER JOIN DSTempSetCol DST ON DT.DSTempHdrId = DST.DSTempHdrId " +
                                     "INNER JOIN DSTempSetColCalc DC ON DST.DSTempSetColId = DC.DSTempSetColId" +
                                     " WHERE DT.DSTempHdrId =" + oTemp.TemplateId + ") then 'true' else 'false' end";
                    object colt2 = oData.FetchValue(strqry2);
                    //string h2 = colt2.ToString();
                    bool indtest = false;
                    TempRules = GetPromptRules(oTemp.TemplateId, iColId);
                    if (TempRules.pctIndAllMoveUp.iScoreRequired > 0)
                    {
                        indtest = true;
                    }
                    TempRules = GetStepRules(oTemp.TemplateId, iColId);
                    if (TempRules.pctIndAllMoveUp.iScoreRequired > 0)
                    {
                        indtest = true;
                    }
                    TempRules = GetSetRules(oTemp.TemplateId, iColId);
                    if (TempRules.pctIndAllMoveUp.iScoreRequired > 0)
                    {
                        indtest = true;
                    }

                    if (discreteCols[sColName].TrialCount > 0)
                    {
                        sesResult = new DiscreetTrial.Result[discreteCols.Count];
                        #region Text
                        if (dr["ColTypeCd"].ToString() == "Text")
                        {

                            TempRules = GetSetRules(oTemp.TemplateId, iColId);
                            colCalId = Convert.ToInt32(ViewState["colCalId"]);
                            if (TempRules.pctCustomMoveUp.iScoreRequired > 0)
                            {
                                CompletionStatusSet = "";
                                //int iStudentId, int colCalId, float iScoreRequired, int iSessonNumber,int iTotalCorrectInstance,bool bConsequetiveIndex, bool flag
                                bool status = false;
                                bcustMoveUp = ValidateUp(oSession.StudentId, colCalId, TempRules.pctCustomMoveUp.iScoreRequired, reqSess,
                                    TempRules.pctCustomMoveUp.iTotalCorrectInstance, TempRules.pctCustomMoveUp.bConsequetiveIndex, status);
                                int setcount = TrialLists.totalSet;

                                bRuleStatusIOA = oDisc.checkConditionIOA(bCustomMoveupIOA, bIOA);
                                bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bCustomMoveupMultiTchr, bMultyTchr);
                                if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                {

                                    if (bcustMoveUp && bSetMoveUp)
                                    {
                                        if (oDS.CrntSetNbr < setcount)
                                            nextSet = oDS.CrntSetNbr + 1;
                                        if (oDS.CrntSetNbr == setcount)
                                        {
                                            nextSet = setcount;
                                            CompletionStatusSet = "COMPLETED";
                                        }
                                        bSetMoveUp = true;
                                        GlobalSetMoveUp = true;
                                        bSetMoveBack = false;
                                    }
                                    else
                                        bSetMoveUp = false;
                                }
                            }
                            if (TempRules.pctCustomMoveDown.iScoreRequired > 0)
                            {
                                bool status = false;
                                bCustMoveDown = ValidateDown(oSession.StudentId, colCalId, TempRules.pctCustomMoveDown.iScoreRequired, reqSess,
                                    TempRules.pctCustomMoveDown.iTotalCorrectInstance, TempRules.pctCustomMoveDown.bConsequetiveIndex, status);
                                int setcount = TrialLists.totalSet;

                                bRuleStatusIOA = oDisc.checkConditionIOA(bCustomMovedownIOA, bIOA);
                                bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bCustomMovedownMultiTchr, bMultyTchr);
                                if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                {

                                    if (bCustMoveDown && bSetMoveBack)
                                    {
                                        if (oDS.CrntSetNbr <= setcount)
                                            nextSet = oDS.CrntSetNbr - 1;
                                        if (oDS.CrntSetNbr == 1)
                                            nextSet = 1;
                                        bSetMoveBack = true;
                                        GlobalSetMoveBack = true;
                                        bSetMoveUp = false;
                                    }
                                    else
                                        bSetMoveBack = false;
                                }


                            }
                            FreqDurTextFlag = true;

                        }
                        #endregion
                        #region duration
                        else if (dr["ColTypeCd"].ToString() == "Duration")
                        {
                            int colId = Convert.ToInt32(dr["DSTempSetColId"]);
                            string selqry1 = "select Moveupstat from dstempsetcol DsCol inner join DSTempHdr Hdr on Hdr.DSTempHdrId=DsCol.DSTempHdrId where dsCol.DSTempHdrId=" + oTemp.TemplateId + " And DSTempSetColId= " + colId;
                            object stat = oData.FetchValue(selqry1);
                            if (stat != null)
                                MoveUpstat = Convert.ToInt16(stat);
                            #region MoveUp in Less Than criteria- default
                            if (MoveUpstat == 1)
                            {
                                TempRules = GetPromptRules(oTemp.TemplateId, iColId);

                                if (TempRules.pctAvgDurationMoveUp.iScoreRequired == 0 || TempRules.pctAvgDurationMoveDown.iScoreRequired == 0)
                                {
                                    freqdureloop++;
                                    bool status = true;
                                    CompletionStatusSet = "";
                                    TempRules = GetSetRules(oTemp.TemplateId, iColId);
                                    avgDurationId = Convert.ToInt32(ViewState["avgDurationId"]);
                                    totDuraionId = Convert.ToInt32(ViewState["totDuraionId"]);
                                    if (TempRules.pctAvgDurationMoveUp.iScoreRequired > 0)
                                    {
                                        bAvgDurationMoveUp = ValidateUp(oSession.StudentId, avgDurationId, TempRules.pctAvgDurationMoveUp.iScoreRequired, reqSess,
                                            TempRules.pctAvgDurationMoveUp.iTotalCorrectInstance, TempRules.pctAvgDurationMoveUp.bConsequetiveIndex, status);
                                        int setcount = TrialLists.totalSet;

                                        bRuleStatusIOA = oDisc.checkConditionIOA(bAvgDurationMoveUpbIOAReqd, bIOA);
                                        bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bAvgDurationMoveUpbMultiTchr, bMultyTchr);
                                        if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                        {

                                            if (bAvgDurationMoveUp)
                                            {
                                                if (oDS.CrntSetNbr < setcount)
                                                    nextSet = oDS.CrntSetNbr + 1;
                                                if (oDS.CrntSetNbr == setcount)
                                                {
                                                    nextSet = setcount;
                                                    CompletionStatusSet = "COMPLETED";
                                                }
                                                if (CompletionStatusSet == "COMPLETED")
                                                {
                                                    bSetCompleted = true;
                                                }
                                                else
                                                {
                                                    bSetCompleted = false;
                                                }
                                                if (bSetMoveUp && bAvgDurationMoveUp)
                                                {
                                                    bSetMoveUp = true;
                                                    GlobalSetMoveUp = true;
                                                }
                                            }
                                        }



                                    }
                                    if (TempRules.pctAvgDurationMoveDown.iScoreRequired > 0)
                                    {
                                        bAvgDurationMoveDown = ValidateDown(oSession.StudentId, avgDurationId, TempRules.pctAvgDurationMoveDown.iScoreRequired, reqSess,
                                            TempRules.pctAvgDurationMoveDown.iTotalCorrectInstance, TempRules.pctAvgDurationMoveDown.bConsequetiveIndex, status);
                                        int setcount = TrialLists.totalSet;

                                        bRuleStatusIOA = oDisc.checkConditionIOA(bAvgDurationMoveDownbIOAReqd, bIOA);
                                        bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bAvgDurationMoveDownbMultiTchr, bMultyTchr);
                                        if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                        {

                                            if (bAvgDurationMoveDown)
                                            {
                                                if (oDS.CrntSetNbr <= setcount)
                                                    nextSet = oDS.CrntSetNbr - 1;
                                                if (oDS.CrntSetNbr == 1)
                                                    nextSet = 1;
                                                if (bSetMoveBack && bAvgDurationMoveDown)
                                                {
                                                    bSetMoveBack = true;
                                                    GlobalSetMoveBack = true;
                                                }
                                            }
                                        }

                                    }
                                    FreqDurTextFlag = true;
                                }
                                else
                                {
                                    freqdureloop++;
                                    bool status = true;
                                    CompletionStatusSet = "";
                                    avgDurationId = Convert.ToInt32(ViewState["avgDurationId"]);
                                    totDuraionId = Convert.ToInt32(ViewState["totDuraionId"]);
                                    TempRules = GetPromptRules(oTemp.TemplateId, iColId);

                                    //avg duration
                                    if (TempRules.pctAvgDurationMoveUp.iTotalCorrectInstance > 0)
                                    {
                                        if (promptUp >= 1)
                                            bPromptAvgDurationMoveUp = false;
                                        if (TempRules.pctAvgDurationMoveUp.iScoreRequired > 0)
                                        {
                                            bPromptAvgDurationMoveUp = ValidateUp(oSession.StudentId, avgDurationId, TempRules.pctAvgDurationMoveUp.iScoreRequired, reqSess,
                                                TempRules.pctAvgDurationMoveUp.iTotalCorrectInstance, TempRules.pctAvgDurationMoveUp.bConsequetiveIndex, status);

                                            bRuleStatusIOA = oDisc.checkConditionIOA(bPromptMoveUpIOA, bIOA);
                                            bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bPromptMoveUpMultiTecher, bMultyTchr);
                                            if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                            {
                                                bPromptFrequencyMoveUp = false;
                                                if (bPromptAvgDurationMoveUp)
                                                {
                                                    if (sCurrentPrompt != LessonpromptUsed[LessonpromptUsed.Length - 1])
                                                    {
                                                        int iPromptIndex = DiscreetTrial.Model.PromptIndex(LessonpromptUsed, sCurrentPrompt);
                                                        if (iPromptIndex < LessonpromptUsed.Length)
                                                        {
                                                            sNextLessonPrompt = LessonpromptUsed[iPromptIndex + 1];
                                                            bPromptMoveUp = true;
                                                            bAvgDurationMoveUp = false;
                                                            bAvgDurationMoveDown = false;
                                                        }
                                                        else
                                                            bPromptAvgDurationMoveUp = false;
                                                    }
                                                    else
                                                        bPromptAvgDurationMoveUp = false;
                                                }
                                            }
                                        }
                                        else
                                            bPromptAvgDurationMoveUp = false;
                                        if (!bPromptAvgDurationMoveUp)
                                        {
                                            if (promptDown >= 1)
                                                bPromptAvgDurationMoveDown = false;
                                            if (TempRules.pctAvgDurationMoveDown.iScoreRequired > 0)
                                            {
                                                bPromptAvgDurationMoveDown = ValidateDown(oSession.StudentId, avgDurationId, TempRules.pctAvgDurationMoveDown.iScoreRequired, reqSess,
                                                    TempRules.pctAvgDurationMoveDown.iTotalCorrectInstance, TempRules.pctAvgDurationMoveDown.bConsequetiveIndex, status);

                                                bRuleStatusIOA = oDisc.checkConditionIOA(bPromptMoveDownIOA, bIOA);
                                                bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bPromptMoveDownMultiTecher, bMultyTchr);
                                                if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                {
                                                    if (bPromptAvgDurationMoveDown)
                                                    {
                                                        if (sCurrentPrompt != LessonpromptUsed[0])
                                                        {
                                                            int iPromptIndex = DiscreetTrial.Model.PromptIndex(LessonpromptUsed, sCurrentPrompt);
                                                            if (iPromptIndex > 0)
                                                            {
                                                                sNextLessonPrompt = LessonpromptUsed[iPromptIndex - 1];
                                                                bPromptMoveBack = true;
                                                                bAvgDurationMoveDown = false;
                                                                bAvgDurationMoveUp = false;
                                                            }
                                                            else
                                                                bPromptAvgDurationMoveDown = false;
                                                        }
                                                        else
                                                            bPromptAvgDurationMoveDown = false;
                                                    }

                                                }
                                            }
                                        }
                                        else
                                            bPromptAvgDurationMoveDown = false;

                                        if (!bPromptAvgDurationMoveUp && !bPromptAvgDurationMoveDown)
                                        {
                                            TempRules = GetSetRules(oTemp.TemplateId, iColId);

                                            if (TempRules.pctAvgDurationMoveUp.iScoreRequired > 0)
                                            {
                                                bAvgDurationMoveUp = ValidateUp(oSession.StudentId, avgDurationId, TempRules.pctAvgDurationMoveUp.iScoreRequired, reqSess,
                                                    TempRules.pctAvgDurationMoveUp.iTotalCorrectInstance, TempRules.pctAvgDurationMoveUp.bConsequetiveIndex, status);
                                                int setcount = TrialLists.totalSet;

                                                bRuleStatusIOA = oDisc.checkConditionIOA(bSetMoveUpIOA, bIOA);
                                                bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bSetMoveUpMultiTecher, bMultyTchr);
                                                if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                {

                                                    if (bAvgDurationMoveUp)
                                                    {
                                                        if (oDS.CrntSetNbr < setcount)
                                                            nextSet = oDS.CrntSetNbr + 1;
                                                        if (oDS.CrntSetNbr == setcount)
                                                        {
                                                            nextSet = setcount;
                                                            CompletionStatusSet = "COMPLETED";
                                                        }
                                                        if (CompletionStatusSet == "COMPLETED")
                                                        {
                                                            bSetCompleted = true;
                                                        }
                                                        else
                                                        {
                                                            bSetCompleted = false;
                                                        }
                                                        if (bSetMoveUp && bAvgDurationMoveUp)
                                                        {
                                                            bSetMoveUp = true;
                                                            GlobalSetMoveUp = true;
                                                        }
                                                    }
                                                }



                                            }
                                            if (TempRules.pctAvgDurationMoveDown.iScoreRequired > 0)
                                            {
                                                bAvgDurationMoveDown = ValidateDown(oSession.StudentId, avgDurationId, TempRules.pctAvgDurationMoveDown.iScoreRequired, reqSess,
                                                    TempRules.pctAvgDurationMoveDown.iTotalCorrectInstance, TempRules.pctAvgDurationMoveDown.bConsequetiveIndex, status);
                                                int setcount = TrialLists.totalSet;

                                                bRuleStatusIOA = oDisc.checkConditionIOA(bSetMoveDownIOA, bIOA);
                                                bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bSetMoveDownMultiTecher, bMultyTchr);
                                                if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                {

                                                    if (bAvgDurationMoveDown)
                                                    {
                                                        if (oDS.CrntSetNbr <= setcount)
                                                            nextSet = oDS.CrntSetNbr - 1;
                                                        if (oDS.CrntSetNbr == 1)
                                                            nextSet = 1;
                                                        if (bSetMoveBack && bAvgDurationMoveDown)
                                                        {
                                                            bSetMoveBack = true;
                                                            GlobalSetMoveBack = true;
                                                        }
                                                    }
                                                }

                                            }

                                        }
                                    }
                                    FreqDurTextFlag = true;
                                }
                                TempRules = GetPromptRules(oTemp.TemplateId, iColId);
                                if (TempRules.pctTotalDurationMoveUp.iScoreRequired == 0 || TempRules.pctTotalDurationMoveDown.iScoreRequired == 0)
                                {
                                    freqdureloop++;
                                    bool status = true;
                                    CompletionStatusSet = "";
                                    TempRules = GetSetRules(oTemp.TemplateId, iColId);
                                    avgDurationId = Convert.ToInt32(ViewState["avgDurationId"]);
                                    totDuraionId = Convert.ToInt32(ViewState["totDuraionId"]);
                                    if (TempRules.pctTotalDurationMoveUp.iScoreRequired > 0)
                                    {
                                        CompletionStatusSet = "";
                                        bTotDurationMoveUp = ValidateUp(oSession.StudentId, totDuraionId, TempRules.pctTotalDurationMoveUp.iScoreRequired, reqSess,
                                            TempRules.pctTotalDurationMoveUp.iTotalCorrectInstance, TempRules.pctTotalDurationMoveUp.bConsequetiveIndex, status);
                                        int setcount = TrialLists.totalSet;

                                        bRuleStatusIOA = oDisc.checkConditionIOA(bTotalDurationMoveUpbIOAReqd, bIOA);
                                        bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bTotalDurationMoveUpbMultiTchr, bMultyTchr);
                                        if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                        {

                                            if (bTotDurationMoveUp)
                                            {
                                                if (oDS.CrntSetNbr < setcount)
                                                    nextSet = oDS.CrntSetNbr + 1;
                                                if (oDS.CrntSetNbr == setcount)
                                                {
                                                    nextSet = setcount;
                                                    CompletionStatusSet = "COMPLETED";
                                                }
                                                if (CompletionStatusSet == "COMPLETED")
                                                {
                                                    bSetCompleted = true;
                                                }
                                                else
                                                {
                                                    bSetCompleted = false;
                                                }
                                                if (bSetMoveUp && bTotDurationMoveUp)
                                                {
                                                    bSetMoveUp = true;
                                                    GlobalSetMoveUp = true;
                                                }
                                            }
                                        }


                                    }
                                    if (TempRules.pctTotalDurationMoveDown.iScoreRequired > 0)
                                    {
                                        bTotDurationMoveDown = ValidateDown(oSession.StudentId, totDuraionId, TempRules.pctTotalDurationMoveDown.iScoreRequired, reqSess,
                                            TempRules.pctTotalDurationMoveDown.iTotalCorrectInstance, TempRules.pctTotalDurationMoveDown.bConsequetiveIndex, status);
                                        int setcount = TrialLists.totalSet;

                                        bRuleStatusIOA = oDisc.checkConditionIOA(bTotalDurationMoveDownbIOAReqd, bIOA);
                                        bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bTotalDurationMoveDownbMultiTchr, bMultyTchr);
                                        if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                        {

                                            if (bTotDurationMoveDown)
                                            {
                                                if (oDS.CrntSetNbr <= setcount)
                                                    nextSet = oDS.CrntSetNbr - 1;
                                                if (oDS.CrntSetNbr == 1)
                                                    nextSet = 1;
                                                if (bSetMoveBack && bTotDurationMoveDown)
                                                {
                                                    bSetMoveBack = true;
                                                    GlobalSetMoveBack = true;
                                                }
                                            }
                                        }




                                    }

                                    FreqDurTextFlag = true;
                                }
                                else
                                {
                                    freqdureloop++;
                                    bool status = true;
                                    CompletionStatusSet = "";
                                    avgDurationId = Convert.ToInt32(ViewState["avgDurationId"]);
                                    totDuraionId = Convert.ToInt32(ViewState["totDuraionId"]);
                                    TempRules = GetPromptRules(oTemp.TemplateId, iColId);

                                    if (TempRules.pctTotalDurationMoveUp.iTotalCorrectInstance > 0)
                                    {
                                        if (promptUp >= 1)
                                            bPromptTotDurationMoveUp = false;
                                        if (TempRules.pctTotalDurationMoveUp.iScoreRequired > 0)
                                        {
                                            bPromptTotDurationMoveUp = ValidateUp(oSession.StudentId, totDuraionId, TempRules.pctTotalDurationMoveUp.iScoreRequired, reqSess,
                                                TempRules.pctTotalDurationMoveUp.iTotalCorrectInstance, TempRules.pctTotalDurationMoveUp.bConsequetiveIndex, status);

                                            bRuleStatusIOA = oDisc.checkConditionIOA(bPromptMoveUpIOA, bIOA);
                                            bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bPromptMoveUpMultiTecher, bMultyTchr);
                                            if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                            {

                                                if (bPromptTotDurationMoveUp)
                                                {
                                                    if (sCurrentPrompt != LessonpromptUsed[LessonpromptUsed.Length - 1])
                                                    {
                                                        int iPromptIndex = DiscreetTrial.Model.PromptIndex(LessonpromptUsed, sCurrentPrompt);
                                                        if (iPromptIndex < LessonpromptUsed.Length)
                                                        {
                                                            sNextLessonPrompt = LessonpromptUsed[iPromptIndex + 1];
                                                            bPromptMoveUp = true;
                                                            bTotDurationMoveUp = false;
                                                            bTotDurationMoveDown = false;
                                                        }
                                                        else
                                                            bPromptTotDurationMoveUp = false;
                                                    }
                                                    else
                                                        bPromptTotDurationMoveUp = false;
                                                }
                                            }
                                        }
                                        else
                                            bPromptTotDurationMoveUp = false;
                                        if (!bPromptTotDurationMoveUp)
                                        {
                                            if (promptDown >= 1)
                                                bPromptTotDurationMoveDown = false;
                                            if (TempRules.pctTotalDurationMoveDown.iScoreRequired > 0)
                                            {
                                                bPromptTotDurationMoveDown = ValidateDown(oSession.StudentId, totDuraionId, TempRules.pctTotalDurationMoveDown.iScoreRequired, reqSess,
                                                    TempRules.pctTotalDurationMoveDown.iTotalCorrectInstance, TempRules.pctTotalDurationMoveDown.bConsequetiveIndex, status);

                                                bRuleStatusIOA = oDisc.checkConditionIOA(bPromptMoveDownIOA, bIOA);
                                                bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bPromptMoveDownMultiTecher, bMultyTchr);
                                                if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                {

                                                    if (bPromptTotDurationMoveDown)
                                                    {
                                                        if (sCurrentPrompt != LessonpromptUsed[0])
                                                        {
                                                            int iPromptIndex = DiscreetTrial.Model.PromptIndex(LessonpromptUsed, sCurrentPrompt);
                                                            if (iPromptIndex > 0)
                                                            {
                                                                sNextLessonPrompt = LessonpromptUsed[iPromptIndex - 1];
                                                                bPromptMoveBack = true;
                                                                bTotDurationMoveDown = false;
                                                                bTotDurationMoveUp = false;
                                                            }
                                                            else
                                                                bPromptTotDurationMoveDown = false;
                                                        }
                                                        else
                                                            bPromptTotDurationMoveDown = false;
                                                    }

                                                }
                                            }
                                        }
                                        else
                                            bPromptTotDurationMoveDown = false;
                                        //total duration


                                        if (!bPromptTotDurationMoveUp && !bPromptTotDurationMoveDown)
                                        {
                                            TempRules = GetSetRules(oTemp.TemplateId, iColId);

                                            if (TempRules.pctTotalDurationMoveUp.iScoreRequired > 0)
                                            {
                                                CompletionStatusSet = "";
                                                bTotDurationMoveUp = ValidateUp(oSession.StudentId, totDuraionId, TempRules.pctTotalDurationMoveUp.iScoreRequired, reqSess,
                                                    TempRules.pctTotalDurationMoveUp.iTotalCorrectInstance, TempRules.pctTotalDurationMoveUp.bConsequetiveIndex, status);
                                                int setcount = TrialLists.totalSet;

                                                bRuleStatusIOA = oDisc.checkConditionIOA(bSetMoveUpIOA, bIOA);
                                                bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bSetMoveUpMultiTecher, bMultyTchr);
                                                if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                {

                                                    if (bTotDurationMoveUp)
                                                    {
                                                        if (oDS.CrntSetNbr < setcount)
                                                            nextSet = oDS.CrntSetNbr + 1;
                                                        if (oDS.CrntSetNbr == setcount)
                                                        {
                                                            nextSet = setcount;
                                                            CompletionStatusSet = "COMPLETED";
                                                        }
                                                        if (CompletionStatusSet == "COMPLETED")
                                                        {
                                                            bSetCompleted = true;
                                                        }
                                                        else
                                                        {
                                                            bSetCompleted = false;
                                                        }
                                                        if (bSetMoveUp && bTotDurationMoveUp)
                                                        {
                                                            bSetMoveUp = true;
                                                            GlobalSetMoveUp = true;
                                                        }
                                                    }
                                                }


                                            }
                                            if (TempRules.pctTotalDurationMoveDown.iScoreRequired > 0)
                                            {
                                                bTotDurationMoveDown = ValidateDown(oSession.StudentId, totDuraionId, TempRules.pctTotalDurationMoveDown.iScoreRequired, reqSess,
                                                    TempRules.pctTotalDurationMoveDown.iTotalCorrectInstance, TempRules.pctTotalDurationMoveDown.bConsequetiveIndex, status);
                                                int setcount = TrialLists.totalSet;

                                                bRuleStatusIOA = oDisc.checkConditionIOA(bSetMoveDownIOA, bIOA);
                                                bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bSetMoveDownMultiTecher, bMultyTchr);
                                                if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                {

                                                    if (bTotDurationMoveDown)
                                                    {
                                                        if (oDS.CrntSetNbr <= setcount)
                                                            nextSet = oDS.CrntSetNbr - 1;
                                                        if (oDS.CrntSetNbr == 1)
                                                            nextSet = 1;
                                                        if (bSetMoveBack && bTotDurationMoveDown)
                                                        {
                                                            bSetMoveBack = true;
                                                            GlobalSetMoveBack = true;
                                                        }
                                                    }
                                                }
                                            }
                                        }

                                    }
                                    FreqDurTextFlag = true;
                                }



                            }
                            #endregion
                            //Code added for List 5 Task #9 16-feb-2021 change Moveup/down Criteria for Frequncy and Duration START--
                            #region MoveUp in More Than Criteria
                            else if (MoveUpstat == 0)
                            {
                                TempRules = GetPromptRules(oTemp.TemplateId, iColId);

                                if (TempRules.pctAvgDurationMoveUp.iScoreRequired == 0 || TempRules.pctAvgDurationMoveDown.iScoreRequired == 0)
                                {
                                    freqdureloop++;
                                    bool status = true;
                                    CompletionStatusSet = "";
                                    TempRules = GetSetRules(oTemp.TemplateId, iColId);
                                    avgDurationId = Convert.ToInt32(ViewState["avgDurationId"]);
                                    totDuraionId = Convert.ToInt32(ViewState["totDuraionId"]);
                                    if (TempRules.pctAvgDurationMoveUp.iScoreRequired > 0)
                                    {
                                        bAvgDurationMoveUp = ValidateDown(oSession.StudentId, avgDurationId, TempRules.pctAvgDurationMoveUp.iScoreRequired, reqSess,
                                            TempRules.pctAvgDurationMoveUp.iTotalCorrectInstance, TempRules.pctAvgDurationMoveUp.bConsequetiveIndex, status);
                                        int setcount = TrialLists.totalSet;

                                        bRuleStatusIOA = oDisc.checkConditionIOA(bAvgDurationMoveUpbIOAReqd, bIOA);
                                        bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bAvgDurationMoveUpbMultiTchr, bMultyTchr);
                                        if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                        {

                                            if (bAvgDurationMoveUp)
                                            {
                                                if (oDS.CrntSetNbr < setcount)
                                                    nextSet = oDS.CrntSetNbr + 1;
                                                if (oDS.CrntSetNbr == setcount)
                                                {
                                                    nextSet = setcount;
                                                    CompletionStatusSet = "COMPLETED";
                                                }
                                                if (CompletionStatusSet == "COMPLETED")
                                                {
                                                    bSetCompleted = true;
                                                }
                                                else
                                                {
                                                    bSetCompleted = false;
                                                }
                                                if (bSetMoveUp && bAvgDurationMoveUp)
                                                {
                                                    bSetMoveUp = true;
                                                    GlobalSetMoveUp = true;
                                                }
                                            }
                                        }



                                    }
                                    if (TempRules.pctAvgDurationMoveDown.iScoreRequired > 0)
                                    {
                                        bAvgDurationMoveDown = ValidateUp(oSession.StudentId, avgDurationId, TempRules.pctAvgDurationMoveDown.iScoreRequired, reqSess,
                                            TempRules.pctAvgDurationMoveDown.iTotalCorrectInstance, TempRules.pctAvgDurationMoveDown.bConsequetiveIndex, status);
                                        int setcount = TrialLists.totalSet;

                                        bRuleStatusIOA = oDisc.checkConditionIOA(bAvgDurationMoveDownbIOAReqd, bIOA);
                                        bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bAvgDurationMoveDownbMultiTchr, bMultyTchr);
                                        if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                        {

                                            if (bAvgDurationMoveDown)
                                            {
                                                if (oDS.CrntSetNbr <= setcount)
                                                    nextSet = oDS.CrntSetNbr - 1;
                                                if (oDS.CrntSetNbr == 1)
                                                    nextSet = 1;
                                                if (bSetMoveBack && bAvgDurationMoveDown)
                                                {
                                                    bSetMoveBack = true;
                                                    GlobalSetMoveBack = true;
                                                }
                                            }
                                        }

                                    }
                                    FreqDurTextFlag = true;
                                }
                                else
                                {
                                    freqdureloop++;
                                    bool status = true;
                                    CompletionStatusSet = "";
                                    avgDurationId = Convert.ToInt32(ViewState["avgDurationId"]);
                                    totDuraionId = Convert.ToInt32(ViewState["totDuraionId"]);
                                    TempRules = GetPromptRules(oTemp.TemplateId, iColId);

                                    //avg duration
                                    if (TempRules.pctAvgDurationMoveUp.iTotalCorrectInstance > 0)
                                    {
                                        if (promptUp >= 1)
                                            bPromptAvgDurationMoveUp = false;
                                        if (TempRules.pctAvgDurationMoveUp.iScoreRequired > 0)
                                        {
                                            bPromptAvgDurationMoveUp = ValidateDown(oSession.StudentId, avgDurationId, TempRules.pctAvgDurationMoveUp.iScoreRequired, reqSess,
                                                TempRules.pctAvgDurationMoveUp.iTotalCorrectInstance, TempRules.pctAvgDurationMoveUp.bConsequetiveIndex, status);

                                            bRuleStatusIOA = oDisc.checkConditionIOA(bPromptMoveUpIOA, bIOA);
                                            bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bPromptMoveUpMultiTecher, bMultyTchr);
                                            if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                            {
                                                bPromptFrequencyMoveUp = false;
                                                if (bPromptAvgDurationMoveUp)
                                                {
                                                    if (sCurrentPrompt != LessonpromptUsed[LessonpromptUsed.Length - 1])
                                                    {
                                                        int iPromptIndex = DiscreetTrial.Model.PromptIndex(LessonpromptUsed, sCurrentPrompt);
                                                        if (iPromptIndex < LessonpromptUsed.Length)
                                                        {
                                                            sNextLessonPrompt = LessonpromptUsed[iPromptIndex + 1];
                                                            bPromptMoveUp = true;
                                                            bAvgDurationMoveUp = false;
                                                            bAvgDurationMoveDown = false;
                                                        }
                                                        else
                                                            bPromptAvgDurationMoveUp = false;
                                                    }
                                                    else
                                                        bPromptAvgDurationMoveUp = false;
                                                }
                                            }
                                        }
                                        else
                                            bPromptAvgDurationMoveUp = false;
                                        if (!bPromptAvgDurationMoveUp)
                                        {
                                            if (promptDown >= 1)
                                                bPromptAvgDurationMoveDown = false;
                                            if (TempRules.pctAvgDurationMoveDown.iScoreRequired > 0)
                                            {
                                                bPromptAvgDurationMoveDown = ValidateUp(oSession.StudentId, avgDurationId, TempRules.pctAvgDurationMoveDown.iScoreRequired, reqSess,
                                                    TempRules.pctAvgDurationMoveDown.iTotalCorrectInstance, TempRules.pctAvgDurationMoveDown.bConsequetiveIndex, status);

                                                bRuleStatusIOA = oDisc.checkConditionIOA(bPromptMoveDownIOA, bIOA);
                                                bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bPromptMoveDownMultiTecher, bMultyTchr);
                                                if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                {
                                                    if (bPromptAvgDurationMoveDown)
                                                    {
                                                        if (sCurrentPrompt != LessonpromptUsed[0])
                                                        {
                                                            int iPromptIndex = DiscreetTrial.Model.PromptIndex(LessonpromptUsed, sCurrentPrompt);
                                                            if (iPromptIndex > 0)
                                                            {
                                                                sNextLessonPrompt = LessonpromptUsed[iPromptIndex - 1];
                                                                bPromptMoveBack = true;
                                                                bAvgDurationMoveDown = false;
                                                                bAvgDurationMoveUp = false;
                                                            }
                                                            else
                                                                bPromptAvgDurationMoveDown = false;
                                                        }
                                                        else
                                                            bPromptAvgDurationMoveDown = false;
                                                    }

                                                }
                                            }
                                        }
                                        else
                                            bPromptAvgDurationMoveDown = false;

                                        if (!bPromptAvgDurationMoveUp && !bPromptAvgDurationMoveDown)
                                        {
                                            TempRules = GetSetRules(oTemp.TemplateId, iColId);

                                            if (TempRules.pctAvgDurationMoveUp.iScoreRequired > 0)
                                            {
                                                bAvgDurationMoveUp = ValidateDown(oSession.StudentId, avgDurationId, TempRules.pctAvgDurationMoveUp.iScoreRequired, reqSess,
                                                    TempRules.pctAvgDurationMoveUp.iTotalCorrectInstance, TempRules.pctAvgDurationMoveUp.bConsequetiveIndex, status);
                                                int setcount = TrialLists.totalSet;

                                                bRuleStatusIOA = oDisc.checkConditionIOA(bSetMoveUpIOA, bIOA);
                                                bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bSetMoveUpMultiTecher, bMultyTchr);
                                                if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                {

                                                    if (bAvgDurationMoveUp)
                                                    {
                                                        if (oDS.CrntSetNbr < setcount)
                                                            nextSet = oDS.CrntSetNbr + 1;
                                                        if (oDS.CrntSetNbr == setcount)
                                                        {
                                                            nextSet = setcount;
                                                            CompletionStatusSet = "COMPLETED";
                                                        }
                                                        if (CompletionStatusSet == "COMPLETED")
                                                        {
                                                            bSetCompleted = true;
                                                        }
                                                        else
                                                        {
                                                            bSetCompleted = false;
                                                        }
                                                        if (bSetMoveUp && bAvgDurationMoveUp)
                                                        {
                                                            bSetMoveUp = true;
                                                            GlobalSetMoveUp = true;
                                                        }
                                                    }
                                                }



                                            }
                                            if (TempRules.pctAvgDurationMoveDown.iScoreRequired > 0)
                                            {
                                                bAvgDurationMoveDown = ValidateUp(oSession.StudentId, avgDurationId, TempRules.pctAvgDurationMoveDown.iScoreRequired, reqSess,
                                                    TempRules.pctAvgDurationMoveDown.iTotalCorrectInstance, TempRules.pctAvgDurationMoveDown.bConsequetiveIndex, status);
                                                int setcount = TrialLists.totalSet;

                                                bRuleStatusIOA = oDisc.checkConditionIOA(bSetMoveDownIOA, bIOA);
                                                bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bSetMoveDownMultiTecher, bMultyTchr);
                                                if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                {

                                                    if (bAvgDurationMoveDown)
                                                    {
                                                        if (oDS.CrntSetNbr <= setcount)
                                                            nextSet = oDS.CrntSetNbr - 1;
                                                        if (oDS.CrntSetNbr == 1)
                                                            nextSet = 1;
                                                        if (bSetMoveBack && bAvgDurationMoveDown)
                                                        {
                                                            bSetMoveBack = true;
                                                            GlobalSetMoveBack = true;
                                                        }
                                                    }
                                                }

                                            }

                                        }
                                    }
                                    FreqDurTextFlag = true;
                                }
                                TempRules = GetPromptRules(oTemp.TemplateId, iColId);
                                if (TempRules.pctTotalDurationMoveUp.iScoreRequired == 0 || TempRules.pctTotalDurationMoveDown.iScoreRequired == 0)
                                {
                                    freqdureloop++;
                                    bool status = true;
                                    CompletionStatusSet = "";
                                    TempRules = GetSetRules(oTemp.TemplateId, iColId);
                                    avgDurationId = Convert.ToInt32(ViewState["avgDurationId"]);
                                    totDuraionId = Convert.ToInt32(ViewState["totDuraionId"]);
                                    if (TempRules.pctTotalDurationMoveUp.iScoreRequired > 0)
                                    {
                                        CompletionStatusSet = "";
                                        bTotDurationMoveUp = ValidateDown(oSession.StudentId, totDuraionId, TempRules.pctTotalDurationMoveUp.iScoreRequired, reqSess,
                                            TempRules.pctTotalDurationMoveUp.iTotalCorrectInstance, TempRules.pctTotalDurationMoveUp.bConsequetiveIndex, status);
                                        int setcount = TrialLists.totalSet;

                                        bRuleStatusIOA = oDisc.checkConditionIOA(bTotalDurationMoveUpbIOAReqd, bIOA);
                                        bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bTotalDurationMoveUpbMultiTchr, bMultyTchr);
                                        if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                        {

                                            if (bTotDurationMoveUp)
                                            {
                                                if (oDS.CrntSetNbr < setcount)
                                                    nextSet = oDS.CrntSetNbr + 1;
                                                if (oDS.CrntSetNbr == setcount)
                                                {
                                                    nextSet = setcount;
                                                    CompletionStatusSet = "COMPLETED";
                                                }
                                                if (CompletionStatusSet == "COMPLETED")
                                                {
                                                    bSetCompleted = true;
                                                }
                                                else
                                                {
                                                    bSetCompleted = false;
                                                }
                                                if (bSetMoveUp && bTotDurationMoveUp)
                                                {
                                                    bSetMoveUp = true;
                                                    GlobalSetMoveUp = true;
                                                }
                                            }
                                        }


                                    }
                                    if (TempRules.pctTotalDurationMoveDown.iScoreRequired > 0)
                                    {
                                        bTotDurationMoveDown = ValidateUp(oSession.StudentId, totDuraionId, TempRules.pctTotalDurationMoveDown.iScoreRequired, reqSess,
                                            TempRules.pctTotalDurationMoveDown.iTotalCorrectInstance, TempRules.pctTotalDurationMoveDown.bConsequetiveIndex, status);
                                        int setcount = TrialLists.totalSet;

                                        bRuleStatusIOA = oDisc.checkConditionIOA(bTotalDurationMoveDownbIOAReqd, bIOA);
                                        bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bTotalDurationMoveDownbMultiTchr, bMultyTchr);
                                        if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                        {

                                            if (bTotDurationMoveDown)
                                            {
                                                if (oDS.CrntSetNbr <= setcount)
                                                    nextSet = oDS.CrntSetNbr - 1;
                                                if (oDS.CrntSetNbr == 1)
                                                    nextSet = 1;
                                                if (bSetMoveBack && bTotDurationMoveDown)
                                                {
                                                    bSetMoveBack = true;
                                                    GlobalSetMoveBack = true;
                                                }
                                            }
                                        }




                                    }

                                    FreqDurTextFlag = true;
                                }
                                else
                                {
                                    freqdureloop++;
                                    bool status = true;
                                    CompletionStatusSet = "";
                                    avgDurationId = Convert.ToInt32(ViewState["avgDurationId"]);
                                    totDuraionId = Convert.ToInt32(ViewState["totDuraionId"]);
                                    TempRules = GetPromptRules(oTemp.TemplateId, iColId);

                                    if (TempRules.pctTotalDurationMoveUp.iTotalCorrectInstance > 0)
                                    {
                                        if (promptUp >= 1)
                                            bPromptTotDurationMoveUp = false;
                                        if (TempRules.pctTotalDurationMoveUp.iScoreRequired > 0)
                                        {
                                            bPromptTotDurationMoveUp = ValidateDown(oSession.StudentId, totDuraionId, TempRules.pctTotalDurationMoveUp.iScoreRequired, reqSess,
                                                TempRules.pctTotalDurationMoveUp.iTotalCorrectInstance, TempRules.pctTotalDurationMoveUp.bConsequetiveIndex, status);

                                            bRuleStatusIOA = oDisc.checkConditionIOA(bPromptMoveUpIOA, bIOA);
                                            bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bPromptMoveUpMultiTecher, bMultyTchr);
                                            if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                            {

                                                if (bPromptTotDurationMoveUp)
                                                {
                                                    if (sCurrentPrompt != LessonpromptUsed[LessonpromptUsed.Length - 1])
                                                    {
                                                        int iPromptIndex = DiscreetTrial.Model.PromptIndex(LessonpromptUsed, sCurrentPrompt);
                                                        if (iPromptIndex < LessonpromptUsed.Length)
                                                        {
                                                            sNextLessonPrompt = LessonpromptUsed[iPromptIndex + 1];
                                                            bPromptMoveUp = true;
                                                            bTotDurationMoveUp = false;
                                                            bTotDurationMoveDown = false;
                                                        }
                                                        else
                                                            bPromptTotDurationMoveUp = false;
                                                    }
                                                    else
                                                        bPromptTotDurationMoveUp = false;
                                                }
                                            }
                                        }
                                        else
                                            bPromptTotDurationMoveUp = false;
                                        if (!bPromptTotDurationMoveUp)
                                        {
                                            if (promptDown >= 1)
                                                bPromptTotDurationMoveDown = false;
                                            if (TempRules.pctTotalDurationMoveDown.iScoreRequired > 0)
                                            {
                                                bPromptTotDurationMoveDown = ValidateUp(oSession.StudentId, totDuraionId, TempRules.pctTotalDurationMoveDown.iScoreRequired, reqSess,
                                                    TempRules.pctTotalDurationMoveDown.iTotalCorrectInstance, TempRules.pctTotalDurationMoveDown.bConsequetiveIndex, status);

                                                bRuleStatusIOA = oDisc.checkConditionIOA(bPromptMoveDownIOA, bIOA);
                                                bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bPromptMoveDownMultiTecher, bMultyTchr);
                                                if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                {

                                                    if (bPromptTotDurationMoveDown)
                                                    {
                                                        if (sCurrentPrompt != LessonpromptUsed[0])
                                                        {
                                                            int iPromptIndex = DiscreetTrial.Model.PromptIndex(LessonpromptUsed, sCurrentPrompt);
                                                            if (iPromptIndex > 0)
                                                            {
                                                                sNextLessonPrompt = LessonpromptUsed[iPromptIndex - 1];
                                                                bPromptMoveBack = true;
                                                                bTotDurationMoveDown = false;
                                                                bTotDurationMoveUp = false;
                                                            }
                                                            else
                                                                bPromptTotDurationMoveDown = false;
                                                        }
                                                        else
                                                            bPromptTotDurationMoveDown = false;
                                                    }

                                                }
                                            }
                                        }
                                        else
                                            bPromptTotDurationMoveDown = false;
                                        //total duration


                                        if (!bPromptTotDurationMoveUp && !bPromptTotDurationMoveDown)
                                        {
                                            TempRules = GetSetRules(oTemp.TemplateId, iColId);

                                            if (TempRules.pctTotalDurationMoveUp.iScoreRequired > 0)
                                            {
                                                CompletionStatusSet = "";
                                                bTotDurationMoveUp = ValidateDown(oSession.StudentId, totDuraionId, TempRules.pctTotalDurationMoveUp.iScoreRequired, reqSess,
                                                    TempRules.pctTotalDurationMoveUp.iTotalCorrectInstance, TempRules.pctTotalDurationMoveUp.bConsequetiveIndex, status);
                                                int setcount = TrialLists.totalSet;

                                                bRuleStatusIOA = oDisc.checkConditionIOA(bSetMoveUpIOA, bIOA);
                                                bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bSetMoveUpMultiTecher, bMultyTchr);
                                                if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                {

                                                    if (bTotDurationMoveUp)
                                                    {
                                                        if (oDS.CrntSetNbr < setcount)
                                                            nextSet = oDS.CrntSetNbr + 1;
                                                        if (oDS.CrntSetNbr == setcount)
                                                        {
                                                            nextSet = setcount;
                                                            CompletionStatusSet = "COMPLETED";
                                                        }
                                                        if (CompletionStatusSet == "COMPLETED")
                                                        {
                                                            bSetCompleted = true;
                                                        }
                                                        else
                                                        {
                                                            bSetCompleted = false;
                                                        }
                                                        if (bSetMoveUp && bTotDurationMoveUp)
                                                        {
                                                            bSetMoveUp = true;
                                                            GlobalSetMoveUp = true;
                                                        }
                                                    }
                                                }


                                            }
                                            if (TempRules.pctTotalDurationMoveDown.iScoreRequired > 0)
                                            {
                                                bTotDurationMoveDown = ValidateUp(oSession.StudentId, totDuraionId, TempRules.pctTotalDurationMoveDown.iScoreRequired, reqSess,
                                                    TempRules.pctTotalDurationMoveDown.iTotalCorrectInstance, TempRules.pctTotalDurationMoveDown.bConsequetiveIndex, status);
                                                int setcount = TrialLists.totalSet;

                                                bRuleStatusIOA = oDisc.checkConditionIOA(bSetMoveDownIOA, bIOA);
                                                bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bSetMoveDownMultiTecher, bMultyTchr);
                                                if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                {

                                                    if (bTotDurationMoveDown)
                                                    {
                                                        if (oDS.CrntSetNbr <= setcount)
                                                            nextSet = oDS.CrntSetNbr - 1;
                                                        if (oDS.CrntSetNbr == 1)
                                                            nextSet = 1;
                                                        if (bSetMoveBack && bTotDurationMoveDown)
                                                        {
                                                            bSetMoveBack = true;
                                                            GlobalSetMoveBack = true;
                                                        }
                                                    }
                                                }
                                            }
                                        }

                                    }
                                    FreqDurTextFlag = true;
                                }



                            }
                            #endregion
                            //Code added for List 5 Task #9 16-feb-2021 change Moveup/down Criteria for Frequncy and Duration END--
                        }
                        #endregion
                        #region frequency
                        else if (dr["ColTypeCd"].ToString() == "Frequency")
                        {
                            int colId = Convert.ToInt32(dr["DSTempSetColId"]);
                            string selqry1 = "select Moveupstat from dstempsetcol DsCol inner join DSTempHdr Hdr on Hdr.DSTempHdrId=DsCol.DSTempHdrId where dsCol.DSTempHdrId=" + oTemp.TemplateId + " And DSTempSetColId= " + colId;
                            object stat = oData.FetchValue(selqry1);
                            if (stat != null)
                                MoveUpstat = Convert.ToInt16(stat);
                            #region MoveUp in Less Than criteria - Default
                            if (MoveUpstat == 1)
                            {
                                TempRules = GetPromptRules(oTemp.TemplateId, iColId);
                                if (TempRules.pctFrequencyMoveUp.iScoreRequired == 0 || TempRules.pctFrequencyMoveDown.iScoreRequired == 0)
                                {
                                    freqdureloop++;
                                    bool status = true;
                                    CompletionStatusSet = "";
                                    TempRules = GetSetRules(oTemp.TemplateId, iColId);
                                    freqId = Convert.ToInt32(ViewState["freqId"]);
                                    if (TempRules.pctFrequencyMoveUp.iScoreRequired > 0)
                                    {
                                        bFrequencyMoveUp = ValidateUp(oSession.StudentId, freqId, TempRules.pctFrequencyMoveUp.iScoreRequired, reqSess,
                                            TempRules.pctFrequencyMoveUp.iTotalCorrectInstance, TempRules.pctFrequencyMoveUp.bConsequetiveIndex, status);
                                        int setcount = TrialLists.totalSet;

                                        bRuleStatusIOA = oDisc.checkConditionIOA(bFrequencyMoveUpbIOAReqd, bIOA);
                                        bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bFrequencyMoveUpbMultiTchr, bMultyTchr);
                                        if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                        {

                                            if (bFrequencyMoveUp)
                                            {

                                                if (oDS.CrntSetNbr < setcount)
                                                    nextSet = oDS.CrntSetNbr + 1;
                                                if (oDS.CrntSetNbr == setcount)
                                                {
                                                    nextSet = setcount;
                                                    CompletionStatusSet = "COMPLETED";
                                                }
                                                if (bSetMoveUp && bFrequencyMoveUp)
                                                {
                                                    bSetMoveUp = true;
                                                    GlobalSetMoveUp = true;
                                                }
                                            }
                                        }
                                    }
                                    if (TempRules.pctFrequencyMoveDown.iScoreRequired > 0)
                                    {
                                        bFrequencyMoveDown = ValidateDown(oSession.StudentId, freqId, TempRules.pctFrequencyMoveDown.iScoreRequired, reqSess,
                                            TempRules.pctFrequencyMoveDown.iTotalCorrectInstance, TempRules.pctFrequencyMoveDown.bConsequetiveIndex, status);
                                        int setcount = TrialLists.totalSet;

                                        bRuleStatusIOA = oDisc.checkConditionIOA(bFrequencyMoveDownbIOAReqd, bIOA);
                                        bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bFrequencyMoveDownbMultiTchr, bMultyTchr);
                                        if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                        {

                                            if (bFrequencyMoveDown)
                                            {
                                                if (oDS.CrntSetNbr <= setcount)
                                                    nextSet = oDS.CrntSetNbr - 1;
                                                if (oDS.CrntSetNbr == 1)
                                                    nextSet = 1;
                                                if (bSetMoveBack && bFrequencyMoveDown)
                                                {
                                                    bSetMoveBack = true;
                                                    GlobalSetMoveBack = true;
                                                }
                                            }
                                        }
                                    }
                                    FreqDurTextFlag = true;


                                }

                                else
                                {
                                    freqdureloop++;
                                    bool status = true;
                                    CompletionStatusSet = "";
                                    freqId = Convert.ToInt32(ViewState["freqId"]);
                                    //for prompt move
                                    TempRules = GetPromptRules(oTemp.TemplateId, iColId);
                                    if (promptUp >= 1)
                                        bPromptFrequencyMoveUp = false;
                                    if (TempRules.pctFrequencyMoveUp.iScoreRequired > 0)
                                    {
                                        bPromptFrequencyMoveUp = ValidateUp(oSession.StudentId, freqId, TempRules.pctFrequencyMoveUp.iScoreRequired, reqSess,
                                            TempRules.pctFrequencyMoveUp.iTotalCorrectInstance, TempRules.pctFrequencyMoveUp.bConsequetiveIndex, status);

                                        bRuleStatusIOA = oDisc.checkConditionIOA(bPromptFrequencyMoveUpbIOAReqd, bIOA);
                                        bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bPromptFrequencyMoveUpbMultiTchr, bMultyTchr);
                                        if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                        {

                                            if (bPromptFrequencyMoveUp)
                                            {
                                                if (sCurrentPrompt != LessonpromptUsed[LessonpromptUsed.Length - 1])
                                                {
                                                    int iPromptIndex = DiscreetTrial.Model.PromptIndex(LessonpromptUsed, sCurrentPrompt);
                                                    if (iPromptIndex < LessonpromptUsed.Length)
                                                    {
                                                        sNextLessonPrompt = LessonpromptUsed[iPromptIndex + 1];
                                                        bPromptMoveUp = true;
                                                        bFrequencyMoveUp = false;
                                                        bFrequencyMoveDown = false;
                                                    }
                                                    else
                                                        bPromptFrequencyMoveUp = false;
                                                }
                                                else
                                                    bPromptFrequencyMoveUp = false;
                                            }
                                        }
                                    }
                                    else
                                        bPromptFrequencyMoveUp = false;
                                    if (!bPromptFrequencyMoveUp)
                                    {
                                        if (promptDown >= 1)
                                            bPromptFrequencyMoveDown = false;
                                        if (TempRules.pctFrequencyMoveDown.iScoreRequired > 0)
                                        {
                                            bPromptFrequencyMoveDown = ValidateDown(oSession.StudentId, freqId, TempRules.pctFrequencyMoveDown.iScoreRequired, reqSess,
                                                TempRules.pctFrequencyMoveDown.iTotalCorrectInstance, TempRules.pctFrequencyMoveDown.bConsequetiveIndex, status);

                                            bRuleStatusIOA = oDisc.checkConditionIOA(bPromptFrequencyMoveDownbIOAReqd, bIOA);
                                            bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bPromptFrequencyMoveDownbMultiTchr, bMultyTchr);
                                            if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                            {
                                                if (bPromptFrequencyMoveDown)
                                                {
                                                    if (sCurrentPrompt != LessonpromptUsed[0])
                                                    {
                                                        int iPromptIndex = DiscreetTrial.Model.PromptIndex(LessonpromptUsed, sCurrentPrompt);
                                                        if (iPromptIndex > 0)
                                                        {
                                                            sNextLessonPrompt = LessonpromptUsed[iPromptIndex - 1];
                                                            bPromptMoveBack = true;
                                                            bFrequencyMoveDown = false;
                                                            bFrequencyMoveUp = false;
                                                        }
                                                        else
                                                            bPromptFrequencyMoveDown = false;
                                                    }
                                                    else
                                                        bPromptFrequencyMoveDown = false;
                                                }

                                            }
                                        }
                                    }
                                    else
                                        bPromptFrequencyMoveDown = false;
                                    //end prompt section
                                    if (!bPromptFrequencyMoveUp && !bPromptFrequencyMoveDown)
                                    {
                                        TempRules = GetSetRules(oTemp.TemplateId, iColId);

                                        if (TempRules.pctFrequencyMoveUp.iScoreRequired > 0)
                                        {
                                            bFrequencyMoveUp = ValidateUp(oSession.StudentId, freqId, TempRules.pctFrequencyMoveUp.iScoreRequired, reqSess,
                                                TempRules.pctFrequencyMoveUp.iTotalCorrectInstance, TempRules.pctFrequencyMoveUp.bConsequetiveIndex, status);
                                            int setcount = TrialLists.totalSet;

                                            bRuleStatusIOA = oDisc.checkConditionIOA(bFrequencyMoveUpbIOAReqd, bIOA);
                                            bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bFrequencyMoveUpbMultiTchr, bMultyTchr);
                                            if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                            {

                                                if (bFrequencyMoveUp)
                                                {

                                                    if (oDS.CrntSetNbr < setcount)
                                                        nextSet = oDS.CrntSetNbr + 1;
                                                    if (oDS.CrntSetNbr == setcount)
                                                    {
                                                        nextSet = setcount;
                                                        CompletionStatusSet = "COMPLETED";
                                                    }
                                                    if (bSetMoveUp && bFrequencyMoveUp)
                                                    {
                                                        bSetMoveUp = true;
                                                        GlobalSetMoveUp = true;
                                                    }
                                                }
                                            }
                                        }
                                        if (TempRules.pctFrequencyMoveDown.iScoreRequired > 0)
                                        {
                                            bFrequencyMoveDown = ValidateDown(oSession.StudentId, freqId, TempRules.pctFrequencyMoveDown.iScoreRequired, reqSess,
                                                TempRules.pctFrequencyMoveDown.iTotalCorrectInstance, TempRules.pctFrequencyMoveDown.bConsequetiveIndex, status);
                                            int setcount = TrialLists.totalSet;

                                            bRuleStatusIOA = oDisc.checkConditionIOA(bFrequencyMoveDownbIOAReqd, bIOA);
                                            bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bFrequencyMoveDownbMultiTchr, bMultyTchr);
                                            if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                            {

                                                if (bFrequencyMoveDown)
                                                {
                                                    if (oDS.CrntSetNbr <= setcount)
                                                        nextSet = oDS.CrntSetNbr - 1;
                                                    if (oDS.CrntSetNbr == 1)
                                                        nextSet = 1;
                                                    if (bSetMoveBack && bFrequencyMoveDown)
                                                    {
                                                        bSetMoveBack = true;
                                                        GlobalSetMoveBack = true;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    FreqDurTextFlag = true;

                                }
                            }
                            #endregion
                            //Code added for List 5 Task #9 16-feb-2021 change Moveup/down Criteria for Frequncy and Duration START--
                            #region MoveUp in More Than Criteria
                            else if (MoveUpstat == 0)
                            {
                                TempRules = GetPromptRules(oTemp.TemplateId, iColId);
                                if (TempRules.pctFrequencyMoveUp.iScoreRequired == 0 || TempRules.pctFrequencyMoveDown.iScoreRequired == 0)
                                {
                                    freqdureloop++;
                                    bool status = true;
                                    CompletionStatusSet = "";
                                    TempRules = GetSetRules(oTemp.TemplateId, iColId);
                                    freqId = Convert.ToInt32(ViewState["freqId"]);
                                    if (TempRules.pctFrequencyMoveUp.iScoreRequired > 0)
                                    {
                                        bFrequencyMoveUp = ValidateDown(oSession.StudentId, freqId, TempRules.pctFrequencyMoveUp.iScoreRequired, reqSess,
                                            TempRules.pctFrequencyMoveUp.iTotalCorrectInstance, TempRules.pctFrequencyMoveUp.bConsequetiveIndex, status);
                                        int setcount = TrialLists.totalSet;

                                        bRuleStatusIOA = oDisc.checkConditionIOA(bFrequencyMoveUpbIOAReqd, bIOA);
                                        bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bFrequencyMoveUpbMultiTchr, bMultyTchr);
                                        if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                        {

                                            if (bFrequencyMoveUp)
                                            {

                                                if (oDS.CrntSetNbr < setcount)
                                                    nextSet = oDS.CrntSetNbr + 1;
                                                if (oDS.CrntSetNbr == setcount)
                                                {
                                                    nextSet = setcount;
                                                    CompletionStatusSet = "COMPLETED";
                                                }
                                                if (bSetMoveUp && bFrequencyMoveUp)
                                                {
                                                    bSetMoveUp = true;
                                                    GlobalSetMoveUp = true;
                                                }
                                            }
                                        }
                                    }
                                    if (TempRules.pctFrequencyMoveDown.iScoreRequired > 0)
                                    {
                                        bFrequencyMoveDown = ValidateUp(oSession.StudentId, freqId, TempRules.pctFrequencyMoveDown.iScoreRequired, reqSess,
                                            TempRules.pctFrequencyMoveDown.iTotalCorrectInstance, TempRules.pctFrequencyMoveDown.bConsequetiveIndex, status);
                                        int setcount = TrialLists.totalSet;

                                        bRuleStatusIOA = oDisc.checkConditionIOA(bFrequencyMoveDownbIOAReqd, bIOA);
                                        bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bFrequencyMoveDownbMultiTchr, bMultyTchr);
                                        if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                        {

                                            if (bFrequencyMoveDown)
                                            {
                                                if (oDS.CrntSetNbr <= setcount)
                                                    nextSet = oDS.CrntSetNbr - 1;
                                                if (oDS.CrntSetNbr == 1)
                                                    nextSet = 1;
                                                if (bSetMoveBack && bFrequencyMoveDown)
                                                {
                                                    bSetMoveBack = true;
                                                    GlobalSetMoveBack = true;
                                                }
                                            }
                                        }
                                    }
                                    FreqDurTextFlag = true;


                                }

                                else
                                {
                                    freqdureloop++;
                                    bool status = true;
                                    CompletionStatusSet = "";
                                    freqId = Convert.ToInt32(ViewState["freqId"]);
                                    //for prompt move
                                    TempRules = GetPromptRules(oTemp.TemplateId, iColId);
                                    if (promptUp >= 1)
                                        bPromptFrequencyMoveUp = false;
                                    if (TempRules.pctFrequencyMoveUp.iScoreRequired > 0)
                                    {
                                        bPromptFrequencyMoveUp = ValidateDown(oSession.StudentId, freqId, TempRules.pctFrequencyMoveUp.iScoreRequired, reqSess,
                                            TempRules.pctFrequencyMoveUp.iTotalCorrectInstance, TempRules.pctFrequencyMoveUp.bConsequetiveIndex, status);

                                        bRuleStatusIOA = oDisc.checkConditionIOA(bPromptFrequencyMoveUpbIOAReqd, bIOA);
                                        bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bPromptFrequencyMoveUpbMultiTchr, bMultyTchr);
                                        if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                        {

                                            if (bPromptFrequencyMoveUp)
                                            {
                                                if (sCurrentPrompt != LessonpromptUsed[LessonpromptUsed.Length - 1])
                                                {
                                                    int iPromptIndex = DiscreetTrial.Model.PromptIndex(LessonpromptUsed, sCurrentPrompt);
                                                    if (iPromptIndex < LessonpromptUsed.Length)
                                                    {
                                                        sNextLessonPrompt = LessonpromptUsed[iPromptIndex + 1];
                                                        bPromptMoveUp = true;
                                                        bFrequencyMoveUp = false;
                                                        bFrequencyMoveDown = false;
                                                    }
                                                    else
                                                        bPromptFrequencyMoveUp = false;
                                                }
                                                else
                                                    bPromptFrequencyMoveUp = false;
                                            }
                                        }
                                    }
                                    else
                                        bPromptFrequencyMoveUp = false;
                                    if (!bPromptFrequencyMoveUp)
                                    {
                                        if (promptDown >= 1)
                                            bPromptFrequencyMoveDown = false;
                                        if (TempRules.pctFrequencyMoveDown.iScoreRequired > 0)
                                        {
                                            bPromptFrequencyMoveDown = ValidateUp(oSession.StudentId, freqId, TempRules.pctFrequencyMoveDown.iScoreRequired, reqSess,
                                                TempRules.pctFrequencyMoveDown.iTotalCorrectInstance, TempRules.pctFrequencyMoveDown.bConsequetiveIndex, status);

                                            bRuleStatusIOA = oDisc.checkConditionIOA(bPromptFrequencyMoveDownbIOAReqd, bIOA);
                                            bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bPromptFrequencyMoveDownbMultiTchr, bMultyTchr);
                                            if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                            {
                                                if (bPromptFrequencyMoveDown)
                                                {
                                                    if (sCurrentPrompt != LessonpromptUsed[0])
                                                    {
                                                        int iPromptIndex = DiscreetTrial.Model.PromptIndex(LessonpromptUsed, sCurrentPrompt);
                                                        if (iPromptIndex > 0)
                                                        {
                                                            sNextLessonPrompt = LessonpromptUsed[iPromptIndex - 1];
                                                            bPromptMoveBack = true;
                                                            bFrequencyMoveDown = false;
                                                            bFrequencyMoveUp = false;
                                                        }
                                                        else
                                                            bPromptFrequencyMoveDown = false;
                                                    }
                                                    else
                                                        bPromptFrequencyMoveDown = false;
                                                }

                                            }
                                        }
                                    }
                                    else
                                        bPromptFrequencyMoveDown = false;
                                    //end prompt section
                                    if (!bPromptFrequencyMoveUp && !bPromptFrequencyMoveDown)
                                    {
                                        TempRules = GetSetRules(oTemp.TemplateId, iColId);

                                        if (TempRules.pctFrequencyMoveUp.iScoreRequired > 0)
                                        {
                                            bFrequencyMoveUp = ValidateDown(oSession.StudentId, freqId, TempRules.pctFrequencyMoveUp.iScoreRequired, reqSess,
                                                TempRules.pctFrequencyMoveUp.iTotalCorrectInstance, TempRules.pctFrequencyMoveUp.bConsequetiveIndex, status);
                                            int setcount = TrialLists.totalSet;

                                            bRuleStatusIOA = oDisc.checkConditionIOA(bFrequencyMoveUpbIOAReqd, bIOA);
                                            bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bFrequencyMoveUpbMultiTchr, bMultyTchr);
                                            if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                            {

                                                if (bFrequencyMoveUp)
                                                {

                                                    if (oDS.CrntSetNbr < setcount)
                                                        nextSet = oDS.CrntSetNbr + 1;
                                                    if (oDS.CrntSetNbr == setcount)
                                                    {
                                                        nextSet = setcount;
                                                        CompletionStatusSet = "COMPLETED";
                                                    }
                                                    if (bSetMoveUp && bFrequencyMoveUp)
                                                    {
                                                        bSetMoveUp = true;
                                                        GlobalSetMoveUp = true;
                                                    }
                                                }
                                            }
                                        }
                                        if (TempRules.pctFrequencyMoveDown.iScoreRequired > 0)
                                        {
                                            bFrequencyMoveDown = ValidateUp(oSession.StudentId, freqId, TempRules.pctFrequencyMoveDown.iScoreRequired, reqSess,
                                                TempRules.pctFrequencyMoveDown.iTotalCorrectInstance, TempRules.pctFrequencyMoveDown.bConsequetiveIndex, status);
                                            int setcount = TrialLists.totalSet;

                                            bRuleStatusIOA = oDisc.checkConditionIOA(bFrequencyMoveDownbIOAReqd, bIOA);
                                            bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bFrequencyMoveDownbMultiTchr, bMultyTchr);
                                            if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                            {

                                                if (bFrequencyMoveDown)
                                                {
                                                    if (oDS.CrntSetNbr <= setcount)
                                                        nextSet = oDS.CrntSetNbr - 1;
                                                    if (oDS.CrntSetNbr == 1)
                                                        nextSet = 1;
                                                    if (bSetMoveBack && bFrequencyMoveDown)
                                                    {
                                                        bSetMoveBack = true;
                                                        GlobalSetMoveBack = true;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    FreqDurTextFlag = true;

                                }
                            }
                            #endregion
                            //Code added for List 5 Task #9 16-feb-2021 change Moveup/down Criteria for Frequncy and Duration END--
                        }
                        #endregion
                        #region %independent of all steps
                        else if (dr["ColTypeCd"].ToString() == "Prompt" && colt2.ToString() == "true" && indtest)
                        {
                            TempRules = GetPromptRules(oTemp.TemplateId, iColId);
                            freqdureloop++;
                            bool status = true;
                            bool check = true;
                            bool check1 = true;
                            CompletionStatusSet = "";
                            IndeallId = Convert.ToInt32(ViewState["IndeallId"]);

                            //for prompt move
                            TempRules = GetPromptRules(oTemp.TemplateId, iColId);
                            if (promptUp >= 1)
                                bPromptIndallMoveUp = false;
                            if (TempRules.pctIndAllMoveUp.iScoreRequired > 0)
                            {
                                bPromptIndallMoveUp = ValidateUp1(oSession.StudentId, IndeallId, TempRules.pctIndAllMoveUp.iScoreRequired, reqSess,
                                    TempRules.pctIndAllMoveUp.iTotalCorrectInstance, TempRules.pctIndAllMoveUp.bConsequetiveIndex, status);

                                bRuleStatusIOA = oDisc.checkConditionIOA(bPromptIndallMoveUpbIOAReqd, bIOA);
                                bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bPromptIndallMoveUpbMultiTchr, bMultyTchr);
                                if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                {

                                    if (bPromptIndallMoveUp)
                                    {
                                        if (sCurrentPrompt != LessonpromptUsed[LessonpromptUsed.Length - 1])
                                        {
                                            int iPromptIndex = DiscreetTrial.Model.PromptIndex(LessonpromptUsed, sCurrentPrompt);
                                            if (iPromptIndex < LessonpromptUsed.Length)
                                            {
                                                sNextLessonPrompt = LessonpromptUsed[iPromptIndex + 1];
                                                bPromptMoveUp = true;
                                                bIndallMoveUp = false;
                                                bIndallMoveDown = false;
                                            }
                                            else
                                                bPromptIndallMoveUp = false;
                                        }
                                        else
                                            bPromptIndallMoveUp = false;
                                    }
                                }
                            }
                            else
                                bPromptIndallMoveUp = false;
                            int iPromptIndex1 = DiscreetTrial.Model.PromptIndex(LessonpromptUsed, sCurrentPrompt);
                            if (iPromptIndex1 > 0 || LessonpromptUsed.Length == 1)
                            {
                                check = false;
                            }
                            if (!bPromptIndallMoveUp)
                            {
                                if (promptDown >= 1)
                                    bPromptIndallMoveDown = false;
                                if (TempRules.pctIndAllMoveDown.iTotalCorrectInstance > 0)
                                {
                                    bPromptIndallMoveDown = ValidateDown1(oSession.StudentId, IndeallId, TempRules.pctIndAllMoveDown.iScoreRequired, reqSess,
                                        TempRules.pctIndAllMoveDown.iTotalCorrectInstance, TempRules.pctIndAllMoveDown.bConsequetiveIndex, status);

                                    bRuleStatusIOA = oDisc.checkConditionIOA(bPromptIndallMoveDownbIOAReqd, bIOA);
                                    bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bPromptIndallMoveDownbMultiTchr, bMultyTchr);
                                    if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                    {
                                        if (bPromptIndallMoveDown)
                                        {
                                            if (sCurrentPrompt != LessonpromptUsed[0])
                                            {
                                                int iPromptIndex = DiscreetTrial.Model.PromptIndex(LessonpromptUsed, sCurrentPrompt);
                                                if (iPromptIndex > 0)
                                                {
                                                    sNextLessonPrompt = LessonpromptUsed[iPromptIndex - 1];
                                                    bPromptMoveBack = true;
                                                    bIndallMoveDown = false;
                                                    bIndallMoveUp = false;
                                                }
                                                else
                                                    bPromptIndallMoveDown = false;
                                            }
                                            else
                                                bPromptIndallMoveDown = false;
                                        }

                                    }
                                }
                                else
                                {
                                    bPromptIndallMoveDown = false;
                                    check1 = false;
                                }
                            }
                            else
                                bPromptIndallMoveDown = false;
                            //end prompt section
                            // set Move up
                            if (!bPromptIndallMoveUp && !bPromptIndallMoveDown)
                            {
                                TempRules = GetSetRules(oTemp.TemplateId, iColId);

                                if (TempRules.pctIndAllMoveUp.iScoreRequired > 0 && !check)
                                {
                                    bIndallMoveUp = ValidateUp1(oSession.StudentId, IndeallId, TempRules.pctIndAllMoveUp.iScoreRequired, reqSess,
                                        TempRules.pctIndAllMoveUp.iTotalCorrectInstance, TempRules.pctIndAllMoveUp.bConsequetiveIndex, status);
                                    int setcount = TrialLists.totalSet;

                                    bRuleStatusIOA = oDisc.checkConditionIOA(bIndallMoveUpbIOAReqd, bIOA);
                                    bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bIndallMoveUpbMultiTchr, bMultyTchr);
                                    if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                    {

                                        if (bIndallMoveUp)
                                        {

                                            if (oDS.CrntSetNbr < setcount)
                                                nextSet = oDS.CrntSetNbr + 1;
                                            if (oDS.CrntSetNbr == setcount)
                                            {
                                                nextSet = setcount;
                                                CompletionStatusSet = "COMPLETED";
                                            }
                                            if (bSetMoveUp && bIndallMoveUp)
                                            {
                                                bSetMoveUp = true;
                                                GlobalSetMoveUp = true;
                                            }
                                            else
                                                bSetMoveUp = false;
                                        }
                                        else
                                            bSetMoveUp = false;
                                    }
                                }
                                if ((TempRules.pctIndAllMoveDown.iTotalCorrectInstance > 0 && check) || (TempRules.pctIndAllMoveDown.iTotalCorrectInstance > 0 && !check1))
                                {
                                    bIndallMoveDown = ValidateDown1(oSession.StudentId, IndeallId, TempRules.pctIndAllMoveDown.iScoreRequired, reqSess,
                                        TempRules.pctIndAllMoveDown.iTotalCorrectInstance, TempRules.pctIndAllMoveDown.bConsequetiveIndex, status);
                                    int setcount = TrialLists.totalSet;

                                    bRuleStatusIOA = oDisc.checkConditionIOA(bIndallMoveDownbIOAReqd, bIOA);
                                    bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bIndallMoveDownbMultiTchr, bMultyTchr);
                                    if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                    {

                                        if (bIndallMoveDown)
                                        {
                                            if (oDS.CrntSetNbr <= setcount)
                                                nextSet = oDS.CrntSetNbr - 1;
                                            if (oDS.CrntSetNbr == 1)
                                            {
                                                nextSet = 1;
                                                bSetMoveBack = false;
                                            }
                                            if (bSetMoveBack && bIndallMoveDown)
                                            {
                                                bSetMoveBack = true;
                                                GlobalSetMoveBack = true;
                                            }
                                            else
                                                bSetMoveBack = false;
                                        }
                                        else
                                            bSetMoveBack = false;
                                    }
                                }
                            }
                            FreqDurTextFlag = true;
                        }
                        #endregion
                        #region +/- %independent of all steps

                        else if (dr["ColTypeCd"].ToString() == "+/-" && colt2.ToString() == "true" && indtest)
                        {
                            TempRules = GetPromptRules(oTemp.TemplateId, iColId);
                            freqdureloop++;
                            bool status = true;
                            bool check = true;
                            bool check1 = true;
                            CompletionStatusSet = "";
                            IndeallId = Convert.ToInt32(ViewState["IndeallId"]);

                            //for prompt move
                            TempRules = GetPromptRules(oTemp.TemplateId, iColId);
                            if (promptUp >= 1)
                                bPromptIndallMoveUp = false;
                            if (TempRules.pctIndAllMoveUp.iScoreRequired > 0)
                            {
                                bPromptIndallMoveUp = ValidateUp1(oSession.StudentId, IndeallId, TempRules.pctIndAllMoveUp.iScoreRequired, reqSess,
                                    TempRules.pctIndAllMoveUp.iTotalCorrectInstance, TempRules.pctIndAllMoveUp.bConsequetiveIndex, status);

                                bRuleStatusIOA = oDisc.checkConditionIOA(bPromptIndallMoveUpbIOAReqd, bIOA);
                                bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bPromptIndallMoveUpbMultiTchr, bMultyTchr);
                                if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                {

                                    if (bPromptIndallMoveUp)
                                    {
                                        if (sCurrentLessonPrompt != LessonpromptUsed[LessonpromptUsed.Length - 1])
                                        {
                                            int iPromptIndex = DiscreetTrial.Model.PromptIndex(LessonpromptUsed, sCurrentLessonPrompt);
                                            if (iPromptIndex < LessonpromptUsed.Length)
                                            {
                                                sNextLessonPrompt = LessonpromptUsed[iPromptIndex + 1];
                                                bPromptMoveUp = true;
                                                bIndallMoveUp = false;
                                                bIndallMoveDown = false;
                                            }
                                            else
                                                bPromptIndallMoveUp = false;
                                        }
                                        else
                                            bPromptIndallMoveUp = false;
                                    }
                                }
                            }
                            else
                                bPromptIndallMoveUp = false;
                            int iPromptIndex1 = DiscreetTrial.Model.PromptIndex(LessonpromptUsed, sCurrentLessonPrompt);
                            if (iPromptIndex1 > 0 || LessonpromptUsed.Length == 1)
                            {
                                check = false;
                            }
                            if (!bPromptIndallMoveUp)
                            {
                                if (promptDown >= 1)
                                    bPromptIndallMoveDown = false;
                                if (TempRules.pctIndAllMoveDown.iTotalCorrectInstance > 0)
                                {
                                    bPromptIndallMoveDown = ValidateDown1(oSession.StudentId, IndeallId, TempRules.pctIndAllMoveDown.iScoreRequired, reqSess,
                                        TempRules.pctIndAllMoveDown.iTotalCorrectInstance, TempRules.pctIndAllMoveDown.bConsequetiveIndex, status);

                                    bRuleStatusIOA = oDisc.checkConditionIOA(bPromptIndallMoveDownbIOAReqd, bIOA);
                                    bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bPromptIndallMoveDownbMultiTchr, bMultyTchr);
                                    if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                    {
                                        if (bPromptIndallMoveDown)
                                        {
                                            if (sCurrentLessonPrompt != LessonpromptUsed[0])
                                            {
                                                int iPromptIndex = DiscreetTrial.Model.PromptIndex(LessonpromptUsed, sCurrentLessonPrompt);
                                                if (iPromptIndex > 0)
                                                {
                                                    sNextLessonPrompt = LessonpromptUsed[iPromptIndex - 1];
                                                    bPromptMoveBack = true;
                                                    bIndallMoveDown = false;
                                                    bIndallMoveUp = false;
                                                }
                                                else
                                                    bPromptIndallMoveDown = false;
                                            }
                                            else
                                                bPromptIndallMoveDown = false;
                                        }

                                    }
                                }
                                else
                                {
                                    bPromptIndallMoveDown = false;
                                    check1 = false;
                                }
                            }
                            else
                                bPromptIndallMoveDown = false;
                            //end prompt section
                            // set Move up
                            if (!bPromptIndallMoveUp && !bPromptIndallMoveDown)
                            {
                                TempRules = GetSetRules(oTemp.TemplateId, iColId);

                                if (TempRules.pctIndAllMoveUp.iScoreRequired > 0 && !check)
                                {
                                    bIndallMoveUp = ValidateUp1(oSession.StudentId, IndeallId, TempRules.pctIndAllMoveUp.iScoreRequired, reqSess,
                                        TempRules.pctIndAllMoveUp.iTotalCorrectInstance, TempRules.pctIndAllMoveUp.bConsequetiveIndex, status);
                                    int setcount = TrialLists.totalSet;

                                    bRuleStatusIOA = oDisc.checkConditionIOA(bIndallMoveUpbIOAReqd, bIOA);
                                    bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bIndallMoveUpbMultiTchr, bMultyTchr);
                                    if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                    {

                                        if (bIndallMoveUp)
                                        {

                                            if (oDS.CrntSetNbr < setcount)
                                                nextSet = oDS.CrntSetNbr + 1;
                                            if (oDS.CrntSetNbr == setcount)
                                            {
                                                nextSet = setcount;
                                                CompletionStatusSet = "COMPLETED";
                                            }
                                            if (bSetMoveUp && bIndallMoveUp)
                                            {
                                                bSetMoveUp = true;
                                                GlobalSetMoveUp = true;
                                            }
                                            else
                                                bSetMoveUp = false;
                                        }
                                        else
                                            bSetMoveUp = false;
                                    }
                                }
                                if ((TempRules.pctIndAllMoveDown.iTotalCorrectInstance > 0 && check) || (TempRules.pctIndAllMoveDown.iTotalCorrectInstance > 0 && !check1))
                                {
                                    bIndallMoveDown = ValidateDown1(oSession.StudentId, IndeallId, TempRules.pctIndAllMoveDown.iScoreRequired, reqSess,
                                        TempRules.pctIndAllMoveDown.iTotalCorrectInstance, TempRules.pctIndAllMoveDown.bConsequetiveIndex, status);
                                    int setcount = TrialLists.totalSet;

                                    bRuleStatusIOA = oDisc.checkConditionIOA(bIndallMoveDownbIOAReqd, bIOA);
                                    bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bIndallMoveDownbMultiTchr, bMultyTchr);
                                    if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                    {

                                        if (bIndallMoveDown)
                                        {
                                            if (oDS.CrntSetNbr <= setcount)
                                                nextSet = oDS.CrntSetNbr - 1;
                                            if (oDS.CrntSetNbr == 1)
                                            {
                                                nextSet = 1;
                                                bSetMoveBack = false;
                                            }
                                            if (bSetMoveBack && bIndallMoveDown)
                                            {
                                                bSetMoveBack = true;
                                                GlobalSetMoveBack = true;
                                            }
                                            else
                                                bSetMoveBack = false;
                                        }
                                        else
                                            bSetMoveBack = false;
                                    }
                                }
                            }
                            FreqDurTextFlag = true;
                        }
                        #endregion
                        else
                        {
                            discreteCols[sColName].SetInputData(sCurrentPrompt, TargetPrompt, iCurrentSetNbr.ToString(), TrialLists.totalSet.ToString(), TrialLists.arTrials);
                            sesResult[index] = DiscreetTrial.Model.Execute(discreteCols[sColName], bpromptColumn);
                            if (set_moveupCount > 0)
                            {
                                if (sesResult[index].MovedForwardSet && discreteCols[sColName].IsInfluencedBy(DiscreteMoveType.SetMoveUp))
                                {
                                    bSetMoveUp = sesResult[index].MovedForwardSet;
                                    if (bSetMoveUp == true)
                                    GlobalSetMoveUp = sesResult[index].MovedForwardSet;
                                    nextSet = sesResult[index].NextSet;
                                    CompletionStatusSet = sesResult[index].CompletionStatus;
                                    if (CompletionStatusSet == "COMPLETED")
                                    {
                                        bSetCompleted = true;
                                    }
                                    else
                                    {
                                        bSetCompleted = false;
                                    }
                                }
                            }
                            else
                                bSetMoveUp = false;

                            if (set_movedownCount > 0)
                            {

                                if (sesResult[index].MovedBackSet && discreteCols[sColName].IsInfluencedBy(DiscreteMoveType.SetMoveDown))
                                {
                                    if (iCurrentSetNbr > 1)
                                    {
                                        bSetMoveBack = sesResult[index].MovedBackSet;
                                        nextSet = sesResult[index].NextSet;
                                        if (bSetMoveBack)
                                            bSetCompleted = false;
                                    }
                                    else
                                    {
                                        bSetMoveBack = false;
                                    }


                                }
                            }
                            else
                                bSetMoveBack = false;




                            if (sesResult[index].MovedForwardPrompt && discreteCols[sColName].IsInfluencedBy(DiscreteMoveType.PromptMoveup))
                            {
                                bPromptMoveUp = true;
                                sNextLessonPrompt = sesResult[index].NextPrompt;
                                if (sesResult[index].NextPrompt == "+")
                                {
                                    if (LessonpromptUsedOther.Length > crntPrmtIndex + 1)
                                    {
                                        sNextLessonPrompt = LessonpromptUsedOther[crntPrmtIndex + 1];
                                        sesResult[index].CompletionStatus = "NOT COMPLETED";
                                    }
                                    else
                                        bPromptMoveUp = false;
                                }
                                //bSetMoveUp = sesResult[index].MovedForwardSet;
                                //bSetMoveBack = sesResult[index].MovedBackSet;
                            }
                            if (sesResult[index].MovedBackPrompt && discreteCols[sColName].IsInfluencedBy(DiscreteMoveType.PromptMoveDown))
                            {
                                bPromptMoveBack = true;
                                sNextLessonPrompt = sesResult[index].NextPrompt;
                                if (sesResult[index].NextPrompt == "+")
                                {
                                    if (crntPrmtIndex > 0)
                                    {
                                        sNextLessonPrompt = LessonpromptUsedOther[crntPrmtIndex - 1];
                                        sesResult[index].CompletionStatus = "NOT COMPLETED";
                                    }
                                    else
                                        bPromptMoveBack = false;
                                }
                                //bSetMoveUp = sesResult[index].MovedForwardSet;
                                //bSetMoveBack = sesResult[index].MovedBackSet;
                            }
                        }

                        loop++;
                    }
                    else
                    {
                        loop++;

                        //bSetMoveUp = false;
                        //bSetMoveBack = false;
                        //bPromptMoveUp = false;
                        //bPromptMoveBack = false;
                    }


                    ///-----------------------------------------------------------------------------------


                    if (bSetMoveUp && (bTotDurationMoveUp && bAvgDurationMoveUp && bFrequencyMoveUp))
                    {
                        //bSetMoveUp = true;
                        //GlobalSetMoveUp = true;
                        //bSetMoveBack = false;
                        if (CompletionStatusSet == "COMPLETED")
                        {
                            bSetCompleted = true;
                        }
                        else
                        {
                            bSetCompleted = false;
                        }
                    }
                    else
                        bSetMoveUp = false;


                    if (bSetMoveBack && (bTotDurationMoveDown && bAvgDurationMoveDown && bFrequencyMoveDown))
                    {
                        //bSetMoveUp = false;
                        //bSetMoveBack = true;
                        GlobalSetMoveBack = true;
                    }
                    else
                        bSetMoveBack = false;








                    ////----------------------------------------------------------------------------------




                    if (bPrompt == false && promptUsed.Length > 0)
                    {
                        promptUsed[0] = "0";
                    }
                    int iPrompt = 0;
                    string sEventAlertStatus = "";

                    //ash: set isColNA to true if the col is used is criteria and its score is NA
                    if (checkIfScoreIsNA(discreteCols[sColName].IsInfluencedBy(DiscreteMoveType.PromptMoveDown), iColId) == true || checkIfScoreIsNA(discreteCols[sColName].IsInfluencedBy(DiscreteMoveType.SetMoveDown), iColId) == true)
                    {
                        isColNA = true;
                    }

                    if (count == loop && isColNA == false)
                    {
                        oDisc = new DiscreteSession();

                        if (bPromtHirchy && (LessonTargetPrompt.Trim() != sCurrentLessonPrompt.Trim()))
                        {

                            bSetMoveUp = false;
                            bSetCompleted = false;
                        }
                        #region setmoveup
                        if (bSetMoveUp && GlobalSetMoveUp)
                        {
                            //CompletionStatusSet = CompletionStatus;
                            bSetMoveBack = false;
                            string sLPused = "";
                            if (LessonpromptUsed.Length == 0)
                                sLPused = "0";
                            else
                                sLPused = LessonpromptUsed[LessonpromptUsed.Length - 1];
                            if ((bPromtHirchy && LessonpromptUsed != null && sLessonPrompt == sLPused) || !bPromtHirchy)
                            {
                                bRuleStatusIOA = oDisc.checkConditionIOA(bSetMoveUpIOA, bIOA);
                                bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bSetMoveUpMultiTecher, bMultyTchr);

                                //bRuleStatusIOA = oDisc.checkConditionIOA(discreteInptData.IOARequired, bIOA);
                                //bRuleStatusMultiTchr = oDisc.checkConditionIOA(discreteInptData.MultiTeacherRequired, bMultyTchr);
                                if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                {
                                    if (nextSet == 0) { nextSet = 1; }
                                    else
                                    {
                                        if (bPrompt)
                                        {
                                            if (oDS.PromptProc != "NA")
                                            {
                                                if ((oDS.PromptProc == "Least-to-Most") || (oDS.PromptProc == "Graduated Guidance"))
                                                {
                                                    iPrompt = Convert.ToInt32(LessonpromptUsed[LessonpromptUsed.Length - 1]);
                                                    if (sesResult[0] != null)
                                                    {
                                                        sesResult[0].NextPrompt = iPrompt.ToString();
                                                    }
                                                }
                                                else
                                                {
                                                    iPrompt = Convert.ToInt32(LessonpromptUsed[0]);
                                                }
                                            }
                                        }
                                        else
                                        {
                                            if (LessonpromptUsed.Length > 0)
                                            {
                                                if (oDS.PromptProc != "NA")
                                                {
                                                    if ((oDS.PromptProc == "Least-to-Most") || (oDS.PromptProc == "Graduated Guidance"))
                                                    {
                                                        iPrompt = Convert.ToInt32(LessonpromptUsed[LessonpromptUsed.Length - 1]);
                                                        if (sesResult[0] != null)
                                                        {
                                                            sesResult[0].NextPrompt = iPrompt.ToString();
                                                        }
                                                    }
                                                    else
                                                    {
                                                        iPrompt = Convert.ToInt32(LessonpromptUsed[0]);
                                                    }
                                                }
                                            }
                                        }
                                        sEventType = "SET MOVEUP";

                                        if (sesResult[0] != null)
                                        {
                                            //if (sesResult[0].CompletionStatus == "COMPLETED")
                                            if (sesResult[0].CompletionStatus == "COMPLETED" || CompletionStatusSet == "COMPLETED")
                                            {
                                                oDisc.updateSetStatus(oSession.SchoolId, oSession.Classid, oSession.StudentId, oTemp.TemplateId, iCurrentSetId, Convert.ToInt32(LessonTargetPrompt), nextSet.ToString(), CompletionStatusSet, sEventType, iSessionNmbr, oSession.LoginId, sLessonPlanId);
                                            }
                                            else
                                            {
                                                oDisc.updateSetStatus(oSession.SchoolId, oSession.Classid, oSession.StudentId, oTemp.TemplateId, iCurrentSetId, iPrompt, nextSet.ToString(), CompletionStatusSet, sEventType, iSessionNmbr, oSession.LoginId, sLessonPlanId);
                                            }
                                        }
                                        else
                                        {
                                            if (FreqDurTextFlag == true)
                                            {
                                                if (CompletionStatusSet == "COMPLETED")
                                                {
                                                    oDisc.updateSetStatus(oSession.SchoolId, oSession.Classid, oSession.StudentId, oTemp.TemplateId, iCurrentSetId, Convert.ToInt32(LessonTargetPrompt), nextSet.ToString(), CompletionStatusSet, sEventType, iSessionNmbr, oSession.LoginId, sLessonPlanId);
                                                }
                                                else
                                                {
                                                    oDisc.updateSetStatus(oSession.SchoolId, oSession.Classid, oSession.StudentId, oTemp.TemplateId, iCurrentSetId, iPrompt, nextSet.ToString(), CompletionStatusSet, sEventType, iSessionNmbr, oSession.LoginId, sLessonPlanId);
                                                }
                                            }
                                        }



                                        bPromptMoveUp = false;
                                        //if (sesResult[0].CompletionStatus == "COMPLETED")
                                        //{
                                        //    oDisc.insertEventStatus(oSession.SchoolId, oSession.Classid, oSession.StudentId, oTemp.TemplateId, sesResult[0].CompletionStatus, sEventType, iSessionNmbr);
                                        //}                                        
                                    }
                                }
                                else
                                {
                                    //sesResult[0].CompletionStatus = "NOT COMPLETED";
                                    bSetCompleted = false;
                                    if (!bRuleStatusIOA)
                                    {
                                        // Function to reset rule type values in StdtEvent Table
                                        oDisc.resetEvntStatus(oSession.Classid, oSession.StudentId, oTemp.TemplateId);
                                        sEventAlertStatus = "IOAEvntStatus=true,Set_MoveUp=true";
                                        // Functionto Update rule Events values in StdtEvent Table
                                        oDisc.UpdateAlertEvent(oTemp.TemplateId, sEventAlertStatus);
                                    }
                                    if (!bRuleStatusMultiTchr)
                                    {
                                        // Functionto reset rule type values in StdtEvent Table
                                        oDisc.resetEvntStatus(oSession.Classid, oSession.StudentId, oTemp.TemplateId);
                                        sEventAlertStatus = "MultiTchrEvntStatus=true,Set_MoveUp=true";
                                        // Functionto Update rule Events values in StdtEvent Table
                                        oDisc.UpdateAlertEvent(oTemp.TemplateId, sEventType);
                                    }


                                }



                            }
                            else
                            {
                                bSetCompleted = false;
                            }

                            DisplayIOA_MTstatus(bRuleStatusIOA, bRuleStatusMultiTchr, oDS.CrntSet, bSetMoveUp, "Set");
                        }
                        #endregion
                        #region setmoveback
                        if (bSetMoveBack && GlobalSetMoveBack)
                        {
                            bRuleStatusIOA = oDisc.checkConditionIOA(bSetMoveDownIOA, bIOA);
                            bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bSetMoveDownMultiTecher, bMultyTchr);

                            //bRuleStatusIOA = oDisc.checkConditionIOA(discreteInptData.IOARequired, bIOA);
                            //bRuleStatusMultiTchr = oDisc.checkConditionIOA(discreteInptData.MultiTeacherRequired, bMultyTchr);
                            if (bRuleStatusIOA && bRuleStatusMultiTchr)
                            {
                                if (nextSet == 0) { nextSet = 1; }
                                else
                                {
                                    DataTable dtModificatn = GetModificationDetails("SET", oTemp.TemplateId);
                                    if (dtModificatn != null)
                                    {
                                        if (dtModificatn.Rows.Count > 0)
                                        {
                                            bool mod_flag = CheckSetModification(Convert.ToInt32(dtModificatn.Rows[0]["ModificationRule"].ToString()), oTemp.TemplateId, iCurrentSetId);

                                            if (mod_flag)
                                            {
                                                oData = new clsData();
                                                string selqry = "SELECT ISNULL(ModificationInd, 0) as ModificationInd FROM DSTempHdr WHERE DSTempHdrId=" + oTemp.TemplateId;
                                                object mod = oData.FetchValue(selqry);
                                                if (mod != null)
                                                {
                                                    if (Convert.ToBoolean(mod) != true)
                                                    {
                                                        string insqry = "INSERT INTO StdtSessEvent(SchoolId,ClassId,StudentId,DSTempHdrId,StdtSessEventType,EvntTs,SessionNbr,EventType)VALUES" +
                                                        "(" + oSession.SchoolId + "," + oSession.Classid + "," + oSession.StudentId + "," + oTemp.TemplateId + ",'MODIFICATION',GETDATE()," + iSessionNmbr + ",'EV')";
                                                        oData.Execute(insqry);

                                                        string updqry = "UPDATE DSTempHdr SET ModificationInd=1,ModifiedBy=" + oSession.LoginId + ",ModifiedOn=GETDATE() WHERE DSTempHdrId=" + oTemp.TemplateId;
                                                        oData.Execute(updqry);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    if ((bPrompt) || (LessonpromptUsed.Length > 0))
                                    {
                                        if (oDS.PromptProc != "NA")
                                        {
                                            if ((oDS.PromptProc == "Least-to-Most") || (oDS.PromptProc == "Graduated Guidance"))
                                            {
                                                iPrompt = Convert.ToInt32(LessonpromptUsed[LessonpromptUsed.Length - 1]);
                                                if (sesResult[0] != null)
                                                {
                                                    sesResult[0].NextPrompt = iPrompt.ToString();
                                                }
                                            }
                                            else
                                            {
                                                iPrompt = Convert.ToInt32(LessonpromptUsed[0]);
                                            }
                                        }
                                    }
                                    sEventType = "SET MOVEDOWN";
                                    if (sesResult[0] != null) //liju
                                        oDisc.updateSetStatus(oSession.SchoolId, oSession.Classid, oSession.StudentId, oTemp.TemplateId, iCurrentSetId, iPrompt, nextSet.ToString(), sesResult[0].CompletionStatus, sEventType, iSessionNmbr, oSession.LoginId, sLessonPlanId);
                                    else
                                    {
                                        if (FreqDurTextFlag)
                                        {
                                            oDisc.updateSetStatus(oSession.SchoolId, oSession.Classid, oSession.StudentId, oTemp.TemplateId, iCurrentSetId, iPrompt, nextSet.ToString(), CompletionStatusSet, sEventType, iSessionNmbr, oSession.LoginId, sLessonPlanId);
                                        }
                                    }
                                    bPromptMoveUp = false;
                                    //if (sesResult[0].CompletionStatus == "COMPLETED")
                                    //{
                                    //    oDisc.insertEventStatus(oSession.SchoolId, oSession.Classid, oSession.StudentId, oTemp.TemplateId, sesResult[0].CompletionStatus, sEventType, iSessionNmbr);
                                    //}
                                }
                            }
                            else
                            {
                                //sesResult[0].CompletionStatus = "NOT COMPLETED";
                                bSetCompleted = false;
                                if (!bRuleStatusIOA)
                                {
                                    // Functionto reset rule type values in StdtEvent Table
                                    oDisc.resetEvntStatus(oSession.Classid, oSession.StudentId, oTemp.TemplateId);
                                    sEventAlertStatus = "IOAEvntStatus=true,Set_MoveDown=true";
                                    // Functionto Update rule Events values in StdtEvent Table
                                    oDisc.UpdateAlertEvent(oTemp.TemplateId, sEventAlertStatus);
                                }
                                if (!bRuleStatusMultiTchr)
                                {
                                    // Functionto reset rule type values in StdtEvent Table
                                    oDisc.resetEvntStatus(oSession.Classid, oSession.StudentId, oTemp.TemplateId);
                                    sEventAlertStatus = "MultiTchrEvntStatus=true,Set_MoveDown=true";
                                    // Functionto Update rule Events values in StdtEvent Table
                                    oDisc.UpdateAlertEvent(oTemp.TemplateId, sEventType);
                                }

                            }

                            DisplayIOA_MTstatus(bRuleStatusIOA, bRuleStatusMultiTchr, oDS.CrntSet, bSetMoveBack, "Set");
                        }
                        #endregion
                        #region promptmoveup
                        if (bPromptMoveUp && bPrompt)
                        {
                            bRuleStatusIOA = oDisc.checkConditionIOA(bPromptMoveUpIOA, bIOA);
                            bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bPromptMoveUpMultiTecher, bMultyTchr);

                            //bRuleStatusIOA = oDisc.checkConditionIOA(discreteInptData.IOARequired, bIOA);
                            //bRuleStatusMultiTchr = oDisc.checkConditionIOA(discreteInptData.MultiTeacherRequired, bMultyTchr);
                            if (bRuleStatusIOA && bRuleStatusMultiTchr)
                            {
                                sEventType = "PROMPT MOVEUP";
                                if (sCurrentLessonPrompt == sNextLessonPrompt)
                                { }
                                else
                                    if (sesResult[0] != null)
                                        oDisc.updatePromptStatus(oSession.SchoolId, oSession.Classid, oSession.StudentId, oTemp.TemplateId, sNextLessonPrompt, sesResult[0].CompletionStatus, sEventType, iSessionNmbr, oSession.LoginId, Convert.ToInt32(sCurrentLessonPrompt), iCurrentSetId, iCurrentStep, sLessonPlanId);
                                    else
                                    {
                                        if (FreqDurTextFlag)
                                        {
                                            oDisc.updatePromptStatus(oSession.SchoolId, oSession.Classid, oSession.StudentId, oTemp.TemplateId, sNextLessonPrompt, CompletionStatusSet, sEventType, iSessionNmbr, oSession.LoginId, Convert.ToInt32(sCurrentLessonPrompt), iCurrentSetId, iCurrentStep, sLessonPlanId);
                                        }
                                    }
                                //if (sesResult[0].CompletionStatus == "COMPLETED")
                                //{
                                //    oDisc.insertEventStatus(oSession.SchoolId, oSession.Classid, oSession.StudentId, oTemp.TemplateId, sesResult[0].CompletionStatus, sEventType, iSessionNmbr);
                                //}
                            }
                            else
                            {
                                //sesResult[0].CompletionStatus = "NOT COMPLETED";
                                bSetCompleted = false;
                                if (!bRuleStatusIOA)
                                {
                                    // Functionto reset rule type values in StdtEvent Table
                                    oDisc.resetEvntStatus(oSession.Classid, oSession.StudentId, oTemp.TemplateId);
                                    sEventAlertStatus = "IOAEvntStatus=true,Prompt_MoveUp=true";
                                    // Functionto Update rule Events values in StdtEvent Table
                                    oDisc.UpdateAlertEvent(oTemp.TemplateId, sEventAlertStatus);
                                }
                                if (!bRuleStatusMultiTchr)
                                {
                                    // Functionto reset rule type values in StdtEvent Table
                                    oDisc.resetEvntStatus(oSession.Classid, oSession.StudentId, oTemp.TemplateId);
                                    sEventAlertStatus = "MultiTchrEvntStatus=true,Prompt_MoveUp=true";
                                    // Functionto Update rule Events values in StdtEvent Table
                                    oDisc.UpdateAlertEvent(oTemp.TemplateId, sEventType);
                                }
                            }

                            DisplayIOA_MTstatus(bRuleStatusIOA, bRuleStatusMultiTchr, oDS.CrntPrompt, bPromptMoveUp, "Prompt");
                        }
                        #endregion
                        #region promptmoveback
                        if (bPromptMoveBack && bPrompt)
                        {
                            bRuleStatusIOA = oDisc.checkConditionIOA(bPromptMoveDownIOA, bIOA);
                            bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bPromptMoveDownMultiTecher, bMultyTchr);

                            //bRuleStatusIOA = oDisc.checkConditionIOA(discreteInptData.IOARequired, bIOA);
                            //bRuleStatusMultiTchr = oDisc.checkConditionIOA(discreteInptData.MultiTeacherRequired, bMultyTchr);
                            if (bRuleStatusIOA && bRuleStatusMultiTchr)
                            {
                                iCurrentStep = 0;
                                DataTable dtModificatn = GetModificationDetails("PROMPT", oTemp.TemplateId);
                                if (dtModificatn != null)
                                {
                                    if (dtModificatn.Rows.Count > 0)
                                    {
                                        bool mod_flag = CheckPromptModification(Convert.ToInt32(dtModificatn.Rows[0]["ModificationRule"].ToString()), oTemp.TemplateId, iCurrentSetId, iCurrentStep, Convert.ToInt32(sCurrentLessonPrompt));

                                        if (mod_flag)
                                        {
                                            oData = new clsData();
                                            string selqry = "SELECT ISNULL(ModificationInd, 0) as ModificationInd FROM DSTempHdr WHERE DSTempHdrId=" + oTemp.TemplateId;
                                            object mod = oData.FetchValue(selqry);
                                            if (mod != null)
                                            {
                                                if (Convert.ToBoolean(mod) != true)
                                                {
                                                    string insqry = "INSERT INTO StdtSessEvent(SchoolId,ClassId,StudentId,DSTempHdrId,StdtSessEventType,EvntTs,SessionNbr,EventType)VALUES" +
                                                    "(" + oSession.SchoolId + "," + oSession.Classid + "," + oSession.StudentId + "," + oTemp.TemplateId + ",'MODIFICATION',GETDATE()," + iSessionNmbr + ",'EV')";
                                                    oData.Execute(insqry);

                                                    string updqry = "UPDATE DSTempHdr SET ModificationInd=1,ModifiedBy=" + oSession.LoginId + ",ModifiedOn=GETDATE() WHERE DSTempHdrId=" + oTemp.TemplateId;
                                                    oData.Execute(updqry);
                                                }
                                            }
                                        }
                                    }
                                }


                                sEventType = "PROMPT MOVEDOWN";
                                if (sesResult[0] != null)
                                    oDisc.updatePromptStatus(oSession.SchoolId, oSession.Classid, oSession.StudentId, oTemp.TemplateId, sNextLessonPrompt, sesResult[0].CompletionStatus, sEventType, iSessionNmbr, oSession.LoginId, Convert.ToInt32(sCurrentLessonPrompt), iCurrentSetId, iCurrentStep, sLessonPlanId);
                                else
                                {
                                    if (FreqDurTextFlag)
                                    {
                                        oDisc.updatePromptStatus(oSession.SchoolId, oSession.Classid, oSession.StudentId, oTemp.TemplateId, sNextLessonPrompt, CompletionStatusSet, sEventType, iSessionNmbr, oSession.LoginId, Convert.ToInt32(sCurrentLessonPrompt), iCurrentSetId, iCurrentStep, sLessonPlanId);
                                    }
                                }
                                //if (sesResult[0].CompletionStatus == "COMPLETED")
                                //{
                                //    oDisc.insertEventStatus(oSession.SchoolId, oSession.Classid, oSession.StudentId, oTemp.TemplateId, sesResult[0].CompletionStatus, sEventType, iSessionNmbr);
                                //}
                            }
                            else
                            {
                                //sesResult[0].CompletionStatus = "NOT COMPLETED";
                                bSetCompleted = false;
                                if (!bRuleStatusIOA)
                                {
                                    // Functionto reset rule type values in StdtEvent Table
                                    oDisc.resetEvntStatus(oSession.Classid, oSession.StudentId, oTemp.TemplateId);
                                    sEventAlertStatus = "IOAEvntStatus=true,Prompt_MoveDown=true";
                                    // Functionto Update rule Events values in StdtEvent Table
                                    oDisc.UpdateAlertEvent(oTemp.TemplateId, sEventAlertStatus);
                                }
                                if (!bRuleStatusMultiTchr)
                                {
                                    // Functionto reset rule type values in StdtEvent Table
                                    oDisc.resetEvntStatus(oSession.Classid, oSession.StudentId, oTemp.TemplateId);
                                    sEventAlertStatus = "MultiTchrEvntStatus=true,Prompt_MoveDown=true";
                                    // Functionto Update rule Events values in StdtEvent Table
                                    oDisc.UpdateAlertEvent(oTemp.TemplateId, sEventType);
                                }
                            }

                            DisplayIOA_MTstatus(bRuleStatusIOA, bRuleStatusMultiTchr, oDS.CrntPrompt, bPromptMoveBack, "Prompt");
                        }
                        #endregion
                        if (sesResult != null)
                        {
                            if (sesResult.Count() > 0)
                            {
                                if (sesResult[0] != null)
                                {
                                    if (bSetCompleted)
                                    {
                                        //bStatusFlag = true;
                                        oDisc.insertEventStatus(oSession.SchoolId, oSession.Classid, oSession.StudentId, oTemp.TemplateId, iCurrentSetId, "COMPLETED", sEventType, iSessionNmbr, oSession.LoginId, sLessonPlanId);
                                    }
                                    else if (bSetMoveUp == true)
                                    {
                                        bRuleStatusIOA = oDisc.checkConditionIOA(bSetMoveUpIOA, bIOA);
                                        bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bSetMoveUpMultiTecher, bMultyTchr);
                                        DisplayIOA_MTstatus(bRuleStatusIOA, bRuleStatusMultiTchr, 0, false, "Complete");
                                    }
                                }
                                else
                                {
                                    if (FreqDurTextFlag)
                                    {
                                        if (bSetCompleted)
                                        {
                                            oDisc.insertEventStatus(oSession.SchoolId, oSession.Classid, oSession.StudentId, oTemp.TemplateId, iCurrentSetId, "COMPLETED", sEventType, iSessionNmbr, oSession.LoginId, sLessonPlanId);
                                        }
                                        else if (bSetMoveUp == true)
                                        {
                                            bRuleStatusIOA = oDisc.checkConditionIOA(bSetMoveUpIOA, bIOA);
                                            bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bSetMoveUpMultiTecher, bMultyTchr);
                                            DisplayIOA_MTstatus(bRuleStatusIOA, bRuleStatusMultiTchr, 0, false, "Complete");
                                        }
                                    }
                                }
                            }
                            else
                                if (FreqDurTextFlag)
                                {
                                    if (bSetCompleted)
                                    {
                                        oDisc.insertEventStatus(oSession.SchoolId, oSession.Classid, oSession.StudentId, oTemp.TemplateId, iCurrentSetId, "COMPLETED", sEventType, iSessionNmbr, oSession.LoginId, sLessonPlanId);
                                    }
                                    else if (bSetMoveUp == true)
                                    {
                                        bRuleStatusIOA = oDisc.checkConditionIOA(bSetMoveUpIOA, bIOA);
                                        bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bSetMoveUpMultiTecher, bMultyTchr);
                                        DisplayIOA_MTstatus(bRuleStatusIOA, bRuleStatusMultiTchr, 0, false, "Complete");
                                    }
                                }
                        }
                    }
                }
                #endregion
            }
        }
    }

    protected void checkScoreMulty(int StdtSessHdrId)
    {
        oSession = (clsSession)HttpContext.Current.Session["UserSession"];
        oTemp = (ClsTemplateSession)HttpContext.Current.Session["BiweeklySession"];
        oDS = (clsDataSheet)Session[DatasheetKey];
        oData = new clsData();
        oDisc = new DiscreteSession();

        iSessionNmbr = oDS.SessNbr;
        int studentid = oSession.StudentId;
        int schoolid = oSession.SchoolId;
        //string result = "";
        SqlDataReader reader = null;
        bool bPrompt = false;
        bool bMultyTchr = false;
        bool bIOA = false;
        bool bRuleStatusIOA = false;
        bool bRuleStatusMultiTchr = false;
        bool bPromptMoveupNA = false;
        bool bPromptMovedownNA = false;
        bool bSetPromptMoveupNA = false;
        bool bSetPromptMovedownNA = false;
        bool bStepPromptMoveupNA = false;
        bool bStepPromptMovedownNA = false;

        //Input Data

        int sLessonPlanId = 0;
        int iCurrentSetId = 0;
        int iCurrentSetNbr = 0;
        int iCurrentStep = 0;
        int iCurrentPrmt = 0;
        string sCurrentPrompt = "";
        string sCurrentLessonPrompt = "";
        string sNextLessonPrompt = "";
        string sLessonPrompt = "";
        bool bPromtHirchy = false;
        bool bSetCompleted = false;
        string sSkillType = "";
        string[] columns = null;
        string[] promptUsed = null;
        string[] LessonpromptUsed = null;
        string[] LessonpromptUsedOther = null;
        #region comment
        //if (oDS.IOAInd == "Y")
        //{
        //    int IOASessHdrId = iSessionNmbr;
        //}
        //else
        {
            //string strQry = " SELECT Hdr.SkillType, ISNULL(MAX(NextSetId),0) NextSetId,ISNULL(MAX(NextSetNmbr),0) NextSetNmbr " +
            //     " ,ISNULL(MAX(NextStepId),0)NextStepId,ISNULL(MAX(NextPromptId),0)NextPromptId" +
            //     " FROM DSTempHdr Hdr LEFT JOIN StdtDSStat Stat  ON Hdr.DSTempHdrId = Stat.DSTempHdrId " +
            //      " WHERE Hdr.DSTempHdrId= " + oTemp.TemplateId + " GROUP BY Hdr.SkillType ";

            //reader = oData.ReturnDataReader(strQry, false);
            //if (reader.Read())
            //{
            //    iCurrentSetId = Convert.ToInt32(reader["NextSetId"]);
            //    iCurrentSetNbr = Convert.ToInt32(reader["NextSetNmbr"]);
            //    iCurrentStep = Convert.ToInt32(reader["NextStepId"]);
            //    sCurrentPrompt = reader["NextPromptId"].ToString();
            //    sSkillType = reader["SkillType"].ToString();
            //}
            //reader.Close();
        #endregion
            DiscreetTrial.InputData discreteInptData = null;
            Chained.InputData chainedInptData = null;
            Chained.InputData chained_nextstep = null; ArrayList Trials = new ArrayList();
            Dictionary<string, DiscreetTrial.InputData> discreteCols = new Dictionary<string, DiscreetTrial.InputData>();
            Dictionary<string, Chained.InputData> chainedCols = new Dictionary<string, Chained.InputData>();
            Hashtable ht = new Hashtable(); ;
            string TargetPrompt = "0";
            string LessonTargetPrompt = "0";
            string prompt = "-,+";

            string prompts = "-,+";
            string strQry = "";
            ResetIOAStatus(oTemp.TemplateId);

            strQry = "SELECT DSTempSetColId,ColName,ColTypeCd from DSTempSetCol WHERE DSTempHdrId=" + oTemp.TemplateId + " And  SchoolId = " + oSession.SchoolId + "  And ActiveInd='A'";
            DataTable dt = oData.ReturnDataTable(strQry, false);
            int count = dt.Rows.Count;
            int index = 0;
            int bkpIndex = 0;
            int loop = 0;
            int freqdureloop = 0;
            bool bStepCountCriteria = false;
            int crntPrmtIndex = 0;

            DiscreetTrial.Result[] sesResult = null;
            Chained.Result[] sesResultchain = null;
            Chained.Result[] sesResultchainBkp = new Chained.Result[count];

            columns = new string[count];
            #region moveup_moveback_declaration
            bool bSetMoveUp = true;
            bool bSetMoveBack = true;
            bool bStepMoveUp = true;
            bool bStepMoveBack = true;
            bool bPromptMoveUp = false;
            bool bPromptMoveBack = false;
            bool bDurationMoveUp = true;
            bool bDurationMoveBack = true;
            bool bpromptColumn = false;
            string CompletionStatusSet = "";

            //Liju
            bool bSetMoveUpIOA = false;
            bool bSetMoveUpMultiTecher = false;
            bool bSetMoveDownIOA = false;
            bool bSetMoveDownMultiTecher = false;
            bool bStepMoveUpIOA = false;
            bool bStepMoveUpMultiTecher = false;
            bool bStepMoveDownIOA = false;
            bool bStepMoveDownMultiTecher = false;
            bool bPromptMoveUpIOA = false;
            bool bPromptMoveUpMultiTecher = false;
            bool bPromptMoveDownIOA = false;
            bool bPromptMoveDownMultiTecher = false;
            bool bTotalDurationMoveUpbIOAReqd = false;
            bool bTotalDurationMoveUpbMultiTchr = false;
            bool bTotalDurationMoveDownbIOAReqd = false;
            bool bTotalDurationMoveDownbMultiTchr = false;
            bool bStepTotalDurationMoveUpbIOAReqd = false;
            bool bStepTotalDurationMoveUpbMultiTchr = false;
            bool bStepTotalDurationMoveDownbIOAReqd = false;
            bool bStepTotalDurationMoveDownbMultiTchr = false;
            bool bPromptTotalDurationMoveUpbIOAReqd = false;
            bool bPromptTotalDurationMoveUpbMultiTchr = false;
            bool bPromptTotalDurationMoveDownbIOAReqd = false;
            bool bPromptTotalDurationMoveDownbMultiTchr = false;


            bool bAvgDurationMoveUpbIOAReqd = false;
            bool bAvgDurationMoveUpbMultiTchr = false;
            bool bAvgDurationMoveDownbIOAReqd = false;
            bool bAvgDurationMoveDownbMultiTchr = false;
            bool bStepAvgDurationMoveUpbIOAReqd = false;
            bool bStepAvgDurationMoveUpbMultiTchr = false;
            bool bStepAvgDurationMoveDownbIOAReqd = false;
            bool bStepAvgDurationMoveDownbMultiTchr = false;
            bool bPromptAvgDurationMoveUpbIOAReqd = false;
            bool bPromptAvgDurationMoveUpbMultiTchr = false;
            bool bPromptAvgDurationMoveDownbIOAReqd = false;
            bool bPromptAvgDurationMoveDownbMultiTchr = false;

            bool bFrequencyMoveUpbIOAReqd = false;
            bool bFrequencyMoveUpbMultiTchr = false;
            bool bFrequencyMoveDownbIOAReqd = false;
            bool bFrequencyMoveDownbMultiTchr = false;

            bool bStepFrequencyMoveUpbIOAReqd = false;
            bool bStepFrequencyMoveUpbMultiTchr = false;
            bool bStepFrequencyMoveDownbIOAReqd = false;
            bool bStepFrequencyMoveDownbMultiTchr = false;

            bool bPromptFrequencyMoveUpbIOAReqd = false;
            bool bPromptFrequencyMoveUpbMultiTchr = false;
            bool bPromptFrequencyMoveDownbIOAReqd = false;
            bool bPromptFrequencyMoveDownbMultiTchr = false;

            bool bIndallMoveUpbIOAReqd = false;
            bool bIndallMoveUpbMultiTchr = false;
            bool bIndallMoveDownbIOAReqd = false;
            bool bIndallMoveDownbMultiTchr = false;

            bool bPromptIndallMoveUpbIOAReqd = false;
            bool bPromptIndallMoveUpbMultiTchr = false;
            bool bPromptIndallMoveDownbIOAReqd = false;
            bool bPromptIndallMoveDownbMultiTchr = false;

            bool bCustomMoveupIOA = false;
            bool bCustomMovedownIOA = false;
            bool bCustomMoveupMultiTchr = false;
            bool bCustomMovedownMultiTchr = false;
            bool isColNA = false;
            bool bsetUp = false;
            bool bsetDown = false;
            #endregion
            int nextSet = 0;
            int nextStep = 0;

            bool GlobalSetMoveBack = false;
            bool GlobalStepMoveBack = false;
            bool GlobalPromptMoveBack = false;
            bool GlobalPromptMoveUp = false;
            bool GlobalStepMoveUp = false;
            bool GlobalSetMoveUp = false;
            bool MaintenanceOrCompletion = false;
            bool DiscreteFreqDurTextFlag = false;
            bool GlobalIsFinalPrompt = false;
            bool GlobalIsFinalStep = false;
            bool GlobalIsFinalSet = false;
            bool GlobalIsFirstPrompt = false;
            bool GlobalIsFirstStep = false;
            bool GlobalIsFirstSet = false;

            strQry = " SELECT Hdr.SkillType, Hdr.LessonPlanId, ISNULL(MAX(NextSetId),0) NextSetId,ISNULL(MAX(NextSetNmbr),0) NextSetNmbr " +
                 " ,ISNULL(MAX(NextStepId),0)NextStepId,ISNULL(MAX(NextPromptId),0)NextPromptId" +
                 " FROM DSTempHdr Hdr LEFT JOIN StdtDSStat Stat  ON Hdr.DSTempHdrId = Stat.DSTempHdrId " +
                  " WHERE Hdr.DSTempHdrId= " + oTemp.TemplateId + " GROUP BY Hdr.SkillType, Hdr.LessonPlanId ";

            reader = oData.ReturnDataReader(strQry, false);
            if (reader.Read())
            {
                iCurrentSetId = Convert.ToInt32(reader["NextSetId"]);
                Session["iCurrentSetId"] = iCurrentSetId;
                iCurrentSetNbr = Convert.ToInt32(reader["NextSetNmbr"]);
                iCurrentStep = Convert.ToInt32(reader["NextStepId"]);
                iCurrentPrmt = Convert.ToInt32(reader["NextPromptId"]);
                Session["iCurrentStep"] = iCurrentStep;
                sCurrentPrompt = reader["NextPromptId"].ToString();
                sLessonPrompt = reader["NextPromptId"].ToString();
                Session["sCurrentPrompt"] = sCurrentPrompt;
                sCurrentLessonPrompt = sCurrentPrompt;
                sSkillType = reader["SkillType"].ToString();
                sLessonPlanId = Convert.ToInt32(reader["LessonPlanId"]);
            }
            reader.Close();

            int getMaxSet = 0;
            int getMaxStp = 0;
            int getMaxPmt = 0;
            int getMinSet = 0;
            int getMinStp = 0;
            int getMinPmt = 0;

            #region ChainedValues
            if (sSkillType == "Chained")
            {
                #region GetMaxValues

                string qrygetMaxSet = "";
                qrygetMaxSet = "SELECT DISTINCT TOP 1 DSST.DSTempSetId AS MaxSetID " +
                                "FROM DSTempHdr DSH " +
                                "INNER JOIN DSTempSet DSST ON DSH.DSTempHdrId = DSST.DSTempHdrId " +
                                "INNER JOIN DSTempStep DSSTP ON DSST.DSTempSetId = DSSTP.DSTempSetId " +
                                "INNER JOIN DSTempPrompt DSPRMP ON DSST.DSTempHdrId = DSPRMP.DSTempHdrId " +
                                "WHERE DSH.DSTempHdrId = " + oTemp.TemplateId + " AND DSST.ActiveInd = 'A' AND DSSTP.ActiveInd = 'A' AND DSPRMP.ActiveInd = 'A'" +
                                "ORDER BY DSST.DSTempSetId DESC";
                getMaxSet = Convert.ToInt32(oData.FetchValue(qrygetMaxSet));

                string qrygetMaxStp = "";
                qrygetMaxStp = "SELECT DISTINCT TOP 1 DSSTP.SortOrder AS MaxStepID " +
                                "FROM DSTempHdr DSH " +
                                "INNER JOIN DSTempSet DSST ON DSH.DSTempHdrId = DSST.DSTempHdrId " +
                                "INNER JOIN DSTempStep DSSTP ON DSST.DSTempSetId = DSSTP.DSTempSetId " +
                                "INNER JOIN DSTempPrompt DSPRMP ON DSST.DSTempHdrId = DSPRMP.DSTempHdrId " +
                                "WHERE DSH.DSTempHdrId = " + oTemp.TemplateId + " AND DSST.DSTempSetId = " + iCurrentSetId + " AND DSST.ActiveInd = 'A' AND DSSTP.ActiveInd = 'A' AND DSPRMP.ActiveInd = 'A'" +
                                "ORDER BY DSSTP.SortOrder DESC";
                getMaxStp = Convert.ToInt32(oData.FetchValue(qrygetMaxStp));

                string qrygetMaxPmt = "";
                qrygetMaxPmt = "SELECT DISTINCT TOP 1 DSPRMP.PromptId AS MaxPromptID " +
                                "FROM DSTempHdr DSH " +
                                "INNER JOIN DSTempSet DSST ON DSH.DSTempHdrId = DSST.DSTempHdrId " +
                                "INNER JOIN DSTempStep DSSTP ON DSST.DSTempSetId = DSSTP.DSTempSetId " +
                                "INNER JOIN DSTempPrompt DSPRMP ON DSST.DSTempHdrId = DSPRMP.DSTempHdrId " +
                                "WHERE DSH.DSTempHdrId = " + oTemp.TemplateId + " AND DSST.DSTempSetId = " + iCurrentSetId + " AND DSSTP.SortOrder = " + iCurrentStep + " AND DSST.ActiveInd = 'A' AND DSSTP.ActiveInd = 'A' AND DSPRMP.ActiveInd = 'A'" +
                                "ORDER BY DSPRMP.PromptId DESC";
                getMaxPmt = Convert.ToInt32(oData.FetchValue(qrygetMaxPmt));

                #endregion GetMaxValues

                #region GetMinValues
                string qrygetMinSet = "";
                qrygetMinSet = "SELECT DISTINCT TOP 1 DSST.DSTempSetId AS MinSetID " +
                                "FROM DSTempHdr DSH " +
                                "INNER JOIN DSTempSet DSST ON DSH.DSTempHdrId = DSST.DSTempHdrId " +
                                "INNER JOIN DSTempStep DSSTP ON DSST.DSTempSetId = DSSTP.DSTempSetId " +
                                "INNER JOIN DSTempPrompt DSPRMP ON DSST.DSTempHdrId = DSPRMP.DSTempHdrId " +
                                "WHERE DSH.DSTempHdrId = " + oTemp.TemplateId + " AND DSST.ActiveInd = 'A' AND DSSTP.ActiveInd = 'A' AND DSPRMP.ActiveInd = 'A'" +
                                "ORDER BY DSST.DSTempSetId";
                getMinSet = Convert.ToInt32(oData.FetchValue(qrygetMinSet));

                string qrygetMinStp = "";
                qrygetMinStp = "SELECT DISTINCT TOP 1 DSSTP.SortOrder AS MinStepID " +
                                "FROM DSTempHdr DSH " +
                                "INNER JOIN DSTempSet DSST ON DSH.DSTempHdrId = DSST.DSTempHdrId " +
                                "INNER JOIN DSTempStep DSSTP ON DSST.DSTempSetId = DSSTP.DSTempSetId " +
                                "INNER JOIN DSTempPrompt DSPRMP ON DSST.DSTempHdrId = DSPRMP.DSTempHdrId " +
                                "WHERE DSH.DSTempHdrId = " + oTemp.TemplateId + " AND DSST.DSTempSetId = " + iCurrentSetId + " AND DSST.ActiveInd = 'A' AND DSSTP.ActiveInd = 'A' AND DSPRMP.ActiveInd = 'A'" +
                                "ORDER BY DSSTP.SortOrder";
                getMinStp = Convert.ToInt32(oData.FetchValue(qrygetMinStp));

                string qrygetMinPmt = "";
                qrygetMinPmt = "SELECT DISTINCT TOP 1 DSPRMP.PromptId AS MinPromptID " +
                                "FROM DSTempHdr DSH " +
                                "INNER JOIN DSTempSet DSST ON DSH.DSTempHdrId = DSST.DSTempHdrId " +
                                "INNER JOIN DSTempStep DSSTP ON DSST.DSTempSetId = DSSTP.DSTempSetId " +
                                "INNER JOIN DSTempPrompt DSPRMP ON DSST.DSTempHdrId = DSPRMP.DSTempHdrId " +
                                "WHERE DSH.DSTempHdrId = " + oTemp.TemplateId + " AND DSST.DSTempSetId = " + iCurrentSetId + " AND DSSTP.SortOrder = " + iCurrentStep + " AND DSST.ActiveInd = 'A' AND DSSTP.ActiveInd = 'A' AND DSPRMP.ActiveInd = 'A'" +
                                "ORDER BY DSPRMP.PromptId";
                getMinPmt = Convert.ToInt32(oData.FetchValue(qrygetMinPmt));

                #endregion GetMinValues

            }
            #endregion ChainedValues
            #region DiscreteValues
            else if (sSkillType == "Discrete")
            {

                #region GetMaxValues

                string qrygetMaxSet = "";
                qrygetMaxSet = "SELECT DISTINCT TOP 1 DSST.DSTempSetId AS MaxSetID " +
                                "FROM DSTempHdr DSH " +
                                "INNER JOIN DSTempSet DSST ON DSH.DSTempHdrId = DSST.DSTempHdrId " +
                                "INNER JOIN DSTempPrompt DSPRMP ON DSST.DSTempHdrId = DSPRMP.DSTempHdrId " +
                                "WHERE DSH.DSTempHdrId = " + oTemp.TemplateId + " AND DSST.ActiveInd = 'A' AND DSPRMP.ActiveInd = 'A'" +
                                "ORDER BY DSST.DSTempSetId DESC";
                getMaxSet = Convert.ToInt32(oData.FetchValue(qrygetMaxSet));

                string qrygetMaxStp = "";
                qrygetMaxStp = "0";
                getMaxStp = Convert.ToInt32(qrygetMaxStp);

                string qrygetMaxPmt = "";
                qrygetMaxPmt = "SELECT DISTINCT TOP 1 DSPRMP.PromptId AS MaxPromptID " +
                                "FROM DSTempHdr DSH " +
                                "INNER JOIN DSTempSet DSST ON DSH.DSTempHdrId = DSST.DSTempHdrId " +
                                "INNER JOIN DSTempPrompt DSPRMP ON DSST.DSTempHdrId = DSPRMP.DSTempHdrId " +
                                "WHERE DSH.DSTempHdrId = " + oTemp.TemplateId + " AND DSST.DSTempSetId = " + iCurrentSetId + " AND DSST.ActiveInd = 'A' AND DSPRMP.ActiveInd = 'A'" +
                                "ORDER BY DSPRMP.PromptId DESC";
                getMaxPmt = Convert.ToInt32(oData.FetchValue(qrygetMaxPmt));

                #endregion GetMaxValues

                #region GetMinValues
                string qrygetMinSet = "";
                qrygetMinSet = "SELECT DISTINCT TOP 1 DSST.DSTempSetId AS MinSetID " +
                                "FROM DSTempHdr DSH " +
                                "INNER JOIN DSTempSet DSST ON DSH.DSTempHdrId = DSST.DSTempHdrId " +
                                "INNER JOIN DSTempPrompt DSPRMP ON DSST.DSTempHdrId = DSPRMP.DSTempHdrId " +
                                "WHERE DSH.DSTempHdrId = " + oTemp.TemplateId + " AND DSST.ActiveInd = 'A' AND DSPRMP.ActiveInd = 'A'" +
                                "ORDER BY DSST.DSTempSetId";
                getMinSet = Convert.ToInt32(oData.FetchValue(qrygetMinSet));

                string qrygetMinStp = "";
                qrygetMinStp = "0";
                getMinStp = Convert.ToInt32(qrygetMinStp);

                string qrygetMinPmt = "";
                qrygetMinPmt = "SELECT DISTINCT TOP 1 DSPRMP.PromptId AS MinPromptID " +
                                "FROM DSTempHdr DSH " +
                                "INNER JOIN DSTempSet DSST ON DSH.DSTempHdrId = DSST.DSTempHdrId " +
                                "INNER JOIN DSTempPrompt DSPRMP ON DSST.DSTempHdrId = DSPRMP.DSTempHdrId " +
                                "WHERE DSH.DSTempHdrId = " + oTemp.TemplateId + " AND DSST.DSTempSetId = " + iCurrentSetId + " AND DSST.ActiveInd = 'A' AND DSPRMP.ActiveInd = 'A'" +
                                "ORDER BY DSPRMP.PromptId";
                getMinPmt = Convert.ToInt32(oData.FetchValue(qrygetMinPmt));

                #endregion GetMinValues

            }
            #endregion DiscreteValues

            #region IsLastCheckingMethod

            #region IsLastCheckingMethodChained
            if (sSkillType == "Chained")
            {
                if (iCurrentPrmt == getMaxPmt)
                {
                    GlobalIsFinalPrompt = true;
                    GlobalIsFirstPrompt = false;
                    if (GlobalIsFinalPrompt)
                    {
                        if (iCurrentStep == getMaxStp)
                        {
                            GlobalIsFinalStep = true;
                            GlobalIsFirstStep = false;
                            if ((GlobalIsFinalPrompt == true) && (GlobalIsFinalStep == true))
                            {
                                if (iCurrentSetId == getMaxSet)
                                {
                                    GlobalIsFinalSet = true;
                                    GlobalIsFirstSet = false;
                                }
                                else if (iCurrentSetId == getMinSet)
                                {
                                    GlobalIsFinalSet = false;
                                    GlobalIsFirstSet = true;
                                }
                                else
                                {
                                    GlobalIsFinalSet = false;
                                    GlobalIsFirstSet = false;
                                }
                            }
                        }
                        else if (iCurrentStep == getMinStp)
                        {
                            GlobalIsFinalStep = false;
                            GlobalIsFirstStep = true;
                            if ((GlobalIsFinalPrompt == true) && (GlobalIsFirstStep == true))
                            {
                                if (iCurrentSetId == getMaxSet)
                                {
                                    GlobalIsFinalSet = true;
                                    GlobalIsFirstSet = false;
                                }
                                else if (iCurrentSetId == getMinSet)
                                {
                                    GlobalIsFinalSet = false;
                                    GlobalIsFirstSet = true;
                                }
                                else
                                {
                                    GlobalIsFinalSet = false;
                                    GlobalIsFirstSet = false;
                                }
                            }
                        }
                        else
                        {
                            GlobalIsFinalStep = false;
                            GlobalIsFirstStep = false;
                        }
                    }
                }
                else if (iCurrentPrmt == getMinPmt)
                {
                    GlobalIsFinalPrompt = false;
                    GlobalIsFirstPrompt = true;
                    if (GlobalIsFirstPrompt)
                    {
                        if (iCurrentStep == getMaxStp)
                        {
                            GlobalIsFinalStep = true;
                            GlobalIsFirstStep = false;
                            if ((GlobalIsFirstPrompt == true && GlobalIsFinalStep == true))
                            {
                                if (iCurrentSetId == getMaxSet)
                                {
                                    GlobalIsFinalSet = true;
                                    GlobalIsFirstSet = false;
                                }
                                else if (iCurrentSetId == getMinSet)
                                {
                                    GlobalIsFinalSet = false;
                                    GlobalIsFirstSet = true;
                                }
                                else
                                {
                                    GlobalIsFinalSet = false;
                                    GlobalIsFirstSet = false;
                                }
                            }
                        }
                        else if (iCurrentStep == getMinStp)
                        {
                            GlobalIsFinalStep = false;
                            GlobalIsFirstStep = true;
                            if ((GlobalIsFirstPrompt == true && GlobalIsFirstStep == true))
                            {
                                if (iCurrentSetId == getMaxSet)
                                {
                                    GlobalIsFinalSet = true;
                                    GlobalIsFirstSet = false;
                                }
                                else if (iCurrentSetId == getMinSet)
                                {
                                    GlobalIsFinalSet = false;
                                    GlobalIsFirstSet = true;
                                }
                                else
                                {
                                    GlobalIsFinalSet = false;
                                    GlobalIsFirstSet = false;
                                }
                            }
                        }
                        else
                        {
                            GlobalIsFinalStep = false;
                            GlobalIsFirstStep = false;
                        }
                    }
                }
                else
                {
                    GlobalIsFinalPrompt = false;
                    GlobalIsFirstPrompt = false;
                }

            }
            #endregion IsLastCheckingMethodChained
            #region IsLastCheckingMethodDiscrete
            else if (sSkillType == "Discrete")
            {

                if (iCurrentPrmt == getMaxPmt)
                {
                    GlobalIsFinalPrompt = true;
                    GlobalIsFirstPrompt = false;
                    if (GlobalIsFinalPrompt)
                    {
                        if (iCurrentSetId == getMaxSet)
                        {
                            GlobalIsFinalSet = true;
                            GlobalIsFirstSet = false;
                        }
                        else if (iCurrentSetId == getMinSet)
                        {
                            GlobalIsFinalSet = false;
                            GlobalIsFirstSet = true;
                        }
                        else
                        {
                            GlobalIsFinalSet = false;
                            GlobalIsFirstSet = false;
                        }
                    }
                }
                else if (iCurrentPrmt == getMinPmt)
                {
                    GlobalIsFinalPrompt = false;
                    GlobalIsFirstPrompt = true;
                    if (GlobalIsFirstPrompt)
                    {
                        if (iCurrentSetId == getMaxSet)
                        {
                            GlobalIsFinalSet = true;
                            GlobalIsFirstSet = false;
                        }
                        else if (iCurrentSetId == getMinSet)
                        {
                            GlobalIsFinalSet = false;
                            GlobalIsFirstSet = true;
                        }
                        else
                        {
                            GlobalIsFinalSet = false;
                            GlobalIsFirstSet = false;
                        }
                    }
                }
                else
                {
                    GlobalIsFinalPrompt = false;
                    GlobalIsFirstPrompt = false;
                }
            }
            #endregion IsLastCheckingMethodDiscrete

            #endregion IsLastCheckingMethod


            #region multyInputLoop
            foreach (DataRow dr in dt.Rows)
            {
                int set_moveupCount = 0;
                int set_movedownCount = 0;
                int step_moveupCount = 0;
                int step_movedownCount = 0;
                int prompt_moveupCount = 0;
                int prompt_movedownCount = 0;

                int iColId = Convert.ToInt32(dr["DSTempSetColId"].ToString());
                string sColName = dr["ColName"].ToString();
                string coltypeCode = dr["ColTypeCd"].ToString();

                bSetMoveUp = true;
                bSetMoveBack = true;
                bStepMoveUp = true;
                bStepMoveBack = true;
                bPromptMoveUp = false;
                bPromptMoveBack = false;

                #region NARemoveAssign

                int getSessNbr = oDS.SessNbr;
                string strInputPlusorMinus = "";
                string getInputPlusorMinus = "SELECT Dtl.StepVal from StdtSessionStep Step " +
                                             "INNER JOIN StdtSessionHdr Hdr ON Hdr.StdtSessionHdrId = Step.StdtSessionHdrId " +
                                             "INNER JOIN StdtSessionDtl Dtl INNER JOIN DSTempSetCol Col " +
                                             "ON Col.DSTempSetColId=Dtl.DSTempSetColId " +
                                             "ON Dtl.StdtSessionStepId=Step.StdtSessionStepId " +
                                             "WHERE hdr.DSTempHdrId = " + oTemp.TemplateId + " AND Col.DSTempSetColId = " + iColId + " AND Dtl.StepVal <> ' ' AND hdr.SessionNbr = " + getSessNbr + " " +
                                             "GROUP BY Hdr.StdtSessionHdrId,hdr.SessionNbr,Dtl.StepVal " +
                                             "ORDER BY Hdr.SessionNbr DESC ";
                if (oData.FetchValue(getInputPlusorMinus) != null)
                {
                    strInputPlusorMinus = oData.FetchValue(getInputPlusorMinus).ToString();
                }


                dictNAscore = (Dictionary<int, string>)Session["NAStatus"];
                bool NACheck = true;

                if (dictNAscore.Count > 0)
                {
                    count = dictNAscore.Count;
                }

                //if (strInputPlusorMinus == "+")
                //{
                //    if (GlobalIsFinalStep && GlobalIsFinalPrompt)
                //    {
                //        NACheck = false;
                //    }
                //    if (NACheck == false)
                //    {
                //        dictNAscore.Clear();
                //    }
                //}
                //else if (strInputPlusorMinus == "-")
                //{
                //    if (GlobalIsFirstStep && GlobalIsFirstPrompt)
                //    {
                //        NACheck = false;
                //    }
                //    if (NACheck == false)
                //    {
                //        dictNAscore.Clear();
                //    }
                //}
                #endregion NARemoveAssign

                #region -- NAColumn Remove

                if (!dictNAscore.ContainsKey(iColId))
                {
                    #region chained
                    if (sSkillType == "Chained")
                    {
                        //if (chainedInptData == null)
                        chainedInptData = new Chained.InputData();
                        #region setrules
                        Rules TempRules = new Rules();
                        TempRules = GetSetRules(oTemp.TemplateId, iColId);
                        if (TempRules != null)
                        {
                            set_moveupCount = TempRules.moveup;
                            set_movedownCount = TempRules.movedown;
                            if (bsetUp == true || set_moveupCount > 0)
                                bsetUp = true;
                            if (bsetDown == true || set_movedownCount > 0)
                                bsetDown = true;
                            if (TempRules.count > 0)
                            {

                                //Liju
                                bSetMoveUpIOA = bSetMoveUpIOA | TempRules.pctIndMoveUp.bIOARequird | TempRules.pctAccyMoveUp.bIOARequird | TempRules.pctlearnedStepMoveUp.bIOARequird | TempRules.Set_ExcludeCrntStepMoveUp.bIOARequird;
                                bSetMoveUpMultiTecher = bSetMoveUpMultiTecher | TempRules.pctIndMoveUp.bMultiTeacherRequired | TempRules.pctAccyMoveUp.bMultiTeacherRequired | TempRules.pctlearnedStepMoveUp.bMultiTeacherRequired | TempRules.Set_ExcludeCrntStepMoveUp.bMultiTeacherRequired;
                                bSetMoveDownIOA = bSetMoveDownIOA | TempRules.pctIndMoveDown.bIOARequird | TempRules.pctAccyMoveDown.bIOARequird | TempRules.pctlearnedStepMoveDown.bIOARequird | TempRules.Set_ExcludeCrntStepMoveDown.bIOARequird;
                                bSetMoveDownMultiTecher = bSetMoveDownMultiTecher | TempRules.pctIndMoveDown.bMultiTeacherRequired | TempRules.pctAccyMoveDown.bMultiTeacherRequired | TempRules.pctlearnedStepMoveDown.bMultiTeacherRequired | TempRules.Set_ExcludeCrntStepMoveDown.bMultiTeacherRequired;


                                chainedInptData.PercentAccuracy.BarCondition = TempRules.pctAccyMoveUp.iScoreRequired;
                                chainedInptData.PercentAccuracy.ConsecutiveSuccess = TempRules.pctAccyMoveUp.bConsequetiveIndex;
                                chainedInptData.PercentAccuracy.TotalTrial = TempRules.pctAccyMoveUp.iTotalInstance;
                                chainedInptData.PercentAccuracy.SuccessNeeded = TempRules.pctAccyMoveUp.iTotalCorrectInstance;
                                chainedInptData.PercentAccuracy.bIOAReqd = TempRules.pctAccyMoveUp.bIOARequird;
                                chainedInptData.PercentAccuracy.bMultiTchr = TempRules.pctAccyMoveUp.bMultiTeacherRequired;
                                chainedInptData.PercentAccuracy.ConsecutiveAverage = TempRules.pctAccyMoveUp.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                                chainedInptData.PercentAccuracy.ConsecutiveAverageValue = TempRules.pctAccyMoveUp.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//



                                chainedInptData.IncludeMistrials = TempRules.bIncludeMisTrail;

                                chainedInptData.PercentIndependence.BarCondition = TempRules.pctIndMoveUp.iScoreRequired;
                                chainedInptData.PercentIndependence.ConsecutiveSuccess = TempRules.pctIndMoveUp.bConsequetiveIndex;
                                chainedInptData.PercentIndependence.TotalTrial = TempRules.pctIndMoveUp.iTotalInstance;
                                chainedInptData.PercentIndependence.SuccessNeeded = TempRules.pctIndMoveUp.iTotalCorrectInstance;
                                chainedInptData.PercentIndependence.bIOAReqd = TempRules.pctIndMoveUp.bIOARequird;
                                chainedInptData.PercentIndependence.bMultiTchr = TempRules.pctIndMoveUp.bMultiTeacherRequired;
                                chainedInptData.PercentIndependence.ConsecutiveAverage = TempRules.pctIndMoveUp.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                                chainedInptData.PercentIndependence.ConsecutiveAverageValue = TempRules.pctIndMoveUp.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                                chainedInptData.MoveBackPercentAccuracy.BarCondition = TempRules.pctAccyMoveDown.iScoreRequired;
                                chainedInptData.MoveBackPercentAccuracy.ConsecutiveFailures = TempRules.pctAccyMoveDown.bConsequetiveIndex;
                                chainedInptData.MoveBackPercentAccuracy.TotalTrial = TempRules.pctAccyMoveDown.iTotalInstance;
                                chainedInptData.MoveBackPercentAccuracy.FailureNeeded = TempRules.pctAccyMoveDown.iTotalCorrectInstance;
                                chainedInptData.MoveBackPercentAccuracy.bIOAReqd = TempRules.pctAccyMoveDown.bIOARequird;
                                chainedInptData.MoveBackPercentAccuracy.bMultiTchr = TempRules.pctAccyMoveDown.bMultiTeacherRequired;
                                chainedInptData.MoveBackPercentAccuracy.ConsecutiveAverageFailure = TempRules.pctAccyMoveDown.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                                chainedInptData.MoveBackPercentAccuracy.ConsecutiveAverageFailValue = TempRules.pctAccyMoveDown.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                                chainedInptData.CustomPercent.BarCondition = TempRules.pctCustomMoveUp.iScoreRequired;
                                chainedInptData.CustomPercent.ConsecutiveSuccess = TempRules.pctCustomMoveUp.bConsequetiveIndex;
                                chainedInptData.CustomPercent.TotalTrial = TempRules.pctCustomMoveUp.iTotalInstance;
                                chainedInptData.CustomPercent.SuccessNeeded = TempRules.pctCustomMoveUp.iTotalCorrectInstance;
                                chainedInptData.CustomPercent.bIOAReqd = TempRules.pctCustomMoveUp.bIOARequird;
                                chainedInptData.CustomPercent.bMultiTchr = TempRules.pctCustomMoveUp.bMultiTeacherRequired;
                                chainedInptData.CustomPercent.ConsecutiveAverage = TempRules.pctCustomMoveUp.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                                chainedInptData.CustomPercent.ConsecutiveAverageValue = TempRules.pctCustomMoveUp.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                                chainedInptData.MoveBackCustom.BarCondition = TempRules.pctCustomMoveDown.iScoreRequired;
                                chainedInptData.MoveBackCustom.ConsecutiveFailures = TempRules.pctCustomMoveDown.bConsequetiveIndex;
                                chainedInptData.MoveBackCustom.TotalTrial = TempRules.pctCustomMoveDown.iTotalInstance;
                                chainedInptData.MoveBackCustom.FailureNeeded = TempRules.pctCustomMoveDown.iTotalCorrectInstance;
                                chainedInptData.MoveBackCustom.bIOAReqd = TempRules.pctCustomMoveDown.bIOARequird;
                                chainedInptData.MoveBackCustom.bMultiTchr = TempRules.pctCustomMoveDown.bMultiTeacherRequired;
                                chainedInptData.MoveBackCustom.ConsecutiveAverageFailure = TempRules.pctCustomMoveDown.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                                chainedInptData.MoveBackCustom.ConsecutiveAverageFailValue = TempRules.pctCustomMoveDown.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                                chainedInptData.MoveBackPercentIndependence.BarCondition = TempRules.pctIndMoveDown.iScoreRequired;
                                chainedInptData.MoveBackPercentIndependence.ConsecutiveFailures = TempRules.pctIndMoveDown.bConsequetiveIndex;
                                chainedInptData.MoveBackPercentIndependence.TotalTrial = TempRules.pctIndMoveDown.iTotalInstance;
                                chainedInptData.MoveBackPercentIndependence.FailureNeeded = TempRules.pctIndMoveDown.iTotalCorrectInstance;
                                chainedInptData.MoveBackPercentIndependence.bIOAReqd = TempRules.pctIndMoveDown.bIOARequird;
                                chainedInptData.MoveBackPercentIndependence.bMultiTchr = TempRules.pctIndMoveDown.bMultiTeacherRequired;
                                chainedInptData.MoveBackPercentIndependence.ConsecutiveAverageFailure = TempRules.pctIndMoveDown.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                                chainedInptData.MoveBackPercentIndependence.ConsecutiveAverageFailValue = TempRules.pctIndMoveDown.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                                chainedInptData.PercentAllIndependence.BarCondition = TempRules.pctIndAllMoveUp.iScoreRequired;
                                chainedInptData.PercentAllIndependence.ConsecutiveSuccess = TempRules.pctIndAllMoveUp.bConsequetiveIndex;
                                chainedInptData.PercentAllIndependence.TotalTrial = TempRules.pctIndAllMoveUp.iTotalInstance;
                                chainedInptData.PercentAllIndependence.SuccessNeeded = TempRules.pctIndAllMoveUp.iTotalCorrectInstance;
                                chainedInptData.PercentAllIndependence.bIOAReqd = TempRules.pctIndAllMoveUp.bIOARequird;
                                chainedInptData.PercentAllIndependence.bMultiTchr = TempRules.pctIndAllMoveUp.bMultiTeacherRequired;
                                chainedInptData.PercentAllIndependence.ConsecutiveAverage = TempRules.pctIndAllMoveUp.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                                chainedInptData.PercentAllIndependence.ConsecutiveAverageValue = TempRules.pctIndAllMoveUp.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                                chainedInptData.MoveBackPercentAllIndependence.BarCondition = TempRules.pctIndAllMoveDown.iScoreRequired;
                                chainedInptData.MoveBackPercentAllIndependence.ConsecutiveFailures = TempRules.pctIndAllMoveDown.bConsequetiveIndex;
                                chainedInptData.MoveBackPercentAllIndependence.TotalTrial = TempRules.pctIndAllMoveDown.iTotalInstance;
                                chainedInptData.MoveBackPercentAllIndependence.FailureNeeded = TempRules.pctIndAllMoveDown.iTotalCorrectInstance;
                                chainedInptData.MoveBackPercentAllIndependence.bIOAReqd = TempRules.pctIndAllMoveDown.bIOARequird;
                                chainedInptData.MoveBackPercentAllIndependence.bMultiTchr = TempRules.pctIndAllMoveDown.bMultiTeacherRequired;
                                chainedInptData.MoveBackPercentAllIndependence.ConsecutiveAverageFailure = TempRules.pctIndAllMoveDown.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                                chainedInptData.MoveBackPercentAllIndependence.ConsecutiveAverageFailValue = TempRules.pctIndAllMoveDown.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                                chainedInptData.AvgDurationMoveUp.BarCondition = TempRules.pctAvgDurationMoveUp.iScoreRequired;
                                chainedInptData.AvgDurationMoveUp.ConsecutiveSuccess = TempRules.pctAvgDurationMoveUp.bConsequetiveIndex;
                                chainedInptData.AvgDurationMoveUp.TotalTrial = TempRules.pctAvgDurationMoveUp.iTotalInstance;
                                chainedInptData.AvgDurationMoveUp.SuccessNeeded = TempRules.pctAvgDurationMoveUp.iTotalCorrectInstance;
                                chainedInptData.AvgDurationMoveUp.bIOAReqd = TempRules.pctAvgDurationMoveUp.bIOARequird;
                                chainedInptData.AvgDurationMoveUp.bMultiTchr = TempRules.pctAvgDurationMoveUp.bMultiTeacherRequired;
                                chainedInptData.AvgDurationMoveUp.ConsecutiveAverage = TempRules.pctAvgDurationMoveUp.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                                chainedInptData.AvgDurationMoveUp.ConsecutiveAverageValue = TempRules.pctAvgDurationMoveUp.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                                chainedInptData.TotalDurationMoveUp.BarCondition = TempRules.pctTotalDurationMoveUp.iScoreRequired;
                                chainedInptData.TotalDurationMoveUp.ConsecutiveSuccess = TempRules.pctTotalDurationMoveUp.bConsequetiveIndex;
                                chainedInptData.TotalDurationMoveUp.TotalTrial = TempRules.pctTotalDurationMoveUp.iTotalInstance;
                                chainedInptData.TotalDurationMoveUp.SuccessNeeded = TempRules.pctTotalDurationMoveUp.iTotalCorrectInstance;
                                chainedInptData.TotalDurationMoveUp.bIOAReqd = TempRules.pctTotalDurationMoveUp.bIOARequird;
                                chainedInptData.TotalDurationMoveUp.bMultiTchr = TempRules.pctTotalDurationMoveUp.bMultiTeacherRequired;
                                chainedInptData.TotalDurationMoveUp.ConsecutiveAverage = TempRules.pctTotalDurationMoveUp.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                                chainedInptData.TotalDurationMoveUp.ConsecutiveAverageValue = TempRules.pctTotalDurationMoveUp.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                                chainedInptData.FrequencyMoveUp.BarCondition = TempRules.pctFrequencyMoveUp.iScoreRequired;
                                chainedInptData.FrequencyMoveUp.ConsecutiveSuccess = TempRules.pctFrequencyMoveUp.bConsequetiveIndex;
                                chainedInptData.FrequencyMoveUp.TotalTrial = TempRules.pctFrequencyMoveUp.iTotalInstance;
                                chainedInptData.FrequencyMoveUp.SuccessNeeded = TempRules.pctFrequencyMoveUp.iTotalCorrectInstance;
                                chainedInptData.FrequencyMoveUp.bIOAReqd = TempRules.pctFrequencyMoveUp.bIOARequird;
                                chainedInptData.FrequencyMoveUp.bMultiTchr = TempRules.pctFrequencyMoveUp.bMultiTeacherRequired;
                                chainedInptData.FrequencyMoveUp.ConsecutiveAverage = TempRules.pctFrequencyMoveUp.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                                chainedInptData.FrequencyMoveUp.ConsecutiveAverageValue = TempRules.pctFrequencyMoveUp.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                                chainedInptData.AvgDurationMoveDown.BarCondition = TempRules.pctAvgDurationMoveDown.iScoreRequired;
                                chainedInptData.AvgDurationMoveDown.ConsecutiveFailures = TempRules.pctAvgDurationMoveDown.bConsequetiveIndex;
                                chainedInptData.AvgDurationMoveDown.TotalTrial = TempRules.pctAvgDurationMoveDown.iTotalInstance;
                                chainedInptData.AvgDurationMoveDown.FailureNeeded = TempRules.pctAvgDurationMoveDown.iTotalCorrectInstance;
                                chainedInptData.AvgDurationMoveDown.bIOAReqd = TempRules.pctAvgDurationMoveDown.bIOARequird;
                                chainedInptData.AvgDurationMoveDown.bMultiTchr = TempRules.pctAvgDurationMoveDown.bMultiTeacherRequired;
                                chainedInptData.AvgDurationMoveDown.ConsecutiveAverageFailure = TempRules.pctAvgDurationMoveDown.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                                chainedInptData.AvgDurationMoveDown.ConsecutiveAverageFailValue = TempRules.pctAvgDurationMoveDown.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                                chainedInptData.TotalDurationMoveDown.BarCondition = TempRules.pctTotalDurationMoveDown.iScoreRequired;
                                chainedInptData.TotalDurationMoveDown.ConsecutiveFailures = TempRules.pctTotalDurationMoveDown.bConsequetiveIndex;
                                chainedInptData.TotalDurationMoveDown.TotalTrial = TempRules.pctTotalDurationMoveDown.iTotalInstance;
                                chainedInptData.TotalDurationMoveDown.FailureNeeded = TempRules.pctTotalDurationMoveDown.iTotalCorrectInstance;
                                chainedInptData.TotalDurationMoveDown.bIOAReqd = TempRules.pctTotalDurationMoveDown.bIOARequird;
                                chainedInptData.TotalDurationMoveDown.bMultiTchr = TempRules.pctTotalDurationMoveDown.bMultiTeacherRequired;
                                chainedInptData.TotalDurationMoveDown.ConsecutiveAverageFailure = TempRules.pctTotalDurationMoveDown.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                                chainedInptData.TotalDurationMoveDown.ConsecutiveAverageFailValue = TempRules.pctTotalDurationMoveDown.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                                chainedInptData.FrequencyMoveDown.BarCondition = TempRules.pctFrequencyMoveDown.iScoreRequired;
                                chainedInptData.FrequencyMoveDown.ConsecutiveFailures = TempRules.pctFrequencyMoveDown.bConsequetiveIndex;
                                chainedInptData.FrequencyMoveDown.TotalTrial = TempRules.pctFrequencyMoveDown.iTotalInstance;
                                chainedInptData.FrequencyMoveDown.FailureNeeded = TempRules.pctFrequencyMoveDown.iTotalCorrectInstance;
                                chainedInptData.FrequencyMoveDown.bIOAReqd = TempRules.pctFrequencyMoveDown.bIOARequird;
                                chainedInptData.FrequencyMoveDown.bMultiTchr = TempRules.pctFrequencyMoveDown.bMultiTeacherRequired;
                                chainedInptData.FrequencyMoveDown.ConsecutiveAverageFailure = TempRules.pctFrequencyMoveDown.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                                chainedInptData.FrequencyMoveDown.ConsecutiveAverageFailValue = TempRules.pctFrequencyMoveDown.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                                chainedInptData.SetLearnedStepMoveUp.BarCondition = TempRules.pctlearnedStepMoveUp.iScoreRequired;
                                chainedInptData.SetLearnedStepMoveUp.ConsecutiveSuccess = TempRules.pctlearnedStepMoveUp.bConsequetiveIndex;
                                chainedInptData.SetLearnedStepMoveUp.TotalTrial = TempRules.pctlearnedStepMoveUp.iTotalInstance;
                                chainedInptData.SetLearnedStepMoveUp.SuccessNeeded = TempRules.pctlearnedStepMoveUp.iTotalCorrectInstance;
                                chainedInptData.SetLearnedStepMoveUp.bIOAReqd = TempRules.pctlearnedStepMoveUp.bIOARequird;
                                chainedInptData.SetLearnedStepMoveUp.bMultiTchr = TempRules.pctlearnedStepMoveUp.bMultiTeacherRequired;
                                chainedInptData.SetLearnedStepMoveUp.ConsecutiveAverage = TempRules.pctlearnedStepMoveUp.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                                chainedInptData.SetLearnedStepMoveUp.ConsecutiveAverageValue = TempRules.pctlearnedStepMoveUp.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                                chainedInptData.SetLearnedStepMoveBack.BarCondition = TempRules.pctlearnedStepMoveDown.iScoreRequired;
                                chainedInptData.SetLearnedStepMoveBack.ConsecutiveFailures = TempRules.pctlearnedStepMoveDown.bConsequetiveIndex;
                                chainedInptData.SetLearnedStepMoveBack.TotalTrial = TempRules.pctlearnedStepMoveDown.iTotalInstance;
                                chainedInptData.SetLearnedStepMoveBack.FailureNeeded = TempRules.pctlearnedStepMoveDown.iTotalCorrectInstance;
                                chainedInptData.SetLearnedStepMoveBack.bIOAReqd = TempRules.pctlearnedStepMoveDown.bIOARequird;
                                chainedInptData.SetLearnedStepMoveBack.bMultiTchr = TempRules.pctlearnedStepMoveDown.bMultiTeacherRequired;
                                chainedInptData.SetLearnedStepMoveBack.ConsecutiveAverageFailure = TempRules.pctlearnedStepMoveDown.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                                chainedInptData.SetLearnedStepMoveBack.ConsecutiveAverageFailValue = TempRules.pctlearnedStepMoveDown.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                                chainedInptData.SetExcludeCrntStepMoveUp.BarCondition = TempRules.Set_ExcludeCrntStepMoveUp.iScoreRequired;
                                chainedInptData.SetExcludeCrntStepMoveUp.ConsecutiveSuccess = TempRules.Set_ExcludeCrntStepMoveUp.bConsequetiveIndex;
                                chainedInptData.SetExcludeCrntStepMoveUp.TotalTrial = TempRules.Set_ExcludeCrntStepMoveUp.iTotalInstance;
                                chainedInptData.SetExcludeCrntStepMoveUp.SuccessNeeded = TempRules.Set_ExcludeCrntStepMoveUp.iTotalCorrectInstance;
                                chainedInptData.SetExcludeCrntStepMoveUp.bIOAReqd = TempRules.Set_ExcludeCrntStepMoveUp.bIOARequird;
                                chainedInptData.SetExcludeCrntStepMoveUp.bMultiTchr = TempRules.Set_ExcludeCrntStepMoveUp.bMultiTeacherRequired;
                                chainedInptData.SetExcludeCrntStepMoveUp.ConsecutiveAverage = TempRules.Set_ExcludeCrntStepMoveUp.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                                chainedInptData.SetExcludeCrntStepMoveUp.ConsecutiveAverageValue = TempRules.Set_ExcludeCrntStepMoveUp.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                                chainedInptData.SetExcludeCrntStepMoveBack.BarCondition = TempRules.Set_ExcludeCrntStepMoveDown.iScoreRequired;
                                chainedInptData.SetExcludeCrntStepMoveBack.ConsecutiveFailures = TempRules.Set_ExcludeCrntStepMoveDown.bConsequetiveIndex;
                                chainedInptData.SetExcludeCrntStepMoveBack.TotalTrial = TempRules.Set_ExcludeCrntStepMoveDown.iTotalInstance;
                                chainedInptData.SetExcludeCrntStepMoveBack.FailureNeeded = TempRules.Set_ExcludeCrntStepMoveDown.iTotalCorrectInstance;
                                chainedInptData.SetExcludeCrntStepMoveBack.bIOAReqd = TempRules.Set_ExcludeCrntStepMoveDown.bIOARequird;
                                chainedInptData.SetExcludeCrntStepMoveBack.bMultiTchr = TempRules.Set_ExcludeCrntStepMoveDown.bMultiTeacherRequired;
                                chainedInptData.SetExcludeCrntStepMoveBack.ConsecutiveAverageFailure = TempRules.Set_ExcludeCrntStepMoveDown.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                                chainedInptData.SetExcludeCrntStepMoveBack.ConsecutiveAverageFailValue = TempRules.Set_ExcludeCrntStepMoveDown.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                                chainedInptData.SetTotalCorrectMoveUp.BarCondition = TempRules.pctTotalCorrectMoveUp.iScoreRequired;
                                chainedInptData.SetTotalCorrectMoveUp.ConsecutiveSuccess = TempRules.pctTotalCorrectMoveUp.bConsequetiveIndex;
                                chainedInptData.SetTotalCorrectMoveUp.TotalTrial = TempRules.pctTotalCorrectMoveUp.iTotalInstance;
                                chainedInptData.SetTotalCorrectMoveUp.SuccessNeeded = TempRules.pctTotalCorrectMoveUp.iTotalCorrectInstance;
                                chainedInptData.SetTotalCorrectMoveUp.bIOAReqd = TempRules.pctTotalCorrectMoveUp.bIOARequird;
                                chainedInptData.SetTotalCorrectMoveUp.bMultiTchr = TempRules.pctTotalCorrectMoveUp.bMultiTeacherRequired;
                                chainedInptData.SetTotalCorrectMoveUp.ConsecutiveAverage = TempRules.pctTotalCorrectMoveUp.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                                chainedInptData.SetTotalCorrectMoveUp.ConsecutiveAverageValue = TempRules.pctTotalCorrectMoveUp.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                                chainedInptData.SetTotalCorrectMoveBack.BarCondition = TempRules.pctTotalCorrectMoveDown.iScoreRequired;
                                chainedInptData.SetTotalCorrectMoveBack.ConsecutiveFailures = TempRules.pctTotalCorrectMoveDown.bConsequetiveIndex;
                                chainedInptData.SetTotalCorrectMoveBack.TotalTrial = TempRules.pctTotalCorrectMoveDown.iTotalInstance;
                                chainedInptData.SetTotalCorrectMoveBack.FailureNeeded = TempRules.pctTotalCorrectMoveDown.iTotalCorrectInstance;
                                chainedInptData.SetTotalCorrectMoveBack.bIOAReqd = TempRules.pctTotalCorrectMoveDown.bIOARequird;
                                chainedInptData.SetTotalCorrectMoveBack.bMultiTchr = TempRules.pctTotalCorrectMoveDown.bMultiTeacherRequired;
                                chainedInptData.SetTotalCorrectMoveBack.ConsecutiveAverageFailure = TempRules.pctTotalCorrectMoveDown.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                                chainedInptData.SetTotalCorrectMoveBack.ConsecutiveAverageFailValue = TempRules.pctTotalCorrectMoveDown.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                                chainedInptData.SetTotalIncorrectMoveBack.BarCondition = TempRules.pctTotalIncorrectMoveDown.iScoreRequired;
                                chainedInptData.SetTotalIncorrectMoveBack.ConsecutiveFailures = TempRules.pctTotalIncorrectMoveDown.bConsequetiveIndex;
                                chainedInptData.SetTotalIncorrectMoveBack.TotalTrial = TempRules.pctTotalIncorrectMoveDown.iTotalInstance;
                                chainedInptData.SetTotalIncorrectMoveBack.FailureNeeded = TempRules.pctTotalIncorrectMoveDown.iTotalCorrectInstance;
                                chainedInptData.SetTotalIncorrectMoveBack.bIOAReqd = TempRules.pctTotalIncorrectMoveDown.bIOARequird;
                                chainedInptData.SetTotalIncorrectMoveBack.bMultiTchr = TempRules.pctTotalIncorrectMoveDown.bMultiTeacherRequired;
                                chainedInptData.SetTotalIncorrectMoveBack.ConsecutiveAverageFailure = TempRules.pctTotalIncorrectMoveDown.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                                chainedInptData.SetTotalIncorrectMoveBack.ConsecutiveAverageFailValue = TempRules.pctTotalIncorrectMoveDown.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                                //chainedInptData.IOARequired = TempRules.bIOARequird;
                                //chainedInptData.MultiTeacherRequired = TempRules.bMultiTeacherRequired;
                                getPromptNA(oTemp.TemplateId, Convert.ToInt32(dr["DSTempSetColId"].ToString()), TempRules);
                                if (!bSetPromptMoveupNA)
                                {
                                    bSetPromptMoveupNA = TempRules.NAPromptMoveup;
                                }
                                if (!bSetPromptMovedownNA)
                                {
                                    bSetPromptMovedownNA = TempRules.NAPromptMoveDown;
                                }

                            }
                        }
                        #endregion
                        #region promptrules
                        TempRules = new Rules();
                        TempRules = GetPromptRules(oTemp.TemplateId, Convert.ToInt32(dr["DSTempSetColId"].ToString()));

                        if (TempRules != null)
                        {
                            prompt_moveupCount = TempRules.moveup;
                            prompt_movedownCount = TempRules.movedown;
                            if (TempRules.count > 0)
                            {
                                bPrompt = true;
                                chainedInptData.PromptHirecharchy = true;
                                //Liju
                                bPromptMoveUpIOA = bPromptMoveUpIOA | TempRules.pctIndMoveUp.bIOARequird | TempRules.pctAccyMoveUp.bIOARequird | TempRules.pctlearnedStepMoveUp.bIOARequird | TempRules.PromptExcludeCrntStepMoveUp.bIOARequird;
                                bPromptMoveUpMultiTecher = bPromptMoveUpMultiTecher | TempRules.pctIndMoveUp.bMultiTeacherRequired | TempRules.pctAccyMoveUp.bMultiTeacherRequired | TempRules.pctlearnedStepMoveUp.bMultiTeacherRequired | TempRules.PromptExcludeCrntStepMoveUp.bMultiTeacherRequired;
                                bPromptMoveDownIOA = bPromptMoveDownIOA | TempRules.pctIndMoveDown.bIOARequird | TempRules.pctAccyMoveDown.bIOARequird | TempRules.pctlearnedStepMoveDown.bIOARequird | TempRules.PromptExcludeCrntStepMoveDown.bIOARequird;
                                bPromptMoveDownMultiTecher = bPromptMoveDownMultiTecher | TempRules.pctIndMoveDown.bMultiTeacherRequired | TempRules.pctAccyMoveDown.bMultiTeacherRequired | TempRules.pctlearnedStepMoveDown.bMultiTeacherRequired | TempRules.PromptExcludeCrntStepMoveDown.bMultiTeacherRequired;


                                chainedInptData.PromptPercentAccuracy.BarCondition = TempRules.pctAccyMoveUp.iScoreRequired;
                                chainedInptData.PromptPercentAccuracy.ConsecutiveSuccess = TempRules.pctAccyMoveUp.bConsequetiveIndex;
                                chainedInptData.PromptPercentAccuracy.TotalTrial = TempRules.pctAccyMoveUp.iTotalInstance;
                                chainedInptData.PromptPercentAccuracy.SuccessNeeded = TempRules.pctAccyMoveUp.iTotalCorrectInstance;
                                chainedInptData.PromptPercentAccuracy.bIOAReqd = TempRules.pctAccyMoveUp.bIOARequird;
                                chainedInptData.PromptPercentAccuracy.bMultiTchr = TempRules.pctAccyMoveUp.bMultiTeacherRequired;
                                chainedInptData.PromptPercentAccuracy.ConsecutiveAverage = TempRules.pctAccyMoveUp.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                                chainedInptData.PromptPercentAccuracy.ConsecutiveAverageValue = TempRules.pctAccyMoveUp.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                                chainedInptData.IncludeMistrials = TempRules.bIncludeMisTrail;

                                chainedInptData.PromptPercentIndependence.BarCondition = TempRules.pctIndMoveUp.iScoreRequired;
                                chainedInptData.PromptPercentIndependence.ConsecutiveSuccess = TempRules.pctIndMoveUp.bConsequetiveIndex;
                                chainedInptData.PromptPercentIndependence.TotalTrial = TempRules.pctIndMoveUp.iTotalInstance;
                                chainedInptData.PromptPercentIndependence.SuccessNeeded = TempRules.pctIndMoveUp.iTotalCorrectInstance;
                                chainedInptData.PromptPercentIndependence.bIOAReqd = TempRules.pctIndMoveUp.bIOARequird;
                                chainedInptData.PromptPercentIndependence.bMultiTchr = TempRules.pctIndMoveUp.bMultiTeacherRequired;
                                chainedInptData.PromptPercentIndependence.ConsecutiveAverage = TempRules.pctIndMoveUp.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                                chainedInptData.PromptPercentIndependence.ConsecutiveAverageValue = TempRules.pctIndMoveUp.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                                chainedInptData.MoveBackPromptPercentAccuracy.BarCondition = TempRules.pctAccyMoveDown.iScoreRequired;
                                chainedInptData.MoveBackPromptPercentAccuracy.ConsecutiveFailures = TempRules.pctAccyMoveDown.bConsequetiveIndex;
                                chainedInptData.MoveBackPromptPercentAccuracy.TotalTrial = TempRules.pctAccyMoveDown.iTotalInstance;
                                chainedInptData.MoveBackPromptPercentAccuracy.FailureNeeded = TempRules.pctAccyMoveDown.iTotalCorrectInstance;
                                chainedInptData.MoveBackPromptPercentAccuracy.bIOAReqd = TempRules.pctAccyMoveDown.bIOARequird;
                                chainedInptData.MoveBackPromptPercentAccuracy.bMultiTchr = TempRules.pctAccyMoveDown.bMultiTeacherRequired;
                                chainedInptData.MoveBackPromptPercentAccuracy.ConsecutiveAverageFailure = TempRules.pctAccyMoveDown.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                                chainedInptData.MoveBackPromptPercentAccuracy.ConsecutiveAverageFailValue = TempRules.pctAccyMoveDown.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                                chainedInptData.MoveBackPromptPercentIndependence.BarCondition = TempRules.pctIndMoveDown.iScoreRequired;
                                chainedInptData.MoveBackPromptPercentIndependence.ConsecutiveFailures = TempRules.pctIndMoveDown.bConsequetiveIndex;
                                chainedInptData.MoveBackPromptPercentIndependence.TotalTrial = TempRules.pctIndMoveDown.iTotalInstance;
                                chainedInptData.MoveBackPromptPercentIndependence.FailureNeeded = TempRules.pctIndMoveDown.iTotalCorrectInstance;
                                chainedInptData.MoveBackPromptPercentIndependence.bIOAReqd = TempRules.pctIndMoveDown.bIOARequird;
                                chainedInptData.MoveBackPromptPercentIndependence.bMultiTchr = TempRules.pctIndMoveDown.bMultiTeacherRequired;
                                chainedInptData.MoveBackPromptPercentIndependence.ConsecutiveAverageFailure = TempRules.pctIndMoveDown.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                                chainedInptData.MoveBackPromptPercentIndependence.ConsecutiveAverageFailValue = TempRules.pctIndMoveDown.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                                chainedInptData.PromptPercentAllIndependence.BarCondition = TempRules.pctIndAllMoveUp.iScoreRequired;
                                chainedInptData.PromptPercentAllIndependence.ConsecutiveSuccess = TempRules.pctIndAllMoveUp.bConsequetiveIndex;
                                chainedInptData.PromptPercentAllIndependence.TotalTrial = TempRules.pctIndAllMoveUp.iTotalInstance;
                                chainedInptData.PromptPercentAllIndependence.SuccessNeeded = TempRules.pctIndAllMoveUp.iTotalCorrectInstance;
                                chainedInptData.PromptPercentAllIndependence.bIOAReqd = TempRules.pctIndAllMoveUp.bIOARequird;
                                chainedInptData.PromptPercentAllIndependence.bMultiTchr = TempRules.pctIndAllMoveUp.bMultiTeacherRequired;
                                chainedInptData.PromptPercentAllIndependence.ConsecutiveAverage = TempRules.pctIndAllMoveUp.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                                chainedInptData.PromptPercentAllIndependence.ConsecutiveAverageValue = TempRules.pctIndAllMoveUp.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                                chainedInptData.MoveBackPromptPercentAllIndependence.BarCondition = TempRules.pctIndAllMoveDown.iScoreRequired;
                                chainedInptData.MoveBackPromptPercentAllIndependence.ConsecutiveFailures = TempRules.pctIndAllMoveDown.bConsequetiveIndex;
                                chainedInptData.MoveBackPromptPercentAllIndependence.TotalTrial = TempRules.pctIndAllMoveDown.iTotalInstance;
                                chainedInptData.MoveBackPromptPercentAllIndependence.FailureNeeded = TempRules.pctIndAllMoveDown.iTotalCorrectInstance;
                                chainedInptData.MoveBackPromptPercentAllIndependence.bIOAReqd = TempRules.pctIndAllMoveDown.bIOARequird;
                                chainedInptData.MoveBackPromptPercentAllIndependence.bMultiTchr = TempRules.pctIndAllMoveDown.bMultiTeacherRequired;
                                chainedInptData.MoveBackPromptPercentAllIndependence.ConsecutiveAverageFailure = TempRules.pctIndAllMoveDown.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                                chainedInptData.MoveBackPromptPercentAllIndependence.ConsecutiveAverageFailValue = TempRules.pctIndAllMoveDown.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                                chainedInptData.PromptExcludeCrntStepMoveUp.BarCondition = TempRules.PromptExcludeCrntStepMoveUp.iScoreRequired;
                                chainedInptData.PromptExcludeCrntStepMoveUp.ConsecutiveSuccess = TempRules.PromptExcludeCrntStepMoveUp.bConsequetiveIndex;
                                chainedInptData.PromptExcludeCrntStepMoveUp.TotalTrial = TempRules.PromptExcludeCrntStepMoveUp.iTotalInstance;
                                chainedInptData.PromptExcludeCrntStepMoveUp.SuccessNeeded = TempRules.PromptExcludeCrntStepMoveUp.iTotalCorrectInstance;
                                chainedInptData.PromptExcludeCrntStepMoveUp.bIOAReqd = TempRules.PromptExcludeCrntStepMoveUp.bIOARequird;
                                chainedInptData.PromptExcludeCrntStepMoveUp.bMultiTchr = TempRules.PromptExcludeCrntStepMoveUp.bMultiTeacherRequired;
                                chainedInptData.PromptExcludeCrntStepMoveUp.ConsecutiveAverage = TempRules.PromptExcludeCrntStepMoveUp.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                                chainedInptData.PromptExcludeCrntStepMoveUp.ConsecutiveAverageValue = TempRules.PromptExcludeCrntStepMoveUp.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                                chainedInptData.PromptExcludeCrntStepMoveBack.BarCondition = TempRules.PromptExcludeCrntStepMoveDown.iScoreRequired;
                                chainedInptData.PromptExcludeCrntStepMoveBack.ConsecutiveFailures = TempRules.PromptExcludeCrntStepMoveDown.bConsequetiveIndex;
                                chainedInptData.PromptExcludeCrntStepMoveBack.TotalTrial = TempRules.PromptExcludeCrntStepMoveDown.iTotalInstance;
                                chainedInptData.PromptExcludeCrntStepMoveBack.FailureNeeded = TempRules.PromptExcludeCrntStepMoveDown.iTotalCorrectInstance;
                                chainedInptData.PromptExcludeCrntStepMoveBack.bIOAReqd = TempRules.PromptExcludeCrntStepMoveDown.bIOARequird;
                                chainedInptData.PromptExcludeCrntStepMoveBack.bMultiTchr = TempRules.PromptExcludeCrntStepMoveDown.bMultiTeacherRequired;
                                chainedInptData.PromptExcludeCrntStepMoveBack.ConsecutiveAverageFailure = TempRules.PromptExcludeCrntStepMoveDown.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                                chainedInptData.PromptExcludeCrntStepMoveBack.ConsecutiveAverageFailValue = TempRules.PromptExcludeCrntStepMoveDown.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                                chainedInptData.PromptLearnedStepMoveUp.BarCondition = TempRules.pctlearnedStepMoveUp.iScoreRequired;
                                chainedInptData.PromptLearnedStepMoveUp.ConsecutiveSuccess = TempRules.pctlearnedStepMoveUp.bConsequetiveIndex;
                                chainedInptData.PromptLearnedStepMoveUp.TotalTrial = TempRules.pctlearnedStepMoveUp.iTotalInstance;
                                chainedInptData.PromptLearnedStepMoveUp.SuccessNeeded = TempRules.pctlearnedStepMoveUp.iTotalCorrectInstance;
                                chainedInptData.PromptLearnedStepMoveUp.bIOAReqd = TempRules.pctlearnedStepMoveUp.bIOARequird;
                                chainedInptData.PromptLearnedStepMoveUp.bMultiTchr = TempRules.pctlearnedStepMoveUp.bMultiTeacherRequired;
                                chainedInptData.PromptLearnedStepMoveUp.ConsecutiveAverage = TempRules.pctlearnedStepMoveUp.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                                chainedInptData.PromptLearnedStepMoveUp.ConsecutiveAverageValue = TempRules.pctlearnedStepMoveUp.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                                chainedInptData.PromptLearnedStepMoveBack.BarCondition = TempRules.pctlearnedStepMoveDown.iScoreRequired;
                                chainedInptData.PromptLearnedStepMoveBack.ConsecutiveFailures = TempRules.pctlearnedStepMoveDown.bConsequetiveIndex;
                                chainedInptData.PromptLearnedStepMoveBack.TotalTrial = TempRules.pctlearnedStepMoveDown.iTotalInstance;
                                chainedInptData.PromptLearnedStepMoveBack.FailureNeeded = TempRules.pctlearnedStepMoveDown.iTotalCorrectInstance;
                                chainedInptData.PromptLearnedStepMoveBack.bIOAReqd = TempRules.pctlearnedStepMoveDown.bIOARequird;
                                chainedInptData.PromptLearnedStepMoveBack.bMultiTchr = TempRules.pctlearnedStepMoveDown.bMultiTeacherRequired;
                                chainedInptData.PromptLearnedStepMoveBack.ConsecutiveAverageFailure = TempRules.pctlearnedStepMoveDown.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                                chainedInptData.PromptLearnedStepMoveBack.ConsecutiveAverageFailValue = TempRules.pctlearnedStepMoveDown.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                                chainedInptData.PromptTotalCorrectMoveUp.BarCondition = TempRules.pctTotalCorrectMoveUp.iScoreRequired;
                                chainedInptData.PromptTotalCorrectMoveUp.ConsecutiveSuccess = TempRules.pctTotalCorrectMoveUp.bConsequetiveIndex;
                                chainedInptData.PromptTotalCorrectMoveUp.TotalTrial = TempRules.pctTotalCorrectMoveUp.iTotalInstance;
                                chainedInptData.PromptTotalCorrectMoveUp.SuccessNeeded = TempRules.pctTotalCorrectMoveUp.iTotalCorrectInstance;
                                chainedInptData.PromptTotalCorrectMoveUp.bIOAReqd = TempRules.pctTotalCorrectMoveUp.bIOARequird;
                                chainedInptData.PromptTotalCorrectMoveUp.bMultiTchr = TempRules.pctTotalCorrectMoveUp.bMultiTeacherRequired;
                                chainedInptData.PromptTotalCorrectMoveUp.ConsecutiveAverage = TempRules.pctTotalCorrectMoveUp.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                                chainedInptData.PromptTotalCorrectMoveUp.ConsecutiveAverageValue = TempRules.pctTotalCorrectMoveUp.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                                chainedInptData.PromptTotalCorrectMoveBack.BarCondition = TempRules.pctTotalCorrectMoveDown.iScoreRequired;
                                chainedInptData.PromptTotalCorrectMoveBack.ConsecutiveFailures = TempRules.pctTotalCorrectMoveDown.bConsequetiveIndex;
                                chainedInptData.PromptTotalCorrectMoveBack.TotalTrial = TempRules.pctTotalCorrectMoveDown.iTotalInstance;
                                chainedInptData.PromptTotalCorrectMoveBack.FailureNeeded = TempRules.pctTotalCorrectMoveDown.iTotalCorrectInstance;
                                chainedInptData.PromptTotalCorrectMoveBack.bIOAReqd = TempRules.pctTotalCorrectMoveDown.bIOARequird;
                                chainedInptData.PromptTotalCorrectMoveBack.bMultiTchr = TempRules.pctTotalCorrectMoveDown.bMultiTeacherRequired;
                                chainedInptData.PromptTotalCorrectMoveBack.ConsecutiveAverageFailure = TempRules.pctTotalCorrectMoveDown.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                                chainedInptData.PromptTotalCorrectMoveBack.ConsecutiveAverageFailValue = TempRules.pctTotalCorrectMoveDown.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                                chainedInptData.PromptTotalIncorrectMoveBack.BarCondition = TempRules.pctTotalIncorrectMoveDown.iScoreRequired;
                                chainedInptData.PromptTotalIncorrectMoveBack.ConsecutiveFailures = TempRules.pctTotalIncorrectMoveDown.bConsequetiveIndex;
                                chainedInptData.PromptTotalIncorrectMoveBack.TotalTrial = TempRules.pctTotalIncorrectMoveDown.iTotalInstance;
                                chainedInptData.PromptTotalIncorrectMoveBack.FailureNeeded = TempRules.pctTotalIncorrectMoveDown.iTotalCorrectInstance;
                                chainedInptData.PromptTotalIncorrectMoveBack.bIOAReqd = TempRules.pctTotalIncorrectMoveDown.bIOARequird;
                                chainedInptData.PromptTotalIncorrectMoveBack.bMultiTchr = TempRules.pctTotalIncorrectMoveDown.bMultiTeacherRequired;
                                chainedInptData.PromptTotalIncorrectMoveBack.ConsecutiveAverageFailure = TempRules.pctTotalIncorrectMoveDown.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                                chainedInptData.PromptTotalIncorrectMoveBack.ConsecutiveAverageFailValue = TempRules.pctTotalIncorrectMoveDown.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                                //---------Added Frq | AvgDur | TotDur-------

                                chainedInptData.AvgDurationMoveUp.BarCondition = TempRules.pctAvgDurationMoveUp.iScoreRequired;
                                chainedInptData.AvgDurationMoveUp.ConsecutiveSuccess = TempRules.pctAvgDurationMoveUp.bConsequetiveIndex;
                                chainedInptData.AvgDurationMoveUp.TotalTrial = TempRules.pctAvgDurationMoveUp.iTotalInstance;
                                chainedInptData.AvgDurationMoveUp.SuccessNeeded = TempRules.pctAvgDurationMoveUp.iTotalCorrectInstance;
                                chainedInptData.AvgDurationMoveUp.bIOAReqd = TempRules.pctAvgDurationMoveUp.bIOARequird;
                                chainedInptData.AvgDurationMoveUp.bMultiTchr = TempRules.pctAvgDurationMoveUp.bMultiTeacherRequired;
                                chainedInptData.AvgDurationMoveUp.ConsecutiveAverage = TempRules.pctAvgDurationMoveUp.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                                chainedInptData.AvgDurationMoveUp.ConsecutiveAverageValue = TempRules.pctAvgDurationMoveUp.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                                chainedInptData.AvgDurationMoveDown.BarCondition = TempRules.pctAvgDurationMoveDown.iScoreRequired;
                                chainedInptData.AvgDurationMoveDown.ConsecutiveFailures = TempRules.pctAvgDurationMoveDown.bConsequetiveIndex;
                                chainedInptData.AvgDurationMoveDown.TotalTrial = TempRules.pctAvgDurationMoveDown.iTotalInstance;
                                chainedInptData.AvgDurationMoveDown.FailureNeeded = TempRules.pctAvgDurationMoveDown.iTotalCorrectInstance;
                                chainedInptData.AvgDurationMoveDown.bIOAReqd = TempRules.pctAvgDurationMoveDown.bIOARequird;
                                chainedInptData.AvgDurationMoveDown.bMultiTchr = TempRules.pctAvgDurationMoveDown.bMultiTeacherRequired;
                                chainedInptData.AvgDurationMoveDown.ConsecutiveAverageFailure = TempRules.pctAvgDurationMoveDown.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                                chainedInptData.AvgDurationMoveDown.ConsecutiveAverageFailValue = TempRules.pctAvgDurationMoveDown.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                                chainedInptData.TotalDurationMoveUp.BarCondition = TempRules.pctTotalDurationMoveUp.iScoreRequired;
                                chainedInptData.TotalDurationMoveUp.ConsecutiveSuccess = TempRules.pctTotalDurationMoveUp.bConsequetiveIndex;
                                chainedInptData.TotalDurationMoveUp.TotalTrial = TempRules.pctTotalDurationMoveUp.iTotalInstance;
                                chainedInptData.TotalDurationMoveUp.SuccessNeeded = TempRules.pctTotalDurationMoveUp.iTotalCorrectInstance;
                                chainedInptData.TotalDurationMoveUp.bIOAReqd = TempRules.pctTotalDurationMoveUp.bIOARequird;
                                chainedInptData.TotalDurationMoveUp.bMultiTchr = TempRules.pctTotalDurationMoveUp.bMultiTeacherRequired;
                                chainedInptData.TotalDurationMoveUp.ConsecutiveAverage = TempRules.pctTotalDurationMoveUp.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                                chainedInptData.TotalDurationMoveUp.ConsecutiveAverageValue = TempRules.pctTotalDurationMoveUp.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                                chainedInptData.TotalDurationMoveDown.BarCondition = TempRules.pctTotalDurationMoveDown.iScoreRequired;
                                chainedInptData.TotalDurationMoveDown.ConsecutiveFailures = TempRules.pctTotalDurationMoveDown.bConsequetiveIndex;
                                chainedInptData.TotalDurationMoveDown.TotalTrial = TempRules.pctTotalDurationMoveDown.iTotalInstance;
                                chainedInptData.TotalDurationMoveDown.FailureNeeded = TempRules.pctTotalDurationMoveDown.iTotalCorrectInstance;
                                chainedInptData.TotalDurationMoveDown.bIOAReqd = TempRules.pctTotalDurationMoveDown.bIOARequird;
                                chainedInptData.TotalDurationMoveDown.bMultiTchr = TempRules.pctTotalDurationMoveDown.bMultiTeacherRequired;
                                chainedInptData.TotalDurationMoveDown.ConsecutiveAverageFailure = TempRules.pctTotalDurationMoveDown.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                                chainedInptData.TotalDurationMoveDown.ConsecutiveAverageFailValue = TempRules.pctTotalDurationMoveDown.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                                chainedInptData.FrequencyMoveUp.BarCondition = TempRules.pctFrequencyMoveUp.iScoreRequired;
                                chainedInptData.FrequencyMoveUp.ConsecutiveSuccess = TempRules.pctFrequencyMoveUp.bConsequetiveIndex;
                                chainedInptData.FrequencyMoveUp.TotalTrial = TempRules.pctFrequencyMoveUp.iTotalInstance;
                                chainedInptData.FrequencyMoveUp.SuccessNeeded = TempRules.pctFrequencyMoveUp.iTotalCorrectInstance;
                                chainedInptData.FrequencyMoveUp.bIOAReqd = TempRules.pctFrequencyMoveUp.bIOARequird;
                                chainedInptData.FrequencyMoveUp.bMultiTchr = TempRules.pctFrequencyMoveUp.bMultiTeacherRequired;
                                chainedInptData.FrequencyMoveUp.ConsecutiveAverage = TempRules.pctFrequencyMoveUp.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                                chainedInptData.FrequencyMoveUp.ConsecutiveAverageValue = TempRules.pctFrequencyMoveUp.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                                chainedInptData.FrequencyMoveDown.BarCondition = TempRules.pctFrequencyMoveDown.iScoreRequired;
                                chainedInptData.FrequencyMoveDown.ConsecutiveFailures = TempRules.pctFrequencyMoveDown.bConsequetiveIndex;
                                chainedInptData.FrequencyMoveDown.TotalTrial = TempRules.pctFrequencyMoveDown.iTotalInstance;
                                chainedInptData.FrequencyMoveDown.FailureNeeded = TempRules.pctFrequencyMoveDown.iTotalCorrectInstance;
                                chainedInptData.FrequencyMoveDown.bIOAReqd = TempRules.pctFrequencyMoveDown.bIOARequird;
                                chainedInptData.FrequencyMoveDown.bMultiTchr = TempRules.pctFrequencyMoveDown.bMultiTeacherRequired;
                                chainedInptData.FrequencyMoveDown.ConsecutiveAverageFailure = TempRules.pctFrequencyMoveDown.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                                chainedInptData.FrequencyMoveDown.ConsecutiveAverageFailValue = TempRules.pctFrequencyMoveDown.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//


                                /*if (!chainedInptData.IOARequired)
                                    chainedInptData.IOARequired = TempRules.bIOARequird;
                                if (!chainedInptData.MultiTeacherRequired)
                                    chainedInptData.MultiTeacherRequired = TempRules.bMultiTeacherRequired;*/
                            }
                        }
                        #endregion
                        #region steprules
                        TempRules = new Rules();
                        TempRules = GetStepRules(oTemp.TemplateId, iColId);
                        if (TempRules != null)
                        {
                            step_moveupCount = TempRules.moveup;
                            step_movedownCount = TempRules.movedown;
                            if (TempRules.count > 0)
                            {

                                //Liju
                                bStepMoveUpIOA = bStepMoveUpIOA | TempRules.pctIndMoveUp.bIOARequird | TempRules.pctAccyMoveUp.bIOARequird | TempRules.pctlearnedStepMoveUp.bIOARequird | TempRules.excludeCrntStepMoveUp.bIOARequird;
                                bStepMoveUpMultiTecher = bStepMoveUpMultiTecher | TempRules.pctIndMoveUp.bMultiTeacherRequired | TempRules.pctAccyMoveUp.bMultiTeacherRequired | TempRules.pctlearnedStepMoveUp.bMultiTeacherRequired | TempRules.excludeCrntStepMoveUp.bMultiTeacherRequired;
                                bStepMoveDownIOA = bStepMoveDownIOA | TempRules.pctIndMoveDown.bIOARequird | TempRules.pctAccyMoveDown.bIOARequird | TempRules.pctlearnedStepMoveDown.bIOARequird | TempRules.excludeCrntStepMoveDown.bIOARequird;
                                bStepMoveDownMultiTecher = bStepMoveDownMultiTecher | TempRules.pctIndMoveDown.bMultiTeacherRequired | TempRules.pctAccyMoveDown.bMultiTeacherRequired | TempRules.pctlearnedStepMoveDown.bMultiTeacherRequired | TempRules.excludeCrntStepMoveDown.bMultiTeacherRequired;

                                chainedInptData.StepPercentAccuracy.BarCondition = TempRules.pctAccyMoveUp.iScoreRequired;
                                chainedInptData.StepPercentAccuracy.ConsecutiveSuccess = TempRules.pctAccyMoveUp.bConsequetiveIndex;
                                chainedInptData.StepPercentAccuracy.TotalTrial = TempRules.pctAccyMoveUp.iTotalInstance;
                                chainedInptData.StepPercentAccuracy.SuccessNeeded = TempRules.pctAccyMoveUp.iTotalCorrectInstance;
                                chainedInptData.StepPercentAccuracy.bIOAReqd = TempRules.pctAccyMoveUp.bIOARequird;
                                chainedInptData.StepPercentAccuracy.bMultiTchr = TempRules.pctAccyMoveUp.bMultiTeacherRequired;
                                chainedInptData.StepPercentAccuracy.ConsecutiveAverage = TempRules.pctAccyMoveUp.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                                chainedInptData.StepPercentAccuracy.ConsecutiveAverageValue = TempRules.pctAccyMoveUp.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//                            

                                chainedInptData.IncludeMistrials = TempRules.bIncludeMisTrail;

                                chainedInptData.StepPercentIndependence.BarCondition = TempRules.pctIndMoveUp.iScoreRequired;
                                chainedInptData.StepPercentIndependence.ConsecutiveSuccess = TempRules.pctIndMoveUp.bConsequetiveIndex;
                                chainedInptData.StepPercentIndependence.TotalTrial = TempRules.pctIndMoveUp.iTotalInstance;
                                chainedInptData.StepPercentIndependence.SuccessNeeded = TempRules.pctIndMoveUp.iTotalCorrectInstance;
                                chainedInptData.StepPercentIndependence.bIOAReqd = TempRules.pctIndMoveUp.bIOARequird;
                                chainedInptData.StepPercentIndependence.bMultiTchr = TempRules.pctIndMoveUp.bMultiTeacherRequired;
                                chainedInptData.StepPercentIndependence.ConsecutiveAverage = TempRules.pctIndMoveUp.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                                chainedInptData.StepPercentIndependence.ConsecutiveAverageValue = TempRules.pctIndMoveUp.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                                chainedInptData.StepMoveBackPercentAccuracy.BarCondition = TempRules.pctAccyMoveDown.iScoreRequired;
                                chainedInptData.StepMoveBackPercentAccuracy.ConsecutiveFailures = TempRules.pctAccyMoveDown.bConsequetiveIndex;
                                chainedInptData.StepMoveBackPercentAccuracy.TotalTrial = TempRules.pctAccyMoveDown.iTotalInstance;
                                chainedInptData.StepMoveBackPercentAccuracy.FailureNeeded = TempRules.pctAccyMoveDown.iTotalCorrectInstance;
                                chainedInptData.StepMoveBackPercentAccuracy.bIOAReqd = TempRules.pctAccyMoveDown.bIOARequird;
                                chainedInptData.StepMoveBackPercentAccuracy.bMultiTchr = TempRules.pctAccyMoveDown.bMultiTeacherRequired;
                                chainedInptData.StepMoveBackPercentAccuracy.ConsecutiveAverageFailure = TempRules.pctAccyMoveDown.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                                chainedInptData.StepMoveBackPercentAccuracy.ConsecutiveAverageFailValue = TempRules.pctAccyMoveDown.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                                chainedInptData.StepMoveBackPercentIndependence.BarCondition = TempRules.pctIndMoveDown.iScoreRequired;
                                chainedInptData.StepMoveBackPercentIndependence.ConsecutiveFailures = TempRules.pctIndMoveDown.bConsequetiveIndex;
                                chainedInptData.StepMoveBackPercentIndependence.TotalTrial = TempRules.pctIndMoveDown.iTotalInstance;
                                chainedInptData.StepMoveBackPercentIndependence.FailureNeeded = TempRules.pctIndMoveDown.iTotalCorrectInstance;
                                chainedInptData.StepMoveBackPercentIndependence.bIOAReqd = TempRules.pctIndMoveDown.bIOARequird;
                                chainedInptData.StepMoveBackPercentIndependence.bMultiTchr = TempRules.pctIndMoveDown.bMultiTeacherRequired;
                                chainedInptData.StepMoveBackPercentIndependence.ConsecutiveAverageFailure = TempRules.pctIndMoveDown.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                                chainedInptData.StepMoveBackPercentIndependence.ConsecutiveAverageFailValue = TempRules.pctIndMoveDown.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                                chainedInptData.StepPercentAllIndependence.BarCondition = TempRules.pctIndAllMoveUp.iScoreRequired;
                                chainedInptData.StepPercentAllIndependence.ConsecutiveSuccess = TempRules.pctIndAllMoveUp.bConsequetiveIndex;
                                chainedInptData.StepPercentAllIndependence.TotalTrial = TempRules.pctIndAllMoveUp.iTotalInstance;
                                chainedInptData.StepPercentAllIndependence.SuccessNeeded = TempRules.pctIndAllMoveUp.iTotalCorrectInstance;
                                chainedInptData.StepPercentAllIndependence.bIOAReqd = TempRules.pctIndAllMoveUp.bIOARequird;
                                chainedInptData.StepPercentAllIndependence.bMultiTchr = TempRules.pctIndAllMoveUp.bMultiTeacherRequired;
                                chainedInptData.StepPercentAllIndependence.ConsecutiveAverage = TempRules.pctIndAllMoveUp.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                                chainedInptData.StepPercentAllIndependence.ConsecutiveAverageValue = TempRules.pctIndAllMoveUp.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                                chainedInptData.StepMoveBackPercentAllIndependence.BarCondition = TempRules.pctIndAllMoveDown.iScoreRequired;
                                chainedInptData.StepMoveBackPercentAllIndependence.ConsecutiveFailures = TempRules.pctIndAllMoveDown.bConsequetiveIndex;
                                chainedInptData.StepMoveBackPercentAllIndependence.TotalTrial = TempRules.pctIndAllMoveDown.iTotalInstance;
                                chainedInptData.StepMoveBackPercentAllIndependence.FailureNeeded = TempRules.pctIndAllMoveDown.iTotalCorrectInstance;
                                chainedInptData.StepMoveBackPercentAllIndependence.bIOAReqd = TempRules.pctIndAllMoveDown.bIOARequird;
                                chainedInptData.StepMoveBackPercentAllIndependence.bMultiTchr = TempRules.pctIndAllMoveDown.bMultiTeacherRequired;
                                chainedInptData.StepMoveBackPercentAllIndependence.ConsecutiveAverageFailure = TempRules.pctIndAllMoveDown.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                                chainedInptData.StepMoveBackPercentAllIndependence.ConsecutiveAverageFailValue = TempRules.pctIndAllMoveDown.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                                chainedInptData.LearnedStepMoveUp.BarCondition = TempRules.pctlearnedStepMoveUp.iScoreRequired;
                                chainedInptData.LearnedStepMoveUp.ConsecutiveSuccess = TempRules.pctlearnedStepMoveUp.bConsequetiveIndex;
                                chainedInptData.LearnedStepMoveUp.TotalTrial = TempRules.pctlearnedStepMoveUp.iTotalInstance;
                                chainedInptData.LearnedStepMoveUp.SuccessNeeded = TempRules.pctlearnedStepMoveUp.iTotalCorrectInstance;
                                chainedInptData.LearnedStepMoveUp.bIOAReqd = TempRules.pctlearnedStepMoveUp.bIOARequird;
                                chainedInptData.LearnedStepMoveUp.bMultiTchr = TempRules.pctlearnedStepMoveUp.bMultiTeacherRequired;
                                chainedInptData.LearnedStepMoveUp.ConsecutiveAverage = TempRules.pctlearnedStepMoveUp.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                                chainedInptData.LearnedStepMoveUp.ConsecutiveAverageValue = TempRules.pctlearnedStepMoveUp.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                                chainedInptData.LearnedStepMoveBack.BarCondition = TempRules.pctlearnedStepMoveDown.iScoreRequired;
                                chainedInptData.LearnedStepMoveBack.ConsecutiveFailures = TempRules.pctlearnedStepMoveDown.bConsequetiveIndex;
                                chainedInptData.LearnedStepMoveBack.TotalTrial = TempRules.pctlearnedStepMoveDown.iTotalInstance;
                                chainedInptData.LearnedStepMoveBack.FailureNeeded = TempRules.pctlearnedStepMoveDown.iTotalCorrectInstance;
                                chainedInptData.LearnedStepMoveBack.bIOAReqd = TempRules.pctlearnedStepMoveDown.bIOARequird;
                                chainedInptData.LearnedStepMoveBack.bMultiTchr = TempRules.pctlearnedStepMoveDown.bMultiTeacherRequired;
                                chainedInptData.LearnedStepMoveBack.ConsecutiveAverageFailure = TempRules.pctlearnedStepMoveDown.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                                chainedInptData.LearnedStepMoveBack.ConsecutiveAverageFailValue = TempRules.pctlearnedStepMoveDown.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//


                                chainedInptData.ExcludeCrntStepMoveUp.BarCondition = TempRules.excludeCrntStepMoveUp.iScoreRequired;
                                chainedInptData.ExcludeCrntStepMoveUp.ConsecutiveSuccess = TempRules.excludeCrntStepMoveUp.bConsequetiveIndex;
                                chainedInptData.ExcludeCrntStepMoveUp.TotalTrial = TempRules.excludeCrntStepMoveUp.iTotalInstance;
                                chainedInptData.ExcludeCrntStepMoveUp.SuccessNeeded = TempRules.excludeCrntStepMoveUp.iTotalCorrectInstance;
                                chainedInptData.ExcludeCrntStepMoveUp.bIOAReqd = TempRules.excludeCrntStepMoveUp.bIOARequird;
                                chainedInptData.ExcludeCrntStepMoveUp.bMultiTchr = TempRules.excludeCrntStepMoveUp.bMultiTeacherRequired;
                                chainedInptData.ExcludeCrntStepMoveUp.ConsecutiveAverage = TempRules.excludeCrntStepMoveUp.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                                chainedInptData.ExcludeCrntStepMoveUp.ConsecutiveAverageValue = TempRules.excludeCrntStepMoveUp.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                                chainedInptData.ExcludeCrntStepMoveBack.BarCondition = TempRules.excludeCrntStepMoveDown.iScoreRequired;
                                chainedInptData.ExcludeCrntStepMoveBack.ConsecutiveFailures = TempRules.excludeCrntStepMoveDown.bConsequetiveIndex;
                                chainedInptData.ExcludeCrntStepMoveBack.TotalTrial = TempRules.excludeCrntStepMoveDown.iTotalInstance;
                                chainedInptData.ExcludeCrntStepMoveBack.FailureNeeded = TempRules.excludeCrntStepMoveDown.iTotalCorrectInstance;
                                chainedInptData.ExcludeCrntStepMoveBack.bIOAReqd = TempRules.excludeCrntStepMoveDown.bIOARequird;
                                chainedInptData.ExcludeCrntStepMoveBack.bMultiTchr = TempRules.excludeCrntStepMoveDown.bMultiTeacherRequired;
                                chainedInptData.ExcludeCrntStepMoveBack.ConsecutiveAverageFailure = TempRules.excludeCrntStepMoveDown.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                                chainedInptData.ExcludeCrntStepMoveBack.ConsecutiveAverageFailValue = TempRules.excludeCrntStepMoveDown.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                                chainedInptData.StepTotalCorrectMoveUp.BarCondition = TempRules.pctTotalCorrectMoveUp.iScoreRequired;
                                chainedInptData.StepTotalCorrectMoveUp.ConsecutiveSuccess = TempRules.pctTotalCorrectMoveUp.bConsequetiveIndex;
                                chainedInptData.StepTotalCorrectMoveUp.TotalTrial = TempRules.pctTotalCorrectMoveUp.iTotalInstance;
                                chainedInptData.StepTotalCorrectMoveUp.SuccessNeeded = TempRules.pctTotalCorrectMoveUp.iTotalCorrectInstance;
                                chainedInptData.StepTotalCorrectMoveUp.bIOAReqd = TempRules.pctTotalCorrectMoveUp.bIOARequird;
                                chainedInptData.StepTotalCorrectMoveUp.bMultiTchr = TempRules.pctTotalCorrectMoveUp.bMultiTeacherRequired;
                                chainedInptData.StepTotalCorrectMoveUp.ConsecutiveAverage = TempRules.pctTotalCorrectMoveUp.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                                chainedInptData.StepTotalCorrectMoveUp.ConsecutiveAverageValue = TempRules.pctTotalCorrectMoveUp.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                                chainedInptData.StepTotalCorrectMoveBack.BarCondition = TempRules.pctTotalCorrectMoveDown.iScoreRequired;
                                chainedInptData.StepTotalCorrectMoveBack.ConsecutiveFailures = TempRules.pctTotalCorrectMoveDown.bConsequetiveIndex;
                                chainedInptData.StepTotalCorrectMoveBack.TotalTrial = TempRules.pctTotalCorrectMoveDown.iTotalInstance;
                                chainedInptData.StepTotalCorrectMoveBack.FailureNeeded = TempRules.pctTotalCorrectMoveDown.iTotalCorrectInstance;
                                chainedInptData.StepTotalCorrectMoveBack.bIOAReqd = TempRules.pctTotalCorrectMoveDown.bIOARequird;
                                chainedInptData.StepTotalCorrectMoveBack.bMultiTchr = TempRules.pctTotalCorrectMoveDown.bMultiTeacherRequired;
                                chainedInptData.StepTotalCorrectMoveBack.ConsecutiveAverageFailure = TempRules.pctTotalCorrectMoveDown.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                                chainedInptData.StepTotalCorrectMoveBack.ConsecutiveAverageFailValue = TempRules.pctTotalCorrectMoveDown.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                                chainedInptData.StepTotalIncorrectMoveBack.BarCondition = TempRules.pctTotalIncorrectMoveDown.iScoreRequired;
                                chainedInptData.StepTotalIncorrectMoveBack.ConsecutiveFailures = TempRules.pctTotalIncorrectMoveDown.bConsequetiveIndex;
                                chainedInptData.StepTotalIncorrectMoveBack.TotalTrial = TempRules.pctTotalIncorrectMoveDown.iTotalInstance;
                                chainedInptData.StepTotalIncorrectMoveBack.FailureNeeded = TempRules.pctTotalIncorrectMoveDown.iTotalCorrectInstance;
                                chainedInptData.StepTotalIncorrectMoveBack.bIOAReqd = TempRules.pctTotalIncorrectMoveDown.bIOARequird;
                                chainedInptData.StepTotalIncorrectMoveBack.bMultiTchr = TempRules.pctTotalIncorrectMoveDown.bMultiTeacherRequired;
                                chainedInptData.StepTotalIncorrectMoveBack.ConsecutiveAverageFailure = TempRules.pctTotalIncorrectMoveDown.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                                chainedInptData.StepTotalIncorrectMoveBack.ConsecutiveAverageFailValue = TempRules.pctTotalIncorrectMoveDown.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                                //---------Added Frq | AvgDur | TotDur-------

                                chainedInptData.AvgDurationMoveUp.BarCondition = TempRules.pctAvgDurationMoveUp.iScoreRequired;
                                chainedInptData.AvgDurationMoveUp.ConsecutiveSuccess = TempRules.pctAvgDurationMoveUp.bConsequetiveIndex;
                                chainedInptData.AvgDurationMoveUp.TotalTrial = TempRules.pctAvgDurationMoveUp.iTotalInstance;
                                chainedInptData.AvgDurationMoveUp.SuccessNeeded = TempRules.pctAvgDurationMoveUp.iTotalCorrectInstance;
                                chainedInptData.AvgDurationMoveUp.bIOAReqd = TempRules.pctAvgDurationMoveUp.bIOARequird;
                                chainedInptData.AvgDurationMoveUp.bMultiTchr = TempRules.pctAvgDurationMoveUp.bMultiTeacherRequired;
                                chainedInptData.AvgDurationMoveUp.ConsecutiveAverage = TempRules.pctAvgDurationMoveUp.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                                chainedInptData.AvgDurationMoveUp.ConsecutiveAverageValue = TempRules.pctAvgDurationMoveUp.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                                chainedInptData.AvgDurationMoveDown.BarCondition = TempRules.pctAvgDurationMoveDown.iScoreRequired;
                                chainedInptData.AvgDurationMoveDown.ConsecutiveFailures = TempRules.pctAvgDurationMoveDown.bConsequetiveIndex;
                                chainedInptData.AvgDurationMoveDown.TotalTrial = TempRules.pctAvgDurationMoveDown.iTotalInstance;
                                chainedInptData.AvgDurationMoveDown.FailureNeeded = TempRules.pctAvgDurationMoveDown.iTotalCorrectInstance;
                                chainedInptData.AvgDurationMoveDown.bIOAReqd = TempRules.pctAvgDurationMoveDown.bIOARequird;
                                chainedInptData.AvgDurationMoveDown.bMultiTchr = TempRules.pctAvgDurationMoveDown.bMultiTeacherRequired;
                                chainedInptData.AvgDurationMoveDown.ConsecutiveAverageFailure = TempRules.pctAvgDurationMoveDown.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                                chainedInptData.AvgDurationMoveDown.ConsecutiveAverageFailValue = TempRules.pctAvgDurationMoveDown.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                                chainedInptData.TotalDurationMoveUp.BarCondition = TempRules.pctTotalDurationMoveUp.iScoreRequired;
                                chainedInptData.TotalDurationMoveUp.ConsecutiveSuccess = TempRules.pctTotalDurationMoveUp.bConsequetiveIndex;
                                chainedInptData.TotalDurationMoveUp.TotalTrial = TempRules.pctTotalDurationMoveUp.iTotalInstance;
                                chainedInptData.TotalDurationMoveUp.SuccessNeeded = TempRules.pctTotalDurationMoveUp.iTotalCorrectInstance;
                                chainedInptData.TotalDurationMoveUp.bIOAReqd = TempRules.pctTotalDurationMoveUp.bIOARequird;
                                chainedInptData.TotalDurationMoveUp.bMultiTchr = TempRules.pctTotalDurationMoveUp.bMultiTeacherRequired;
                                chainedInptData.TotalDurationMoveUp.ConsecutiveAverage = TempRules.pctTotalDurationMoveUp.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                                chainedInptData.TotalDurationMoveUp.ConsecutiveAverageValue = TempRules.pctTotalDurationMoveUp.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                                chainedInptData.TotalDurationMoveDown.BarCondition = TempRules.pctTotalDurationMoveDown.iScoreRequired;
                                chainedInptData.TotalDurationMoveDown.ConsecutiveFailures = TempRules.pctTotalDurationMoveDown.bConsequetiveIndex;
                                chainedInptData.TotalDurationMoveDown.TotalTrial = TempRules.pctTotalDurationMoveDown.iTotalInstance;
                                chainedInptData.TotalDurationMoveDown.FailureNeeded = TempRules.pctTotalDurationMoveDown.iTotalCorrectInstance;
                                chainedInptData.TotalDurationMoveDown.bIOAReqd = TempRules.pctTotalDurationMoveDown.bIOARequird;
                                chainedInptData.TotalDurationMoveDown.bMultiTchr = TempRules.pctTotalDurationMoveDown.bMultiTeacherRequired;
                                chainedInptData.TotalDurationMoveDown.ConsecutiveAverageFailure = TempRules.pctTotalDurationMoveDown.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                                chainedInptData.TotalDurationMoveDown.ConsecutiveAverageFailValue = TempRules.pctTotalDurationMoveDown.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                                chainedInptData.FrequencyMoveUp.BarCondition = TempRules.pctFrequencyMoveUp.iScoreRequired;
                                chainedInptData.FrequencyMoveUp.ConsecutiveSuccess = TempRules.pctFrequencyMoveUp.bConsequetiveIndex;
                                chainedInptData.FrequencyMoveUp.TotalTrial = TempRules.pctFrequencyMoveUp.iTotalInstance;
                                chainedInptData.FrequencyMoveUp.SuccessNeeded = TempRules.pctFrequencyMoveUp.iTotalCorrectInstance;
                                chainedInptData.FrequencyMoveUp.bIOAReqd = TempRules.pctFrequencyMoveUp.bIOARequird;
                                chainedInptData.FrequencyMoveUp.bMultiTchr = TempRules.pctFrequencyMoveUp.bMultiTeacherRequired;
                                chainedInptData.FrequencyMoveUp.ConsecutiveAverage = TempRules.pctFrequencyMoveUp.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                                chainedInptData.FrequencyMoveUp.ConsecutiveAverageValue = TempRules.pctFrequencyMoveUp.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                                chainedInptData.FrequencyMoveDown.BarCondition = TempRules.pctFrequencyMoveDown.iScoreRequired;
                                chainedInptData.FrequencyMoveDown.ConsecutiveFailures = TempRules.pctFrequencyMoveDown.bConsequetiveIndex;
                                chainedInptData.FrequencyMoveDown.TotalTrial = TempRules.pctFrequencyMoveDown.iTotalInstance;
                                chainedInptData.FrequencyMoveDown.FailureNeeded = TempRules.pctFrequencyMoveDown.iTotalCorrectInstance;
                                chainedInptData.FrequencyMoveDown.bIOAReqd = TempRules.pctFrequencyMoveDown.bIOARequird;
                                chainedInptData.FrequencyMoveDown.bMultiTchr = TempRules.pctFrequencyMoveDown.bMultiTeacherRequired;
                                chainedInptData.FrequencyMoveDown.ConsecutiveAverageFailure = TempRules.pctFrequencyMoveDown.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                                chainedInptData.FrequencyMoveDown.ConsecutiveAverageFailValue = TempRules.pctFrequencyMoveDown.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                                //getPromptNA(oTemp.TemplateId, Convert.ToInt32(dr["DSTempSetColId"].ToString()), TempRules);
                                //if (!bPromptMoveupNA)
                                //{
                                //    bPromptMoveupNA = TempRules.NAPromptMoveup;
                                //}
                                //if (!bPromptMovedownNA)
                                //{
                                //    bPromptMovedownNA = TempRules.NAPromptMoveDown;
                                //}

                                getstepNA(oTemp.TemplateId, Convert.ToInt32(dr["DSTempSetColId"].ToString()), TempRules);
                                if (!bStepPromptMoveupNA)
                                {
                                    bStepPromptMoveupNA = TempRules.NAStepMoveup;
                                }
                                if (!bStepPromptMovedownNA)
                                {
                                    bStepPromptMovedownNA = TempRules.NAStepMoveDown;
                                }



                                /*if (!chainedInptData.IOARequired)
                                    chainedInptData.IOARequired = TempRules.bIOARequird;
                                if (!chainedInptData.MultiTeacherRequired)
                                    chainedInptData.MultiTeacherRequired = TempRules.bMultiTeacherRequired;*/
                            }
                        }
                        #endregion
                        chainedCols.Add(sColName, chainedInptData);
                        //if (chainedInptData.PromptHirecharchy == false)
                        //{
                        //    prompt = "-,+";
                        //    //promptUsed = prompt.Split(',');
                        //    sCurrentPrompt = "+";
                        //    TargetPrompt = "+";
                        //    promptUsed = new string[1];
                        //    promptUsed[0] = "+";

                        //}
                        //else
                        //{
                        Prompt[] arPromtList = GetPrompts(oTemp.TemplateId);
                        promptUsed = new string[arPromtList.Count()];
                        LessonpromptUsed = new string[arPromtList.Count()];
                        LessonpromptUsedOther = new string[arPromtList.Count()];
                        bPromtHirchy = true;
                        for (int iCount = 0; iCount < arPromtList.Count(); iCount++)
                        {
                            promptUsed[iCount] = arPromtList[iCount].promptId.ToString();
                            LessonpromptUsed[iCount] = arPromtList[iCount].promptId.ToString();
                            LessonpromptUsedOther[iCount] = arPromtList[iCount].promptId.ToString();
                            if (!String.IsNullOrEmpty(sCurrentLessonPrompt) && sCurrentLessonPrompt != "0")
                            {
                                if (arPromtList[iCount].promptId.ToString() == sCurrentLessonPrompt)
                                    crntPrmtIndex = iCount;
                            }
                        }

                        if (!chainedInptData.PromptHirecharchy)
                            bPromtHirchy = false;


                        if (promptUsed.Length > 0)
                        {
                            TargetPrompt = promptUsed[promptUsed.Length - 1];
                            LessonTargetPrompt = TargetPrompt;

                            if (String.IsNullOrEmpty(sCurrentLessonPrompt) || sCurrentLessonPrompt == "0")
                            {
                                sCurrentPrompt = promptUsed[0];
                                Session["sCurrentPrompt"] = sCurrentPrompt;
                                sCurrentLessonPrompt = sCurrentPrompt;
                            }
                        }
                        //}

                        if (dr["ColTypeCd"].ToString() == "+/-")
                        {
                            prompt = "-,+";
                            //promptUsed = prompt.Split(',');
                            sCurrentPrompt = "+";
                            TargetPrompt = "+";
                            promptUsed = new string[1];
                            promptUsed[0] = "+";
                        }
                        if (dr["ColTypeCd"].ToString() == "Prompt")
                        {
                            bpromptColumn = true;
                        }
                        DiscreteTrials TrialLists = new DiscreteTrials();
                        reader.Close();
                        int counter = chainedCols.Count;
                        int ind = 0;


                        oDisc = new DiscreteSession();
                        TrialLists = oDisc.GetTrialLists(oSession.StudentId, oTemp.TemplateId, iCurrentSetId, iCurrentStep, chainedCols[sColName].RequiredSession(), sColName, false, hfPlusMinusResp.Value, coltypeCode, oDS.ChainType);

                        //if (chainedInptData.MultiTeacherRequired)
                        bMultyTchr = oDisc.MultiTeacherStatus(oSession.StudentId, oTemp.TemplateId);
                        // else
                        //    bMultyTchr = false;

                        // if (chainedInptData.IOARequired)
                        bIOA = oDisc.IOAStats(oSession.StudentId, oTemp.TemplateId);
                        // else
                        //    bIOA = false;
                        //Trials = trails.GetTrialLists(8, 1, ht[key].RequiredSession(), key);
                        string stepValue = TrialLists.value;
                        int reqSess = chainedCols[sColName].RequiredSession();
                        chainedCols[sColName].SessionCount = TrialLists.sessionCount;
                        chainedCols[sColName].StepCount = TrialLists.trialsCount;
                        chainedCols[sColName].PromptsUsed = promptUsed;
                        chainedCols[sColName].TotalSets = TrialLists.totalSet;
                        chainedCols[sColName].NoPromptsUsed = LessonpromptUsed;
                        chainedCols[sColName].sCurrentLessonPrompt = sCurrentLessonPrompt;
                        chainedCols[sColName].StepPrompts = oDisc.GetStepPrompts(Convert.ToInt32(dr["DSTempSetColId"].ToString()), StdtSessHdrId);
                        chainedCols[sColName].multiMeasure = true;

                        string crctResponse = "+";
                        if ((hfPlusMinusResp.Value == "+") || (hfPlusMinusResp.Value == "-"))
                        {
                            crctResponse = hfPlusMinusResp.Value;
                        }
                        chainedCols[sColName].CorrectResp = crctResponse;
                        chainedInptData.next = oDS.CrntStep;
                        //chainedInptData.marked = marked_count;

                        int iTrailCount = TrialLists.trialsCount;
                        bool bcustMoveUp = false;
                        bool bCustMoveDown = false;
                        bool bTotDurationMoveUp = true;
                        bool bTotDurationMoveDown = true;
                        bool bstepTotDurationMoveUp = true;
                        bool bstepTotDurationMoveDown = true;
                        bool bPromptTotDurationMoveUp = true;
                        bool bPromptTotDurationMoveDown = true;

                        bool bAvgDurationMoveUp = true;
                        bool bAvgDurationMoveDown = true;
                        bool bstepAvgDurationMoveUp = true;
                        bool bstepAvgDurationMoveDown = true;
                        bool bPromptAvgDurationMoveUp = true;
                        bool bPromptAvgDurationMoveDown = true;

                        bool bFrequencyMoveUp = true;
                        bool bFrequencyMoveDown = true;
                        bool bstepFrequencyMoveUp = true;
                        bool bstepFrequencyMoveDown = true;
                        bool bPromptFrequencyMoveUp = true;
                        bool bPromptFrequencyMoveDown = true;

                        bool bIndallMoveUp = true;
                        bool bIndallMoveDown = true;
                        bool bstepIndallMoveUp = true;
                        bool bstepIndallMoveDown = true;
                        bool bPromptIndallMoveUp = true;
                        bool bPromptIndallMoveDown = true;

                        bool bLearnedMoveUp = true;
                        bool bLearnedMoveDown = true;
                        bool bstepLearnedMoveUp = true;
                        bool bstepLearnedMoveDown = true;
                        bool bPromptLearnedMoveUp = true;
                        bool bPromptLearnedMoveDown = true;

                        bool FreqDurTextFlag = false;

                        int next = oDS.CrntStep;
                        int MoveUpstat = 1;

                        string sEventType = "";

                        if (chainedCols[sColName].StepCount == 0)
                        {
                            if (count - 1 == loop)
                            {
                                if (hfProbe.Value == "Probe")
                                {
                                    return;
                                }
                            }
                            else
                            {
                                loop++;
                                continue;
                            }
                        }
                        string strPromptCriteria = "";
                        int promptUp = 0, promptDown = 0;
                        string sqlStr1;
                        strPromptCriteria = "SELECT  Count(DR.DSTempRuleId)	FROM DSTempHdr DT  INNER JOIN DSTempSetCol DST ON DT.DSTempHdrId = DST.DSTempHdrId " +
                            "INNER JOIN DSTempSetColCalc DC ON DST.DSTempSetColId = DC.DSTempSetColId  INNER JOIN DSTempRule DR ON DR.DSTempSetColCalcId = DC.DSTempSetColCalcId " +
                            "WHERE (DT.DSTempHdrId =" + oTemp.TemplateId + ")AND DR.RuleType='PROMPT' AND DR.CriteriaType='MOVE UP' " +//AND DR.DSTempSetColId=" + iColId +
                            " AND DR.ActiveInd='A' AND DR.IsNA=1";
                        promptUp = Convert.ToInt32(oData.FetchValue(strPromptCriteria));
                        strPromptCriteria = "SELECT  Count(DR.DSTempRuleId)	FROM DSTempHdr DT  INNER JOIN DSTempSetCol DST ON DT.DSTempHdrId = DST.DSTempHdrId " +
                            "INNER JOIN DSTempSetColCalc DC ON DST.DSTempSetColId = DC.DSTempSetColId  INNER JOIN DSTempRule DR ON DR.DSTempSetColCalcId = DC.DSTempSetColCalcId " +
                            "WHERE (DT.DSTempHdrId =" + oTemp.TemplateId + ")AND DR.RuleType='PROMPT' AND DR.CriteriaType='MOVE DOWN' " +//AND DR.DSTempSetColId=" + iColId +
                            " AND DR.ActiveInd='A' AND DR.IsNA=1";

                        promptDown = Convert.ToInt32(oData.FetchValue(strPromptCriteria));
                        chainedCols[sColName].promptUp = promptUp;
                        chainedCols[sColName].promptDown = promptDown;

                        string strqry1 = " select case when'%Independent of All Steps' in(SELECT  DC.CalcType FROM DSTempHdr DT " +
                                        " INNER JOIN DSTempSetCol DST ON DT.DSTempHdrId = DST.DSTempHdrId " +
                                        "INNER JOIN DSTempSetColCalc DC ON DST.DSTempSetColId = DC.DSTempSetColId" +
                                        " WHERE DT.DSTempHdrId =" + oTemp.TemplateId + ") then 'true' else 'false' end";
                        object colt = oData.FetchValue(strqry1);

                        if (chainedCols[sColName].StepCount > 0)
                        {
                            sesResultchain = new Chained.Result[chainedCols.Count];
                            if ((oDS.ChainType == "Forward chain" || oDS.ChainType == "Backward chain") && (dr["ColTypeCd"].ToString() == "Duration"
                                || dr["ColTypeCd"].ToString() == "Text" || dr["ColTypeCd"].ToString() == "Frequency" || dr["ColTypeCd"].ToString() == "Prompt" || (dr["ColTypeCd"].ToString() == "+/-" && colt.ToString() == "true")))
                            {
                                #region text
                                if (dr["ColTypeCd"].ToString() == "Text")
                                {
                                    bool status = false;
                                    TempRules = GetSetRules(oTemp.TemplateId, iColId);
                                    colCalId = Convert.ToInt32(ViewState["colCalId"]);
                                    if (TempRules.pctCustomMoveUp.iScoreRequired > 0)
                                    {
                                        bcustMoveUp = ValidateUp(oSession.StudentId, colCalId, TempRules.pctCustomMoveUp.iScoreRequired, reqSess,
                                            TempRules.pctCustomMoveUp.iTotalCorrectInstance, TempRules.pctCustomMoveUp.bConsequetiveIndex, status);
                                    }
                                    if (TempRules.pctCustomMoveDown.iScoreRequired > 0)
                                    {
                                        bCustMoveDown = ValidateDown(oSession.StudentId, colCalId, TempRules.pctCustomMoveDown.iScoreRequired, reqSess,
                                            TempRules.pctCustomMoveDown.iTotalCorrectInstance, TempRules.pctCustomMoveDown.bConsequetiveIndex, status);

                                    }
                                }
                                #endregion
                                #region Duration
                                else if (dr["ColTypeCd"].ToString() == "Duration")
                                {
                                    int colId = Convert.ToInt32(dr["DSTempSetColId"]);
                                    string selqry1 = "select Moveupstat from dstempsetcol DsCol inner join DSTempHdr Hdr on Hdr.DSTempHdrId=DsCol.DSTempHdrId where dsCol.DSTempHdrId=" + oTemp.TemplateId + " And DSTempSetColId= " + colId;
                                    object stat = oData.FetchValue(selqry1);
                                    if (stat != null)
                                        MoveUpstat = Convert.ToInt16(stat);
                                    #region MoveUp in Less than critera-Default
                                    if (MoveUpstat == 1)
                                    {
                                        freqdureloop++;
                                        bool status = true;
                                        CompletionStatusSet = "";
                                        //TempRules = GetPromptRules(oTemp.TemplateId, iColId);
                                        avgDurationId = Convert.ToInt32(ViewState["avgDurationId"]);
                                        totDuraionId = Convert.ToInt32(ViewState["totDuraionId"]);
                                        TempRules = GetPromptRules(oTemp.TemplateId, iColId);

                                        //tr 02_07_2019
                                        //avg duration
                                        //prompt chained
                                        if (promptUp >= 1)
                                            bPromptAvgDurationMoveUp = false;
                                        if (TempRules.pctAvgDurationMoveUp.iScoreRequired > 0)
                                        {
                                            bPromptAvgDurationMoveUp = ValidateUp(oSession.StudentId, avgDurationId, TempRules.pctAvgDurationMoveUp.iScoreRequired, reqSess,
                                                TempRules.pctAvgDurationMoveUp.iTotalCorrectInstance, TempRules.pctAvgDurationMoveUp.bConsequetiveIndex, status);

                                            bRuleStatusIOA = oDisc.checkConditionIOA(bPromptMoveUpIOA, bIOA);
                                            bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bPromptMoveUpMultiTecher, bMultyTchr);
                                            if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                            {
                                                //if (promptUp >= 1)
                                                //    bPromptFrequencyMoveUp = false;
                                                if (bPromptAvgDurationMoveUp)
                                                {
                                                    if (sCurrentPrompt != LessonpromptUsed[LessonpromptUsed.Length - 1])
                                                    {
                                                        int iPromptIndex = Chained.Model.PromptIndex(LessonpromptUsed, sCurrentPrompt);
                                                        if (iPromptIndex < LessonpromptUsed.Length)
                                                        {
                                                            sNextLessonPrompt = LessonpromptUsed[iPromptIndex + 1];
                                                            bPromptMoveUp = true;
                                                            bAvgDurationMoveUp = false;
                                                            bAvgDurationMoveDown = false;
                                                            GlobalPromptMoveUp = true;
                                                        }
                                                        else
                                                            bPromptAvgDurationMoveUp = false;
                                                    }
                                                    else
                                                        bPromptAvgDurationMoveUp = false;
                                                }
                                            }
                                        }
                                        else
                                            bPromptAvgDurationMoveUp = false;

                                        if (!bPromptAvgDurationMoveUp)
                                        {
                                            if (promptDown >= 1)
                                                bPromptAvgDurationMoveDown = false;
                                            if (TempRules.pctAvgDurationMoveDown.iScoreRequired > 0)
                                            {
                                                bPromptAvgDurationMoveDown = ValidateDown(oSession.StudentId, avgDurationId, TempRules.pctAvgDurationMoveDown.iScoreRequired, reqSess,
                                                    TempRules.pctAvgDurationMoveDown.iTotalCorrectInstance, TempRules.pctAvgDurationMoveDown.bConsequetiveIndex, status);

                                                bRuleStatusIOA = oDisc.checkConditionIOA(bPromptMoveDownIOA, bIOA);
                                                bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bPromptMoveDownMultiTecher, bMultyTchr);
                                                if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                {
                                                    //if (promptDown >= 1)
                                                    //    bPromptFrequencyMoveDown = false;
                                                    if (bPromptAvgDurationMoveDown)
                                                    {
                                                        if (sCurrentPrompt != LessonpromptUsed[0])
                                                        {
                                                            int iPromptIndex = Chained.Model.PromptIndex(LessonpromptUsed, sCurrentPrompt);
                                                            if (iPromptIndex > 0)
                                                            {
                                                                sNextLessonPrompt = LessonpromptUsed[iPromptIndex - 1];
                                                                bPromptMoveBack = true;
                                                                bAvgDurationMoveDown = false;
                                                                bAvgDurationMoveUp = false;
                                                                GlobalPromptMoveBack = true;
                                                            }
                                                            else
                                                                bPromptAvgDurationMoveDown = false;
                                                        }
                                                        else
                                                            bPromptAvgDurationMoveDown = false;
                                                    }

                                                }
                                            }
                                            else
                                                bPromptAvgDurationMoveDown = false;



                                            //step chained
                                            if (!bPromptAvgDurationMoveUp && !bPromptAvgDurationMoveDown)
                                            {
                                                TempRules = GetStepRules(oTemp.TemplateId, iColId);
                                                if (TempRules.pctAvgDurationMoveUp.iScoreRequired > 0)
                                                {
                                                    bstepAvgDurationMoveUp = ValidateUp(oSession.StudentId, avgDurationId, TempRules.pctAvgDurationMoveUp.iScoreRequired, reqSess,
                                                        TempRules.pctAvgDurationMoveUp.iTotalCorrectInstance, TempRules.pctAvgDurationMoveUp.bConsequetiveIndex, status);

                                                    int stepcount = TrialLists.trialsCount;

                                                    bRuleStatusIOA = oDisc.checkConditionIOA(bStepMoveUpIOA, bIOA);
                                                    bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bStepMoveUpMultiTecher, bMultyTchr);
                                                    if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                    {
                                                        if (bstepAvgDurationMoveUp)
                                                        {
                                                            //if (oDS.CrntStep != stepcount)
                                                            //{
                                                            if (oDS.CrntStep < stepcount)
                                                            {
                                                                nextStep = oDS.CrntStep + 1;

                                                                if (oDS.CrntStep == stepcount)
                                                                {
                                                                    nextStep = stepcount;
                                                                }
                                                                if (bStepMoveUp && bstepAvgDurationMoveUp)
                                                                {
                                                                    bStepMoveUp = true;
                                                                    GlobalStepMoveUp = true;
                                                                }
                                                                bAvgDurationMoveUp = false;
                                                                bAvgDurationMoveDown = false;

                                                            }
                                                            else
                                                                bstepAvgDurationMoveUp = false;
                                                            //} 

                                                            //    else
                                                            //        bstepFrequencyMoveUp = false;
                                                        }

                                                    }
                                                }
                                                else
                                                    bstepAvgDurationMoveUp = false;
                                            }
                                            else
                                                bstepAvgDurationMoveUp = false;

                                            if (!bPromptAvgDurationMoveUp && !bPromptAvgDurationMoveDown)
                                            {
                                                if (TempRules.pctAvgDurationMoveDown.iScoreRequired > 0)
                                                {
                                                    bstepAvgDurationMoveDown = ValidateDown(oSession.StudentId, avgDurationId, TempRules.pctAvgDurationMoveDown.iScoreRequired, reqSess,
                                                        TempRules.pctAvgDurationMoveDown.iTotalCorrectInstance, TempRules.pctAvgDurationMoveDown.bConsequetiveIndex, status);

                                                    int stepcount = TrialLists.trialsCount;

                                                    bRuleStatusIOA = oDisc.checkConditionIOA(bStepMoveDownIOA, bIOA);
                                                    bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bStepMoveDownMultiTecher, bMultyTchr);
                                                    if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                    {
                                                        //if (promptDown >= 1)
                                                        //    bPromptFrequencyMoveDown = false;
                                                        if (bstepAvgDurationMoveDown)
                                                        {
                                                            //    if (oDS.CrntStep != stepcount)
                                                            //{
                                                            if (oDS.CrntStep <= stepcount)
                                                            {
                                                                nextStep = oDS.CrntStep - 1;
                                                                if (bStepMoveBack && bstepAvgDurationMoveDown)
                                                                {
                                                                    bStepMoveBack = true;
                                                                    GlobalStepMoveBack = true;
                                                                }

                                                                if (oDS.CrntStep == 1)
                                                                {
                                                                    nextStep = 1;
                                                                    bstepAvgDurationMoveDown = false;
                                                                    if ((bstepAvgDurationMoveDown) == false)
                                                                        GlobalStepMoveBack = false;
                                                                }
                                                                bAvgDurationMoveUp = false;
                                                                bAvgDurationMoveDown = false;
                                                            }
                                                            else
                                                                bstepAvgDurationMoveDown = false;
                                                            //} 

                                                            //    else
                                                            //        bstepFrequencyMoveDown = false;
                                                        }

                                                    }
                                                }
                                                else
                                                    bstepAvgDurationMoveDown = false;
                                            }
                                            else
                                                bstepAvgDurationMoveDown = false;

                                            //set chained
                                            if (!bstepAvgDurationMoveUp && !bstepAvgDurationMoveDown && !bPromptAvgDurationMoveUp && !bPromptAvgDurationMoveDown)
                                            {
                                                TempRules = GetSetRules(oTemp.TemplateId, iColId);

                                                if (TempRules.pctAvgDurationMoveUp.iScoreRequired > 0)
                                                {
                                                    bAvgDurationMoveUp = ValidateUp(oSession.StudentId, avgDurationId, TempRules.pctAvgDurationMoveUp.iScoreRequired, reqSess,
                                                        TempRules.pctAvgDurationMoveUp.iTotalCorrectInstance, TempRules.pctAvgDurationMoveUp.bConsequetiveIndex, status);
                                                    int setcount = TrialLists.totalSet;

                                                    bRuleStatusIOA = oDisc.checkConditionIOA(bSetMoveUpIOA, bIOA);
                                                    bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bSetMoveUpMultiTecher, bMultyTchr);
                                                    if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                    {

                                                        if (bAvgDurationMoveUp)
                                                        {
                                                            if (oDS.CrntSetNbr < setcount)
                                                                nextSet = oDS.CrntSetNbr + 1;
                                                            if (oDS.CrntSetNbr == setcount)
                                                            {
                                                                nextSet = setcount;
                                                                CompletionStatusSet = "COMPLETED";
                                                            }
                                                            if (CompletionStatusSet == "COMPLETED")
                                                            {
                                                                bSetCompleted = true;
                                                                MaintenanceOrCompletion = true;
                                                            }
                                                            else
                                                            {
                                                                bSetCompleted = false;
                                                                //MaintenanceOrCompletion = false;
                                                            }
                                                            if (bSetMoveUp && bAvgDurationMoveUp)
                                                            {
                                                                bSetMoveUp = true;
                                                                GlobalSetMoveUp = true;
                                                                if (bSetMoveUp == true && GlobalSetMoveUp == true)
                                                                    bPrompt = true;
                                                            }
                                                        }
                                                    }



                                                }
                                                else
                                                    bAvgDurationMoveUp = false;

                                                if (!bstepAvgDurationMoveUp && !bstepAvgDurationMoveDown && !bPromptAvgDurationMoveUp && !bPromptAvgDurationMoveDown)
                                                {
                                                    if (TempRules.pctAvgDurationMoveDown.iScoreRequired > 0)
                                                    {
                                                        bAvgDurationMoveDown = ValidateDown(oSession.StudentId, avgDurationId, TempRules.pctAvgDurationMoveDown.iScoreRequired, reqSess,
                                                            TempRules.pctAvgDurationMoveDown.iTotalCorrectInstance, TempRules.pctAvgDurationMoveDown.bConsequetiveIndex, status);
                                                        int setcount = TrialLists.totalSet;

                                                        bRuleStatusIOA = oDisc.checkConditionIOA(bSetMoveDownIOA, bIOA);
                                                        bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bSetMoveDownMultiTecher, bMultyTchr);
                                                        if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                        {

                                                            if (bAvgDurationMoveDown)
                                                            {
                                                                if (oDS.CrntSetNbr <= setcount)
                                                                    nextSet = oDS.CrntSetNbr - 1;
                                                                if (oDS.CrntSetNbr == 1)
                                                                    nextSet = 1;
                                                                if (bSetMoveBack && bAvgDurationMoveDown)
                                                                {
                                                                    bSetMoveBack = true;
                                                                    GlobalSetMoveBack = true;
                                                                }
                                                            }
                                                        }

                                                    }
                                                }
                                                else
                                                    bAvgDurationMoveDown = false;

                                            }
                                            FreqDurTextFlag = true;

                                        }
                                        //avg duration
                                        TempRules = GetPromptRules(oTemp.TemplateId, iColId);
                                        //total duration chained
                                        if (TempRules.pctTotalDurationMoveUp.iTotalCorrectInstance > 0)
                                        {
                                            if (promptUp >= 1)
                                                bPromptTotDurationMoveUp = false;
                                            if (TempRules.pctTotalDurationMoveUp.iScoreRequired > 0)
                                            {
                                                bPromptTotDurationMoveUp = ValidateUp(oSession.StudentId, totDuraionId, TempRules.pctTotalDurationMoveUp.iScoreRequired, reqSess,
                                                    TempRules.pctTotalDurationMoveUp.iTotalCorrectInstance, TempRules.pctTotalDurationMoveUp.bConsequetiveIndex, status);

                                                bRuleStatusIOA = oDisc.checkConditionIOA(bPromptMoveUpIOA, bIOA);
                                                bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bPromptMoveUpMultiTecher, bMultyTchr);
                                                if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                {
                                                    //if (promptUp >= 1)
                                                    //    bPromptFrequencyMoveUp = false;
                                                    if (bPromptTotDurationMoveUp)
                                                    {
                                                        if (sCurrentPrompt != LessonpromptUsed[LessonpromptUsed.Length - 1])
                                                        {
                                                            int iPromptIndex = Chained.Model.PromptIndex(LessonpromptUsed, sCurrentPrompt);
                                                            if (iPromptIndex < LessonpromptUsed.Length)
                                                            {
                                                                sNextLessonPrompt = LessonpromptUsed[iPromptIndex + 1];
                                                                bPromptMoveUp = true;
                                                                bTotDurationMoveUp = false;
                                                                bTotDurationMoveDown = false;
                                                                GlobalPromptMoveUp = true;
                                                            }
                                                            else
                                                                bPromptTotDurationMoveUp = false;
                                                        }
                                                        else
                                                            bPromptTotDurationMoveUp = false;
                                                    }
                                                }
                                            }
                                        }
                                        else
                                            bPromptTotDurationMoveUp = false;
                                        if (!bPromptTotDurationMoveUp)
                                        {
                                            if (promptDown >= 1)
                                                bPromptTotDurationMoveDown = false;
                                            if (TempRules.pctTotalDurationMoveDown.iScoreRequired > 0)
                                            {
                                                bPromptTotDurationMoveDown = ValidateDown(oSession.StudentId, totDuraionId, TempRules.pctTotalDurationMoveDown.iScoreRequired, reqSess,
                                                    TempRules.pctTotalDurationMoveDown.iTotalCorrectInstance, TempRules.pctTotalDurationMoveDown.bConsequetiveIndex, status);

                                                bRuleStatusIOA = oDisc.checkConditionIOA(bPromptMoveDownIOA, bIOA);
                                                bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bPromptMoveDownMultiTecher, bMultyTchr);
                                                if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                {
                                                    //if (promptDown >= 1)
                                                    //    bPromptFrequencyMoveDown = false;
                                                    if (bPromptTotDurationMoveDown)
                                                    {
                                                        if (sCurrentPrompt != LessonpromptUsed[0])
                                                        {
                                                            int iPromptIndex = Chained.Model.PromptIndex(LessonpromptUsed, sCurrentPrompt);
                                                            if (iPromptIndex > 0)
                                                            {
                                                                sNextLessonPrompt = LessonpromptUsed[iPromptIndex - 1];
                                                                bPromptMoveBack = true;
                                                                bTotDurationMoveDown = false;
                                                                bTotDurationMoveUp = false;
                                                                GlobalPromptMoveBack = true;
                                                            }
                                                            else
                                                                bPromptTotDurationMoveDown = false;
                                                        }
                                                        else
                                                            bPromptTotDurationMoveDown = false;
                                                    }

                                                }
                                            }
                                            else
                                                bPromptTotDurationMoveDown = false;
                                            //total duration
                                            //tr 02_07_2019

                                            //step chained
                                            if (!bPromptTotDurationMoveUp && !bPromptTotDurationMoveDown)
                                            {
                                                TempRules = GetStepRules(oTemp.TemplateId, iColId);
                                                if (TempRules.pctTotalDurationMoveUp.iScoreRequired > 0)
                                                {
                                                    bstepTotDurationMoveUp = ValidateUp(oSession.StudentId, totDuraionId, TempRules.pctTotalDurationMoveUp.iScoreRequired, reqSess,
                                                        TempRules.pctTotalDurationMoveUp.iTotalCorrectInstance, TempRules.pctTotalDurationMoveUp.bConsequetiveIndex, status);

                                                    int stepcount = TrialLists.trialsCount;

                                                    bRuleStatusIOA = oDisc.checkConditionIOA(bStepMoveUpIOA, bIOA);
                                                    bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bStepMoveUpMultiTecher, bMultyTchr);
                                                    if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                    {
                                                        if (bstepTotDurationMoveUp)
                                                        {
                                                            //if (oDS.CrntStep != stepcount)
                                                            //{
                                                            if (oDS.CrntStep < stepcount)
                                                            {
                                                                nextStep = oDS.CrntStep + 1;

                                                                if (oDS.CrntStep == stepcount)
                                                                {
                                                                    nextStep = stepcount;
                                                                }
                                                                if (bStepMoveUp && bstepTotDurationMoveUp)
                                                                {
                                                                    bStepMoveUp = true;
                                                                    GlobalStepMoveUp = true;
                                                                }
                                                                bTotDurationMoveUp = false;
                                                                bTotDurationMoveDown = false;

                                                            }
                                                            else
                                                                bstepTotDurationMoveUp = false;
                                                            //} 

                                                            //    else
                                                            //        bstepFrequencyMoveUp = false;
                                                        }

                                                    }
                                                }
                                                else
                                                    bstepTotDurationMoveUp = false;
                                            }
                                            else
                                                bstepTotDurationMoveUp = false;

                                            if (!bPromptTotDurationMoveUp && !bPromptTotDurationMoveDown)
                                            {
                                                if (TempRules.pctTotalDurationMoveDown.iScoreRequired > 0)
                                                {
                                                    bstepTotDurationMoveDown = ValidateDown(oSession.StudentId, totDuraionId, TempRules.pctTotalDurationMoveDown.iScoreRequired, reqSess,
                                                        TempRules.pctTotalDurationMoveDown.iTotalCorrectInstance, TempRules.pctTotalDurationMoveDown.bConsequetiveIndex, status);

                                                    int stepcount = TrialLists.trialsCount;

                                                    bRuleStatusIOA = oDisc.checkConditionIOA(bStepMoveDownIOA, bIOA);
                                                    bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bStepMoveDownMultiTecher, bMultyTchr);
                                                    if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                    {
                                                        //if (promptDown >= 1)
                                                        //    bPromptFrequencyMoveDown = false;
                                                        if (bstepTotDurationMoveDown)
                                                        {
                                                            //    if (oDS.CrntStep != stepcount)
                                                            //{
                                                            if (oDS.CrntStep <= stepcount)
                                                            {
                                                                nextStep = oDS.CrntStep - 1;
                                                                if (bStepMoveBack && bstepTotDurationMoveDown)
                                                                {
                                                                    bStepMoveBack = true;
                                                                    GlobalStepMoveBack = true;
                                                                }

                                                                if (oDS.CrntStep == 1)
                                                                {
                                                                    nextStep = 1;
                                                                    bstepTotDurationMoveDown = false;
                                                                    if ((bstepTotDurationMoveDown) == false)
                                                                        GlobalStepMoveBack = false;
                                                                }
                                                                bTotDurationMoveUp = false;
                                                                bTotDurationMoveDown = false;
                                                            }
                                                            else
                                                                bstepTotDurationMoveDown = false;
                                                            //} 

                                                            //    else
                                                            //        bstepFrequencyMoveDown = false;
                                                        }

                                                    }
                                                }
                                                else
                                                    bstepTotDurationMoveDown = false;
                                            }
                                            else
                                                bstepTotDurationMoveDown = false;

                                            if (!bstepTotDurationMoveUp && !bstepTotDurationMoveDown && !bPromptTotDurationMoveUp && !bPromptTotDurationMoveDown)
                                            {
                                                TempRules = GetSetRules(oTemp.TemplateId, iColId);

                                                if (TempRules.pctTotalDurationMoveUp.iScoreRequired > 0)
                                                {
                                                    //CompletionStatusSet = "";
                                                    bTotDurationMoveUp = ValidateUp(oSession.StudentId, totDuraionId, TempRules.pctTotalDurationMoveUp.iScoreRequired, reqSess,
                                                        TempRules.pctTotalDurationMoveUp.iTotalCorrectInstance, TempRules.pctTotalDurationMoveUp.bConsequetiveIndex, status);
                                                    int setcount = TrialLists.totalSet;

                                                    bRuleStatusIOA = oDisc.checkConditionIOA(bSetMoveUpIOA, bIOA);
                                                    bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bSetMoveUpMultiTecher, bMultyTchr);
                                                    if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                    {

                                                        if (bTotDurationMoveUp)
                                                        {
                                                            if (oDS.CrntSetNbr < setcount)
                                                                nextSet = oDS.CrntSetNbr + 1;
                                                            if (oDS.CrntSetNbr == setcount)
                                                            {
                                                                nextSet = setcount;
                                                                CompletionStatusSet = "COMPLETED";
                                                            }
                                                            if (CompletionStatusSet == "COMPLETED")
                                                            {
                                                                bSetCompleted = true;
                                                                MaintenanceOrCompletion = true;
                                                            }
                                                            else
                                                            {
                                                                bSetCompleted = false;
                                                                //MaintenanceOrCompletion = false;
                                                            }
                                                            if (bSetMoveUp && bTotDurationMoveUp)
                                                            {
                                                                bSetMoveUp = true;
                                                                GlobalSetMoveUp = true;
                                                                if (bSetMoveUp == true && GlobalSetMoveUp == true)
                                                                    bPrompt = true;

                                                            }
                                                        }
                                                    }


                                                }
                                            }
                                            else
                                                bTotDurationMoveUp = false;

                                            if (!bstepTotDurationMoveUp && !bstepTotDurationMoveDown && !bPromptTotDurationMoveUp && !bPromptTotDurationMoveDown)
                                            {
                                                if (TempRules.pctTotalDurationMoveDown.iScoreRequired > 0)
                                                {
                                                    bTotDurationMoveDown = ValidateDown(oSession.StudentId, totDuraionId, TempRules.pctTotalDurationMoveDown.iScoreRequired, reqSess,
                                                        TempRules.pctTotalDurationMoveDown.iTotalCorrectInstance, TempRules.pctTotalDurationMoveDown.bConsequetiveIndex, status);
                                                    int setcount = TrialLists.totalSet;

                                                    bRuleStatusIOA = oDisc.checkConditionIOA(bSetMoveDownIOA, bIOA);
                                                    bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bSetMoveDownMultiTecher, bMultyTchr);
                                                    if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                    {

                                                        if (bTotDurationMoveDown)
                                                        {
                                                            if (oDS.CrntSetNbr <= setcount)
                                                                nextSet = oDS.CrntSetNbr - 1;
                                                            if (oDS.CrntSetNbr == 1)
                                                                nextSet = 1;
                                                            if (bSetMoveBack && bTotDurationMoveDown)
                                                            {
                                                                bSetMoveBack = true;
                                                                GlobalSetMoveBack = true;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            else
                                                bTotDurationMoveDown = false;

                                            FreqDurTextFlag = true;
                                        }
                                    }
                                    #endregion
                                    //Code added for List 5 Task #9 16-feb-2021 change Moveup/down Criteria for Frequncy and Duration START--
                                    #region MoveUp in More than critera
                                    else if (MoveUpstat == 0)
                                    {
                                        freqdureloop++;
                                        bool status = true;
                                        CompletionStatusSet = "";
                                        //TempRules = GetPromptRules(oTemp.TemplateId, iColId);
                                        avgDurationId = Convert.ToInt32(ViewState["avgDurationId"]);
                                        totDuraionId = Convert.ToInt32(ViewState["totDuraionId"]);
                                        TempRules = GetPromptRules(oTemp.TemplateId, iColId);

                                        //tr 02_07_2019
                                        //avg duration
                                        //prompt chained
                                        if (promptUp >= 1)
                                            bPromptAvgDurationMoveUp = false;
                                        if (TempRules.pctAvgDurationMoveUp.iScoreRequired > 0)
                                        {
                                            bPromptAvgDurationMoveUp = ValidateDown(oSession.StudentId, avgDurationId, TempRules.pctAvgDurationMoveUp.iScoreRequired, reqSess,
                                                TempRules.pctAvgDurationMoveUp.iTotalCorrectInstance, TempRules.pctAvgDurationMoveUp.bConsequetiveIndex, status);

                                            bRuleStatusIOA = oDisc.checkConditionIOA(bPromptMoveUpIOA, bIOA);
                                            bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bPromptMoveUpMultiTecher, bMultyTchr);
                                            if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                            {
                                                //if (promptUp >= 1)
                                                //    bPromptFrequencyMoveUp = false;
                                                if (bPromptAvgDurationMoveUp)
                                                {
                                                    if (sCurrentPrompt != LessonpromptUsed[LessonpromptUsed.Length - 1])
                                                    {
                                                        int iPromptIndex = Chained.Model.PromptIndex(LessonpromptUsed, sCurrentPrompt);
                                                        if (iPromptIndex < LessonpromptUsed.Length)
                                                        {
                                                            sNextLessonPrompt = LessonpromptUsed[iPromptIndex + 1];
                                                            bPromptMoveUp = true;
                                                            bAvgDurationMoveUp = false;
                                                            bAvgDurationMoveDown = false;
                                                            GlobalPromptMoveUp = true;
                                                        }
                                                        else
                                                            bPromptAvgDurationMoveUp = false;
                                                    }
                                                    else
                                                        bPromptAvgDurationMoveUp = false;
                                                }
                                            }
                                        }
                                        else
                                            bPromptAvgDurationMoveUp = false;

                                        if (!bPromptAvgDurationMoveUp)
                                        {
                                            if (promptDown >= 1)
                                                bPromptAvgDurationMoveDown = false;
                                            if (TempRules.pctAvgDurationMoveDown.iScoreRequired > 0)
                                            {
                                                bPromptAvgDurationMoveDown = ValidateUp(oSession.StudentId, avgDurationId, TempRules.pctAvgDurationMoveDown.iScoreRequired, reqSess,
                                                    TempRules.pctAvgDurationMoveDown.iTotalCorrectInstance, TempRules.pctAvgDurationMoveDown.bConsequetiveIndex, status);

                                                bRuleStatusIOA = oDisc.checkConditionIOA(bPromptMoveDownIOA, bIOA);
                                                bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bPromptMoveDownMultiTecher, bMultyTchr);
                                                if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                {
                                                    //if (promptDown >= 1)
                                                    //    bPromptFrequencyMoveDown = false;
                                                    if (bPromptAvgDurationMoveDown)
                                                    {
                                                        if (sCurrentPrompt != LessonpromptUsed[0])
                                                        {
                                                            int iPromptIndex = Chained.Model.PromptIndex(LessonpromptUsed, sCurrentPrompt);
                                                            if (iPromptIndex > 0)
                                                            {
                                                                sNextLessonPrompt = LessonpromptUsed[iPromptIndex - 1];
                                                                bPromptMoveBack = true;
                                                                bAvgDurationMoveDown = false;
                                                                bAvgDurationMoveUp = false;
                                                                GlobalPromptMoveBack = true;
                                                            }
                                                            else
                                                                bPromptAvgDurationMoveDown = false;
                                                        }
                                                        else
                                                            bPromptAvgDurationMoveDown = false;
                                                    }

                                                }
                                            }
                                            else
                                                bPromptAvgDurationMoveDown = false;



                                            //step chained
                                            if (!bPromptAvgDurationMoveUp && !bPromptAvgDurationMoveDown)
                                            {
                                                TempRules = GetStepRules(oTemp.TemplateId, iColId);
                                                if (TempRules.pctAvgDurationMoveUp.iScoreRequired > 0)
                                                {
                                                    bstepAvgDurationMoveUp = ValidateDown(oSession.StudentId, avgDurationId, TempRules.pctAvgDurationMoveUp.iScoreRequired, reqSess,
                                                        TempRules.pctAvgDurationMoveUp.iTotalCorrectInstance, TempRules.pctAvgDurationMoveUp.bConsequetiveIndex, status);

                                                    int stepcount = TrialLists.trialsCount;

                                                    bRuleStatusIOA = oDisc.checkConditionIOA(bStepMoveUpIOA, bIOA);
                                                    bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bStepMoveUpMultiTecher, bMultyTchr);
                                                    if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                    {
                                                        if (bstepAvgDurationMoveUp)
                                                        {
                                                            //if (oDS.CrntStep != stepcount)
                                                            //{
                                                            if (oDS.CrntStep < stepcount)
                                                            {
                                                                nextStep = oDS.CrntStep + 1;

                                                                if (oDS.CrntStep == stepcount)
                                                                {
                                                                    nextStep = stepcount;
                                                                }
                                                                if (bStepMoveUp && bstepAvgDurationMoveUp)
                                                                {
                                                                    bStepMoveUp = true;
                                                                    GlobalStepMoveUp = true;
                                                                }
                                                                bAvgDurationMoveUp = false;
                                                                bAvgDurationMoveDown = false;

                                                            }
                                                            else
                                                                bstepAvgDurationMoveUp = false;
                                                            //} 

                                                            //    else
                                                            //        bstepFrequencyMoveUp = false;
                                                        }

                                                    }
                                                }
                                                else
                                                    bstepAvgDurationMoveUp = false;
                                            }
                                            else
                                                bstepAvgDurationMoveUp = false;

                                            if (!bPromptAvgDurationMoveUp && !bPromptAvgDurationMoveDown)
                                            {
                                                if (TempRules.pctAvgDurationMoveDown.iScoreRequired > 0)
                                                {
                                                    bstepAvgDurationMoveDown = ValidateUp(oSession.StudentId, avgDurationId, TempRules.pctAvgDurationMoveDown.iScoreRequired, reqSess,
                                                        TempRules.pctAvgDurationMoveDown.iTotalCorrectInstance, TempRules.pctAvgDurationMoveDown.bConsequetiveIndex, status);

                                                    int stepcount = TrialLists.trialsCount;

                                                    bRuleStatusIOA = oDisc.checkConditionIOA(bStepMoveDownIOA, bIOA);
                                                    bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bStepMoveDownMultiTecher, bMultyTchr);
                                                    if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                    {
                                                        //if (promptDown >= 1)
                                                        //    bPromptFrequencyMoveDown = false;
                                                        if (bstepAvgDurationMoveDown)
                                                        {
                                                            //    if (oDS.CrntStep != stepcount)
                                                            //{
                                                            if (oDS.CrntStep <= stepcount)
                                                            {
                                                                nextStep = oDS.CrntStep - 1;
                                                                if (bStepMoveBack && bstepAvgDurationMoveDown)
                                                                {
                                                                    bStepMoveBack = true;
                                                                    GlobalStepMoveBack = true;
                                                                }

                                                                if (oDS.CrntStep == 1)
                                                                {
                                                                    nextStep = 1;
                                                                    bstepAvgDurationMoveDown = false;
                                                                    if ((bstepAvgDurationMoveDown) == false)
                                                                        GlobalStepMoveBack = false;
                                                                }
                                                                bAvgDurationMoveUp = false;
                                                                bAvgDurationMoveDown = false;
                                                            }
                                                            else
                                                                bstepAvgDurationMoveDown = false;
                                                            //} 

                                                            //    else
                                                            //        bstepFrequencyMoveDown = false;
                                                        }

                                                    }
                                                }
                                                else
                                                    bstepAvgDurationMoveDown = false;
                                            }
                                            else
                                                bstepAvgDurationMoveDown = false;

                                            //set chained
                                            if (!bstepAvgDurationMoveUp && !bstepAvgDurationMoveDown && !bPromptAvgDurationMoveUp && !bPromptAvgDurationMoveDown)
                                            {
                                                TempRules = GetSetRules(oTemp.TemplateId, iColId);

                                                if (TempRules.pctAvgDurationMoveUp.iScoreRequired > 0)
                                                {
                                                    bAvgDurationMoveUp = ValidateDown(oSession.StudentId, avgDurationId, TempRules.pctAvgDurationMoveUp.iScoreRequired, reqSess,
                                                        TempRules.pctAvgDurationMoveUp.iTotalCorrectInstance, TempRules.pctAvgDurationMoveUp.bConsequetiveIndex, status);
                                                    int setcount = TrialLists.totalSet;

                                                    bRuleStatusIOA = oDisc.checkConditionIOA(bSetMoveUpIOA, bIOA);
                                                    bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bSetMoveUpMultiTecher, bMultyTchr);
                                                    if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                    {

                                                        if (bAvgDurationMoveUp)
                                                        {
                                                            if (oDS.CrntSetNbr < setcount)
                                                                nextSet = oDS.CrntSetNbr + 1;
                                                            if (oDS.CrntSetNbr == setcount)
                                                            {
                                                                nextSet = setcount;
                                                                CompletionStatusSet = "COMPLETED";
                                                            }
                                                            if (CompletionStatusSet == "COMPLETED")
                                                            {
                                                                bSetCompleted = true;
                                                                MaintenanceOrCompletion = true;
                                                            }
                                                            else
                                                            {
                                                                bSetCompleted = false;
                                                                //MaintenanceOrCompletion = false;
                                                            }
                                                            if (bSetMoveUp && bAvgDurationMoveUp)
                                                            {
                                                                bSetMoveUp = true;
                                                                GlobalSetMoveUp = true;
                                                                if (bSetMoveUp == true && GlobalSetMoveUp == true)
                                                                    bPrompt = true;
                                                            }
                                                        }
                                                    }



                                                }
                                            }
                                            else
                                                bAvgDurationMoveUp = false;

                                            if (!bstepAvgDurationMoveUp && !bstepAvgDurationMoveDown && !bPromptAvgDurationMoveUp && !bPromptAvgDurationMoveDown)
                                            {
                                                if (TempRules.pctAvgDurationMoveDown.iScoreRequired > 0)
                                                {
                                                    bAvgDurationMoveDown = ValidateUp(oSession.StudentId, avgDurationId, TempRules.pctAvgDurationMoveDown.iScoreRequired, reqSess,
                                                        TempRules.pctAvgDurationMoveDown.iTotalCorrectInstance, TempRules.pctAvgDurationMoveDown.bConsequetiveIndex, status);
                                                    int setcount = TrialLists.totalSet;

                                                    bRuleStatusIOA = oDisc.checkConditionIOA(bSetMoveDownIOA, bIOA);
                                                    bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bSetMoveDownMultiTecher, bMultyTchr);
                                                    if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                    {

                                                        if (bAvgDurationMoveDown)
                                                        {
                                                            if (oDS.CrntSetNbr <= setcount)
                                                                nextSet = oDS.CrntSetNbr - 1;
                                                            if (oDS.CrntSetNbr == 1)
                                                                nextSet = 1;
                                                            if (bSetMoveBack && bAvgDurationMoveDown)
                                                            {
                                                                bSetMoveBack = true;
                                                                GlobalSetMoveBack = true;
                                                            }
                                                        }
                                                    }

                                                }

                                            }
                                            else
                                                bAvgDurationMoveDown = false;

                                            FreqDurTextFlag = true;

                                        }
                                        //avg duration
                                        TempRules = GetPromptRules(oTemp.TemplateId, iColId);
                                        //total duration chained
                                        if (TempRules.pctTotalDurationMoveUp.iTotalCorrectInstance > 0)
                                        {
                                            if (promptUp >= 1)
                                                bPromptTotDurationMoveUp = false;
                                            if (TempRules.pctTotalDurationMoveUp.iScoreRequired > 0)
                                            {
                                                bPromptTotDurationMoveUp = ValidateDown(oSession.StudentId, totDuraionId, TempRules.pctTotalDurationMoveUp.iScoreRequired, reqSess,
                                                    TempRules.pctTotalDurationMoveUp.iTotalCorrectInstance, TempRules.pctTotalDurationMoveUp.bConsequetiveIndex, status);

                                                bRuleStatusIOA = oDisc.checkConditionIOA(bPromptMoveUpIOA, bIOA);
                                                bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bPromptMoveUpMultiTecher, bMultyTchr);
                                                if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                {
                                                    //if (promptUp >= 1)
                                                    //    bPromptFrequencyMoveUp = false;
                                                    if (bPromptTotDurationMoveUp)
                                                    {
                                                        if (sCurrentPrompt != LessonpromptUsed[LessonpromptUsed.Length - 1])
                                                        {
                                                            int iPromptIndex = Chained.Model.PromptIndex(LessonpromptUsed, sCurrentPrompt);
                                                            if (iPromptIndex < LessonpromptUsed.Length)
                                                            {
                                                                sNextLessonPrompt = LessonpromptUsed[iPromptIndex + 1];
                                                                bPromptMoveUp = true;
                                                                bTotDurationMoveUp = false;
                                                                bTotDurationMoveDown = false;
                                                                GlobalPromptMoveUp = true;
                                                            }
                                                            else
                                                                bPromptTotDurationMoveUp = false;
                                                        }
                                                        else
                                                            bPromptTotDurationMoveUp = false;
                                                    }
                                                }
                                            }
                                        }
                                        else
                                            bPromptTotDurationMoveUp = false;
                                        if (!bPromptTotDurationMoveUp)
                                        {
                                            if (promptDown >= 1)
                                                bPromptTotDurationMoveDown = false;
                                            if (TempRules.pctTotalDurationMoveDown.iScoreRequired > 0)
                                            {
                                                bPromptTotDurationMoveDown = ValidateUp(oSession.StudentId, totDuraionId, TempRules.pctTotalDurationMoveDown.iScoreRequired, reqSess,
                                                    TempRules.pctTotalDurationMoveDown.iTotalCorrectInstance, TempRules.pctTotalDurationMoveDown.bConsequetiveIndex, status);

                                                bRuleStatusIOA = oDisc.checkConditionIOA(bPromptMoveDownIOA, bIOA);
                                                bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bPromptMoveDownMultiTecher, bMultyTchr);
                                                if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                {
                                                    //if (promptDown >= 1)
                                                    //    bPromptFrequencyMoveDown = false;
                                                    if (bPromptTotDurationMoveDown)
                                                    {
                                                        if (sCurrentPrompt != LessonpromptUsed[0])
                                                        {
                                                            int iPromptIndex = Chained.Model.PromptIndex(LessonpromptUsed, sCurrentPrompt);
                                                            if (iPromptIndex > 0)
                                                            {
                                                                sNextLessonPrompt = LessonpromptUsed[iPromptIndex - 1];
                                                                bPromptMoveBack = true;
                                                                bTotDurationMoveDown = false;
                                                                bTotDurationMoveUp = false;
                                                                GlobalPromptMoveBack = true;
                                                            }
                                                            else
                                                                bPromptTotDurationMoveDown = false;
                                                        }
                                                        else
                                                            bPromptTotDurationMoveDown = false;
                                                    }

                                                }
                                            }
                                            else
                                                bPromptTotDurationMoveDown = false;
                                            //total duration
                                            //tr 02_07_2019

                                            //step chained
                                            if (!bPromptTotDurationMoveUp && !bPromptTotDurationMoveDown)
                                            {
                                                TempRules = GetStepRules(oTemp.TemplateId, iColId);
                                                if (TempRules.pctTotalDurationMoveUp.iScoreRequired > 0)
                                                {
                                                    bstepTotDurationMoveUp = ValidateDown(oSession.StudentId, totDuraionId, TempRules.pctTotalDurationMoveUp.iScoreRequired, reqSess,
                                                        TempRules.pctTotalDurationMoveUp.iTotalCorrectInstance, TempRules.pctTotalDurationMoveUp.bConsequetiveIndex, status);

                                                    int stepcount = TrialLists.trialsCount;

                                                    bRuleStatusIOA = oDisc.checkConditionIOA(bStepMoveUpIOA, bIOA);
                                                    bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bStepMoveUpMultiTecher, bMultyTchr);
                                                    if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                    {
                                                        if (bstepTotDurationMoveUp)
                                                        {
                                                            //if (oDS.CrntStep != stepcount)
                                                            //{
                                                            if (oDS.CrntStep < stepcount)
                                                            {
                                                                nextStep = oDS.CrntStep + 1;

                                                                if (oDS.CrntStep == stepcount)
                                                                {
                                                                    nextStep = stepcount;
                                                                }
                                                                if (bStepMoveUp && bstepTotDurationMoveUp)
                                                                {
                                                                    bStepMoveUp = true;
                                                                    GlobalStepMoveUp = true;
                                                                }
                                                                bTotDurationMoveUp = false;
                                                                bTotDurationMoveDown = false;

                                                            }
                                                            else
                                                                bstepTotDurationMoveUp = false;
                                                            //} 

                                                            //    else
                                                            //        bstepFrequencyMoveUp = false;
                                                        }

                                                    }
                                                }
                                                else
                                                    bstepTotDurationMoveUp = false;
                                            }
                                            else
                                                bstepTotDurationMoveUp = false;

                                            if (!bPromptTotDurationMoveUp && !bPromptTotDurationMoveDown)
                                            {
                                                if (TempRules.pctTotalDurationMoveDown.iScoreRequired > 0)
                                                {
                                                    bstepTotDurationMoveDown = ValidateUp(oSession.StudentId, totDuraionId, TempRules.pctTotalDurationMoveDown.iScoreRequired, reqSess,
                                                        TempRules.pctTotalDurationMoveDown.iTotalCorrectInstance, TempRules.pctTotalDurationMoveDown.bConsequetiveIndex, status);

                                                    int stepcount = TrialLists.trialsCount;

                                                    bRuleStatusIOA = oDisc.checkConditionIOA(bStepMoveDownIOA, bIOA);
                                                    bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bStepMoveDownMultiTecher, bMultyTchr);
                                                    if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                    {
                                                        //if (promptDown >= 1)
                                                        //    bPromptFrequencyMoveDown = false;
                                                        if (bstepTotDurationMoveDown)
                                                        {
                                                            //    if (oDS.CrntStep != stepcount)
                                                            //{
                                                            if (oDS.CrntStep <= stepcount)
                                                            {
                                                                nextStep = oDS.CrntStep - 1;
                                                                if (bStepMoveBack && bstepTotDurationMoveDown)
                                                                {
                                                                    bStepMoveBack = true;
                                                                    GlobalStepMoveBack = true;
                                                                }

                                                                if (oDS.CrntStep == 1)
                                                                {
                                                                    nextStep = 1;
                                                                    bstepTotDurationMoveDown = false;
                                                                }
                                                                bTotDurationMoveUp = false;
                                                                bTotDurationMoveDown = false;
                                                            }
                                                            else
                                                                bstepTotDurationMoveDown = false;
                                                            //} 

                                                            //    else
                                                            //        bstepFrequencyMoveDown = false;
                                                        }

                                                    }
                                                }
                                                else
                                                    bstepTotDurationMoveDown = false;
                                            }
                                            else
                                                bstepTotDurationMoveDown = false;

                                            if (!bstepTotDurationMoveUp && !bstepTotDurationMoveDown && !bPromptTotDurationMoveUp && !bPromptTotDurationMoveDown)
                                            {
                                                TempRules = GetSetRules(oTemp.TemplateId, iColId);

                                                if (TempRules.pctTotalDurationMoveUp.iScoreRequired > 0)
                                                {
                                                    //CompletionStatusSet = "";
                                                    bTotDurationMoveUp = ValidateDown(oSession.StudentId, totDuraionId, TempRules.pctTotalDurationMoveUp.iScoreRequired, reqSess,
                                                        TempRules.pctTotalDurationMoveUp.iTotalCorrectInstance, TempRules.pctTotalDurationMoveUp.bConsequetiveIndex, status);
                                                    int setcount = TrialLists.totalSet;

                                                    bRuleStatusIOA = oDisc.checkConditionIOA(bSetMoveUpIOA, bIOA);
                                                    bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bSetMoveUpMultiTecher, bMultyTchr);
                                                    if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                    {

                                                        if (bTotDurationMoveUp)
                                                        {
                                                            if (oDS.CrntSetNbr < setcount)
                                                                nextSet = oDS.CrntSetNbr + 1;
                                                            if (oDS.CrntSetNbr == setcount)
                                                            {
                                                                nextSet = setcount;
                                                                CompletionStatusSet = "COMPLETED";
                                                            }
                                                            if (CompletionStatusSet == "COMPLETED")
                                                            {
                                                                bSetCompleted = true;
                                                                MaintenanceOrCompletion = true;
                                                            }
                                                            else
                                                            {
                                                                bSetCompleted = false;
                                                                //MaintenanceOrCompletion = false;
                                                            }
                                                            if (bSetMoveUp && bTotDurationMoveUp)
                                                            {
                                                                bSetMoveUp = true;
                                                                GlobalSetMoveUp = true;
                                                                if (bSetMoveUp == true && GlobalSetMoveUp == true)
                                                                    bPrompt = true;
                                                            }
                                                        }
                                                    }


                                                }
                                            }
                                            else
                                                bTotDurationMoveUp = false;

                                            if (!bstepTotDurationMoveUp && !bstepTotDurationMoveDown && !bPromptTotDurationMoveUp && !bPromptTotDurationMoveDown)
                                            {
                                                if (TempRules.pctTotalDurationMoveDown.iScoreRequired > 0)
                                                {
                                                    bTotDurationMoveDown = ValidateUp(oSession.StudentId, totDuraionId, TempRules.pctTotalDurationMoveDown.iScoreRequired, reqSess,
                                                        TempRules.pctTotalDurationMoveDown.iTotalCorrectInstance, TempRules.pctTotalDurationMoveDown.bConsequetiveIndex, status);
                                                    int setcount = TrialLists.totalSet;

                                                    bRuleStatusIOA = oDisc.checkConditionIOA(bSetMoveDownIOA, bIOA);
                                                    bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bSetMoveDownMultiTecher, bMultyTchr);
                                                    if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                    {

                                                        if (bTotDurationMoveDown)
                                                        {
                                                            if (oDS.CrntSetNbr <= setcount)
                                                                nextSet = oDS.CrntSetNbr - 1;
                                                            if (oDS.CrntSetNbr == 1)
                                                                nextSet = 1;
                                                            if (bSetMoveBack && bTotDurationMoveDown)
                                                            {
                                                                bSetMoveBack = true;
                                                                GlobalSetMoveBack = true;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            else
                                                bTotDurationMoveDown = true;

                                            FreqDurTextFlag = true;

                                        }

                                    #endregion
                                        //Code added for List 5 Task #9 16-feb-2021 change Moveup/down Criteria for Frequncy and Duration END--
                                    }
                                }
                                #endregion
                                #region comment
                                //    bool status = true;
                                //    TempRules = GetSetRules(oTemp.TemplateId, iColId);
                                //    avgDurationId = Convert.ToInt32(ViewState["avgDurationId"]);
                                //    totDuraionId = Convert.ToInt32(ViewState["totDuraionId"]);
                                //    if (TempRules.pctAvgDurationMoveUp.iScoreRequired > 0)
                                //    {
                                //        bAvgDurationMoveUp = ValidateUp(oSession.StudentId, avgDurationId, TempRules.pctAvgDurationMoveUp.iScoreRequired, reqSess,
                                //            TempRules.pctAvgDurationMoveUp.iTotalCorrectInstance, TempRules.pctAvgDurationMoveUp.bConsequetiveIndex, status);
                                //    }
                                //    if (TempRules.pctAvgDurationMoveDown.iScoreRequired > 0)
                                //    {
                                //        bAvgDurationMoveDown = ValidateDown(oSession.StudentId, avgDurationId, TempRules.pctAvgDurationMoveDown.iScoreRequired, reqSess,
                                //            TempRules.pctAvgDurationMoveDown.iTotalCorrectInstance, TempRules.pctAvgDurationMoveDown.bConsequetiveIndex, status);
                                //    }
                                //    if (TempRules.pctTotalDurationMoveUp.iScoreRequired > 0)
                                //    {
                                //        bTotDurationMoveUp = ValidateUp(oSession.StudentId, totDuraionId, TempRules.pctTotalDurationMoveUp.iScoreRequired, reqSess,
                                //            TempRules.pctTotalDurationMoveUp.iTotalCorrectInstance, TempRules.pctTotalDurationMoveUp.bConsequetiveIndex, status);
                                //    }
                                //    if (TempRules.pctTotalDurationMoveDown.iScoreRequired > 0)
                                //    {
                                //        bTotDurationMoveDown = ValidateDown(oSession.StudentId, totDuraionId, TempRules.pctTotalDurationMoveDown.iScoreRequired, reqSess,
                                //            TempRules.pctTotalDurationMoveDown.iTotalCorrectInstance, TempRules.pctTotalDurationMoveDown.bConsequetiveIndex, status);
                                //    }
                                //    if ((bAvgDurationMoveUp == false) || (bTotDurationMoveUp == false))
                                //    {
                                //        bDurationMoveUp = false;
                                //    }
                                //    if ((bAvgDurationMoveDown == false) || (bTotDurationMoveDown == false))
                                //    {
                                //        bDurationMoveBack = false;
                                //    }

                                //}
                                #endregion
                                #region Frequency
                                else if (dr["ColTypeCd"].ToString() == "Frequency")
                                {
                                    int colId = Convert.ToInt32(dr["DSTempSetColId"]);
                                    string selqry1 = "select Moveupstat from dstempsetcol DsCol inner join DSTempHdr Hdr on Hdr.DSTempHdrId=DsCol.DSTempHdrId where dsCol.DSTempHdrId=" + oTemp.TemplateId + " And DSTempSetColId= " + colId;
                                    object stat = oData.FetchValue(selqry1);
                                    if (stat != null)
                                        MoveUpstat = Convert.ToInt16(stat);
                                    #region MoveUp on Less than-default
                                    if (MoveUpstat == 1)
                                    {
                                        freqdureloop++;
                                        bool status = true;
                                        CompletionStatusSet = "";
                                        freqId = Convert.ToInt32(ViewState["freqId"]);

                                        ///for prompt move
                                        ///
                                        TempRules = GetPromptRules(oTemp.TemplateId, iColId);
                                        if (promptUp >= 1)
                                            bPromptFrequencyMoveUp = false;
                                        if (TempRules.pctFrequencyMoveUp.iScoreRequired > 0)
                                        {
                                            bPromptFrequencyMoveUp = ValidateUp(oSession.StudentId, freqId, TempRules.pctFrequencyMoveUp.iScoreRequired, reqSess,
                                                TempRules.pctFrequencyMoveUp.iTotalCorrectInstance, TempRules.pctFrequencyMoveUp.bConsequetiveIndex, status);

                                            bRuleStatusIOA = oDisc.checkConditionIOA(bPromptMoveUpIOA, bIOA);
                                            bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bPromptMoveUpMultiTecher, bMultyTchr);
                                            if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                            {
                                                //if (promptUp >= 1)
                                                //    bPromptFrequencyMoveUp = false;
                                                if (bPromptFrequencyMoveUp)
                                                {
                                                    if (sCurrentPrompt != LessonpromptUsed[LessonpromptUsed.Length - 1])
                                                    {
                                                        int iPromptIndex = Chained.Model.PromptIndex(LessonpromptUsed, sCurrentPrompt);
                                                        if (iPromptIndex < LessonpromptUsed.Length)
                                                        {
                                                            sNextLessonPrompt = LessonpromptUsed[iPromptIndex + 1];
                                                            bPromptMoveUp = true;
                                                            bFrequencyMoveUp = false;
                                                            bFrequencyMoveDown = false;
                                                            GlobalPromptMoveUp = true;
                                                        }
                                                        else
                                                            bPromptFrequencyMoveUp = false;
                                                    }
                                                    else
                                                        bPromptFrequencyMoveUp = false;
                                                }
                                            }
                                        }
                                        else
                                            bPromptFrequencyMoveUp = false;
                                        if (!bPromptFrequencyMoveUp)
                                        {
                                            if (promptDown >= 1)
                                                bPromptFrequencyMoveDown = false;
                                            if (TempRules.pctFrequencyMoveDown.iScoreRequired > 0)
                                            {
                                                bPromptFrequencyMoveDown = ValidateDown(oSession.StudentId, freqId, TempRules.pctFrequencyMoveDown.iScoreRequired, reqSess,
                                                    TempRules.pctFrequencyMoveDown.iTotalCorrectInstance, TempRules.pctFrequencyMoveDown.bConsequetiveIndex, status);

                                                bRuleStatusIOA = oDisc.checkConditionIOA(bPromptMoveDownIOA, bIOA);
                                                bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bPromptMoveDownMultiTecher, bMultyTchr);
                                                if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                {
                                                    //if (promptDown >= 1)
                                                    //    bPromptFrequencyMoveDown = false;
                                                    if (bPromptFrequencyMoveDown)
                                                    {
                                                        if (sCurrentPrompt != LessonpromptUsed[0])
                                                        {
                                                            int iPromptIndex = Chained.Model.PromptIndex(LessonpromptUsed, sCurrentPrompt);
                                                            if (iPromptIndex > 0)
                                                            {
                                                                sNextLessonPrompt = LessonpromptUsed[iPromptIndex - 1];
                                                                bPromptMoveBack = true;
                                                                bFrequencyMoveDown = false;
                                                                bFrequencyMoveUp = false;
                                                                GlobalPromptMoveBack = true;
                                                            }
                                                            else
                                                                bPromptFrequencyMoveDown = false;
                                                        }
                                                        else
                                                            bPromptFrequencyMoveDown = false;
                                                    }

                                                }
                                            }
                                            else
                                                bPromptFrequencyMoveDown = false;
                                        }
                                        else
                                            bPromptFrequencyMoveDown = false;
                                        ///end prompt section
                                        ///

                                        //step 
                                        if (!bPromptFrequencyMoveUp && !bPromptFrequencyMoveDown)
                                        {
                                            TempRules = GetStepRules(oTemp.TemplateId, iColId);
                                            if (TempRules.pctFrequencyMoveUp.iScoreRequired > 0)
                                            {
                                                bstepFrequencyMoveUp = ValidateUp(oSession.StudentId, freqId, TempRules.pctFrequencyMoveUp.iScoreRequired, reqSess,
                                                    TempRules.pctFrequencyMoveUp.iTotalCorrectInstance, TempRules.pctFrequencyMoveUp.bConsequetiveIndex, status);

                                                int stepcount = TrialLists.trialsCount;

                                                bRuleStatusIOA = oDisc.checkConditionIOA(bStepMoveUpIOA, bIOA);
                                                bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bStepMoveUpMultiTecher, bMultyTchr);
                                                if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                {
                                                    if (bstepFrequencyMoveUp)
                                                    {
                                                        //if (oDS.CrntStep != stepcount)
                                                        //{
                                                        if (oDS.CrntStep < stepcount)
                                                        {
                                                            nextStep = oDS.CrntStep + 1;

                                                            if (oDS.CrntStep == stepcount)
                                                            {
                                                                nextStep = stepcount;
                                                            }
                                                            if (bStepMoveUp && bstepFrequencyMoveUp)
                                                            {
                                                                bStepMoveUp = true;
                                                                GlobalStepMoveUp = true;
                                                                if (bStepMoveUp == true && GlobalStepMoveUp == true)
                                                                    bPrompt = true;
                                                            }
                                                            bFrequencyMoveUp = false;
                                                            bFrequencyMoveDown = false;

                                                        }
                                                        else
                                                            bstepFrequencyMoveUp = false;
                                                        //} 

                                                        //    else
                                                        //        bstepFrequencyMoveUp = false;
                                                    }

                                                }
                                            }
                                            else
                                                bstepFrequencyMoveUp = false;
                                        }
                                        else
                                            bstepFrequencyMoveUp = false;

                                        if (!bPromptFrequencyMoveUp && !bPromptFrequencyMoveDown)
                                        {
                                            if (TempRules.pctFrequencyMoveDown.iScoreRequired > 0)
                                            {
                                                bstepFrequencyMoveDown = ValidateDown(oSession.StudentId, freqId, TempRules.pctFrequencyMoveDown.iScoreRequired, reqSess,
                                                    TempRules.pctFrequencyMoveDown.iTotalCorrectInstance, TempRules.pctFrequencyMoveDown.bConsequetiveIndex, status);

                                                int stepcount = TrialLists.trialsCount;

                                                bRuleStatusIOA = oDisc.checkConditionIOA(bStepMoveDownIOA, bIOA);
                                                bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bStepMoveDownMultiTecher, bMultyTchr);
                                                if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                {
                                                    //if (promptDown >= 1)
                                                    //    bPromptFrequencyMoveDown = false;
                                                    if (bstepFrequencyMoveDown)
                                                    {
                                                        //    if (oDS.CrntStep != stepcount)
                                                        //{
                                                        if (oDS.CrntStep <= stepcount)
                                                        {
                                                            nextStep = oDS.CrntStep - 1;
                                                            if (bStepMoveBack && bstepFrequencyMoveDown)
                                                            {
                                                                bStepMoveBack = true;
                                                                GlobalStepMoveBack = true;
                                                            }

                                                            if (oDS.CrntStep == 1)
                                                            {
                                                                nextStep = 1;
                                                                bstepFrequencyMoveDown = false;
                                                                if (bstepFrequencyMoveDown == false)
                                                                {
                                                                    GlobalStepMoveBack = false;
                                                            	}
                                                            }
                                                            bFrequencyMoveDown = false;
                                                            bFrequencyMoveUp = false;
                                                        }
                                                        else
                                                            bstepFrequencyMoveDown = false;
                                                        //} 

                                                        //    else
                                                        //        bstepFrequencyMoveDown = false;
                                                    }

                                                }
                                            }
                                            else
                                                bstepFrequencyMoveDown = false;
                                        }
                                        else
                                            bstepFrequencyMoveDown = false;


                                        //set 
                                        if (!bstepFrequencyMoveUp && !bstepFrequencyMoveDown && !bPromptFrequencyMoveUp && !bPromptFrequencyMoveDown)
                                        {
                                            TempRules = GetSetRules(oTemp.TemplateId, iColId);

                                            if (TempRules.pctFrequencyMoveUp.iScoreRequired > 0)
                                            {
                                                bFrequencyMoveUp = ValidateUp(oSession.StudentId, freqId, TempRules.pctFrequencyMoveUp.iScoreRequired, reqSess,
                                                    TempRules.pctFrequencyMoveUp.iTotalCorrectInstance, TempRules.pctFrequencyMoveUp.bConsequetiveIndex, status);
                                                int setcount = TrialLists.totalSet;

                                                bRuleStatusIOA = oDisc.checkConditionIOA(bSetMoveUpIOA, bIOA);
                                                bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bSetMoveUpMultiTecher, bMultyTchr);
                                                if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                {

                                                    if (bFrequencyMoveUp)
                                                    {

                                                        if (oDS.CrntSetNbr < setcount)
                                                            nextSet = oDS.CrntSetNbr + 1;
                                                        if (oDS.CrntSetNbr == setcount)
                                                        {
                                                            nextSet = setcount;
                                                            CompletionStatusSet = "COMPLETED";
                                                        }
                                                        if (CompletionStatusSet == "COMPLETED")
                                                        {
                                                            bSetCompleted = true;
                                                            MaintenanceOrCompletion = true;
                                                        }
                                                        else
                                                        {
                                                            bSetCompleted = false;
                                                            //MaintenanceOrCompletion = false;
                                                        }
                                                        if (bSetMoveUp && bFrequencyMoveUp)
                                                        {
                                                            bSetMoveUp = true;
                                                            GlobalSetMoveUp = true;
                                                            if (bSetMoveUp == true && GlobalSetMoveUp == true)
                                                                bPrompt = true;
                                                        }
                                                    }
                                                }
                                            }
                                            else
                                                bFrequencyMoveUp = false;

                                            if (!bstepFrequencyMoveUp && !bstepFrequencyMoveDown && !bPromptFrequencyMoveUp && !bPromptFrequencyMoveDown)
                                            {
                                            if (TempRules.pctFrequencyMoveDown.iScoreRequired > 0)
                                            {
                                                bFrequencyMoveDown = ValidateDown(oSession.StudentId, freqId, TempRules.pctFrequencyMoveDown.iScoreRequired, reqSess,
                                                    TempRules.pctFrequencyMoveDown.iTotalCorrectInstance, TempRules.pctFrequencyMoveDown.bConsequetiveIndex, status);
                                                int setcount = TrialLists.totalSet;

                                                bRuleStatusIOA = oDisc.checkConditionIOA(bSetMoveDownIOA, bIOA);
                                                bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bSetMoveDownMultiTecher, bMultyTchr);
                                                if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                {

                                                    if (bFrequencyMoveDown)
                                                    {
                                                        if (oDS.CrntSetNbr <= setcount)
                                                            nextSet = oDS.CrntSetNbr - 1;
                                                        if (oDS.CrntSetNbr == 1)
                                                            nextSet = 1;
                                                            if (bSetMoveBack && bFrequencyMoveDown)
                                                        {
                                                            bSetMoveBack = true;
                                                            GlobalSetMoveBack = true;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                            else
                                                bFrequencyMoveDown = false;
                                        }
                                        FreqDurTextFlag = true;
                                    }
                                    #endregion
                                    //Code added for List 5 Task #9 16-feb-2021 change Moveup/down Criteria for Frequncy and Duration START--
                                    #region MoveUp on MoreThan
                                    else if (MoveUpstat == 0)
                                    {
                                        freqdureloop++;
                                        bool status = true;
                                        CompletionStatusSet = "";
                                        freqId = Convert.ToInt32(ViewState["freqId"]);

                                        ///for prompt move
                                        ///
                                        TempRules = GetPromptRules(oTemp.TemplateId, iColId);
                                        if (promptUp >= 1)
                                            bPromptFrequencyMoveUp = false;
                                        if (TempRules.pctFrequencyMoveUp.iScoreRequired > 0)
                                        {
                                            bPromptFrequencyMoveUp = ValidateDown(oSession.StudentId, freqId, TempRules.pctFrequencyMoveUp.iScoreRequired, reqSess,
                                                TempRules.pctFrequencyMoveUp.iTotalCorrectInstance, TempRules.pctFrequencyMoveUp.bConsequetiveIndex, status);

                                            bRuleStatusIOA = oDisc.checkConditionIOA(bPromptMoveUpIOA, bIOA);
                                            bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bPromptMoveUpMultiTecher, bMultyTchr);
                                            if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                            {
                                                //if (promptUp >= 1)
                                                //    bPromptFrequencyMoveUp = false;
                                                if (bPromptFrequencyMoveUp)
                                                {
                                                    if (sCurrentPrompt != LessonpromptUsed[LessonpromptUsed.Length - 1])
                                                    {
                                                        int iPromptIndex = Chained.Model.PromptIndex(LessonpromptUsed, sCurrentPrompt);
                                                        if (iPromptIndex < LessonpromptUsed.Length)
                                                        {
                                                            sNextLessonPrompt = LessonpromptUsed[iPromptIndex + 1];
                                                            bPromptMoveUp = true;
                                                            bFrequencyMoveUp = false;
                                                            bFrequencyMoveDown = false;
                                                            GlobalPromptMoveUp = true;
                                                        }
                                                        else
                                                            bPromptFrequencyMoveUp = false;
                                                    }
                                                    else
                                                        bPromptFrequencyMoveUp = false;
                                                }
                                            }
                                        }
                                        else
                                            bPromptFrequencyMoveUp = false;
                                        if (!bPromptFrequencyMoveUp)
                                        {
                                            if (promptDown >= 1)
                                                bPromptFrequencyMoveDown = false;
                                            if (TempRules.pctFrequencyMoveDown.iScoreRequired > 0)
                                            {
                                                bPromptFrequencyMoveDown = ValidateUp(oSession.StudentId, freqId, TempRules.pctFrequencyMoveDown.iScoreRequired, reqSess,
                                                    TempRules.pctFrequencyMoveDown.iTotalCorrectInstance, TempRules.pctFrequencyMoveDown.bConsequetiveIndex, status);

                                                bRuleStatusIOA = oDisc.checkConditionIOA(bPromptMoveDownIOA, bIOA);
                                                bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bPromptMoveDownMultiTecher, bMultyTchr);
                                                if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                {
                                                    //if (promptDown >= 1)
                                                    //    bPromptFrequencyMoveDown = false;
                                                    if (bPromptFrequencyMoveDown)
                                                    {
                                                        if (sCurrentPrompt != LessonpromptUsed[0])
                                                        {
                                                            int iPromptIndex = Chained.Model.PromptIndex(LessonpromptUsed, sCurrentPrompt);
                                                            if (iPromptIndex > 0)
                                                            {
                                                                sNextLessonPrompt = LessonpromptUsed[iPromptIndex - 1];
                                                                bPromptMoveBack = true;
                                                                bFrequencyMoveDown = false;
                                                                bFrequencyMoveUp = false;
                                                                GlobalPromptMoveBack = true;
                                                            }
                                                            else
                                                                bPromptFrequencyMoveDown = false;
                                                        }
                                                        else
                                                            bPromptFrequencyMoveDown = false;
                                                    }

                                                }
                                            }
                                            else
                                                bPromptFrequencyMoveDown = false;
                                        }
                                        else
                                            bPromptFrequencyMoveDown = false;
                                        ///end prompt section
                                        ///

                                        //step 
                                        if (!bPromptFrequencyMoveUp && !bPromptFrequencyMoveDown)
                                        {
                                            TempRules = GetStepRules(oTemp.TemplateId, iColId);
                                            if (TempRules.pctFrequencyMoveUp.iScoreRequired > 0)
                                            {
                                                bstepFrequencyMoveUp = ValidateDown(oSession.StudentId, freqId, TempRules.pctFrequencyMoveUp.iScoreRequired, reqSess,
                                                    TempRules.pctFrequencyMoveUp.iTotalCorrectInstance, TempRules.pctFrequencyMoveUp.bConsequetiveIndex, status);

                                                int stepcount = TrialLists.trialsCount;

                                                bRuleStatusIOA = oDisc.checkConditionIOA(bStepMoveUpIOA, bIOA);
                                                bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bStepMoveUpMultiTecher, bMultyTchr);
                                                if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                {
                                                    if (bstepFrequencyMoveUp)
                                                    {
                                                        //if (oDS.CrntStep != stepcount)
                                                        //{
                                                        if (oDS.CrntStep < stepcount)
                                                        {
                                                            nextStep = oDS.CrntStep + 1;

                                                            if (oDS.CrntStep == stepcount)
                                                            {
                                                                nextStep = stepcount;
                                                            }
                                                            if (bStepMoveUp && bstepFrequencyMoveUp)
                                                            {
                                                                bStepMoveUp = true;
                                                                GlobalStepMoveUp = true;
                                                            }
                                                            bFrequencyMoveUp = false;
                                                            bFrequencyMoveDown = false;

                                                        }
                                                        else
                                                            bstepFrequencyMoveUp = false;
                                                        //} 

                                                        //    else
                                                        //        bstepFrequencyMoveUp = false;
                                                    }

                                                }
                                            }
                                            else
                                                bstepFrequencyMoveUp = false;
                                        }
                                        else
                                            bstepFrequencyMoveUp = false;

                                        if (!bPromptFrequencyMoveUp && !bPromptFrequencyMoveDown)
                                        {
                                            if (TempRules.pctFrequencyMoveDown.iScoreRequired > 0)
                                            {
                                                bstepFrequencyMoveDown = ValidateUp(oSession.StudentId, freqId, TempRules.pctFrequencyMoveDown.iScoreRequired, reqSess,
                                                    TempRules.pctFrequencyMoveDown.iTotalCorrectInstance, TempRules.pctFrequencyMoveDown.bConsequetiveIndex, status);

                                                int stepcount = TrialLists.trialsCount;

                                                bRuleStatusIOA = oDisc.checkConditionIOA(bStepMoveDownIOA, bIOA);
                                                bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bStepMoveDownMultiTecher, bMultyTchr);
                                                if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                {
                                                    //if (promptDown >= 1)
                                                    //    bPromptFrequencyMoveDown = false;
                                                    if (bstepFrequencyMoveDown)
                                                    {
                                                        //    if (oDS.CrntStep != stepcount)
                                                        //{
                                                        if (oDS.CrntStep <= stepcount)
                                                        {
                                                            nextStep = oDS.CrntStep - 1;
                                                            if (bStepMoveBack && bstepFrequencyMoveDown)
                                                            {
                                                                bStepMoveBack = true;
                                                                GlobalStepMoveBack = true;
                                                            }

                                                            if (oDS.CrntStep == 1)
                                                            {
                                                                nextStep = 1;
                                                                bstepFrequencyMoveDown = false;
                                                            }
                                                            bFrequencyMoveDown = false;
                                                            bFrequencyMoveUp = false;
                                                        }
                                                        else
                                                            bstepFrequencyMoveDown = false;
                                                        //} 

                                                        //    else
                                                        //        bstepFrequencyMoveDown = false;
                                                    }

                                                }
                                            }
                                            else
                                                bstepFrequencyMoveDown = false;
                                        }
                                        else
                                            bstepFrequencyMoveDown = false;


                                        //set 
                                        if (!bstepFrequencyMoveUp && !bstepFrequencyMoveDown && !bPromptFrequencyMoveUp && !bPromptFrequencyMoveDown)
                                        {
                                            TempRules = GetSetRules(oTemp.TemplateId, iColId);

                                            if (TempRules.pctFrequencyMoveUp.iScoreRequired > 0)
                                            {
                                                bFrequencyMoveUp = ValidateDown(oSession.StudentId, freqId, TempRules.pctFrequencyMoveUp.iScoreRequired, reqSess,
                                                    TempRules.pctFrequencyMoveUp.iTotalCorrectInstance, TempRules.pctFrequencyMoveUp.bConsequetiveIndex, status);
                                                int setcount = TrialLists.totalSet;

                                                bRuleStatusIOA = oDisc.checkConditionIOA(bSetMoveUpIOA, bIOA);
                                                bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bSetMoveUpMultiTecher, bMultyTchr);
                                                if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                {

                                                    if (bFrequencyMoveUp)
                                                    {

                                                        if (oDS.CrntSetNbr < setcount)
                                                            nextSet = oDS.CrntSetNbr + 1;
                                                        if (oDS.CrntSetNbr == setcount)
                                                        {
                                                            nextSet = setcount;
                                                            CompletionStatusSet = "COMPLETED";
                                                        }
                                                        if (CompletionStatusSet == "COMPLETED")
                                                        {
                                                            bSetCompleted = true;
                                                            MaintenanceOrCompletion = true;
                                                        }
                                                        else
                                                        {
                                                            bSetCompleted = false;
                                                            //MaintenanceOrCompletion = false;
                                                        }
                                                        if (bSetMoveUp && bFrequencyMoveUp)
                                                        {
                                                            bSetMoveUp = true;
                                                            GlobalSetMoveUp = true;
                                                            if (bSetMoveUp == true && GlobalSetMoveUp == true)
                                                                bPrompt = true;
                                                        }
                                                    }
                                                }
                                            }
                                            else
                                                bFrequencyMoveUp = false;

                                            if (!bstepFrequencyMoveUp && !bstepFrequencyMoveDown && !bPromptFrequencyMoveUp && !bPromptFrequencyMoveDown)
                                            {
                                            if (TempRules.pctFrequencyMoveDown.iScoreRequired > 0)
                                            {
                                                bFrequencyMoveDown = ValidateUp(oSession.StudentId, freqId, TempRules.pctFrequencyMoveDown.iScoreRequired, reqSess,
                                                    TempRules.pctFrequencyMoveDown.iTotalCorrectInstance, TempRules.pctFrequencyMoveDown.bConsequetiveIndex, status);
                                                int setcount = TrialLists.totalSet;

                                                bRuleStatusIOA = oDisc.checkConditionIOA(bSetMoveDownIOA, bIOA);
                                                bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bSetMoveDownMultiTecher, bMultyTchr);
                                                if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                {

                                                    if (bFrequencyMoveDown)
                                                    {
                                                        if (oDS.CrntSetNbr <= setcount)
                                                            nextSet = oDS.CrntSetNbr - 1;
                                                        if (oDS.CrntSetNbr == 1)
                                                            nextSet = 1;
                                                        if (bSetMoveBack && bTotDurationMoveDown)
                                                        {
                                                            bSetMoveBack = true;
                                                            GlobalSetMoveBack = true;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                            else
                                                bTotDurationMoveDown = false;
                                        }
                                        FreqDurTextFlag = true;
                                    }
                                    #endregion
                                    //Code added for List 5 Task #9 16-feb-2021 change Moveup/down Criteria for Frequncy and Duration END--
                                }

                                #endregion
                                #region percent independent of all steps
                                else if (dr["ColTypeCd"].ToString() == "Prompt")
                                {
                                    TempRules = GetPromptRules(oTemp.TemplateId, iColId);
                                    freqdureloop++;
                                    bool status = true;
                                    CompletionStatusSet = "";
                                    //for prompt move
                                    IndeallId = Convert.ToInt32(ViewState["IndeallId"]);
                                    TempRules = GetPromptRules(oTemp.TemplateId, iColId);
                                    if (promptUp >= 1)
                                        bPromptIndallMoveUp = false;
                                    if (TempRules.pctIndAllMoveUp.iTotalCorrectInstance > 0)
                                    {
                                        bPromptIndallMoveUp = ValidateUp1(oSession.StudentId, IndeallId, TempRules.pctIndAllMoveUp.iScoreRequired, reqSess,
                                            TempRules.pctIndAllMoveUp.iTotalCorrectInstance, TempRules.pctIndAllMoveUp.bConsequetiveIndex, status);

                                        bRuleStatusIOA = oDisc.checkConditionIOA(bPromptIndallMoveUpbIOAReqd, bIOA);
                                        bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bPromptIndallMoveUpbMultiTchr, bMultyTchr);
                                        if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                        {
                                            if (bPromptIndallMoveUp)
                                            {
                                                if (sCurrentPrompt != LessonpromptUsed[LessonpromptUsed.Length - 1])
                                                {
                                                    int iPromptIndex = Chained.Model.PromptIndex(LessonpromptUsed, sCurrentPrompt);
                                                    if (iPromptIndex < LessonpromptUsed.Length)
                                                    {
                                                        sNextLessonPrompt = LessonpromptUsed[iPromptIndex + 1];
                                                        bPromptMoveUp = true;
                                                        bIndallMoveUp = false;
                                                        bIndallMoveDown = false;
                                                        GlobalPromptMoveUp = true;
                                                    }
                                                    else
                                                        bPromptIndallMoveUp = false;
                                                }
                                                else
                                                    bPromptIndallMoveUp = false;
                                            }
                                            else
                                            {
                                                bPromptMoveUp = false;
                                                GlobalPromptMoveUp = false;
                                            }
                                        }
                                    }
                                    else
                                        bPromptIndallMoveUp = false;

                                    //step move up
                                    if (!bPromptIndallMoveUp)
                                    {
                                        TempRules = GetStepRules(oTemp.TemplateId, iColId);
                                        if (TempRules.pctIndAllMoveUp.iScoreRequired > 0)
                                        {
                                            bstepIndallMoveUp = ValidateUp1(oSession.StudentId, IndeallId, TempRules.pctIndAllMoveUp.iScoreRequired, reqSess,
                                                TempRules.pctIndAllMoveUp.iTotalCorrectInstance, TempRules.pctIndAllMoveUp.bConsequetiveIndex, status);

                                            int stepcount = TrialLists.trialsCount;

                                            bRuleStatusIOA = oDisc.checkConditionIOA(bStepMoveUpIOA, bIOA);
                                            bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bStepMoveUpMultiTecher, bMultyTchr);
                                            if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                            {
                                                if (bstepIndallMoveUp)
                                                {
                                                    if (oDS.CrntStep < stepcount)
                                                    {
                                                        nextStep = oDS.CrntStep + 1;

                                                        if (oDS.CrntStep == stepcount)
                                                        {
                                                            nextStep = stepcount;
                                                        }
                                                        if (bStepMoveUp && bstepIndallMoveUp)
                                                        {
                                                            bStepMoveUp = true;
                                                            GlobalStepMoveUp = true;
                                                        }
                                                        else
                                                        {
                                                            bStepMoveUp = false;
                                                            GlobalStepMoveUp = false;
                                                        }
                                                    }
                                                    else
                                                        bstepIndallMoveUp = false;
                                                }
                                                else
                                                    bstepIndallMoveUp = false;
                                            }
                                        }
                                        else
                                            bstepIndallMoveUp = false;
                                    }
                                    else
                                        bstepIndallMoveUp = false;

                                    //set move up
                                    if (!bstepIndallMoveUp)
                                    {
                                        TempRules = GetSetRules(oTemp.TemplateId, iColId);

                                        if (TempRules.pctIndAllMoveUp.iScoreRequired > 0)
                                        {
                                            bIndallMoveUp = ValidateUp1(oSession.StudentId, IndeallId, TempRules.pctIndAllMoveUp.iScoreRequired, reqSess,
                                                TempRules.pctIndAllMoveUp.iTotalCorrectInstance, TempRules.pctIndAllMoveUp.bConsequetiveIndex, status);
                                            int setcount = TrialLists.totalSet;

                                            bRuleStatusIOA = oDisc.checkConditionIOA(bSetMoveUpIOA, bIOA);
                                            bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bSetMoveUpMultiTecher, bMultyTchr);
                                            if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                            {

                                                if (bIndallMoveUp)
                                                {

                                                    if (oDS.CrntSetNbr < setcount)
                                                        nextSet = oDS.CrntSetNbr + 1;
                                                    if (oDS.CrntSetNbr == setcount)
                                                    {
                                                        nextSet = setcount;
                                                        CompletionStatusSet = "COMPLETED";
                                                    }
                                                    if (bSetMoveUp && bIndallMoveUp)
                                                    {
                                                        bSetMoveUp = true;
                                                        GlobalSetMoveUp = true;
                                                    }
                                                    else
                                                    {
                                                        bSetMoveUp = false;
                                                        GlobalSetMoveUp = false;
                                                    }
                                                }
                                                else
                                                    bIndallMoveUp = false;
                                            }
                                        }
                                        else
                                            bIndallMoveUp = false;
                                    }
                                    else
                                        bIndallMoveUp = false;
                                    FreqDurTextFlag = true;
                                }
                                //#endregion


                                #endregion
                                #region +/-
                                else if (dr["ColTypeCd"].ToString() == "+/-")
                                {
                                    TempRules = GetPromptRules(oTemp.TemplateId, iColId);
                                    freqdureloop++;
                                    bool status = true;
                                    CompletionStatusSet = "";
                                    //for prompt move
                                    IndeallId = Convert.ToInt32(ViewState["IndeallId"]);
                                    TempRules = GetPromptRules(oTemp.TemplateId, iColId);
                                    if (promptUp >= 1)
                                        bPromptIndallMoveUp = false;
                                    if (TempRules.pctIndAllMoveUp.iTotalCorrectInstance > 0)
                                    {
                                        bPromptIndallMoveUp = ValidateUp1(oSession.StudentId, IndeallId, TempRules.pctIndAllMoveUp.iScoreRequired, reqSess,
                                            TempRules.pctIndAllMoveUp.iTotalCorrectInstance, TempRules.pctIndAllMoveUp.bConsequetiveIndex, status);

                                        bRuleStatusIOA = oDisc.checkConditionIOA(bPromptIndallMoveUpbIOAReqd, bIOA);
                                        bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bPromptIndallMoveUpbMultiTchr, bMultyTchr);
                                        if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                        {
                                            if (bPromptIndallMoveUp)
                                            {
                                                if (sCurrentLessonPrompt != LessonpromptUsed[LessonpromptUsed.Length - 1])
                                                {
                                                    int iPromptIndex = Chained.Model.PromptIndex(LessonpromptUsed, sCurrentLessonPrompt);
                                                    if (iPromptIndex < LessonpromptUsed.Length)
                                                    {
                                                        sNextLessonPrompt = LessonpromptUsed[iPromptIndex + 1];
                                                        bPromptMoveUp = true;
                                                        bIndallMoveUp = false;
                                                        bIndallMoveDown = false;
                                                        GlobalPromptMoveUp = true;
                                                    }
                                                    else
                                                        bPromptIndallMoveUp = false;
                                                }
                                                else
                                                    bPromptIndallMoveUp = false;
                                            }
                                            else
                                            {
                                                bPromptMoveUp = false;
                                                GlobalPromptMoveUp = false;
                                            }
                                        }
                                    }
                                    else
                                        bPromptIndallMoveUp = false;

                                    //step move up
                                    if (!bPromptIndallMoveUp)
                                    {
                                        TempRules = GetStepRules(oTemp.TemplateId, iColId);
                                        if (TempRules.pctIndAllMoveUp.iScoreRequired > 0)
                                        {
                                            bstepIndallMoveUp = ValidateUp1(oSession.StudentId, IndeallId, TempRules.pctIndAllMoveUp.iScoreRequired, reqSess,
                                                TempRules.pctIndAllMoveUp.iTotalCorrectInstance, TempRules.pctIndAllMoveUp.bConsequetiveIndex, status);

                                            int stepcount = TrialLists.trialsCount;

                                            bRuleStatusIOA = oDisc.checkConditionIOA(bStepMoveUpIOA, bIOA);
                                            bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bStepMoveUpMultiTecher, bMultyTchr);
                                            if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                            {
                                                if (bstepIndallMoveUp)
                                                {
                                                    if (oDS.CrntStep < stepcount)
                                                    {
                                                        nextStep = oDS.CrntStep + 1;

                                                        if (oDS.CrntStep == stepcount)
                                                        {
                                                            nextStep = stepcount;
                                                        }
                                                        if (bStepMoveUp && bstepIndallMoveUp)
                                                        {
                                                            bStepMoveUp = true;
                                                            GlobalStepMoveUp = true;
                                                        }
                                                        else
                                                        {
                                                            bStepMoveUp = false;
                                                            GlobalStepMoveUp = false;
                                                        }
                                                    }
                                                    else
                                                        bstepIndallMoveUp = false;
                                                }
                                                else
                                                    bstepIndallMoveUp = false;
                                            }
                                        }
                                        else
                                            bstepIndallMoveUp = false;
                                    }
                                    else
                                        bstepIndallMoveUp = false;

                                    //set move up
                                    if (!bstepIndallMoveUp)
                                    {
                                        TempRules = GetSetRules(oTemp.TemplateId, iColId);

                                        if (TempRules.pctIndAllMoveUp.iScoreRequired > 0)
                                        {
                                            bIndallMoveUp = ValidateUp1(oSession.StudentId, IndeallId, TempRules.pctIndAllMoveUp.iScoreRequired, reqSess,
                                                TempRules.pctIndAllMoveUp.iTotalCorrectInstance, TempRules.pctIndAllMoveUp.bConsequetiveIndex, status);
                                            int setcount = TrialLists.totalSet;

                                            bRuleStatusIOA = oDisc.checkConditionIOA(bSetMoveUpIOA, bIOA);
                                            bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bSetMoveUpMultiTecher, bMultyTchr);
                                            if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                            {

                                                if (bIndallMoveUp)
                                                {

                                                    if (oDS.CrntSetNbr < setcount)
                                                        nextSet = oDS.CrntSetNbr + 1;
                                                    if (oDS.CrntSetNbr == setcount)
                                                    {
                                                        nextSet = setcount;
                                                        CompletionStatusSet = "COMPLETED";
                                                    }
                                                    if (bSetMoveUp && bIndallMoveUp)
                                                    {
                                                        bSetMoveUp = true;
                                                        GlobalSetMoveUp = true;
                                                    }
                                                    else
                                                    {
                                                        bSetMoveUp = false;
                                                        //GlobalSetMoveUp = false;
                                                    }
                                                }
                                                else
                                                    bIndallMoveUp = false;
                                            }
                                        }
                                        else
                                            bIndallMoveUp = false;
                                    }
                                    else
                                        bIndallMoveUp = false;
                                    FreqDurTextFlag = true;
                                }
                                //#endregion


                                #endregion
                            }

                            #region Total Task
                            if (oDS.ChainType == "Total Task")
                            {
                                bool stepLevelPrompt = false;
                                if (Session["StepLevelPrompt"] != null && Convert.ToBoolean(Session["StepLevelPrompt"]) == true)
                                {
                                    stepLevelPrompt = true;
                                }
                                bStepMoveUp = false; bStepMoveBack = false;
                                //GlobalSetMoveUp = false;
                                GlobalStepMoveBack = false;
                                //new
                                #region Duration
                                if (dr["ColTypeCd"].ToString() == "Duration")
                                {
                                    int colId = Convert.ToInt32(dr["DSTempSetColId"]);
                                    string selqry1 = "select Moveupstat from dstempsetcol DsCol inner join DSTempHdr Hdr on Hdr.DSTempHdrId=DsCol.DSTempHdrId where dsCol.DSTempHdrId=" + oTemp.TemplateId + " And DSTempSetColId= " + colId;
                                    object stat = oData.FetchValue(selqry1);
                                    if (stat != null)
                                        MoveUpstat = Convert.ToInt16(stat);
                                    #region MoveUp on Less Than- Default
                                    if (MoveUpstat == 1)
                                    {
                                        TempRules = GetPromptRules(oTemp.TemplateId, iColId);

                                        if (TempRules.pctAvgDurationMoveUp.iScoreRequired == 0 || TempRules.pctAvgDurationMoveDown.iScoreRequired == 0)
                                        {
                                            freqdureloop++;
                                            bool status = true;
                                            CompletionStatusSet = "";
                                            TempRules = GetSetRules(oTemp.TemplateId, iColId);
                                            avgDurationId = Convert.ToInt32(ViewState["avgDurationId"]);
                                            totDuraionId = Convert.ToInt32(ViewState["totDuraionId"]);
                                            if (TempRules.pctAvgDurationMoveUp.iScoreRequired > 0)
                                            {
                                                bAvgDurationMoveUp = ValidateUp(oSession.StudentId, avgDurationId, TempRules.pctAvgDurationMoveUp.iScoreRequired, reqSess,
                                                    TempRules.pctAvgDurationMoveUp.iTotalCorrectInstance, TempRules.pctAvgDurationMoveUp.bConsequetiveIndex, status);
                                                int setcount = TrialLists.totalSet;

                                                bRuleStatusIOA = oDisc.checkConditionIOA(bAvgDurationMoveUpbIOAReqd, bIOA);
                                                bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bAvgDurationMoveUpbMultiTchr, bMultyTchr);
                                                if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                {

                                                    if (bAvgDurationMoveUp)
                                                    {
                                                        if (oDS.CrntSetNbr < setcount)
                                                            nextSet = oDS.CrntSetNbr + 1;
                                                        if (oDS.CrntSetNbr == setcount)
                                                        {
                                                            nextSet = setcount;
                                                            CompletionStatusSet = "COMPLETED";
                                                        }
                                                        if (CompletionStatusSet == "COMPLETED")
                                                        {
                                                            bSetCompleted = true;
                                                            MaintenanceOrCompletion = true;
                                                        }
                                                        else
                                                        {
                                                            bSetCompleted = false;
                                                            MaintenanceOrCompletion = false;
                                                        }
                                                        if (bSetMoveUp && bAvgDurationMoveUp)
                                                        {
                                                            bSetMoveUp = true;
                                                            GlobalSetMoveUp = true;
                                                            if (bSetMoveUp == true && GlobalSetMoveUp == true)
                                                                bPrompt = true;
                                                        }
                                                    }
                                                }



                                            }
                                            if (TempRules.pctAvgDurationMoveDown.iScoreRequired > 0)
                                            {
                                                bAvgDurationMoveDown = ValidateDown(oSession.StudentId, avgDurationId, TempRules.pctAvgDurationMoveDown.iScoreRequired, reqSess,
                                                    TempRules.pctAvgDurationMoveDown.iTotalCorrectInstance, TempRules.pctAvgDurationMoveDown.bConsequetiveIndex, status);
                                                int setcount = TrialLists.totalSet;

                                                bRuleStatusIOA = oDisc.checkConditionIOA(bAvgDurationMoveDownbIOAReqd, bIOA);
                                                bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bAvgDurationMoveDownbMultiTchr, bMultyTchr);
                                                if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                {

                                                    if (bAvgDurationMoveDown)
                                                    {
                                                        if (oDS.CrntSetNbr <= setcount)
                                                            nextSet = oDS.CrntSetNbr - 1;
                                                        if (oDS.CrntSetNbr == 1)
                                                            nextSet = 1;
                                                        if (bSetMoveBack && bAvgDurationMoveDown)
                                                        {
                                                            bSetMoveBack = true;
                                                            GlobalSetMoveBack = true;
                                                        }
                                                    }
                                                }

                                            }
                                            FreqDurTextFlag = true;
                                        }
                                        else
                                        {
                                            freqdureloop++;
                                            bool status = true;
                                            CompletionStatusSet = "";
                                            avgDurationId = Convert.ToInt32(ViewState["avgDurationId"]);
                                            totDuraionId = Convert.ToInt32(ViewState["totDuraionId"]);
                                            TempRules = GetPromptRules(oTemp.TemplateId, iColId);

                                            //avg duration
                                            if (TempRules.pctAvgDurationMoveUp.iTotalCorrectInstance > 0)
                                            {
                                                if (promptUp >= 1)
                                                    bPromptAvgDurationMoveUp = false;
                                                if (TempRules.pctAvgDurationMoveUp.iScoreRequired > 0)
                                                {
                                                    bPromptAvgDurationMoveUp = ValidateUp(oSession.StudentId, avgDurationId, TempRules.pctAvgDurationMoveUp.iScoreRequired, reqSess,
                                                        TempRules.pctAvgDurationMoveUp.iTotalCorrectInstance, TempRules.pctAvgDurationMoveUp.bConsequetiveIndex, status);

                                                    bRuleStatusIOA = oDisc.checkConditionIOA(bPromptMoveUpIOA, bIOA);
                                                    bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bPromptMoveUpMultiTecher, bMultyTchr);
                                                    if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                    {
                                                        //bPromptAvgDurationMoveUp = false;
                                                        if (bPromptAvgDurationMoveUp)
                                                        {
                                                            if (sCurrentPrompt != LessonpromptUsed[LessonpromptUsed.Length - 1])
                                                            {
                                                                int iPromptIndex = DiscreetTrial.Model.PromptIndex(LessonpromptUsed, sCurrentPrompt);
                                                                if (iPromptIndex < LessonpromptUsed.Length)
                                                                {
                                                                    sNextLessonPrompt = LessonpromptUsed[iPromptIndex + 1];
                                                                    bPromptMoveUp = true;
                                                                    bAvgDurationMoveUp = false;
                                                                    bAvgDurationMoveDown = false;
                                                                    GlobalPromptMoveUp = true;
                                                                }
                                                                else
                                                                    bPromptAvgDurationMoveUp = false;
                                                            }
                                                            else
                                                                bPromptAvgDurationMoveUp = false;
                                                        }
                                                    }
                                                }
                                                else
                                                    bPromptAvgDurationMoveUp = false;
                                                if (!bPromptAvgDurationMoveUp)
                                                {
                                                    if (promptDown >= 1)
                                                        bPromptAvgDurationMoveDown = false;
                                                    if (TempRules.pctAvgDurationMoveDown.iScoreRequired > 0)
                                                    {
                                                        bPromptAvgDurationMoveDown = ValidateDown(oSession.StudentId, avgDurationId, TempRules.pctAvgDurationMoveDown.iScoreRequired, reqSess,
                                                            TempRules.pctAvgDurationMoveDown.iTotalCorrectInstance, TempRules.pctAvgDurationMoveDown.bConsequetiveIndex, status);

                                                        bRuleStatusIOA = oDisc.checkConditionIOA(bPromptMoveDownIOA, bIOA);
                                                        bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bPromptMoveDownMultiTecher, bMultyTchr);
                                                        if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                        {

                                                            if (bPromptAvgDurationMoveDown)
                                                            {
                                                                if (sCurrentPrompt != LessonpromptUsed[0])
                                                                {
                                                                    int iPromptIndex = DiscreetTrial.Model.PromptIndex(LessonpromptUsed, sCurrentPrompt);
                                                                    if (iPromptIndex > 0)
                                                                    {
                                                                        sNextLessonPrompt = LessonpromptUsed[iPromptIndex - 1];
                                                                        bPromptMoveBack = true;
                                                                        bAvgDurationMoveDown = false;
                                                                        bAvgDurationMoveUp = false;
                                                                        GlobalPromptMoveBack = true;
                                                                    }
                                                                    else
                                                                        bPromptAvgDurationMoveDown = false;
                                                                }
                                                                else
                                                                    bPromptAvgDurationMoveDown = false;
                                                            }

                                                        }
                                                    }
                                                }
                                                else
                                                    bPromptAvgDurationMoveDown = false;

                                                if (!bPromptAvgDurationMoveUp && !bPromptAvgDurationMoveDown)
                                                {
                                                    TempRules = GetSetRules(oTemp.TemplateId, iColId);

                                                    if (TempRules.pctAvgDurationMoveUp.iScoreRequired > 0)
                                                    {
                                                        bAvgDurationMoveUp = ValidateUp(oSession.StudentId, avgDurationId, TempRules.pctAvgDurationMoveUp.iScoreRequired, reqSess,
                                                            TempRules.pctAvgDurationMoveUp.iTotalCorrectInstance, TempRules.pctAvgDurationMoveUp.bConsequetiveIndex, status);
                                                        int setcount = TrialLists.totalSet;

                                                        bRuleStatusIOA = oDisc.checkConditionIOA(bSetMoveUpIOA, bIOA);
                                                        bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bSetMoveUpMultiTecher, bMultyTchr);
                                                        if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                        {

                                                            if (bAvgDurationMoveUp)
                                                            {
                                                                if (oDS.CrntSetNbr < setcount)
                                                                    nextSet = oDS.CrntSetNbr + 1;
                                                                if (oDS.CrntSetNbr == setcount)
                                                                {
                                                                    nextSet = setcount;
                                                                    CompletionStatusSet = "COMPLETED";
                                                                }
                                                                if (CompletionStatusSet == "COMPLETED")
                                                                {
                                                                    bSetCompleted = true;
                                                                    MaintenanceOrCompletion = true;
                                                                }
                                                                else
                                                                {
                                                                    bSetCompleted = false;
                                                                    MaintenanceOrCompletion = false;
                                                                }
                                                                if (bSetMoveUp && bAvgDurationMoveUp)
                                                                {
                                                                    bSetMoveUp = true;
                                                                    GlobalSetMoveUp = true;
                                                                    if (bSetMoveUp == true && GlobalSetMoveUp == true)
                                                                        bPrompt = true;

                                                                }
                                                            }
                                                        }



                                                    }
                                                    if (TempRules.pctAvgDurationMoveDown.iScoreRequired > 0)
                                                    {
                                                        bAvgDurationMoveDown = ValidateDown(oSession.StudentId, avgDurationId, TempRules.pctAvgDurationMoveDown.iScoreRequired, reqSess,
                                                            TempRules.pctAvgDurationMoveDown.iTotalCorrectInstance, TempRules.pctAvgDurationMoveDown.bConsequetiveIndex, status);
                                                        int setcount = TrialLists.totalSet;

                                                        bRuleStatusIOA = oDisc.checkConditionIOA(bSetMoveDownIOA, bIOA);
                                                        bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bSetMoveDownMultiTecher, bMultyTchr);
                                                        if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                        {

                                                            if (bAvgDurationMoveDown)
                                                            {
                                                                if (oDS.CrntSetNbr <= setcount)
                                                                    nextSet = oDS.CrntSetNbr - 1;
                                                                if (oDS.CrntSetNbr == 1)
                                                                    nextSet = 1;
                                                                if (bSetMoveBack && bAvgDurationMoveDown)
                                                                {
                                                                    bSetMoveBack = true;
                                                                    GlobalSetMoveBack = true;
                                                                }
                                                            }
                                                        }

                                                    }

                                                }
                                            }
                                            FreqDurTextFlag = true;
                                        }
                                        TempRules = GetPromptRules(oTemp.TemplateId, iColId);
                                        if (TempRules.pctTotalDurationMoveUp.iScoreRequired == 0 || TempRules.pctTotalDurationMoveDown.iScoreRequired == 0)
                                        {
                                            freqdureloop++;
                                            bool status = true;
                                            CompletionStatusSet = "";
                                            TempRules = GetSetRules(oTemp.TemplateId, iColId);
                                            avgDurationId = Convert.ToInt32(ViewState["avgDurationId"]);
                                            totDuraionId = Convert.ToInt32(ViewState["totDuraionId"]);
                                            if (TempRules.pctTotalDurationMoveUp.iScoreRequired > 0)
                                            {
                                                CompletionStatusSet = "";
                                                bTotDurationMoveUp = ValidateUp(oSession.StudentId, totDuraionId, TempRules.pctTotalDurationMoveUp.iScoreRequired, reqSess,
                                                    TempRules.pctTotalDurationMoveUp.iTotalCorrectInstance, TempRules.pctTotalDurationMoveUp.bConsequetiveIndex, status);
                                                int setcount = TrialLists.totalSet;

                                                bRuleStatusIOA = oDisc.checkConditionIOA(bTotalDurationMoveUpbIOAReqd, bIOA);
                                                bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bTotalDurationMoveUpbMultiTchr, bMultyTchr);
                                                if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                {

                                                    if (bTotDurationMoveUp)
                                                    {
                                                        if (oDS.CrntSetNbr < setcount)
                                                            nextSet = oDS.CrntSetNbr + 1;
                                                        if (oDS.CrntSetNbr == setcount)
                                                        {
                                                            nextSet = setcount;
                                                            CompletionStatusSet = "COMPLETED";
                                                        }
                                                        if (CompletionStatusSet == "COMPLETED")
                                                        {
                                                            bSetCompleted = true;
                                                            MaintenanceOrCompletion = true;
                                                        }
                                                        else
                                                        {
                                                            bSetCompleted = false;
                                                            MaintenanceOrCompletion = false;
                                                        }
                                                        if (bSetMoveUp && bTotDurationMoveUp)
                                                        {
                                                            bSetMoveUp = true;
                                                            GlobalSetMoveUp = true;
                                                            if (bSetMoveUp == true && GlobalSetMoveUp == true)
                                                                bPrompt = true;
                                                        }
                                                    }
                                                }


                                            }
                                            if (TempRules.pctTotalDurationMoveDown.iScoreRequired > 0)
                                            {
                                                bTotDurationMoveDown = ValidateDown(oSession.StudentId, totDuraionId, TempRules.pctTotalDurationMoveDown.iScoreRequired, reqSess,
                                                    TempRules.pctTotalDurationMoveDown.iTotalCorrectInstance, TempRules.pctTotalDurationMoveDown.bConsequetiveIndex, status);
                                                int setcount = TrialLists.totalSet;

                                                bRuleStatusIOA = oDisc.checkConditionIOA(bTotalDurationMoveDownbIOAReqd, bIOA);
                                                bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bTotalDurationMoveDownbMultiTchr, bMultyTchr);
                                                if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                {

                                                    if (bTotDurationMoveDown)
                                                    {
                                                        if (oDS.CrntSetNbr <= setcount)
                                                            nextSet = oDS.CrntSetNbr - 1;
                                                        if (oDS.CrntSetNbr == 1)
                                                            nextSet = 1;
                                                        if (bSetMoveBack && bTotDurationMoveDown)
                                                        {
                                                            bSetMoveBack = true;
                                                            GlobalSetMoveBack = true;
                                                        }
                                                    }
                                                }




                                            }

                                            FreqDurTextFlag = true;
                                        }
                                        else
                                        {
                                            freqdureloop++;
                                            bool status = true;
                                            CompletionStatusSet = "";
                                            avgDurationId = Convert.ToInt32(ViewState["avgDurationId"]);
                                            totDuraionId = Convert.ToInt32(ViewState["totDuraionId"]);
                                            TempRules = GetPromptRules(oTemp.TemplateId, iColId);

                                            if (TempRules.pctTotalDurationMoveUp.iTotalCorrectInstance > 0)
                                            {
                                                if (promptUp >= 1)
                                                    bPromptTotDurationMoveUp = false;
                                                if (TempRules.pctTotalDurationMoveUp.iScoreRequired > 0)
                                                {
                                                    bPromptTotDurationMoveUp = ValidateUp(oSession.StudentId, totDuraionId, TempRules.pctTotalDurationMoveUp.iScoreRequired, reqSess,
                                                        TempRules.pctTotalDurationMoveUp.iTotalCorrectInstance, TempRules.pctTotalDurationMoveUp.bConsequetiveIndex, status);

                                                    bRuleStatusIOA = oDisc.checkConditionIOA(bPromptMoveUpIOA, bIOA);
                                                    bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bPromptMoveUpMultiTecher, bMultyTchr);
                                                    if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                    {

                                                        if (bPromptTotDurationMoveUp)
                                                        {
                                                            if (sCurrentPrompt != LessonpromptUsed[LessonpromptUsed.Length - 1])
                                                            {
                                                                int iPromptIndex = DiscreetTrial.Model.PromptIndex(LessonpromptUsed, sCurrentPrompt);
                                                                if (iPromptIndex < LessonpromptUsed.Length)
                                                                {
                                                                    sNextLessonPrompt = LessonpromptUsed[iPromptIndex + 1];
                                                                    bPromptMoveUp = true;
                                                                    bTotDurationMoveUp = false;
                                                                    bTotDurationMoveDown = false;
                                                                    GlobalPromptMoveUp = true;
                                                                }
                                                                else
                                                                    bPromptTotDurationMoveUp = false;
                                                            }
                                                            else
                                                                bPromptTotDurationMoveUp = false;
                                                        }
                                                    }
                                                }
                                                else
                                                    bPromptTotDurationMoveUp = false;
                                                if (!bPromptTotDurationMoveUp)
                                                {
                                                    if (promptDown >= 1)
                                                        bPromptTotDurationMoveDown = false;
                                                    if (TempRules.pctTotalDurationMoveDown.iScoreRequired > 0)
                                                    {
                                                        bPromptTotDurationMoveDown = ValidateDown(oSession.StudentId, totDuraionId, TempRules.pctTotalDurationMoveDown.iScoreRequired, reqSess,
                                                            TempRules.pctTotalDurationMoveDown.iTotalCorrectInstance, TempRules.pctTotalDurationMoveDown.bConsequetiveIndex, status);

                                                        bRuleStatusIOA = oDisc.checkConditionIOA(bPromptMoveDownIOA, bIOA);
                                                        bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bPromptMoveDownMultiTecher, bMultyTchr);
                                                        if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                        {

                                                            if (bPromptTotDurationMoveDown)
                                                            {
                                                                if (sCurrentPrompt != LessonpromptUsed[0])
                                                                {
                                                                    int iPromptIndex = DiscreetTrial.Model.PromptIndex(LessonpromptUsed, sCurrentPrompt);
                                                                    if (iPromptIndex > 0)
                                                                    {
                                                                        sNextLessonPrompt = LessonpromptUsed[iPromptIndex - 1];
                                                                        bPromptMoveBack = true;
                                                                        bTotDurationMoveDown = false;
                                                                        bTotDurationMoveUp = false;
                                                                        GlobalPromptMoveBack = true;
                                                                    }
                                                                    else
                                                                        bPromptTotDurationMoveDown = false;
                                                                }
                                                                else
                                                                    bPromptTotDurationMoveDown = false;
                                                            }

                                                        }
                                                    }
                                                }
                                                else
                                                    bPromptTotDurationMoveDown = false;
                                                //total duration


                                                if (!bPromptTotDurationMoveUp && !bPromptTotDurationMoveDown)
                                                {
                                                    TempRules = GetSetRules(oTemp.TemplateId, iColId);

                                                    if (TempRules.pctTotalDurationMoveUp.iScoreRequired > 0)
                                                    {
                                                        CompletionStatusSet = "";
                                                        bTotDurationMoveUp = ValidateUp(oSession.StudentId, totDuraionId, TempRules.pctTotalDurationMoveUp.iScoreRequired, reqSess,
                                                            TempRules.pctTotalDurationMoveUp.iTotalCorrectInstance, TempRules.pctTotalDurationMoveUp.bConsequetiveIndex, status);
                                                        int setcount = TrialLists.totalSet;

                                                        bRuleStatusIOA = oDisc.checkConditionIOA(bSetMoveUpIOA, bIOA);
                                                        bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bSetMoveUpMultiTecher, bMultyTchr);
                                                        if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                        {

                                                            if (bTotDurationMoveUp)
                                                            {
                                                                if (oDS.CrntSetNbr < setcount)
                                                                    nextSet = oDS.CrntSetNbr + 1;
                                                                if (oDS.CrntSetNbr == setcount)
                                                                {
                                                                    nextSet = setcount;
                                                                    CompletionStatusSet = "COMPLETED";
                                                                }
                                                                if (CompletionStatusSet == "COMPLETED")
                                                                {
                                                                    bSetCompleted = true;
                                                                    MaintenanceOrCompletion = true;
                                                                }
                                                                else
                                                                {
                                                                    bSetCompleted = false;
                                                                    MaintenanceOrCompletion = false;
                                                                }
                                                                if (bSetMoveUp && bTotDurationMoveUp)
                                                                {
                                                                    bSetMoveUp = true;
                                                                    GlobalSetMoveUp = true;
                                                                    if (bSetMoveUp == true && GlobalSetMoveUp == true)
                                                                        bPrompt = true;
                                                                }
                                                            }
                                                        }


                                                    }
                                                    if (TempRules.pctTotalDurationMoveDown.iScoreRequired > 0)
                                                    {
                                                        bTotDurationMoveDown = ValidateDown(oSession.StudentId, totDuraionId, TempRules.pctTotalDurationMoveDown.iScoreRequired, reqSess,
                                                            TempRules.pctTotalDurationMoveDown.iTotalCorrectInstance, TempRules.pctTotalDurationMoveDown.bConsequetiveIndex, status);
                                                        int setcount = TrialLists.totalSet;

                                                        bRuleStatusIOA = oDisc.checkConditionIOA(bSetMoveDownIOA, bIOA);
                                                        bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bSetMoveDownMultiTecher, bMultyTchr);
                                                        if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                        {

                                                            if (bTotDurationMoveDown)
                                                            {
                                                                if (oDS.CrntSetNbr <= setcount)
                                                                    nextSet = oDS.CrntSetNbr - 1;
                                                                if (oDS.CrntSetNbr == 1)
                                                                    nextSet = 1;
                                                                if (bSetMoveBack && bTotDurationMoveDown)
                                                                {
                                                                    bSetMoveBack = true;
                                                                    GlobalSetMoveBack = true;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }

                                            }
                                            FreqDurTextFlag = true;
                                        }


                                    }
                                    #endregion
                                    //Code added for List 5 Task #9 16-feb-2021 change Moveup/down Criteria for Frequncy and Duration START--
                                    #region MoveUp on More Than
                                    else if (MoveUpstat == 0)
                                    {
                                        TempRules = GetPromptRules(oTemp.TemplateId, iColId);

                                        if (TempRules.pctAvgDurationMoveUp.iScoreRequired == 0 || TempRules.pctAvgDurationMoveDown.iScoreRequired == 0)
                                        {
                                            freqdureloop++;
                                            bool status = true;
                                            CompletionStatusSet = "";
                                            TempRules = GetSetRules(oTemp.TemplateId, iColId);
                                            avgDurationId = Convert.ToInt32(ViewState["avgDurationId"]);
                                            totDuraionId = Convert.ToInt32(ViewState["totDuraionId"]);
                                            if (TempRules.pctAvgDurationMoveUp.iScoreRequired > 0)
                                            {
                                                bAvgDurationMoveUp = ValidateDown(oSession.StudentId, avgDurationId, TempRules.pctAvgDurationMoveUp.iScoreRequired, reqSess,
                                                    TempRules.pctAvgDurationMoveUp.iTotalCorrectInstance, TempRules.pctAvgDurationMoveUp.bConsequetiveIndex, status);
                                                int setcount = TrialLists.totalSet;

                                                bRuleStatusIOA = oDisc.checkConditionIOA(bAvgDurationMoveUpbIOAReqd, bIOA);
                                                bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bAvgDurationMoveUpbMultiTchr, bMultyTchr);
                                                if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                {

                                                    if (bAvgDurationMoveUp)
                                                    {
                                                        if (oDS.CrntSetNbr < setcount)
                                                            nextSet = oDS.CrntSetNbr + 1;
                                                        if (oDS.CrntSetNbr == setcount)
                                                        {
                                                            nextSet = setcount;
                                                            CompletionStatusSet = "COMPLETED";
                                                        }
                                                        if (CompletionStatusSet == "COMPLETED")
                                                        {
                                                            bSetCompleted = true;
                                                            MaintenanceOrCompletion = true;
                                                        }
                                                        else
                                                        {
                                                            bSetCompleted = false;
                                                            MaintenanceOrCompletion = false;
                                                        }
                                                        if (bSetMoveUp && bAvgDurationMoveUp)
                                                        {
                                                            bSetMoveUp = true;
                                                            GlobalSetMoveUp = true;
                                                            if (bSetMoveUp == true && GlobalSetMoveUp == true)
                                                                bPrompt = true;
                                                        }
                                                    }
                                                }



                                            }
                                            if (TempRules.pctAvgDurationMoveDown.iScoreRequired > 0)
                                            {
                                                bAvgDurationMoveDown = ValidateUp(oSession.StudentId, avgDurationId, TempRules.pctAvgDurationMoveDown.iScoreRequired, reqSess,
                                                    TempRules.pctAvgDurationMoveDown.iTotalCorrectInstance, TempRules.pctAvgDurationMoveDown.bConsequetiveIndex, status);
                                                int setcount = TrialLists.totalSet;

                                                bRuleStatusIOA = oDisc.checkConditionIOA(bAvgDurationMoveDownbIOAReqd, bIOA);
                                                bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bAvgDurationMoveDownbMultiTchr, bMultyTchr);
                                                if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                {

                                                    if (bAvgDurationMoveDown)
                                                    {
                                                        if (oDS.CrntSetNbr <= setcount)
                                                            nextSet = oDS.CrntSetNbr - 1;
                                                        if (oDS.CrntSetNbr == 1)
                                                            nextSet = 1;
                                                        if (bSetMoveBack && bAvgDurationMoveDown)
                                                        {
                                                            bSetMoveBack = true;
                                                            GlobalSetMoveBack = true;
                                                        }
                                                    }
                                                }

                                            }
                                            FreqDurTextFlag = true;
                                        }
                                        else
                                        {
                                            freqdureloop++;
                                            bool status = true;
                                            CompletionStatusSet = "";
                                            avgDurationId = Convert.ToInt32(ViewState["avgDurationId"]);
                                            totDuraionId = Convert.ToInt32(ViewState["totDuraionId"]);
                                            TempRules = GetPromptRules(oTemp.TemplateId, iColId);

                                            //avg duration
                                            if (TempRules.pctAvgDurationMoveUp.iTotalCorrectInstance > 0)
                                            {
                                                if (promptUp >= 1)
                                                    bPromptAvgDurationMoveUp = false;
                                                if (TempRules.pctAvgDurationMoveUp.iScoreRequired > 0)
                                                {
                                                    bPromptAvgDurationMoveUp = ValidateDown(oSession.StudentId, avgDurationId, TempRules.pctAvgDurationMoveUp.iScoreRequired, reqSess,
                                                        TempRules.pctAvgDurationMoveUp.iTotalCorrectInstance, TempRules.pctAvgDurationMoveUp.bConsequetiveIndex, status);

                                                    bRuleStatusIOA = oDisc.checkConditionIOA(bPromptMoveUpIOA, bIOA);
                                                    bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bPromptMoveUpMultiTecher, bMultyTchr);
                                                    if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                    {
                                                        bPromptAvgDurationMoveUp = false;
                                                        if (bPromptAvgDurationMoveUp)
                                                        {
                                                            if (sCurrentPrompt != LessonpromptUsed[LessonpromptUsed.Length - 1])
                                                            {
                                                                int iPromptIndex = DiscreetTrial.Model.PromptIndex(LessonpromptUsed, sCurrentPrompt);
                                                                if (iPromptIndex < LessonpromptUsed.Length)
                                                                {
                                                                    sNextLessonPrompt = LessonpromptUsed[iPromptIndex + 1];
                                                                    bPromptMoveUp = true;
                                                                    bAvgDurationMoveUp = false;
                                                                    bAvgDurationMoveDown = false;
                                                                    GlobalPromptMoveUp = true;
                                                                }
                                                                else
                                                                    bPromptAvgDurationMoveUp = false;
                                                            }
                                                            else
                                                                bPromptAvgDurationMoveUp = false;
                                                        }
                                                    }
                                                }
                                                else
                                                    bPromptAvgDurationMoveUp = false;
                                                if (!bPromptAvgDurationMoveUp)
                                                {
                                                    if (promptDown >= 1)
                                                        bPromptAvgDurationMoveDown = false;
                                                    if (TempRules.pctAvgDurationMoveDown.iScoreRequired > 0)
                                                    {
                                                        bPromptAvgDurationMoveDown = ValidateUp(oSession.StudentId, avgDurationId, TempRules.pctAvgDurationMoveDown.iScoreRequired, reqSess,
                                                            TempRules.pctAvgDurationMoveDown.iTotalCorrectInstance, TempRules.pctAvgDurationMoveDown.bConsequetiveIndex, status);

                                                        bRuleStatusIOA = oDisc.checkConditionIOA(bPromptMoveDownIOA, bIOA);
                                                        bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bPromptMoveDownMultiTecher, bMultyTchr);
                                                        if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                        {

                                                            if (bPromptAvgDurationMoveDown)
                                                            {
                                                                if (sCurrentPrompt != LessonpromptUsed[0])
                                                                {
                                                                    int iPromptIndex = DiscreetTrial.Model.PromptIndex(LessonpromptUsed, sCurrentPrompt);
                                                                    if (iPromptIndex > 0)
                                                                    {
                                                                        sNextLessonPrompt = LessonpromptUsed[iPromptIndex - 1];
                                                                        bPromptMoveBack = true;
                                                                        bAvgDurationMoveDown = false;
                                                                        bAvgDurationMoveUp = false;
                                                                        GlobalPromptMoveBack = true;
                                                                    }
                                                                    else
                                                                        bPromptAvgDurationMoveDown = false;
                                                                }
                                                                else
                                                                    bPromptAvgDurationMoveDown = false;
                                                            }

                                                        }
                                                    }
                                                }
                                                else
                                                    bPromptAvgDurationMoveDown = false;

                                                if (!bPromptAvgDurationMoveUp && !bPromptAvgDurationMoveDown)
                                                {
                                                    TempRules = GetSetRules(oTemp.TemplateId, iColId);

                                                    if (TempRules.pctAvgDurationMoveUp.iScoreRequired > 0)
                                                    {
                                                        bAvgDurationMoveUp = ValidateDown(oSession.StudentId, avgDurationId, TempRules.pctAvgDurationMoveUp.iScoreRequired, reqSess,
                                                            TempRules.pctAvgDurationMoveUp.iTotalCorrectInstance, TempRules.pctAvgDurationMoveUp.bConsequetiveIndex, status);
                                                        int setcount = TrialLists.totalSet;

                                                        bRuleStatusIOA = oDisc.checkConditionIOA(bSetMoveUpIOA, bIOA);
                                                        bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bSetMoveUpMultiTecher, bMultyTchr);
                                                        if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                        {

                                                            if (bAvgDurationMoveUp)
                                                            {
                                                                if (oDS.CrntSetNbr < setcount)
                                                                    nextSet = oDS.CrntSetNbr + 1;
                                                                if (oDS.CrntSetNbr == setcount)
                                                                {
                                                                    nextSet = setcount;
                                                                    CompletionStatusSet = "COMPLETED";
                                                                }
                                                                if (CompletionStatusSet == "COMPLETED")
                                                                {
                                                                    bSetCompleted = true;
                                                                    MaintenanceOrCompletion = true;
                                                                }
                                                                else
                                                                {
                                                                    bSetCompleted = false;
                                                                    MaintenanceOrCompletion = false;
                                                                }
                                                                if (bSetMoveUp && bAvgDurationMoveUp)
                                                                {
                                                                    bSetMoveUp = true;
                                                                    GlobalSetMoveUp = true;
                                                                    if (bSetMoveUp == true && GlobalSetMoveUp == true)
                                                                        bPrompt = true;
                                                                }
                                                            }
                                                        }



                                                    }
                                                    if (TempRules.pctAvgDurationMoveDown.iScoreRequired > 0)
                                                    {
                                                        bAvgDurationMoveDown = ValidateUp(oSession.StudentId, avgDurationId, TempRules.pctAvgDurationMoveDown.iScoreRequired, reqSess,
                                                            TempRules.pctAvgDurationMoveDown.iTotalCorrectInstance, TempRules.pctAvgDurationMoveDown.bConsequetiveIndex, status);
                                                        int setcount = TrialLists.totalSet;

                                                        bRuleStatusIOA = oDisc.checkConditionIOA(bSetMoveDownIOA, bIOA);
                                                        bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bSetMoveDownMultiTecher, bMultyTchr);
                                                        if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                        {

                                                            if (bAvgDurationMoveDown)
                                                            {
                                                                if (oDS.CrntSetNbr <= setcount)
                                                                    nextSet = oDS.CrntSetNbr - 1;
                                                                if (oDS.CrntSetNbr == 1)
                                                                    nextSet = 1;
                                                                if (bSetMoveBack && bAvgDurationMoveDown)
                                                                {
                                                                    bSetMoveBack = true;
                                                                    GlobalSetMoveBack = true;
                                                                }
                                                            }
                                                        }

                                                    }

                                                }
                                            }
                                            FreqDurTextFlag = true;
                                        }
                                        TempRules = GetPromptRules(oTemp.TemplateId, iColId);
                                        if (TempRules.pctTotalDurationMoveUp.iScoreRequired == 0 || TempRules.pctTotalDurationMoveDown.iScoreRequired == 0)
                                        {
                                            freqdureloop++;
                                            bool status = true;
                                            CompletionStatusSet = "";
                                            TempRules = GetSetRules(oTemp.TemplateId, iColId);
                                            avgDurationId = Convert.ToInt32(ViewState["avgDurationId"]);
                                            totDuraionId = Convert.ToInt32(ViewState["totDuraionId"]);
                                            if (TempRules.pctTotalDurationMoveUp.iScoreRequired > 0)
                                            {
                                                CompletionStatusSet = "";
                                                bTotDurationMoveUp = ValidateDown(oSession.StudentId, totDuraionId, TempRules.pctTotalDurationMoveUp.iScoreRequired, reqSess,
                                                    TempRules.pctTotalDurationMoveUp.iTotalCorrectInstance, TempRules.pctTotalDurationMoveUp.bConsequetiveIndex, status);
                                                int setcount = TrialLists.totalSet;

                                                bRuleStatusIOA = oDisc.checkConditionIOA(bTotalDurationMoveUpbIOAReqd, bIOA);
                                                bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bTotalDurationMoveUpbMultiTchr, bMultyTchr);
                                                if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                {

                                                    if (bTotDurationMoveUp)
                                                    {
                                                        if (oDS.CrntSetNbr < setcount)
                                                            nextSet = oDS.CrntSetNbr + 1;
                                                        if (oDS.CrntSetNbr == setcount)
                                                        {
                                                            nextSet = setcount;
                                                            CompletionStatusSet = "COMPLETED";
                                                        }
                                                        if (CompletionStatusSet == "COMPLETED")
                                                        {
                                                            bSetCompleted = true;
                                                            MaintenanceOrCompletion = true;
                                                        }
                                                        else
                                                        {
                                                            bSetCompleted = false;
                                                            MaintenanceOrCompletion = false;
                                                        }
                                                        if (bSetMoveUp && bTotDurationMoveUp)
                                                        {
                                                            bSetMoveUp = true;
                                                            GlobalSetMoveUp = true;
                                                        }
                                                    }
                                                }


                                            }
                                            if (TempRules.pctTotalDurationMoveDown.iScoreRequired > 0)
                                            {
                                                bTotDurationMoveDown = ValidateUp(oSession.StudentId, totDuraionId, TempRules.pctTotalDurationMoveDown.iScoreRequired, reqSess,
                                                    TempRules.pctTotalDurationMoveDown.iTotalCorrectInstance, TempRules.pctTotalDurationMoveDown.bConsequetiveIndex, status);
                                                int setcount = TrialLists.totalSet;

                                                bRuleStatusIOA = oDisc.checkConditionIOA(bTotalDurationMoveDownbIOAReqd, bIOA);
                                                bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bTotalDurationMoveDownbMultiTchr, bMultyTchr);
                                                if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                {

                                                    if (bTotDurationMoveDown)
                                                    {
                                                        if (oDS.CrntSetNbr <= setcount)
                                                            nextSet = oDS.CrntSetNbr - 1;
                                                        if (oDS.CrntSetNbr == 1)
                                                            nextSet = 1;
                                                        if (bSetMoveBack && bTotDurationMoveDown)
                                                        {
                                                            bSetMoveBack = true;
                                                            GlobalSetMoveBack = true;
                                                        }
                                                    }
                                                }




                                            }

                                            FreqDurTextFlag = true;
                                        }
                                        else
                                        {
                                            freqdureloop++;
                                            bool status = true;
                                            CompletionStatusSet = "";
                                            avgDurationId = Convert.ToInt32(ViewState["avgDurationId"]);
                                            totDuraionId = Convert.ToInt32(ViewState["totDuraionId"]);
                                            TempRules = GetPromptRules(oTemp.TemplateId, iColId);

                                            if (TempRules.pctTotalDurationMoveUp.iTotalCorrectInstance > 0)
                                            {
                                                if (promptUp >= 1)
                                                    bPromptTotDurationMoveUp = false;
                                                if (TempRules.pctTotalDurationMoveUp.iScoreRequired > 0)
                                                {
                                                    bPromptTotDurationMoveUp = ValidateDown(oSession.StudentId, totDuraionId, TempRules.pctTotalDurationMoveUp.iScoreRequired, reqSess,
                                                        TempRules.pctTotalDurationMoveUp.iTotalCorrectInstance, TempRules.pctTotalDurationMoveUp.bConsequetiveIndex, status);

                                                    bRuleStatusIOA = oDisc.checkConditionIOA(bPromptMoveUpIOA, bIOA);
                                                    bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bPromptMoveUpMultiTecher, bMultyTchr);
                                                    if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                    {

                                                        if (bPromptTotDurationMoveUp)
                                                        {
                                                            if (sCurrentPrompt != LessonpromptUsed[LessonpromptUsed.Length - 1])
                                                            {
                                                                int iPromptIndex = DiscreetTrial.Model.PromptIndex(LessonpromptUsed, sCurrentPrompt);
                                                                if (iPromptIndex < LessonpromptUsed.Length)
                                                                {
                                                                    sNextLessonPrompt = LessonpromptUsed[iPromptIndex + 1];
                                                                    bPromptMoveUp = true;
                                                                    bTotDurationMoveUp = false;
                                                                    bTotDurationMoveDown = false;
                                                                    GlobalPromptMoveUp = true;
                                                                }
                                                                else
                                                                    bPromptTotDurationMoveUp = false;
                                                            }
                                                            else
                                                                bPromptTotDurationMoveUp = false;
                                                        }
                                                    }
                                                }
                                                else
                                                    bPromptTotDurationMoveUp = false;
                                                if (!bPromptTotDurationMoveUp)
                                                {
                                                    if (promptDown >= 1)
                                                        bPromptTotDurationMoveDown = false;
                                                    if (TempRules.pctTotalDurationMoveDown.iScoreRequired > 0)
                                                    {
                                                        bPromptTotDurationMoveDown = ValidateUp(oSession.StudentId, totDuraionId, TempRules.pctTotalDurationMoveDown.iScoreRequired, reqSess,
                                                            TempRules.pctTotalDurationMoveDown.iTotalCorrectInstance, TempRules.pctTotalDurationMoveDown.bConsequetiveIndex, status);

                                                        bRuleStatusIOA = oDisc.checkConditionIOA(bPromptMoveDownIOA, bIOA);
                                                        bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bPromptMoveDownMultiTecher, bMultyTchr);
                                                        if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                        {

                                                            if (bPromptTotDurationMoveDown)
                                                            {
                                                                if (sCurrentPrompt != LessonpromptUsed[0])
                                                                {
                                                                    int iPromptIndex = DiscreetTrial.Model.PromptIndex(LessonpromptUsed, sCurrentPrompt);
                                                                    if (iPromptIndex > 0)
                                                                    {
                                                                        sNextLessonPrompt = LessonpromptUsed[iPromptIndex - 1];
                                                                        bPromptMoveBack = true;
                                                                        bTotDurationMoveDown = false;
                                                                        bTotDurationMoveUp = false;
                                                                        GlobalPromptMoveBack = true;
                                                                    }
                                                                    else
                                                                        bPromptTotDurationMoveDown = false;
                                                                }
                                                                else
                                                                    bPromptTotDurationMoveDown = false;
                                                            }

                                                        }
                                                    }
                                                }
                                                else
                                                    bPromptTotDurationMoveDown = false;
                                                //total duration


                                                if (!bPromptTotDurationMoveUp && !bPromptTotDurationMoveDown)
                                                {
                                                    TempRules = GetSetRules(oTemp.TemplateId, iColId);

                                                    if (TempRules.pctTotalDurationMoveUp.iScoreRequired > 0)
                                                    {
                                                        CompletionStatusSet = "";
                                                        bTotDurationMoveUp = ValidateDown(oSession.StudentId, totDuraionId, TempRules.pctTotalDurationMoveUp.iScoreRequired, reqSess,
                                                            TempRules.pctTotalDurationMoveUp.iTotalCorrectInstance, TempRules.pctTotalDurationMoveUp.bConsequetiveIndex, status);
                                                        int setcount = TrialLists.totalSet;

                                                        bRuleStatusIOA = oDisc.checkConditionIOA(bSetMoveUpIOA, bIOA);
                                                        bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bSetMoveUpMultiTecher, bMultyTchr);
                                                        if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                        {

                                                            if (bTotDurationMoveUp)
                                                            {
                                                                if (oDS.CrntSetNbr < setcount)
                                                                    nextSet = oDS.CrntSetNbr + 1;
                                                                if (oDS.CrntSetNbr == setcount)
                                                                {
                                                                    nextSet = setcount;
                                                                    CompletionStatusSet = "COMPLETED";
                                                                }
                                                                if (CompletionStatusSet == "COMPLETED")
                                                                {
                                                                    bSetCompleted = true;
                                                                    MaintenanceOrCompletion = true;
                                                                }
                                                                else
                                                                {
                                                                    bSetCompleted = false;
                                                                    MaintenanceOrCompletion = false;
                                                                }
                                                                if (bSetMoveUp && bTotDurationMoveUp)
                                                                {
                                                                    bSetMoveUp = true;
                                                                    GlobalSetMoveUp = true;
                                                                    if (bSetMoveUp == true && GlobalSetMoveUp == true)
                                                                        bPrompt = true;
                                                                }
                                                            }
                                                        }


                                                    }
                                                    if (TempRules.pctTotalDurationMoveDown.iScoreRequired > 0)
                                                    {
                                                        bTotDurationMoveDown = ValidateUp(oSession.StudentId, totDuraionId, TempRules.pctTotalDurationMoveDown.iScoreRequired, reqSess,
                                                            TempRules.pctTotalDurationMoveDown.iTotalCorrectInstance, TempRules.pctTotalDurationMoveDown.bConsequetiveIndex, status);
                                                        int setcount = TrialLists.totalSet;

                                                        bRuleStatusIOA = oDisc.checkConditionIOA(bSetMoveDownIOA, bIOA);
                                                        bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bSetMoveDownMultiTecher, bMultyTchr);
                                                        if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                        {

                                                            if (bTotDurationMoveDown)
                                                            {
                                                                if (oDS.CrntSetNbr <= setcount)
                                                                    nextSet = oDS.CrntSetNbr - 1;
                                                                if (oDS.CrntSetNbr == 1)
                                                                    nextSet = 1;
                                                                if (bSetMoveBack && bTotDurationMoveDown)
                                                                {
                                                                    bSetMoveBack = true;
                                                                    GlobalSetMoveBack = true;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }

                                            }
                                            FreqDurTextFlag = true;
                                        }


                                    }
                                    #endregion
                                    //Code added for List 5 Task #9 16-feb-2021 change Moveup/down Criteria for Frequncy and Duration END--
                                }
                                #endregion
                                #region Frequency
                                else if (dr["ColTypeCd"].ToString() == "Frequency")
                                {
                                    int colId = Convert.ToInt32(dr["DSTempSetColId"]);
                                    string selqry1 = "select Moveupstat from dstempsetcol DsCol inner join DSTempHdr Hdr on Hdr.DSTempHdrId=DsCol.DSTempHdrId where dsCol.DSTempHdrId=" + oTemp.TemplateId + " And DSTempSetColId= " + colId;
                                    object stat = oData.FetchValue(selqry1);
                                    if (stat != null)
                                        MoveUpstat = Convert.ToInt16(stat);
                                    #region MoveUp on Less than-default
                                    if (MoveUpstat == 1)
                                    {
                                        TempRules = GetPromptRules(oTemp.TemplateId, iColId);
                                        if (TempRules.pctFrequencyMoveUp.iScoreRequired == 0 || TempRules.pctFrequencyMoveDown.iScoreRequired == 0)
                                        {
                                            freqdureloop++;
                                            bool status = true;
                                            CompletionStatusSet = "";
                                            TempRules = GetSetRules(oTemp.TemplateId, iColId);
                                            freqId = Convert.ToInt32(ViewState["freqId"]);
                                            if (TempRules.pctFrequencyMoveUp.iScoreRequired > 0)
                                            {
                                                bFrequencyMoveUp = ValidateUp(oSession.StudentId, freqId, TempRules.pctFrequencyMoveUp.iScoreRequired, reqSess,
                                                    TempRules.pctFrequencyMoveUp.iTotalCorrectInstance, TempRules.pctFrequencyMoveUp.bConsequetiveIndex, status);
                                                int setcount = TrialLists.totalSet;

                                                bRuleStatusIOA = oDisc.checkConditionIOA(bFrequencyMoveUpbIOAReqd, bIOA);
                                                bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bFrequencyMoveUpbMultiTchr, bMultyTchr);
                                                if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                {

                                                    if (bFrequencyMoveUp)
                                                    {

                                                        if (oDS.CrntSetNbr < setcount)
                                                            nextSet = oDS.CrntSetNbr + 1;
                                                        if (oDS.CrntSetNbr == setcount)
                                                        {
                                                            nextSet = setcount;
                                                            CompletionStatusSet = "COMPLETED";
                                                        }
                                                        if (CompletionStatusSet == "COMPLETED")
                                                        {
                                                            bSetCompleted = true;
                                                            MaintenanceOrCompletion = true;
                                                        }
                                                        else
                                                        {
                                                            bSetCompleted = false;
                                                            MaintenanceOrCompletion = false;
                                                        }
                                                        if (bSetMoveUp && bFrequencyMoveUp)
                                                        {
                                                            bSetMoveUp = true;
                                                            GlobalSetMoveUp = true;
                                                        }
                                                    }
                                                }
                                            }
                                            if (TempRules.pctFrequencyMoveDown.iScoreRequired > 0)
                                            {
                                                bFrequencyMoveDown = ValidateDown(oSession.StudentId, freqId, TempRules.pctFrequencyMoveDown.iScoreRequired, reqSess,
                                                    TempRules.pctFrequencyMoveDown.iTotalCorrectInstance, TempRules.pctFrequencyMoveDown.bConsequetiveIndex, status);
                                                int setcount = TrialLists.totalSet;

                                                bRuleStatusIOA = oDisc.checkConditionIOA(bFrequencyMoveDownbIOAReqd, bIOA);
                                                bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bFrequencyMoveDownbMultiTchr, bMultyTchr);
                                                if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                {

                                                    if (bFrequencyMoveDown)
                                                    {
                                                        if (oDS.CrntSetNbr <= setcount)
                                                            nextSet = oDS.CrntSetNbr - 1;
                                                        if (oDS.CrntSetNbr == 1)
                                                            nextSet = 1;
                                                        if (bSetMoveBack && bFrequencyMoveDown)
                                                        {
                                                            bSetMoveBack = true;
                                                            GlobalSetMoveBack = true;
                                                        }
                                                    }
                                                }
                                            }
                                            FreqDurTextFlag = true;


                                        }

                                        else
                                        {
                                            freqdureloop++;
                                            bool status = true;
                                            CompletionStatusSet = "";
                                            freqId = Convert.ToInt32(ViewState["freqId"]);
                                            //for prompt move
                                            TempRules = GetPromptRules(oTemp.TemplateId, iColId);
                                            if (promptUp >= 1)
                                                bPromptFrequencyMoveUp = false;
                                            if (TempRules.pctFrequencyMoveUp.iScoreRequired > 0)
                                            {
                                                bPromptFrequencyMoveUp = ValidateUp(oSession.StudentId, freqId, TempRules.pctFrequencyMoveUp.iScoreRequired, reqSess,
                                                    TempRules.pctFrequencyMoveUp.iTotalCorrectInstance, TempRules.pctFrequencyMoveUp.bConsequetiveIndex, status);

                                                bRuleStatusIOA = oDisc.checkConditionIOA(bPromptFrequencyMoveUpbIOAReqd, bIOA);
                                                bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bPromptFrequencyMoveUpbMultiTchr, bMultyTchr);
                                                if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                {
                                                    if (bPromptFrequencyMoveUp)
                                                    {
                                                        if (sCurrentPrompt != LessonpromptUsed[LessonpromptUsed.Length - 1])
                                                        {
                                                            int iPromptIndex = DiscreetTrial.Model.PromptIndex(LessonpromptUsed, sCurrentPrompt);
                                                            if (iPromptIndex < LessonpromptUsed.Length)
                                                            {
                                                                sNextLessonPrompt = LessonpromptUsed[iPromptIndex + 1];
                                                                bPromptMoveUp = true;
                                                                bFrequencyMoveUp = false;
                                                                bFrequencyMoveDown = false;
                                                                GlobalPromptMoveUp = true;
                                                            }
                                                            else
                                                                bPromptFrequencyMoveUp = false;
                                                        }
                                                        else
                                                            bPromptFrequencyMoveUp = false;
                                                    }
                                                }
                                            }
                                            else
                                                bPromptFrequencyMoveUp = false;
                                            if (!bPromptFrequencyMoveUp)
                                            {
                                                if (promptDown >= 1)
                                                    bPromptFrequencyMoveDown = false;
                                                if (TempRules.pctFrequencyMoveDown.iScoreRequired > 0)
                                                {
                                                    bPromptFrequencyMoveDown = ValidateDown(oSession.StudentId, freqId, TempRules.pctFrequencyMoveDown.iScoreRequired, reqSess,
                                                        TempRules.pctFrequencyMoveDown.iTotalCorrectInstance, TempRules.pctFrequencyMoveDown.bConsequetiveIndex, status);

                                                    bRuleStatusIOA = oDisc.checkConditionIOA(bPromptFrequencyMoveDownbIOAReqd, bIOA);
                                                    bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bPromptFrequencyMoveDownbMultiTchr, bMultyTchr);
                                                    if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                    {
                                                        if (bPromptFrequencyMoveDown)
                                                        {
                                                            if (sCurrentPrompt != LessonpromptUsed[0])
                                                            {
                                                                int iPromptIndex = DiscreetTrial.Model.PromptIndex(LessonpromptUsed, sCurrentPrompt);
                                                                if (iPromptIndex > 0)
                                                                {
                                                                    sNextLessonPrompt = LessonpromptUsed[iPromptIndex - 1];
                                                                    bPromptMoveBack = true;
                                                                    bFrequencyMoveDown = false;
                                                                    bFrequencyMoveUp = false;
                                                                    GlobalPromptMoveBack = true;
                                                                }
                                                                else
                                                                    bPromptFrequencyMoveDown = false;
                                                            }
                                                            else
                                                                bPromptFrequencyMoveDown = false;
                                                        }

                                                    }
                                                }
                                            }
                                            else
                                                bPromptFrequencyMoveDown = false;
                                            //end prompt section

                                            if (!bPromptFrequencyMoveUp && !bPromptFrequencyMoveDown)
                                            {
                                                TempRules = GetSetRules(oTemp.TemplateId, iColId);

                                                if (TempRules.pctFrequencyMoveUp.iScoreRequired > 0)
                                                {
                                                    bFrequencyMoveUp = ValidateUp(oSession.StudentId, freqId, TempRules.pctFrequencyMoveUp.iScoreRequired, reqSess,
                                                        TempRules.pctFrequencyMoveUp.iTotalCorrectInstance, TempRules.pctFrequencyMoveUp.bConsequetiveIndex, status);
                                                    int setcount = TrialLists.totalSet;

                                                    bRuleStatusIOA = oDisc.checkConditionIOA(bFrequencyMoveUpbIOAReqd, bIOA);
                                                    bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bFrequencyMoveUpbMultiTchr, bMultyTchr);
                                                    if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                    {

                                                        if (bFrequencyMoveUp)
                                                        {

                                                            if (oDS.CrntSetNbr < setcount)
                                                                nextSet = oDS.CrntSetNbr + 1;
                                                            if (oDS.CrntSetNbr == setcount)
                                                            {
                                                                nextSet = setcount;
                                                                CompletionStatusSet = "COMPLETED";
                                                            }
                                                            if (CompletionStatusSet == "COMPLETED")
                                                            {
                                                                bSetCompleted = true;
                                                                MaintenanceOrCompletion = true;
                                                            }
                                                            else
                                                            {
                                                                bSetCompleted = false;
                                                                MaintenanceOrCompletion = false;
                                                            }
                                                            if (bSetMoveUp && bFrequencyMoveUp)
                                                            {
                                                                bSetMoveUp = true;
                                                                GlobalSetMoveUp = true;
                                                                if (bSetMoveUp == true && GlobalSetMoveUp == true)
                                                                    bPrompt = true;
                                                            }
                                                        }
                                                    }
                                                }
                                                if (TempRules.pctFrequencyMoveDown.iScoreRequired > 0)
                                                {
                                                    bFrequencyMoveDown = ValidateDown(oSession.StudentId, freqId, TempRules.pctFrequencyMoveDown.iScoreRequired, reqSess,
                                                        TempRules.pctFrequencyMoveDown.iTotalCorrectInstance, TempRules.pctFrequencyMoveDown.bConsequetiveIndex, status);
                                                    int setcount = TrialLists.totalSet;

                                                    bRuleStatusIOA = oDisc.checkConditionIOA(bFrequencyMoveDownbIOAReqd, bIOA);
                                                    bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bFrequencyMoveDownbMultiTchr, bMultyTchr);
                                                    if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                    {

                                                        if (bFrequencyMoveDown)
                                                        {
                                                            if (oDS.CrntSetNbr <= setcount)
                                                                nextSet = oDS.CrntSetNbr - 1;
                                                            if (oDS.CrntSetNbr == 1)
                                                                nextSet = 1;
                                                            if (bSetMoveBack && bFrequencyMoveDown)
                                                            {
                                                                bSetMoveBack = true;
                                                                GlobalSetMoveBack = true;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            FreqDurTextFlag = true;

                                        }
                                    }
                                    #endregion
                                    //Code added for List 5 Task #9 16-feb-2021 change Moveup/down Criteria for Frequncy and Duration START--
                                    #region MoveUp on More Than
                                    else if (MoveUpstat == 0)
                                    {
                                        TempRules = GetPromptRules(oTemp.TemplateId, iColId);
                                        if (TempRules.pctFrequencyMoveUp.iScoreRequired == 0 || TempRules.pctFrequencyMoveDown.iScoreRequired == 0)
                                        {
                                            freqdureloop++;
                                            bool status = true;
                                            CompletionStatusSet = "";
                                            TempRules = GetSetRules(oTemp.TemplateId, iColId);
                                            freqId = Convert.ToInt32(ViewState["freqId"]);
                                            if (TempRules.pctFrequencyMoveUp.iScoreRequired > 0)
                                            {
                                                bFrequencyMoveUp = ValidateDown(oSession.StudentId, freqId, TempRules.pctFrequencyMoveUp.iScoreRequired, reqSess,
                                                    TempRules.pctFrequencyMoveUp.iTotalCorrectInstance, TempRules.pctFrequencyMoveUp.bConsequetiveIndex, status);
                                                int setcount = TrialLists.totalSet;

                                                bRuleStatusIOA = oDisc.checkConditionIOA(bFrequencyMoveUpbIOAReqd, bIOA);
                                                bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bFrequencyMoveUpbMultiTchr, bMultyTchr);
                                                if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                {

                                                    if (bFrequencyMoveUp)
                                                    {

                                                        if (oDS.CrntSetNbr < setcount)
                                                            nextSet = oDS.CrntSetNbr + 1;
                                                        if (oDS.CrntSetNbr == setcount)
                                                        {
                                                            nextSet = setcount;
                                                            CompletionStatusSet = "COMPLETED";
                                                        }
                                                        if (CompletionStatusSet == "COMPLETED")
                                                        {
                                                            bSetCompleted = true;
                                                            MaintenanceOrCompletion = true;
                                                        }
                                                        else
                                                        {
                                                            bSetCompleted = false;
                                                            MaintenanceOrCompletion = false;
                                                        }
                                                        if (bSetMoveUp && bFrequencyMoveUp)
                                                        {
                                                            bSetMoveUp = true;
                                                            GlobalSetMoveUp = true;
                                                            if (bSetMoveUp == true && GlobalSetMoveUp == true)
                                                                bPrompt = true;
                                                        }
                                                    }
                                                }
                                            }
                                            if (TempRules.pctFrequencyMoveDown.iScoreRequired > 0)
                                            {
                                                bFrequencyMoveDown = ValidateUp(oSession.StudentId, freqId, TempRules.pctFrequencyMoveDown.iScoreRequired, reqSess,
                                                    TempRules.pctFrequencyMoveDown.iTotalCorrectInstance, TempRules.pctFrequencyMoveDown.bConsequetiveIndex, status);
                                                int setcount = TrialLists.totalSet;

                                                bRuleStatusIOA = oDisc.checkConditionIOA(bFrequencyMoveDownbIOAReqd, bIOA);
                                                bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bFrequencyMoveDownbMultiTchr, bMultyTchr);
                                                if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                {

                                                    if (bFrequencyMoveDown)
                                                    {
                                                        if (oDS.CrntSetNbr <= setcount)
                                                            nextSet = oDS.CrntSetNbr - 1;
                                                        if (oDS.CrntSetNbr == 1)
                                                            nextSet = 1;
                                                        if (bSetMoveBack && bFrequencyMoveDown)
                                                        {
                                                            bSetMoveBack = true;
                                                            GlobalSetMoveBack = true;
                                                        }
                                                    }
                                                }
                                            }
                                            FreqDurTextFlag = true;


                                        }

                                        else
                                        {
                                            freqdureloop++;
                                            bool status = true;
                                            CompletionStatusSet = "";
                                            freqId = Convert.ToInt32(ViewState["freqId"]);
                                            //for prompt move
                                            TempRules = GetPromptRules(oTemp.TemplateId, iColId);
                                            if (promptUp >= 1)
                                                bPromptFrequencyMoveUp = false;
                                            if (TempRules.pctFrequencyMoveUp.iScoreRequired > 0)
                                            {
                                                bPromptFrequencyMoveUp = ValidateDown(oSession.StudentId, freqId, TempRules.pctFrequencyMoveUp.iScoreRequired, reqSess,
                                                    TempRules.pctFrequencyMoveUp.iTotalCorrectInstance, TempRules.pctFrequencyMoveUp.bConsequetiveIndex, status);

                                                bRuleStatusIOA = oDisc.checkConditionIOA(bPromptFrequencyMoveUpbIOAReqd, bIOA);
                                                bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bPromptFrequencyMoveUpbMultiTchr, bMultyTchr);
                                                if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                {
                                                    if (bPromptFrequencyMoveUp)
                                                    {
                                                        if (sCurrentPrompt != LessonpromptUsed[LessonpromptUsed.Length - 1])
                                                        {
                                                            int iPromptIndex = DiscreetTrial.Model.PromptIndex(LessonpromptUsed, sCurrentPrompt);
                                                            if (iPromptIndex < LessonpromptUsed.Length)
                                                            {
                                                                sNextLessonPrompt = LessonpromptUsed[iPromptIndex + 1];
                                                                bPromptMoveUp = true;
                                                                bFrequencyMoveUp = false;
                                                                bFrequencyMoveDown = false;
                                                                GlobalPromptMoveUp = true;
                                                            }
                                                            else
                                                                bPromptFrequencyMoveUp = false;
                                                        }
                                                        else
                                                            bPromptFrequencyMoveUp = false;
                                                    }
                                                }
                                            }
                                            else
                                                bPromptFrequencyMoveUp = false;
                                            if (!bPromptFrequencyMoveUp)
                                            {
                                                if (promptDown >= 1)
                                                    bPromptFrequencyMoveDown = false;
                                                if (TempRules.pctFrequencyMoveDown.iScoreRequired > 0)
                                                {
                                                    bPromptFrequencyMoveDown = ValidateUp(oSession.StudentId, freqId, TempRules.pctFrequencyMoveDown.iScoreRequired, reqSess,
                                                        TempRules.pctFrequencyMoveDown.iTotalCorrectInstance, TempRules.pctFrequencyMoveDown.bConsequetiveIndex, status);

                                                    bRuleStatusIOA = oDisc.checkConditionIOA(bPromptFrequencyMoveDownbIOAReqd, bIOA);
                                                    bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bPromptFrequencyMoveDownbMultiTchr, bMultyTchr);
                                                    if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                    {
                                                        if (bPromptFrequencyMoveDown)
                                                        {
                                                            if (sCurrentPrompt != LessonpromptUsed[0])
                                                            {
                                                                int iPromptIndex = DiscreetTrial.Model.PromptIndex(LessonpromptUsed, sCurrentPrompt);
                                                                if (iPromptIndex > 0)
                                                                {
                                                                    sNextLessonPrompt = LessonpromptUsed[iPromptIndex - 1];
                                                                    bPromptMoveBack = true;
                                                                    bFrequencyMoveDown = false;
                                                                    bFrequencyMoveUp = false;
                                                                    GlobalPromptMoveBack = true;
                                                                }
                                                                else
                                                                    bPromptFrequencyMoveDown = false;
                                                            }
                                                            else
                                                                bPromptFrequencyMoveDown = false;
                                                        }

                                                    }
                                                }
                                            }
                                            else
                                                bPromptFrequencyMoveDown = false;
                                            //end prompt section

                                            if (!bPromptFrequencyMoveUp && !bPromptFrequencyMoveDown)
                                            {
                                                TempRules = GetSetRules(oTemp.TemplateId, iColId);

                                                if (TempRules.pctFrequencyMoveUp.iScoreRequired > 0)
                                                {
                                                    bFrequencyMoveUp = ValidateDown(oSession.StudentId, freqId, TempRules.pctFrequencyMoveUp.iScoreRequired, reqSess,
                                                        TempRules.pctFrequencyMoveUp.iTotalCorrectInstance, TempRules.pctFrequencyMoveUp.bConsequetiveIndex, status);
                                                    int setcount = TrialLists.totalSet;

                                                    bRuleStatusIOA = oDisc.checkConditionIOA(bFrequencyMoveUpbIOAReqd, bIOA);
                                                    bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bFrequencyMoveUpbMultiTchr, bMultyTchr);
                                                    if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                    {

                                                        if (bFrequencyMoveUp)
                                                        {

                                                            if (oDS.CrntSetNbr < setcount)
                                                                nextSet = oDS.CrntSetNbr + 1;
                                                            if (oDS.CrntSetNbr == setcount)
                                                            {
                                                                nextSet = setcount;
                                                                CompletionStatusSet = "COMPLETED";
                                                            }
                                                            if (CompletionStatusSet == "COMPLETED")
                                                            {
                                                                bSetCompleted = true;
                                                                MaintenanceOrCompletion = true;
                                                            }
                                                            else
                                                            {
                                                                bSetCompleted = false;
                                                                MaintenanceOrCompletion = false;
                                                            }
                                                            if (bSetMoveUp && bFrequencyMoveUp)
                                                            {
                                                                bSetMoveUp = true;
                                                                GlobalSetMoveUp = true;
                                                                if (bSetMoveUp == true && GlobalSetMoveUp == true)
                                                                    bPrompt = true;
                                                            }
                                                        }
                                                    }
                                                }
                                                if (TempRules.pctFrequencyMoveDown.iScoreRequired > 0)
                                                {
                                                    bFrequencyMoveDown = ValidateUp(oSession.StudentId, freqId, TempRules.pctFrequencyMoveDown.iScoreRequired, reqSess,
                                                        TempRules.pctFrequencyMoveDown.iTotalCorrectInstance, TempRules.pctFrequencyMoveDown.bConsequetiveIndex, status);
                                                    int setcount = TrialLists.totalSet;

                                                    bRuleStatusIOA = oDisc.checkConditionIOA(bFrequencyMoveDownbIOAReqd, bIOA);
                                                    bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bFrequencyMoveDownbMultiTchr, bMultyTchr);
                                                    if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                    {

                                                        if (bFrequencyMoveDown)
                                                        {
                                                            if (oDS.CrntSetNbr <= setcount)
                                                                nextSet = oDS.CrntSetNbr - 1;
                                                            if (oDS.CrntSetNbr == 1)
                                                                nextSet = 1;
                                                            if (bSetMoveBack && bFrequencyMoveDown)
                                                            {
                                                                bSetMoveBack = true;
                                                                GlobalSetMoveBack = true;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            FreqDurTextFlag = true;

                                        }
                                    }
                                    #endregion
                                    //Code added for List 5 Task #9 16-feb-2021 change Moveup/down Criteria for Frequncy and Duration END--
                                }
                                #endregion
                                //new
                                //if (chainedCols[sColName].SessionCount >= chainedCols[sColName].RequiredSession())
                                //{
                                //else
                                //{
                                chainedCols[sColName].TotalTaskMode = true;
                                chainedCols[sColName].SetInputData(iCurrentStep.ToString(), sCurrentPrompt, TargetPrompt, iCurrentSetNbr.ToString(), TrialLists.totalSet.ToString(), TrialLists.arTrials);
                                sesResultchain[index] = Chained.Model.ExecuteForTotalTask(chainedCols[sColName], stepLevelPrompt, bpromptColumn);
                                bRuleStatusIOA = oDisc.checkConditionIOA(chainedInptData.IOARequired, bIOA);
                                bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(chainedInptData.MultiTeacherRequired, bMultyTchr);
                                if (sesResultchain[index].StepPrompts != null)
                                {
                                    //ash: do not perform the below code if the col is used is criteria and score is NA
                                    if (checkIfScoreIsNA(chainedCols[sColName].IsInfluencedBy(MoveType.PromptMoveDown), iColId) != true && checkIfScoreIsNA(chainedCols[sColName].IsInfluencedBy(MoveType.StepMoveDown), iColId) != true && checkIfScoreIsNA(chainedCols[sColName].IsInfluencedBy(MoveType.SetMoveDown), iColId) != true)
                                    {
                                        DataTable dtstepIDs = oData.ReturnDataTable("SELECT DSTempStepId FROM StdtSessionStep WHERE StdtSessionHdrId=" + StdtSessHdrId, false);
                                        int indexB = 0;
                                        foreach (DataRow drstepID in dtstepIDs.Rows)
                                        {
                                            string updStepStat = "UPDATE StdtDSStepStat SET PromptId=" + sesResultchain[index].StepPrompts[indexB] + ",ModifiedBy=" + oSession.LoginId + " ,ModifiedOn=GETDATE() WHERE " +
                                                "DSTempSetColId=" + dr["DSTempSetColId"].ToString() + " AND DSTempStepId=" + drstepID["DSTempStepId"].ToString() + "";
                                            oData.Execute(updStepStat);
                                            indexB++;
                                        }
                                    }
                                }

                            //}
                                #region %independent of all steps
                                else if (dr["ColTypeCd"].ToString() == "Prompt" && colt.ToString() == "true")
                                {
                                    TempRules = GetPromptRules(oTemp.TemplateId, iColId);
                                    freqdureloop++;
                                    bool status = true;
                                    bool check = true;
                                    bool check1 = true;
                                    CompletionStatusSet = "";
                                    //for prompt move
                                    IndeallId = Convert.ToInt32(ViewState["IndeallId"]);
                                    TempRules = GetPromptRules(oTemp.TemplateId, iColId);
                                    if (promptUp >= 1)
                                        bPromptIndallMoveUp = false;
                                    if (TempRules.pctIndAllMoveUp.iTotalCorrectInstance > 0)
                                    {
                                        bPromptIndallMoveUp = ValidateUp1(oSession.StudentId, IndeallId, TempRules.pctIndAllMoveUp.iScoreRequired, reqSess,
                                            TempRules.pctIndAllMoveUp.iTotalCorrectInstance, TempRules.pctIndAllMoveUp.bConsequetiveIndex, status);

                                        bRuleStatusIOA = oDisc.checkConditionIOA(bPromptIndallMoveUpbIOAReqd, bIOA);
                                        bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bPromptIndallMoveUpbMultiTchr, bMultyTchr);
                                        if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                        {
                                            if (bPromptIndallMoveUp)
                                            {
                                                if (sCurrentPrompt != LessonpromptUsed[LessonpromptUsed.Length - 1])
                                                {
                                                    int iPromptIndex = Chained.Model.PromptIndex(LessonpromptUsed, sCurrentPrompt);
                                                    if (iPromptIndex < LessonpromptUsed.Length)
                                                    {
                                                        sNextLessonPrompt = LessonpromptUsed[iPromptIndex + 1];
                                                        bPromptMoveUp = true;
                                                        bIndallMoveUp = false;
                                                        bIndallMoveDown = false;
                                                        GlobalPromptMoveUp = true;
                                                    }
                                                    else
                                                        bPromptIndallMoveUp = false;
                                                }
                                                else
                                                    bPromptIndallMoveUp = false;
                                            }
                                        }
                                    }
                                    else

                                        bPromptIndallMoveUp = false;

                                    int iPromptIndex1 = Chained.Model.PromptIndex(LessonpromptUsed, sCurrentPrompt);
                                    if (iPromptIndex1 > 0 || LessonpromptUsed.Length == 1)
                                    {

                                        check = false;
                                    }

                                    if (!bPromptIndallMoveUp)
                                    {
                                        if (promptDown >= 1)
                                            bPromptIndallMoveDown = false;
                                        if (TempRules.pctIndAllMoveDown.iTotalCorrectInstance > 0)
                                        {
                                            bPromptIndallMoveDown = ValidateDown1(oSession.StudentId, IndeallId, TempRules.pctIndAllMoveDown.iScoreRequired, reqSess,
                                                TempRules.pctIndAllMoveDown.iTotalCorrectInstance, TempRules.pctIndAllMoveDown.bConsequetiveIndex, status);

                                            bRuleStatusIOA = oDisc.checkConditionIOA(bPromptIndallMoveDownbIOAReqd, bIOA);
                                            bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bPromptIndallMoveDownbMultiTchr, bMultyTchr);
                                            if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                            {
                                                if (bPromptIndallMoveDown)
                                                {
                                                    if (sCurrentPrompt != LessonpromptUsed[0])
                                                    {
                                                        int iPromptIndex = Chained.Model.PromptIndex(LessonpromptUsed, sCurrentPrompt);
                                                        if (iPromptIndex > 0)
                                                        {
                                                            sNextLessonPrompt = LessonpromptUsed[iPromptIndex - 1];
                                                            bPromptMoveBack = true;
                                                            bIndallMoveDown = false;
                                                            bIndallMoveUp = false;
                                                            GlobalPromptMoveBack = true;
                                                        }
                                                        else
                                                            bPromptIndallMoveDown = false;
                                                    }
                                                    else
                                                        bPromptIndallMoveDown = false;
                                                }

                                            }


                                        }
                                        else
                                        {
                                            bPromptIndallMoveDown = false;
                                            check1 = false;
                                        }
                                    }
                                    else
                                        bPromptIndallMoveDown = false;
                                    //end prompt section
                                    // set move up

                                    if (!bPromptIndallMoveUp && !bPromptIndallMoveDown)
                                    {
                                        TempRules = GetSetRules(oTemp.TemplateId, iColId);

                                        if (TempRules.pctIndAllMoveUp.iTotalCorrectInstance > 0 && !check)
                                        {
                                            bIndallMoveUp = ValidateUp1(oSession.StudentId, IndeallId, TempRules.pctIndAllMoveUp.iScoreRequired, reqSess,
                                                TempRules.pctIndAllMoveUp.iTotalCorrectInstance, TempRules.pctIndAllMoveUp.bConsequetiveIndex, status);
                                            int setcount = TrialLists.totalSet;

                                            bRuleStatusIOA = oDisc.checkConditionIOA(bIndallMoveUpbIOAReqd, bIOA);
                                            bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bIndallMoveUpbMultiTchr, bMultyTchr);
                                            if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                            {

                                                if (bIndallMoveUp)
                                                {

                                                    if (oDS.CrntSetNbr < setcount)
                                                        nextSet = oDS.CrntSetNbr + 1;
                                                    if (oDS.CrntSetNbr == setcount)
                                                    {
                                                        nextSet = setcount;
                                                        CompletionStatusSet = "COMPLETED";
                                                    }
                                                    if (bSetMoveUp && bIndallMoveUp)
                                                    {
                                                        bSetMoveUp = true;
                                                        GlobalSetMoveUp = true;
                                                    }
                                                    else
                                                    {
                                                        bSetMoveUp = false;
                                                        GlobalSetMoveUp = false;
                                                    }
                                                }
                                                else
                                                {
                                                    bSetMoveUp = false;
                                                    //GlobalSetMoveUp = false;
                                                }
                                            }
                                        }
                                        if ((TempRules.pctIndAllMoveDown.iTotalCorrectInstance > 0 && check) || (TempRules.pctIndAllMoveDown.iTotalCorrectInstance > 0 && !check1))
                                        {
                                            bIndallMoveDown = ValidateDown1(oSession.StudentId, IndeallId, TempRules.pctIndAllMoveDown.iScoreRequired, reqSess,
                                                TempRules.pctIndAllMoveDown.iTotalCorrectInstance, TempRules.pctIndAllMoveDown.bConsequetiveIndex, status);
                                            int setcount = TrialLists.totalSet;

                                            bRuleStatusIOA = oDisc.checkConditionIOA(bIndallMoveDownbIOAReqd, bIOA);
                                            bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bIndallMoveDownbMultiTchr, bMultyTchr);
                                            if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                            {

                                                if (bIndallMoveDown)
                                                {
                                                    if (oDS.CrntSetNbr <= setcount)
                                                        nextSet = oDS.CrntSetNbr - 1;
                                                    if (oDS.CrntSetNbr == 1)
                                                    {
                                                        nextSet = 1;
                                                        bSetMoveBack = false;
                                                        GlobalSetMoveBack = false;
                                                    }
                                                    if (bSetMoveBack && bIndallMoveDown)
                                                    {
                                                        bSetMoveBack = true;
                                                        GlobalSetMoveBack = true;
                                                    }
                                                    else
                                                    {
                                                        bSetMoveBack = false;
                                                        GlobalSetMoveBack = false;
                                                    }
                                                }
                                                else
                                                {
                                                    bSetMoveBack = false;
                                                    GlobalSetMoveBack = false;
                                                }
                                            }
                                        }
                                        else
                                        {
                                            bSetMoveBack = false;
                                            GlobalSetMoveBack = false;
                                        }
                                    }

                                    FreqDurTextFlag = true;
                                }

                                #endregion
                                #region +/- %insependent of all steps
                                else if (dr["ColTypeCd"].ToString() == "+/-" && colt.ToString() == "true")
                                {
                                    TempRules = GetPromptRules(oTemp.TemplateId, iColId);
                                    freqdureloop++;
                                    bool status = true;
                                    bool check = true;
                                    bool check1 = true;
                                    CompletionStatusSet = "";
                                    //for prompt move
                                    IndeallId = Convert.ToInt32(ViewState["IndeallId"]);
                                    TempRules = GetPromptRules(oTemp.TemplateId, iColId);
                                    if (promptUp >= 1)
                                        bPromptIndallMoveUp = false;
                                    if (TempRules.pctIndAllMoveUp.iTotalCorrectInstance > 0)
                                    {
                                        bPromptIndallMoveUp = ValidateUp1(oSession.StudentId, IndeallId, TempRules.pctIndAllMoveUp.iScoreRequired, reqSess,
                                            TempRules.pctIndAllMoveUp.iTotalCorrectInstance, TempRules.pctIndAllMoveUp.bConsequetiveIndex, status);

                                        bRuleStatusIOA = oDisc.checkConditionIOA(bPromptIndallMoveUpbIOAReqd, bIOA);
                                        bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bPromptIndallMoveUpbMultiTchr, bMultyTchr);
                                        if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                        {
                                            if (bPromptIndallMoveUp)
                                            {
                                                if (sCurrentLessonPrompt != LessonpromptUsed[LessonpromptUsed.Length - 1])
                                                {
                                                    int iPromptIndex = Chained.Model.PromptIndex(LessonpromptUsed, sCurrentLessonPrompt);
                                                    if (iPromptIndex < LessonpromptUsed.Length)
                                                    {
                                                        sNextLessonPrompt = LessonpromptUsed[iPromptIndex + 1];
                                                        bPromptMoveUp = true;
                                                        bIndallMoveUp = false;
                                                        bIndallMoveDown = false;
                                                        GlobalPromptMoveUp = true;
                                                    }
                                                    else
                                                        bPromptIndallMoveUp = false;
                                                }
                                                else
                                                    bPromptIndallMoveUp = false;
                                            }
                                        }
                                    }
                                    else
                                        bPromptIndallMoveUp = false;
                                    int iPromptIndex1 = Chained.Model.PromptIndex(LessonpromptUsed, sCurrentLessonPrompt);
                                    if (iPromptIndex1 > 0 || LessonpromptUsed.Length == 1)
                                    {

                                        check = false;
                                    }
                                    if (!bPromptIndallMoveUp)
                                    {
                                        if (promptDown >= 1)
                                            bPromptIndallMoveDown = false;
                                        if (TempRules.pctIndAllMoveDown.iTotalCorrectInstance > 0)
                                        {
                                            bPromptIndallMoveDown = ValidateDown1(oSession.StudentId, IndeallId, TempRules.pctIndAllMoveDown.iScoreRequired, reqSess,
                                                TempRules.pctIndAllMoveDown.iTotalCorrectInstance, TempRules.pctIndAllMoveDown.bConsequetiveIndex, status);

                                            bRuleStatusIOA = oDisc.checkConditionIOA(bPromptIndallMoveDownbIOAReqd, bIOA);
                                            bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bPromptIndallMoveDownbMultiTchr, bMultyTchr);
                                            if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                            {
                                                if (bPromptIndallMoveDown)
                                                {
                                                    if (sCurrentLessonPrompt != LessonpromptUsed[0])
                                                    {
                                                        int iPromptIndex = Chained.Model.PromptIndex(LessonpromptUsed, sCurrentLessonPrompt);
                                                        if (iPromptIndex > 0)
                                                        {
                                                            sNextLessonPrompt = LessonpromptUsed[iPromptIndex - 1];
                                                            bPromptMoveBack = true;
                                                            bIndallMoveDown = false;
                                                            bIndallMoveUp = false;
                                                            GlobalPromptMoveBack = true;
                                                        }
                                                        else
                                                            bPromptIndallMoveDown = false;
                                                    }
                                                    else
                                                        bPromptIndallMoveDown = false;
                                                }

                                            }

                                        }
                                        else
                                        {
                                            bPromptIndallMoveDown = false;
                                            check1 = false;
                                        }
                                    }
                                    else
                                        bPromptIndallMoveDown = false;
                                    //end prompt section

                                    // set move up
                                    if (!bPromptIndallMoveUp && !bPromptIndallMoveDown)
                                    {
                                        TempRules = GetSetRules(oTemp.TemplateId, iColId);

                                        if (TempRules.pctIndAllMoveUp.iTotalCorrectInstance > 0 && !check)
                                        {
                                            bIndallMoveUp = ValidateUp1(oSession.StudentId, IndeallId, TempRules.pctIndAllMoveUp.iScoreRequired, reqSess,
                                                TempRules.pctIndAllMoveUp.iTotalCorrectInstance, TempRules.pctIndAllMoveUp.bConsequetiveIndex, status);
                                            int setcount = TrialLists.totalSet;

                                            bRuleStatusIOA = oDisc.checkConditionIOA(bIndallMoveUpbIOAReqd, bIOA);
                                            bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bIndallMoveUpbMultiTchr, bMultyTchr);
                                            if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                            {

                                                if (bIndallMoveUp)
                                                {
                                                    if (oDS.CrntSetNbr < setcount)
                                                        nextSet = oDS.CrntSetNbr + 1;
                                                    if (oDS.CrntSetNbr == setcount)
                                                    {
                                                        nextSet = setcount;
                                                        CompletionStatusSet = "COMPLETED";
                                                    }
                                                    if (bSetMoveUp && bIndallMoveUp)
                                                    {
                                                        bSetMoveUp = true;
                                                        GlobalSetMoveUp = true;
                                                    }
                                                    else
                                                    {
                                                        bSetMoveUp = false;
                                                        //GlobalSetMoveUp = false;
                                                    }
                                                }
                                                else
                                                {
                                                    bSetMoveUp = false;
                                                    //GlobalSetMoveUp = false;
                                                }
                                            }
                                        }
                                        if ((TempRules.pctIndAllMoveDown.iTotalCorrectInstance > 0 && check) || (TempRules.pctIndAllMoveDown.iTotalCorrectInstance > 0 && !check1))
                                        {
                                            bIndallMoveDown = ValidateDown1(oSession.StudentId, IndeallId, TempRules.pctIndAllMoveDown.iScoreRequired, reqSess,
                                                TempRules.pctIndAllMoveDown.iTotalCorrectInstance, TempRules.pctIndAllMoveDown.bConsequetiveIndex, status);
                                            int setcount = TrialLists.totalSet;

                                            bRuleStatusIOA = oDisc.checkConditionIOA(bIndallMoveDownbIOAReqd, bIOA);
                                            bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bIndallMoveDownbMultiTchr, bMultyTchr);
                                            if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                            {

                                                if (bIndallMoveDown)
                                                {
                                                    if (oDS.CrntSetNbr <= setcount)
                                                        nextSet = oDS.CrntSetNbr - 1;
                                                    if (oDS.CrntSetNbr == 1)
                                                    {
                                                        nextSet = 1;
                                                        bSetMoveBack = false;
                                                        GlobalSetMoveBack = false;
                                                    }
                                                    if (bSetMoveBack && bIndallMoveDown)
                                                    {
                                                        bSetMoveBack = true;
                                                        GlobalSetMoveBack = true;
                                                    }
                                                    else
                                                    {
                                                        bSetMoveBack = false;
                                                        GlobalSetMoveBack = false;
                                                    }
                                                }
                                                else
                                                {
                                                    bSetMoveBack = false;
                                                    GlobalSetMoveBack = false;
                                                }
                                            }
                                        }
                                        else
                                        {
                                            bSetMoveBack = false;
                                            GlobalSetMoveBack = false;
                                        }
                                    }

                                    FreqDurTextFlag = true;
                                }
                                #endregion

                            }
                            #endregion
                            else
                            {
                                ////////////////////////// New Step level criteria execution////////////////////// Strats Here ///// Arun M//////
                                #region start New Step level criteria execution

                                int iCurrentStepExecuting = Convert.ToInt32(iCurrentStep);
                                bool bPrevStepFailed = false;
                                chainedCols[sColName].promptType = oDS.PromptProc;
                                //Check for all previous step that it all succeeds to move forward
                                for (int istep = 1; istep < iCurrentStepExecuting; istep++)
                                {
                                    TrialLists = oDisc.GetTrialListsForPreStep(oSession.StudentId, oTemp.TemplateId, iCurrentSetId, istep, chainedCols[sColName].RequiredSession(), sColName, false, hfPlusMinusResp.Value, coltypeCode, oDS.ChainType);
                                    chainedCols[sColName].SessionCount = TrialLists.sessionCount;
                                    sesResultchain[index] = null;
                                    chainedCols[sColName].SetInputData(istep.ToString(), TargetPrompt, TargetPrompt, iCurrentSetNbr.ToString(), TrialLists.totalSet.ToString(), TrialLists.arTrials);
                                    int nullCnt = 0;
                                    for (int k = 0; k < chainedCols[sColName].Sessions.Length; k++)
                                    {
                                        if (!chainedCols[sColName].Sessions[k].Steps[istep - 1].Score.Contains(":"))
                                        {
                                            if ((chainedCols[sColName].Sessions[k].Steps[istep - 1].Score == null) || (chainedCols[sColName].Sessions[k].Steps[istep - 1].Score.ToString() == ""))
                                            {
                                                nullCnt++;
                                            }
                                        }
                                    }
                                    if (nullCnt != Convert.ToInt32(chainedCols[sColName].Sessions.Length))
                                    {
                                        sesResultchain[index] = Chained.Model.Execute(chainedCols[sColName], true, bpromptColumn, oDS.ChainType);

                                        //inputData.SetInputData(istep.ToString(), TargetPrompt, TargetPrompt, CurrentSet, TotalSets, Trials);
                                        //res = Model.Execute(inputData);

                                        //if it dosent move forward then we need to fall back to this step


                                        // if (TrialLists.sessionCount == chainedCols[sColName].RequiredSession())
                                        // {
                                        if (sesResultchain[index].MovedBackStep || sesResultchain[index].MovedBackPrompt)
                                        {
                                            sesResultchain[index].MovedBackPrompt = false;
                                            sesResultchain[index].MovedForwardPrompt = false;
                                            sesResultchain[index].MovedBackStep = false;
                                            sesResultchain[index].MovedForwardStep = false;
                                            sesResultchain[index].MovedBackSet = false;
                                            sesResultchain[index].MovedForwardSet = false;
                                            sesResultchain[index].MoveForwardPromptStep = false;
                                            sesResultchain[index].MoveBackPromptStep = false;

                                            if (!bStepCountCriteria)
                                            {
                                                bPrevStepFailed = true;


                                                //########
                                                //Move Back Current Step to istep
                                                int iPrompts = 0;
                                                string sEventAlertStatu = "";

                                                //bRuleStatusIOA = oDisc.checkConditionIOA(chainedInptData.IOARequired, bIOA);
                                                // bRuleStatusMultiTchr = oDisc.checkConditionIOA(chainedInptData.MultiTeacherRequired, bMultyTchr);
                                                if (sesResultchain[0] != null)
                                                {
                                                    //ash: do not perform the below code if the col is used is criteria and score is NA
                                                    if (checkIfScoreIsNA(chainedCols[sColName].IsInfluencedBy(MoveType.PromptMoveDown), iColId) != true && checkIfScoreIsNA(chainedCols[sColName].IsInfluencedBy(MoveType.StepMoveDown), iColId) != true && checkIfScoreIsNA(chainedCols[sColName].IsInfluencedBy(MoveType.SetMoveDown), iColId) != true)
                                                    {
                                                        //if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                        //{

                                                        DataTable dtModificatn = GetModificationDetails("STEP", oTemp.TemplateId);
                                                        if (dtModificatn != null)
                                                        {
                                                            if (dtModificatn.Rows.Count > 0)
                                                            {
                                                                bool mod_flag = CheckStepModification(Convert.ToInt32(dtModificatn.Rows[0]["ModificationRule"].ToString()), oTemp.TemplateId, iCurrentSetId, iCurrentStep);

                                                                if (mod_flag)
                                                                {
                                                                    oData = new clsData();
                                                                    string selqry = "SELECT ISNULL(ModificationInd, 0) as ModificationInd FROM DSTempHdr WHERE DSTempHdrId=" + oTemp.TemplateId;
                                                                    object mod = oData.FetchValue(selqry);
                                                                    if (mod != null)
                                                                    {
                                                                        if (Convert.ToBoolean(mod) != true)
                                                                        {
                                                                            string insqry = "INSERT INTO StdtSessEvent(SchoolId,ClassId,StudentId,DSTempHdrId,StdtSessEventType,EvntTs,SessionNbr,EventType)VALUES" +
                                                                            "(" + oSession.SchoolId + "," + oSession.Classid + "," + oSession.StudentId + "," + oTemp.TemplateId + ",'MODIFICATION',GETDATE()," + iSessionNmbr + ",'EV')";
                                                                            oData.Execute(insqry);

                                                                            string updqry = "UPDATE DSTempHdr SET ModificationInd=1,ModifiedBy=" + oSession.LoginId + ",ModifiedOn=GETDATE() WHERE DSTempHdrId=" + oTemp.TemplateId;
                                                                            oData.Execute(updqry);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        if (bPrompt)
                                                        {
                                                            if (oDS.PromptProc != "NA")
                                                            {
                                                                if ((oDS.PromptProc == "Least-to-Most") || (oDS.PromptProc == "Graduated Guidance"))
                                                                {
                                                                    iPrompts = Convert.ToInt32(LessonpromptUsed[LessonpromptUsed.Length - 1]);
                                                                    sesResultchain[0].NextPrompt = iPrompts.ToString();
                                                                }
                                                                else
                                                                {
                                                                    iPrompts = Convert.ToInt32(LessonpromptUsed[0]);

                                                                }
                                                            }
                                                        }
                                                        string strQuery = "Select DSTempStepId from DSTempStep where  SortOrder= " + istep + " and DSTempSetId=" + oDS.CrntSet + " AND IsDynamic=0 and DSTempHdrId=" + oTemp.TemplateId;
                                                        int retunID = Convert.ToInt32(oData.FetchValue(strQuery));
                                                        sEventType = "STEP MOVEDOWN";
                                                        if (bPrompt)
                                                            oDisc.updateStepStatus(oSession.SchoolId, oSession.Classid, oSession.StudentId, iCurrentStep, iCurrentSetId, oTemp.TemplateId, iPrompts, (iCurrentStep-1).ToString(), sesResultchain[0].CompletionStatus, sEventType, iSessionNmbr, oSession.LoginId, sLessonPlanId);
                                                        else
                                                            oDisc.updateStepStatus(oSession.SchoolId, oSession.Classid, oSession.StudentId, retunID, iCurrentSetId, oTemp.TemplateId, istep.ToString(), sesResultchain[0].CompletionStatus, sEventType, iSessionNmbr, oSession.LoginId, sLessonPlanId);
                                                        //oDisc.updateStepStatus(oSession.SchoolId, oSession.Classid, oSession.StudentId, oTemp.TemplateId, sesResultchain[0].NextStep.ToString(), sesResultchain[0].CompletionStatus, sEventType, iSessionNmbr, oSession.LoginId);
                                                        //if (sesResultchain[0].CompletionStatus == "COMPLETED")
                                                        //{
                                                        //    oDisc.insertEventStatus(oSession.SchoolId, oSession.Classid, oSession.StudentId, oTemp.TemplateId, sesResultchain[0].CompletionStatus, sEventType, iSessionNmbr);
                                                        //}
                                                        bStepCountCriteria = true;
                                                        // }
                                                    }
                                                }
                                                else
                                                {
                                                    sesResultchain[0].CompletionStatus = "NOT COMPLETED";
                                                    if (!bRuleStatusIOA)
                                                    {
                                                        // Functionto reset rule type values in StdtEvent Table
                                                        oDisc.resetEvntStatus(oSession.Classid, oSession.StudentId, oTemp.TemplateId);
                                                        sEventAlertStatu = "IOAEvntStatus=true,Step_MoveDown=true";
                                                        // Functionto Update rule Events values in StdtEvent Table
                                                        oDisc.UpdateAlertEvent(oTemp.TemplateId, sEventAlertStatu);
                                                    }
                                                    if (!bRuleStatusMultiTchr)
                                                    {
                                                        // Functionto reset rule type values in StdtEvent Table
                                                        oDisc.resetEvntStatus(oSession.Classid, oSession.StudentId, oTemp.TemplateId);
                                                        sEventAlertStatu = "MultiTchrEvntStatus=true,Step_MoveDown=true";
                                                        // Functionto Update rule Events values in StdtEvent Table
                                                        oDisc.UpdateAlertEvent(oTemp.TemplateId, sEventAlertStatu);
                                                    }
                                                }








                                                //Update the status table
                                                //############

                                                //break from the loop
                                                break;
                                            }
                                        }
                                    }
                                    //}
                                }

                                //Check for current step only if the Previous Step succeeds
                                if (!bPrevStepFailed)
                                {
                                    bStepCountCriteria = false;
                                    sesResultchain[index] = null;
                                    TrialLists = oDisc.GetTrialLists(oSession.StudentId, oTemp.TemplateId, iCurrentSetId, iCurrentStep, chainedCols[sColName].RequiredSession(), sColName, false, hfPlusMinusResp.Value, coltypeCode, oDS.ChainType);
                                    chainedCols[sColName].SessionCount = TrialLists.sessionCount;
                                    chainedCols[sColName].SetInputData(iCurrentStep.ToString(), sCurrentPrompt, TargetPrompt, iCurrentSetNbr.ToString(), TrialLists.totalSet.ToString(), TrialLists.arTrials);
                                    sesResultchain[index] = Chained.Model.Execute(chainedCols[sColName], false, bpromptColumn, oDS.ChainType);
                                }
                                ////////////////////////// New Step level criteria execution////////////////////// Ends Here ///// Arun M//////
                                #endregion
                                //chainedCols[sColName].SetInputData(iCurrentStep.ToString(), sCurrentPrompt, TargetPrompt, iCurrentSetNbr.ToString(), TrialLists.totalSet.ToString(), TrialLists.arTrials);
                                //sesResultchain[index] = Chained.Model.Execute(chainedCols[sColName]);

                                //For Accuracy Excluding Current Step......

                                if (iCurrentStep > 1)
                                {
                                    if ((chainedInptData.ExcludeCrntStepMoveUp.BarCondition > 0) || (chainedInptData.ExcludeCrntStepMoveBack.BarCondition > 0))
                                    {
                                        int stepmoveupCond = chainedInptData.ExcludeCrntStepMoveUp.BarCondition;
                                        int stepmovedownCond = chainedInptData.ExcludeCrntStepMoveBack.BarCondition;
                                        chainedCols[sColName].StepPercentAccuracy.BarCondition = chainedInptData.ExcludeCrntStepMoveUp.BarCondition;
                                        chainedCols[sColName].StepPercentAccuracy.ConsecutiveSuccess = chainedInptData.ExcludeCrntStepMoveUp.ConsecutiveSuccess;
                                        chainedCols[sColName].StepPercentAccuracy.TotalTrial = chainedInptData.ExcludeCrntStepMoveUp.TotalTrial;
                                        chainedCols[sColName].StepPercentAccuracy.SuccessNeeded = chainedInptData.ExcludeCrntStepMoveUp.SuccessNeeded;
                                        chainedCols[sColName].StepPercentAccuracy.bIOAReqd = chainedInptData.ExcludeCrntStepMoveUp.bIOAReqd;
                                        chainedCols[sColName].StepPercentAccuracy.bMultiTchr = chainedInptData.ExcludeCrntStepMoveUp.bMultiTchr;

                                        chainedCols[sColName].StepMoveBackPercentAccuracy.BarCondition = chainedInptData.ExcludeCrntStepMoveBack.BarCondition;
                                        chainedCols[sColName].StepMoveBackPercentAccuracy.ConsecutiveFailures = chainedInptData.ExcludeCrntStepMoveBack.ConsecutiveFailures;
                                        chainedCols[sColName].StepMoveBackPercentAccuracy.TotalTrial = chainedInptData.ExcludeCrntStepMoveBack.TotalTrial;
                                        chainedCols[sColName].StepMoveBackPercentAccuracy.FailureNeeded = chainedInptData.ExcludeCrntStepMoveBack.FailureNeeded;
                                        chainedCols[sColName].StepMoveBackPercentAccuracy.bIOAReqd = chainedInptData.ExcludeCrntStepMoveBack.bIOAReqd;
                                        chainedCols[sColName].StepMoveBackPercentAccuracy.bMultiTchr = chainedInptData.ExcludeCrntStepMoveBack.bMultiTchr;


                                        if ((stepmoveupCond > 0) || (stepmovedownCond > 0))
                                        {
                                            if (sesResultchain[index].MovedForwardStep || sesResultchain[index].MovedBackStep)
                                            {
                                                bool stepMoveUpflag = sesResultchain[index].MovedForwardStep;
                                                bool stepMoveDownflag = sesResultchain[index].MovedBackStep;
                                                TrialLists = oDisc.GetTrialLists(oSession.StudentId, oTemp.TemplateId, iCurrentSetId, iCurrentStep, chainedCols[sColName].RequiredSession(), sColName, true, hfPlusMinusResp.Value, coltypeCode, oDS.ChainType);
                                                chainedCols[sColName].StepCount = TrialLists.trialsCount;

                                                chainedCols[sColName].SetInputData((iCurrentStep - 1).ToString(), sCurrentPrompt, TargetPrompt, iCurrentSetNbr.ToString(), TrialLists.totalSet.ToString(), TrialLists.arTrials);
                                                sesResultchain[index] = Chained.Model.Execute(chainedCols[sColName], false, bpromptColumn, oDS.ChainType);

                                                //Check move up
                                                if (chainedInptData.StepPercentAccuracy.BarCondition > 0)
                                                {
                                                    if (sesResultchain[index].MovedForwardStep)
                                                    {
                                                        sesResultchain[index].MovedForwardStep = stepMoveUpflag;
                                                    }
                                                }
                                                else if (stepmoveupCond > 0)
                                                {
                                                    sesResultchain[index].MovedForwardStep = stepMoveUpflag;
                                                }

                                                //Check move down
                                                if (chainedInptData.StepMoveBackPercentAccuracy.BarCondition > 0)
                                                {
                                                    if (sesResultchain[index].MovedBackStep)
                                                    {
                                                        sesResultchain[index].MovedBackStep = stepMoveDownflag;
                                                    }
                                                }
                                                else if (stepmovedownCond > 0)
                                                {
                                                    sesResultchain[index].MovedBackStep = stepMoveDownflag;
                                                }
                                                if (sesResultchain[index].MovedBackStep)
                                                {
                                                    if ((iCurrentStep - 1) == 1)
                                                    {
                                                        sesResultchain[index].NextStep = sesResultchain[index].NextStep - 1;
                                                    }
                                                }

                                                if (iCurrentStep == 2)
                                                {
                                                    if (sesResultchain[index].MovedBackSet)
                                                    {
                                                        //if (TrialLists.totalSet > 1)
                                                        //{
                                                        //    sesResultchain[index].MovedBackSet = true;
                                                        //    sesResultchain[index].NextSet = chainedCols[sColName].CurrentSet - 1;

                                                        //}
                                                        //else
                                                        //{
                                                        sesResultchain[index].MovedBackSet = false;
                                                        sesResultchain[index].MovedBackStep = true;
                                                        sesResultchain[index].NextStep = sesResultchain[index].NextStep - 1;
                                                        //  }

                                                    }
                                                }

                                                sesResultchain[index].NextStep++;
                                                if (sesResultchain[index].NextStep > (chainedCols[sColName].StepCount + 1))
                                                {
                                                    sesResultchain[index].NextStep--;
                                                }
                                            }
                                        }
                                        else
                                        {
                                            TrialLists = oDisc.GetTrialLists(oSession.StudentId, oTemp.TemplateId, iCurrentSetId, iCurrentStep, chainedCols[sColName].RequiredSession(), sColName, true, hfPlusMinusResp.Value, coltypeCode, oDS.ChainType);
                                            chainedCols[sColName].StepCount = TrialLists.trialsCount;

                                            chainedCols[sColName].SetInputData((iCurrentStep - 1).ToString(), sCurrentPrompt, TargetPrompt, iCurrentSetNbr.ToString(), TrialLists.totalSet.ToString(), TrialLists.arTrials);
                                            sesResultchain[index] = Chained.Model.Execute(chainedCols[sColName], false, bpromptColumn, oDS.ChainType);


                                            if (sesResultchain[index].MovedBackStep)
                                            {
                                                if ((iCurrentStep - 1) == 1)
                                                {
                                                    sesResultchain[index].NextStep = sesResultchain[index].NextStep - 1;
                                                }
                                            }

                                            if (iCurrentStep == 2)
                                            {
                                                if (sesResultchain[index].MovedBackSet)
                                                {
                                                    //if (TrialLists.totalSet > 1)
                                                    //{
                                                    //    sesResultchain[index].MovedBackSet = true;
                                                    //    sesResultchain[index].NextSet = chainedCols[sColName].CurrentSet - 1;

                                                    //}
                                                    //else
                                                    //{
                                                    sesResultchain[index].MovedBackSet = false;
                                                    sesResultchain[index].MovedBackStep = true;
                                                    sesResultchain[index].NextStep = sesResultchain[index].NextStep - 1;
                                                    // }
                                                }
                                            }


                                            sesResultchain[index].NextStep++;

                                            if (sesResultchain[index].NextStep > (chainedCols[sColName].StepCount + 1))
                                            {
                                                sesResultchain[index].NextStep--;
                                            }
                                        }

                                    }
                                    //if ((chainedInptData.PromptExcludeCrntStepMoveUp.BarCondition > 0) || (chainedInptData.PromptExcludeCrntStepMoveBack.BarCondition > 0))
                                    //{
                                    //    int promptmoveupCond = chainedInptData.PromptPercentAccuracy.BarCondition;
                                    //    int promptmovedownCond = chainedInptData.MoveBackPromptPercentAccuracy.BarCondition;
                                    //    chainedCols[sColName].PromptPercentAccuracy.BarCondition = chainedInptData.PromptExcludeCrntStepMoveUp.BarCondition;
                                    //    chainedCols[sColName].PromptPercentAccuracy.ConsecutiveSuccess = chainedInptData.PromptExcludeCrntStepMoveUp.ConsecutiveSuccess;
                                    //    chainedCols[sColName].PromptPercentAccuracy.TotalTrial = chainedInptData.PromptExcludeCrntStepMoveUp.TotalTrial;
                                    //    chainedCols[sColName].PromptPercentAccuracy.SuccessNeeded = chainedInptData.PromptExcludeCrntStepMoveUp.SuccessNeeded;
                                    //    chainedCols[sColName].PromptPercentAccuracy.bIOAReqd = chainedInptData.PromptExcludeCrntStepMoveUp.bIOAReqd;
                                    //    chainedCols[sColName].PromptPercentAccuracy.bMultiTchr = chainedInptData.PromptExcludeCrntStepMoveUp.bMultiTchr;

                                    //    chainedCols[sColName].MoveBackPromptPercentAccuracy.BarCondition = chainedInptData.PromptExcludeCrntStepMoveBack.BarCondition;
                                    //    chainedCols[sColName].MoveBackPromptPercentAccuracy.ConsecutiveFailures = chainedInptData.PromptExcludeCrntStepMoveBack.ConsecutiveFailures;
                                    //    chainedCols[sColName].MoveBackPromptPercentAccuracy.TotalTrial = chainedInptData.PromptExcludeCrntStepMoveBack.TotalTrial;
                                    //    chainedCols[sColName].MoveBackPromptPercentAccuracy.FailureNeeded = chainedInptData.PromptExcludeCrntStepMoveBack.FailureNeeded;
                                    //    chainedCols[sColName].MoveBackPromptPercentAccuracy.bIOAReqd = chainedInptData.PromptExcludeCrntStepMoveBack.bIOAReqd;
                                    //    chainedCols[sColName].MoveBackPromptPercentAccuracy.bMultiTchr = chainedInptData.PromptExcludeCrntStepMoveBack.bMultiTchr;


                                    //    if ((promptmoveupCond > 0) || (promptmovedownCond > 0))
                                    //    {
                                    //        if (sesResultchain[index].MovedForwardPrompt || sesResultchain[index].MovedBackPrompt)
                                    //        {
                                    //            TrialLists = oDisc.GetTrialLists(oSession.StudentId, oTemp.TemplateId, iCurrentSetId, iCurrentStep, chainedCols[sColName].RequiredSession(), sColName, true);
                                    //            chainedCols[sColName].StepCount = TrialLists.trialsCount;

                                    //            chainedCols[sColName].SetInputData((iCurrentStep - 1).ToString(), sCurrentPrompt, TargetPrompt, iCurrentSetNbr.ToString(), TrialLists.totalSet.ToString(), TrialLists.arTrials);
                                    //            sesResultchain[index] = Chained.Model.Execute(chainedCols[sColName]);
                                    //        }
                                    //    }
                                    //    else
                                    //    {
                                    //        TrialLists = oDisc.GetTrialLists(oSession.StudentId, oTemp.TemplateId, iCurrentSetId, iCurrentStep, chainedCols[sColName].RequiredSession(), sColName, true);
                                    //        chainedCols[sColName].StepCount = TrialLists.trialsCount;

                                    //        chainedCols[sColName].SetInputData((iCurrentStep - 1).ToString(), sCurrentPrompt, TargetPrompt, iCurrentSetNbr.ToString(), TrialLists.totalSet.ToString(), TrialLists.arTrials);
                                    //        sesResultchain[index] = Chained.Model.Execute(chainedCols[sColName]);
                                    //    }

                                    //}
                                }
                            }



                            if (dr["ColTypeCd"].ToString() == "Duration")
                            {

                                if (bstepAvgDurationMoveUp && bStepMoveUp)
                                {
                                    bStepMoveUp = true;
                                    //GlobalStepMoveUp = true;
                                }
                                else
                                {
                                    bStepMoveUp = false;
                                    //GlobalStepMoveUp = false;
                                }

                                if (bAvgDurationMoveUp && bSetMoveUp)
                                {
                                    bSetMoveUp = true;
                                    //GlobalSetMoveUp = true;
                                }
                                else
                                {
                                    bSetMoveUp = false;
                                    //GlobalSetMoveUp = false;
                                }

                                if (bPromptAvgDurationMoveUp && bPromptMoveUp)
                                {
                                    bPromptMoveUp = true;
                                    //GlobalPromptMoveUp = true;
                                }
                                else
                                {
                                    bPromptMoveUp = false;
                                    //GlobalPromptMoveUp = false;
                                }

                                if (bstepAvgDurationMoveDown && bStepMoveBack)
                                {
                                    bStepMoveBack = true;
                                    //GlobalStepMoveBack = true;
                                }
                                else
                                {
                                    bStepMoveBack = false;
                                    //GlobalStepMoveBack = false;
                                }

                                if (bAvgDurationMoveDown && bSetMoveBack)
                                {
                                    bSetMoveBack = true;
                                    //GlobalSetMoveBack = true;
                                }
                                else
                                {
                                    bSetMoveBack = false;
                                    //GlobalSetMoveBack = false;
                                }

                                if (bPromptAvgDurationMoveDown && bPromptMoveBack)
                                {
                                    bPromptMoveBack = true;
                                    //GlobalPromptMoveBack = true;
                                }
                                else
                                {
                                    bPromptMoveBack = false;
                                    //GlobalPromptMoveBack = false;
                                }




                                if (bstepTotDurationMoveUp && bStepMoveUp)
                                {
                                    bStepMoveUp = true;
                                    //GlobalStepMoveUp = true;
                                }
                                else
                                {
                                    bStepMoveUp = false;
                                    //GlobalStepMoveUp = false;
                                }

                                if (bTotDurationMoveUp && bSetMoveUp)
                                {
                                    bSetMoveUp = true;
                                    //GlobalSetMoveUp = true;
                                }
                                else
                                {
                                    bSetMoveUp = false;
                                    //GlobalSetMoveUp = false;
                                }

                                if (bstepTotDurationMoveDown && bStepMoveBack)
                                {
                                    bStepMoveBack = true;
                                    //GlobalStepMoveBack = true;
                                }
                                else
                                {
                                    bStepMoveBack = false;
                                    //GlobalStepMoveBack = false;
                                }

                                if (bTotDurationMoveDown && bSetMoveBack)
                                {
                                    bSetMoveBack = true;
                                    //GlobalSetMoveBack = true;
                                }
                                else
                                {
                                    bSetMoveBack = false;
                                    //GlobalSetMoveBack = false;
                                }
                                if (CompletionStatusSet == "COMPLETED")
                                {
                                    bSetCompleted = true;
                                    MaintenanceOrCompletion = true;
                                }

                            }
                            else if (dr["ColTypeCd"].ToString() == "Frequency")
                            {
                                if (bstepFrequencyMoveUp && bStepMoveUp)
                                {
                                    bStepMoveUp = true;
                                    //GlobalStepMoveUp = true;
                                }
                                else
                                {
                                    bStepMoveUp = false;
                                    //GlobalStepMoveUp = false;
                                }
                                if (bFrequencyMoveUp && bSetMoveUp)
                                {
                                    bSetMoveUp = true;
                                    //GlobalSetMoveUp = true;
                                }
                                else
                                {
                                    bSetMoveUp = false;
                                    //GlobalSetMoveUp = false;
                                }
                                if (bPromptFrequencyMoveUp && bPromptMoveUp)
                                {
                                    bPromptMoveUp = true;
                                    //GlobalPromptMoveUp = true;
                                }
                                else
                                {
                                    bPromptMoveUp = false;
                                    //GlobalPromptMoveUp = false;
                                }

                                if (bstepFrequencyMoveDown && bStepMoveBack)
                                {
                                    bStepMoveBack = true;
                                    //GlobalStepMoveBack = true;
                                }
                                else
                                {
                                    bStepMoveBack = false;
                                    //GlobalStepMoveBack = false;
                                }
                                if (bFrequencyMoveDown && bSetMoveBack)
                                {
                                    bSetMoveBack = true;
                                    //GlobalSetMoveBack = true;
                                }
                                else
                                {
                                    bSetMoveBack = false;
                                    //GlobalSetMoveBack = false;
                                }
                                if (bPromptFrequencyMoveDown && bPromptMoveBack)
                                {
                                    bPromptMoveBack = true;
                                    //GlobalPromptMoveUp = true;
                                }
                                else
                                {
                                    bPromptMoveBack = false;
                                    //GlobalPromptMoveUp = false;
                                }
                                if (CompletionStatusSet == "COMPLETED")
                                {
                                    bSetCompleted = true;
                                    MaintenanceOrCompletion = true;
                                }
                            }
                            else if (dr["ColTypeCd"].ToString() == "Text")
                            {
                                if (bcustMoveUp && bSetMoveUp)
                                {
                                    bSetMoveUp = true;
                                    GlobalSetMoveUp = true;
                                }
                                if (bCustMoveDown && bSetMoveBack)
                                {
                                    bSetMoveBack = true;
                                    GlobalSetMoveBack = true;
                                }
                            }
                            else if (colt.ToString() == "true")
                            {

                                TempRules = GetStepRules(oTemp.TemplateId, iColId);
                                if (TempRules.pctIndAllMoveUp.iTotalCorrectInstance > 0)
                                {
                                    if (bstepIndallMoveUp && bStepMoveUp)
                                    {
                                        bStepMoveUp = true;
                                        GlobalStepMoveUp = true;
                                    }
                                    else
                                    {
                                        bStepMoveUp = false;
                                        GlobalStepMoveUp = false;
                                    }
                                }
                                else
                                {
                                    bStepMoveUp = sesResultchain[0].MovedForwardStep;
                                    nextStep = sesResultchain[0].NextStep;
                                }

                                TempRules = GetSetRules(oTemp.TemplateId, iColId);
                                if (TempRules.pctIndAllMoveUp.iTotalCorrectInstance > 0)
                                {
                                    if (bIndallMoveUp && bSetMoveUp)
                                    {
                                        bSetMoveUp = true;
                                        GlobalSetMoveUp = true;
                                    }
                                    else
                                    {
                                        bSetMoveUp = false;
                                        //GlobalSetMoveUp = false;
                                    }
                                }
                                else
                                {
                                    bSetMoveUp = sesResultchain[0].MovedForwardSet;
                                    nextSet = sesResultchain[0].NextSet;
                                }
                                TempRules = GetPromptRules(oTemp.TemplateId, iColId);
                                if (TempRules.pctIndAllMoveUp.iTotalCorrectInstance > 0)
                                {
                                    if (bPromptIndallMoveUp && bPromptMoveUp)
                                    {
                                        bPromptMoveUp = true;
                                        GlobalPromptMoveUp = true;
                                    }
                                    else
                                    {
                                        bPromptMoveUp = false;
                                        GlobalPromptMoveUp = false;
                                    }
                                }

                                if (CompletionStatusSet == "COMPLETED")
                                {
                                    bSetCompleted = true;
                                    MaintenanceOrCompletion = true;
                                }
                                else
                                {
                                    if (TempRules.pctIndAllMoveUp.iTotalCorrectInstance == 0)
                                    {
                                        CompletionStatusSet = sesResultchain[0].CompletionStatus;
                                        if (CompletionStatusSet == "COMPLETED")
                                        {
                                            bSetCompleted = true;
                                            MaintenanceOrCompletion = true;
                                            bSetMoveUp = true;
                                            GlobalSetMoveUp = true;
                                        }

                                    }

                                }
                                if (oDS.ChainType == "Forward chain" || oDS.ChainType == "Backward chain")
                                {
                                    bStepMoveBack = sesResultchain[index].MovedBackStep;
                                    bSetMoveBack = sesResultchain[index].MovedBackSet;
                                    bPromptMoveBack = sesResultchain[index].MovedBackPrompt;


                                    if (bSetMoveBack)
                                    {
                                        nextSet = sesResultchain[0].NextSet;
                                    }
                                    else
                                    {
                                        TempRules = GetSetRules(oTemp.TemplateId, iColId);
                                        if (TempRules.pctIndAllMoveUp.iTotalCorrectInstance == 0)
                                        {
                                            nextSet = sesResultchain[0].NextSet;
                                        }

                                    }
                                    TempRules = GetStepRules(oTemp.TemplateId, iColId);

                                    if (bStepMoveBack)
                                    {
                                        nextStep = sesResultchain[0].NextStep;
                                    }
                                    else
                                        if (TempRules.pctIndAllMoveUp.iTotalCorrectInstance == 0)
                                        {

                                            nextStep = sesResultchain[0].NextStep;
                                        }

                                    if (bPromptMoveBack)
                                    {
                                        sNextLessonPrompt = sesResultchain[0].NextPrompt;
                                    }
                                    else
                                    {
                                        TempRules = GetPromptRules(oTemp.TemplateId, iColId);
                                        if (TempRules.pctIndAllMoveUp.iTotalCorrectInstance == 0)
                                        {
                                            sNextLessonPrompt = sesResultchain[0].NextPrompt;
                                        }
                                    }
                                }
                                else
                                {
                                    TempRules = GetSetRules(oTemp.TemplateId, iColId);
                                    if (TempRules.pctIndAllMoveUp.iTotalCorrectInstance == 0)
                                    {

                                        bSetMoveBack = sesResultchain[index].MovedBackSet;
                                    }
                                    else
                                    {
                                        if (bIndallMoveDown && bSetMoveBack)
                                        {
                                            bSetMoveBack = true;
                                            GlobalSetMoveBack = true;
                                        }
                                        else
                                        {
                                            bSetMoveBack = false;
                                            GlobalSetMoveBack = false;
                                        }

                                    }

                                }


                            }
                            else
                            {

                                if (sesResultchain[index] != null)
                                {
                                    if (set_moveupCount > 0 || bsetUp == true)
                                    {
                                        foreach (DataRow dtr in dt.Rows)
                                        {
                                            if (!bSetMoveUp)
                                            {
                                                bSetMoveUp = sesResultchain[0].MovedForwardSet;
                                            }
                                            if (!bSetMoveUp)
                                            {
                                                if (sesResultchain[0].CompletionStatus == "COMPLETED")
                                                    bSetMoveUp = true;

                                            }
                                            string sAllColName = dtr["ColName"].ToString();
                                            if (chainedCols.ContainsKey(sAllColName))
                                                if (bSetMoveUp && chainedCols[sAllColName].IsInfluencedBy(MoveType.SetMoveUp))
                                                {
                                                    bSetMoveUp = sesResultchain[0].MovedForwardSet;
                                                    nextSet = sesResultchain[0].NextSet;
                                                    CompletionStatusSet = sesResultchain[index].CompletionStatus;
                                                    if (CompletionStatusSet == "COMPLETED")
                                                    {
                                                        bSetCompleted = true;
                                                        MaintenanceOrCompletion = true;
                                                        bSetMoveUp = true;
                                                        GlobalSetMoveUp = true;
                                                    }
                                                    else
                                                        bSetCompleted = false;

                                                    if (bSetMoveUp)
                                                    {
                                                        GlobalSetMoveUp = true;
                                                        if (bSetMoveUp == true && GlobalSetMoveUp == true)
                                                            bPrompt = true;
                                                        bSetMoveBack = false;
                                                        GlobalSetMoveBack = false;
                                                    }
                                                }
                                                else
                                                {
                                                    bSetMoveUp = false;
                                                    //GlobalSetMoveUp = false;
                                                }
                                        }
                                    }
                                    else
                                    {
                                        bSetMoveUp = false;
                                        GlobalSetMoveUp = false;
                                    }
                                    if (set_movedownCount > 0 || bsetDown == true)
                                    {
                                        foreach (DataRow dtr in dt.Rows)
                                        {
                                            if (!bSetMoveBack)
                                            {
                                                bSetMoveBack = sesResultchain[0].MovedBackSet;
                                            }
                                            string sAllColName = dtr["ColName"].ToString();
                                            if (chainedCols.ContainsKey(sAllColName))
                                                if (bSetMoveBack && chainedCols[sAllColName].IsInfluencedBy(MoveType.SetMoveDown))
                                                {
                                                    if (iCurrentSetNbr > 1)
                                                    {
                                                        bSetMoveBack = sesResultchain[0].MovedBackSet;
                                                        nextSet = sesResultchain[0].NextSet;
                                                        if (bSetMoveBack)
                                                            bSetCompleted = false;
                                                        if (bSetMoveBack)
                                                        {
                                                            GlobalSetMoveBack = true;
                                                            bSetMoveUp = false;
                                                            GlobalSetMoveUp = false;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        bSetMoveBack = false;
                                                        GlobalSetMoveBack = false;
                                                    }
                                                }
                                                else
                                                {
                                                    bSetMoveBack = false;
                                                    //GlobalSetMoveBack = false;
                                                }
                                        }
                                    }
                                    else
                                    {
                                        bSetMoveBack = false;
                                        //GlobalSetMoveBack = false;
                                    }
                                }
                            }
                            if (sesResultchain[index] != null)
                            {
                                if (prompt_moveupCount > 0)
                                {
                                    if (sesResultchain[index].MovedForwardPrompt && chainedCols[sColName].IsInfluencedBy(MoveType.PromptMoveup))
                                    {
                                        bPromptMoveUp = true;
                                        GlobalPromptMoveUp = true;
                                        bStepMoveUp = false;
                                        GlobalStepMoveUp = false;
                                        sNextLessonPrompt = sesResultchain[index].NextPrompt;
                                        if (!bpromptColumn)
                                        {
                                            if (LessonpromptUsedOther.Length > crntPrmtIndex + 1)
                                                sNextLessonPrompt = LessonpromptUsedOther[crntPrmtIndex + 1];
                                            else
                                            {
                                                bPromptMoveUp = false;
                                                GlobalPromptMoveUp = false;
                                            }
                                        }
                                        //bStepMoveUp = sesResultchain[0].MovedForwardStep;
                                        //bSetMoveUp = sesResultchain[0].MovedForwardSet;
                                        //bStepMoveBack = sesResultchain[0].MovedBackStep;
                                        //bSetMoveBack = sesResultchain[0].MovedBackSet;
                                    }
                                }
                                else
                                {
                                    if (bPromptMoveupNA || bSetPromptMoveupNA)
                                    {
                                        bPromptMoveUp = false;
                                        GlobalPromptMoveUp = false;
                                    }
                                }

                                if (prompt_movedownCount > 0)
                                {
                                    if (sesResultchain[index].MovedBackPrompt && chainedCols[sColName].IsInfluencedBy(MoveType.PromptMoveDown))
                                    {
                                        bPromptMoveBack = true;
                                        GlobalPromptMoveBack = true;
                                        sNextLessonPrompt = sesResultchain[index].NextPrompt;
                                        if (!bpromptColumn)
                                        {
                                            if (crntPrmtIndex > 0)
                                                sNextLessonPrompt = LessonpromptUsedOther[crntPrmtIndex - 1];
                                            else
                                            {
                                                bPromptMoveBack = false;
                                                GlobalPromptMoveBack = false;
                                            }
                                        }
                                        //bStepMoveUp = sesResultchain[0].MovedForwardStep;
                                        //bSetMoveUp = sesResultchain[0].MovedForwardSet;
                                        //bStepMoveBack = sesResultchain[0].MovedBackStep;
                                        //bSetMoveBack = sesResultchain[0].MovedBackSet;
                                    }
                                }
                                else
                                {
                                    if (bPromptMovedownNA || bSetPromptMovedownNA)
                                    {
                                        bPromptMoveBack = false;
                                        GlobalPromptMoveBack = false;
                                    }
                                }

                                if (oDS.ChainType == "Total Task")
                                {
                                    //bool flag = true;
                                    //if (sesResultchain[index].StepPrompts != null)
                                    //{
                                    //    foreach (string iprompt in sesResultchain[index].StepPrompts)
                                    //    {
                                    //        if (iprompt != TargetPrompt)
                                    //        {
                                    //            flag = false;
                                    //            break;
                                    //        }
                                    //    }
                                    //}
                                    //if (!flag)
                                    //{
                                    //    if (sesResultchain[index].MoveForwardPromptStep)
                                    //    {
                                    //        bPromptMoveUp = false;
                                    //        bStepMoveUp = false;
                                    //        bSetMoveUp = false;
                                    //        bStepMoveBack = false;
                                    //        bSetMoveBack = false;
                                    //    }
                                    //    if (sesResultchain[index].MoveBackPromptStep)
                                    //    {
                                    //        bPromptMoveBack = false;
                                    //        bStepMoveUp = false;
                                    //        bSetMoveUp = false;
                                    //        bStepMoveBack = false;
                                    //        bSetMoveBack = false;
                                    //    }
                                    //}
                                }
                                if (step_moveupCount > 0)
                                {
                                    if (bStepMoveUp && chainedCols[sColName].IsInfluencedBy(MoveType.StepMoveUp))
                                    {
                                        bStepMoveUp = sesResultchain[0].MovedForwardStep;
                                        nextStep = sesResultchain[0].NextStep;
                                        if ((nextStep > iCurrentStep) && bStepMoveUp)
                                        {
                                            GlobalStepMoveUp = true;
                                            bPrompt = true;
                                        }
                                    }
                                }
                                //else
                                //    bStepMoveUp = false;
                                if (step_movedownCount > 0)
                                {
                                    if (bStepMoveBack && chainedCols[sColName].IsInfluencedBy(MoveType.StepMoveDown))
                                    {
                                        bStepMoveBack = sesResultchain[0].MovedBackStep;
                                        nextStep = sesResultchain[0].NextStep;
                                        if ((nextStep < iCurrentStep) && bStepMoveBack)
                                        {
                                            GlobalStepMoveBack = true;
                                        }
                                    }
                                }

                                else if (bStepPromptMovedownNA == true)
                                {

                                    bStepMoveBack = false;
                                    GlobalStepMoveBack = false;
                                }
                                //else
                                //    bStepMoveBack = false;

                            }
                            loop++;

                        }
                        else
                        {
                            loop++;
                            //bSetMoveUp = false;
                            //bSetMoveBack = false;
                            //bPromptMoveUp = false;
                            //bPromptMoveBack = false;
                            //bStepMoveUp = false;
                            //bStepMoveBack = false;
                        }
                        //if ((!bPrompt) && (sesResult[0].NextPrompt.ToString() == "*"))
                        //{

                        //ash: set isColNA to true if the col is used is criteria and its score is NA
                        if (checkIfScoreIsNA(chainedCols[sColName].IsInfluencedBy(MoveType.PromptMoveDown), iColId) == true || checkIfScoreIsNA(chainedCols[sColName].IsInfluencedBy(MoveType.StepMoveDown), iColId) == true || checkIfScoreIsNA(chainedCols[sColName].IsInfluencedBy(MoveType.SetMoveDown), iColId) == true)
                        {
                            isColNA = true;
                        }

                        #region count=loop
                        if (count == loop && isColNA == false)
                        {

                            if (bSetMoveBack && chainedCols[sColName].IsInfluencedBy(MoveType.SetMoveDown))
                            {
                                bStepMoveUp = false;
                                bStepMoveBack = false;
                                GlobalStepMoveUp = false;
                                GlobalStepMoveBack = false;
                            }
                            if (bStepMoveUp && chainedCols[sColName].IsInfluencedBy(MoveType.StepMoveUp))
                            {
                                bSetMoveUp = false;
                                bSetMoveBack = false;
                                //GlobalSetMoveUp = false;
                                GlobalSetMoveBack = false;
                            }
                            if (bStepMoveBack && chainedCols[sColName].IsInfluencedBy(MoveType.StepMoveDown))
                            {
                                bSetMoveUp = false;
                                bSetMoveBack = false;
                                GlobalSetMoveBack = false;
                                //GlobalSetMoveUp = false;
                            }

                            if ((bPromtHirchy && (LessonTargetPrompt.Trim() != sCurrentLessonPrompt.Trim())))
                            {
                                if (oDS.ChainType == "Total Task")
                                {
                                    if (Session["StepLevelPrompt"] != null && Convert.ToBoolean(Session["StepLevelPrompt"]) == false)
                                    {
                                        bStepMoveUp = false;
                                        GlobalStepMoveUp = false;
                                        bSetMoveUp = false;
                                        bSetCompleted = false;
                                        //GlobalSetMoveUp = false;
                                    }
                                }
                                else
                                {
                                    if (bStepMoveUp && GlobalStepMoveUp)
                                    {
                                        if (prompt_moveupCount > 0)
                                        {
                                            bPromptMoveUp = true;
                                            GlobalPromptMoveUp = true;
                                            bStepMoveUp = false;
                                            GlobalStepMoveUp = false;
                                            bSetMoveUp = false;
                                            bSetCompleted = false;
                                            //GlobalSetMoveUp = false;
                                            if (LessonpromptUsedOther.Length > crntPrmtIndex + 1)
                                                sNextLessonPrompt = LessonpromptUsedOther[crntPrmtIndex + 1];
                                            else
                                            {
                                                bPromptMoveUp = false;
                                                GlobalPromptMoveUp = false;
                                                bStepMoveUp = true;
                                                GlobalStepMoveUp = true;
                                            }
                                        }
                                        else
                                        {
                                            bStepMoveUp = false;
                                            GlobalStepMoveUp = false;
                                            bSetMoveUp = false;
                                            bSetCompleted = false;
                                            //GlobalSetMoveUp = false;
                                        }
                                    }



                                }
                            }

                        }
                        #endregion


                        if (sesResultchain != null && sesResultchainBkp != null)
                        {
                            sesResultchainBkp[bkpIndex] = sesResultchain[index];
                            bkpIndex++;
                        }
                    }
                    #endregion
                    #region Discrete
                    else if (sSkillType == "Discrete")
                    {
                        bool disRuleNAChk = false;
                        discreteInptData = new DiscreetTrial.InputData();
                        #region setrules
                        Rules TempRules = new Rules();
                        TempRules = GetSetRules(oTemp.TemplateId, iColId);
                        if (TempRules != null)
                        {
                            set_moveupCount = TempRules.moveup;
                            set_movedownCount = TempRules.movedown;
                            if (TempRules.count > 0)
                            {
                                //Liju
                                disRuleNAChk = true;
                                bSetMoveUpIOA = bSetMoveUpIOA | TempRules.pctIndMoveUp.bIOARequird | TempRules.pctAccyMoveUp.bIOARequird | TempRules.pctTotalDurationMoveUp.bIOARequird | TempRules.pctAvgDurationMoveUp.bIOARequird | TempRules.pctFrequencyMoveUp.bIOARequird | TempRules.pctCustomMoveUp.bIOARequird | TempRules.pctIndAllMoveUp.bIOARequird;
                                bSetMoveUpMultiTecher = bSetMoveUpMultiTecher | TempRules.pctIndMoveUp.bMultiTeacherRequired | TempRules.pctAccyMoveUp.bMultiTeacherRequired | TempRules.pctTotalDurationMoveUp.bMultiTeacherRequired | TempRules.pctAvgDurationMoveUp.bMultiTeacherRequired | TempRules.pctFrequencyMoveUp.bMultiTeacherRequired | TempRules.pctCustomMoveUp.bMultiTeacherRequired | TempRules.pctIndAllMoveUp.bMultiTeacherRequired;
                                bSetMoveDownIOA = bSetMoveDownIOA | TempRules.pctIndMoveDown.bIOARequird | TempRules.pctAccyMoveDown.bIOARequird | TempRules.pctTotalDurationMoveDown.bIOARequird | TempRules.pctAvgDurationMoveDown.bIOARequird | TempRules.pctFrequencyMoveDown.bIOARequird | TempRules.pctCustomMoveDown.bIOARequird | TempRules.pctIndAllMoveDown.bIOARequird;
                                bSetMoveDownMultiTecher = bSetMoveDownMultiTecher | TempRules.pctIndMoveDown.bMultiTeacherRequired | TempRules.pctAccyMoveDown.bMultiTeacherRequired | TempRules.pctTotalDurationMoveDown.bMultiTeacherRequired | TempRules.pctAvgDurationMoveDown.bMultiTeacherRequired | TempRules.pctFrequencyMoveDown.bMultiTeacherRequired | TempRules.pctCustomMoveDown.bMultiTeacherRequired | TempRules.pctIndAllMoveDown.bMultiTeacherRequired;
                                bTotalDurationMoveUpbIOAReqd = bTotalDurationMoveUpbIOAReqd | TempRules.pctTotalDurationMoveUp.bIOARequird;
                                bTotalDurationMoveUpbMultiTchr = bTotalDurationMoveUpbMultiTchr | TempRules.pctTotalDurationMoveUp.bMultiTeacherRequired;
                                bAvgDurationMoveUpbIOAReqd = bAvgDurationMoveUpbIOAReqd | TempRules.pctAvgDurationMoveUp.bIOARequird;
                                bAvgDurationMoveUpbMultiTchr = bAvgDurationMoveUpbMultiTchr | TempRules.pctAvgDurationMoveUp.bMultiTeacherRequired;
                                bTotalDurationMoveDownbIOAReqd = bTotalDurationMoveDownbIOAReqd | TempRules.pctTotalDurationMoveDown.bIOARequird;
                                bTotalDurationMoveDownbMultiTchr = bTotalDurationMoveDownbMultiTchr | TempRules.pctTotalDurationMoveDown.bMultiTeacherRequired;
                                bAvgDurationMoveDownbIOAReqd = bAvgDurationMoveDownbIOAReqd | TempRules.pctAvgDurationMoveDown.bIOARequird;
                                bAvgDurationMoveDownbMultiTchr = bAvgDurationMoveDownbMultiTchr | TempRules.pctAvgDurationMoveDown.bMultiTeacherRequired;
                                bFrequencyMoveUpbIOAReqd = bFrequencyMoveUpbIOAReqd | TempRules.pctFrequencyMoveUp.bIOARequird;
                                bFrequencyMoveUpbMultiTchr = bFrequencyMoveUpbMultiTchr | TempRules.pctFrequencyMoveUp.bMultiTeacherRequired;
                                bFrequencyMoveDownbIOAReqd = bFrequencyMoveDownbIOAReqd | TempRules.pctFrequencyMoveDown.bIOARequird;
                                bFrequencyMoveDownbMultiTchr = bFrequencyMoveDownbMultiTchr | TempRules.pctFrequencyMoveDown.bMultiTeacherRequired;
                                bCustomMoveupIOA = bCustomMoveupIOA || TempRules.pctCustomMoveUp.bIOARequird;
                                bCustomMovedownIOA = bCustomMovedownIOA || TempRules.pctCustomMoveDown.bIOARequird;
                                bCustomMoveupMultiTchr = bCustomMoveupMultiTchr || TempRules.pctCustomMoveUp.bMultiTeacherRequired;
                                bCustomMovedownMultiTchr = bCustomMovedownMultiTchr || TempRules.pctCustomMoveDown.bMultiTeacherRequired;

                                bIndallMoveUpbIOAReqd = bIndallMoveUpbIOAReqd | TempRules.pctIndAllMoveUp.bIOARequird;
                                bIndallMoveUpbMultiTchr = bIndallMoveUpbMultiTchr | TempRules.pctIndAllMoveUp.bMultiTeacherRequired;
                                bIndallMoveDownbIOAReqd = bIndallMoveDownbIOAReqd | TempRules.pctIndAllMoveDown.bIOARequird;
                                bIndallMoveDownbMultiTchr = bIndallMoveDownbMultiTchr | TempRules.pctIndAllMoveDown.bMultiTeacherRequired;


                                discreteInptData.PercentAccuracy.BarCondition = TempRules.pctAccyMoveUp.iScoreRequired;
                                discreteInptData.PercentAccuracy.ConsecutiveSuccess = TempRules.pctAccyMoveUp.bConsequetiveIndex;
                                discreteInptData.PercentAccuracy.TotalTrial = TempRules.pctAccyMoveUp.iTotalInstance;
                                discreteInptData.PercentAccuracy.SuccessNeeded = TempRules.pctAccyMoveUp.iTotalCorrectInstance;
                                discreteInptData.PercentAccuracy.bIOAReqd = TempRules.pctAccyMoveUp.bIOARequird;
                                discreteInptData.PercentAccuracy.bMultiTchr = TempRules.pctAccyMoveUp.bMultiTeacherRequired;
                                discreteInptData.PercentAccuracy.ConsecutiveAverage = TempRules.pctAccyMoveUp.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                                discreteInptData.PercentAccuracy.ConsecutiveAverageValue = TempRules.pctAccyMoveUp.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                                discreteInptData.IncludeMistrials = TempRules.bIncludeMisTrail;

                                discreteInptData.PercentIndependence.BarCondition = TempRules.pctIndMoveUp.iScoreRequired;
                                discreteInptData.PercentIndependence.ConsecutiveSuccess = TempRules.pctIndMoveUp.bConsequetiveIndex;
                                discreteInptData.PercentIndependence.TotalTrial = TempRules.pctIndMoveUp.iTotalInstance;
                                discreteInptData.PercentIndependence.SuccessNeeded = TempRules.pctIndMoveUp.iTotalCorrectInstance;
                                discreteInptData.PercentIndependence.bIOAReqd = TempRules.pctIndMoveUp.bIOARequird;
                                discreteInptData.PercentIndependence.bMultiTchr = TempRules.pctIndMoveUp.bMultiTeacherRequired;
                                discreteInptData.PercentIndependence.ConsecutiveAverage = TempRules.pctIndMoveUp.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                                discreteInptData.PercentIndependence.ConsecutiveAverageValue = TempRules.pctIndMoveUp.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                                discreteInptData.CustomPercent.BarCondition = TempRules.pctCustomMoveUp.iScoreRequired;
                                discreteInptData.CustomPercent.ConsecutiveSuccess = TempRules.pctCustomMoveUp.bConsequetiveIndex;
                                discreteInptData.CustomPercent.TotalTrial = TempRules.pctCustomMoveUp.iTotalInstance;
                                discreteInptData.CustomPercent.SuccessNeeded = TempRules.pctCustomMoveUp.iTotalCorrectInstance;
                                discreteInptData.CustomPercent.bIOAReqd = TempRules.pctCustomMoveUp.bIOARequird;
                                discreteInptData.CustomPercent.bMultiTchr = TempRules.pctCustomMoveUp.bMultiTeacherRequired;
                                discreteInptData.CustomPercent.ConsecutiveAverage = TempRules.pctCustomMoveUp.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                                discreteInptData.CustomPercent.ConsecutiveAverageValue = TempRules.pctCustomMoveUp.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                                discreteInptData.MoveBackCustom.BarCondition = TempRules.pctCustomMoveDown.iScoreRequired;
                                discreteInptData.MoveBackCustom.ConsecutiveFailures = TempRules.pctCustomMoveDown.bConsequetiveIndex;
                                discreteInptData.MoveBackCustom.TotalTrial = TempRules.pctCustomMoveDown.iTotalInstance;
                                discreteInptData.MoveBackCustom.FailureNeeded = TempRules.pctCustomMoveDown.iTotalCorrectInstance;
                                discreteInptData.MoveBackCustom.bIOAReqd = TempRules.pctCustomMoveDown.bIOARequird;
                                discreteInptData.MoveBackCustom.bMultiTchr = TempRules.pctCustomMoveDown.bMultiTeacherRequired;
                                discreteInptData.MoveBackCustom.ConsecutiveAverageFailure = TempRules.pctCustomMoveDown.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                                discreteInptData.MoveBackCustom.ConsecutiveAverageFailValue = TempRules.pctCustomMoveDown.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                                discreteInptData.MoveBackPercentAccuracy.BarCondition = TempRules.pctAccyMoveDown.iScoreRequired;
                                discreteInptData.MoveBackPercentAccuracy.ConsecutiveFailures = TempRules.pctAccyMoveDown.bConsequetiveIndex;
                                discreteInptData.MoveBackPercentAccuracy.TotalTrial = TempRules.pctAccyMoveDown.iTotalInstance;
                                discreteInptData.MoveBackPercentAccuracy.FailureNeeded = TempRules.pctAccyMoveDown.iTotalCorrectInstance;
                                discreteInptData.MoveBackPercentAccuracy.bIOAReqd = TempRules.pctAccyMoveDown.bIOARequird;
                                discreteInptData.MoveBackPercentAccuracy.bMultiTchr = TempRules.pctAccyMoveDown.bMultiTeacherRequired;
                                discreteInptData.MoveBackPercentAccuracy.ConsecutiveAverageFailure = TempRules.pctAccyMoveDown.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                                discreteInptData.MoveBackPercentAccuracy.ConsecutiveAverageFailValue = TempRules.pctAccyMoveDown.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                                discreteInptData.MoveBackPercentIndependence.BarCondition = TempRules.pctIndMoveDown.iScoreRequired;
                                discreteInptData.MoveBackPercentIndependence.ConsecutiveFailures = TempRules.pctIndMoveDown.bConsequetiveIndex;
                                discreteInptData.MoveBackPercentIndependence.TotalTrial = TempRules.pctIndMoveDown.iTotalInstance;
                                discreteInptData.MoveBackPercentIndependence.FailureNeeded = TempRules.pctIndMoveDown.iTotalCorrectInstance;
                                discreteInptData.MoveBackPercentIndependence.bIOAReqd = TempRules.pctIndMoveDown.bIOARequird;
                                discreteInptData.MoveBackPercentIndependence.bMultiTchr = TempRules.pctIndMoveDown.bMultiTeacherRequired;
                                discreteInptData.MoveBackPercentIndependence.ConsecutiveAverageFailure = TempRules.pctIndMoveDown.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                                discreteInptData.MoveBackPercentIndependence.ConsecutiveAverageFailValue = TempRules.pctIndMoveDown.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                                discreteInptData.PercentAllIndependence.BarCondition = TempRules.pctIndAllMoveUp.iScoreRequired;
                                discreteInptData.PercentAllIndependence.ConsecutiveSuccess = TempRules.pctIndAllMoveUp.bConsequetiveIndex;
                                discreteInptData.PercentAllIndependence.TotalTrial = TempRules.pctIndAllMoveUp.iTotalInstance;
                                discreteInptData.PercentAllIndependence.SuccessNeeded = TempRules.pctIndAllMoveUp.iTotalCorrectInstance;
                                discreteInptData.PercentAllIndependence.bIOAReqd = TempRules.pctIndAllMoveUp.bIOARequird;
                                discreteInptData.PercentAllIndependence.bMultiTchr = TempRules.pctIndAllMoveUp.bMultiTeacherRequired;
                                discreteInptData.PercentAllIndependence.ConsecutiveAverage = TempRules.pctIndAllMoveUp.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                                discreteInptData.PercentAllIndependence.ConsecutiveAverageValue = TempRules.pctIndAllMoveUp.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                                discreteInptData.MoveBackPercentAllIndependence.BarCondition = TempRules.pctIndAllMoveDown.iScoreRequired;
                                discreteInptData.MoveBackPercentAllIndependence.ConsecutiveFailures = TempRules.pctIndAllMoveDown.bConsequetiveIndex;
                                discreteInptData.MoveBackPercentAllIndependence.TotalTrial = TempRules.pctIndAllMoveDown.iTotalInstance;
                                discreteInptData.MoveBackPercentAllIndependence.FailureNeeded = TempRules.pctIndAllMoveDown.iTotalCorrectInstance;
                                discreteInptData.MoveBackPercentAllIndependence.bIOAReqd = TempRules.pctIndAllMoveDown.bIOARequird;
                                discreteInptData.MoveBackPercentAllIndependence.bMultiTchr = TempRules.pctIndAllMoveDown.bMultiTeacherRequired;
                                discreteInptData.MoveBackPercentAllIndependence.ConsecutiveAverageFailure = TempRules.pctIndAllMoveDown.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                                discreteInptData.MoveBackPercentAllIndependence.ConsecutiveAverageFailValue = TempRules.pctIndAllMoveDown.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                                discreteInptData.AvgDurationMoveUp.BarCondition = TempRules.pctAvgDurationMoveUp.iScoreRequired;
                                discreteInptData.AvgDurationMoveUp.ConsecutiveSuccess = TempRules.pctAvgDurationMoveUp.bConsequetiveIndex;
                                discreteInptData.AvgDurationMoveUp.TotalTrial = TempRules.pctAvgDurationMoveUp.iTotalInstance;
                                discreteInptData.AvgDurationMoveUp.SuccessNeeded = TempRules.pctAvgDurationMoveUp.iTotalCorrectInstance;
                                discreteInptData.AvgDurationMoveUp.bIOAReqd = TempRules.pctAvgDurationMoveUp.bIOARequird;
                                discreteInptData.AvgDurationMoveUp.bMultiTchr = TempRules.pctAvgDurationMoveUp.bMultiTeacherRequired;
                                discreteInptData.AvgDurationMoveUp.ConsecutiveAverage = TempRules.pctAvgDurationMoveUp.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                                discreteInptData.AvgDurationMoveUp.ConsecutiveAverageValue = TempRules.pctAvgDurationMoveUp.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                                discreteInptData.TotalDurationMoveUp.BarCondition = TempRules.pctTotalDurationMoveUp.iScoreRequired;
                                discreteInptData.TotalDurationMoveUp.ConsecutiveSuccess = TempRules.pctTotalDurationMoveUp.bConsequetiveIndex;
                                discreteInptData.TotalDurationMoveUp.TotalTrial = TempRules.pctTotalDurationMoveUp.iTotalInstance;
                                discreteInptData.TotalDurationMoveUp.SuccessNeeded = TempRules.pctTotalDurationMoveUp.iTotalCorrectInstance;
                                discreteInptData.TotalDurationMoveUp.bIOAReqd = TempRules.pctTotalDurationMoveUp.bIOARequird;
                                discreteInptData.TotalDurationMoveUp.bMultiTchr = TempRules.pctTotalDurationMoveUp.bMultiTeacherRequired;
                                discreteInptData.TotalDurationMoveUp.ConsecutiveAverage = TempRules.pctTotalDurationMoveUp.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                                discreteInptData.TotalDurationMoveUp.ConsecutiveAverageValue = TempRules.pctTotalDurationMoveUp.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                                discreteInptData.FrequencyMoveUp.BarCondition = TempRules.pctFrequencyMoveUp.iScoreRequired;
                                discreteInptData.FrequencyMoveUp.ConsecutiveSuccess = TempRules.pctFrequencyMoveUp.bConsequetiveIndex;
                                discreteInptData.FrequencyMoveUp.TotalTrial = TempRules.pctFrequencyMoveUp.iTotalInstance;
                                discreteInptData.FrequencyMoveUp.SuccessNeeded = TempRules.pctFrequencyMoveUp.iTotalCorrectInstance;
                                discreteInptData.FrequencyMoveUp.bIOAReqd = TempRules.pctFrequencyMoveUp.bIOARequird;
                                discreteInptData.FrequencyMoveUp.bMultiTchr = TempRules.pctFrequencyMoveUp.bMultiTeacherRequired;
                                discreteInptData.FrequencyMoveUp.ConsecutiveAverage = TempRules.pctFrequencyMoveUp.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                                discreteInptData.FrequencyMoveUp.ConsecutiveAverageValue = TempRules.pctFrequencyMoveUp.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                                discreteInptData.AvgDurationMoveDown.BarCondition = TempRules.pctAvgDurationMoveDown.iScoreRequired;
                                discreteInptData.AvgDurationMoveDown.ConsecutiveFailures = TempRules.pctAvgDurationMoveDown.bConsequetiveIndex;
                                discreteInptData.AvgDurationMoveDown.TotalTrial = TempRules.pctAvgDurationMoveDown.iTotalInstance;
                                discreteInptData.AvgDurationMoveDown.FailureNeeded = TempRules.pctAvgDurationMoveDown.iTotalCorrectInstance;
                                discreteInptData.AvgDurationMoveDown.bIOAReqd = TempRules.pctAvgDurationMoveDown.bIOARequird;
                                discreteInptData.AvgDurationMoveDown.bMultiTchr = TempRules.pctAvgDurationMoveDown.bMultiTeacherRequired;
                                discreteInptData.AvgDurationMoveDown.ConsecutiveAverageFailure = TempRules.pctAvgDurationMoveDown.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                                discreteInptData.AvgDurationMoveDown.ConsecutiveAverageFailValue = TempRules.pctAvgDurationMoveDown.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                                discreteInptData.TotalDurationMoveDown.BarCondition = TempRules.pctTotalDurationMoveDown.iScoreRequired;
                                discreteInptData.TotalDurationMoveDown.ConsecutiveFailures = TempRules.pctTotalDurationMoveDown.bConsequetiveIndex;
                                discreteInptData.TotalDurationMoveDown.TotalTrial = TempRules.pctTotalDurationMoveDown.iTotalInstance;
                                discreteInptData.TotalDurationMoveDown.FailureNeeded = TempRules.pctTotalDurationMoveDown.iTotalCorrectInstance;
                                discreteInptData.TotalDurationMoveDown.bIOAReqd = TempRules.pctTotalDurationMoveDown.bIOARequird;
                                discreteInptData.TotalDurationMoveDown.bMultiTchr = TempRules.pctTotalDurationMoveDown.bMultiTeacherRequired;
                                discreteInptData.TotalDurationMoveDown.ConsecutiveAverageFailure = TempRules.pctTotalDurationMoveDown.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                                discreteInptData.TotalDurationMoveDown.ConsecutiveAverageFailValue = TempRules.pctTotalDurationMoveDown.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                                discreteInptData.FrequencyMoveDown.BarCondition = TempRules.pctFrequencyMoveDown.iScoreRequired;
                                discreteInptData.FrequencyMoveDown.ConsecutiveFailures = TempRules.pctFrequencyMoveDown.bConsequetiveIndex;
                                discreteInptData.FrequencyMoveDown.TotalTrial = TempRules.pctFrequencyMoveDown.iTotalInstance;
                                discreteInptData.FrequencyMoveDown.FailureNeeded = TempRules.pctFrequencyMoveDown.iTotalCorrectInstance;
                                discreteInptData.FrequencyMoveDown.bIOAReqd = TempRules.pctFrequencyMoveDown.bIOARequird;
                                discreteInptData.FrequencyMoveDown.bMultiTchr = TempRules.pctFrequencyMoveDown.bMultiTeacherRequired;
                                discreteInptData.FrequencyMoveDown.ConsecutiveAverageFailure = TempRules.pctFrequencyMoveDown.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                                discreteInptData.FrequencyMoveDown.ConsecutiveAverageFailValue = TempRules.pctFrequencyMoveDown.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                                discreteInptData.SetTotalCorrectMoveUp.BarCondition = TempRules.pctTotalCorrectMoveUp.iScoreRequired;
                                discreteInptData.SetTotalCorrectMoveUp.ConsecutiveSuccess = TempRules.pctTotalCorrectMoveUp.bConsequetiveIndex;
                                discreteInptData.SetTotalCorrectMoveUp.TotalTrial = TempRules.pctTotalCorrectMoveUp.iTotalInstance;
                                discreteInptData.SetTotalCorrectMoveUp.SuccessNeeded = TempRules.pctTotalCorrectMoveUp.iTotalCorrectInstance;
                                discreteInptData.SetTotalCorrectMoveUp.bIOAReqd = TempRules.pctTotalCorrectMoveUp.bIOARequird;
                                discreteInptData.SetTotalCorrectMoveUp.bMultiTchr = TempRules.pctTotalCorrectMoveUp.bMultiTeacherRequired;
                                discreteInptData.SetTotalCorrectMoveUp.ConsecutiveAverage = TempRules.pctTotalCorrectMoveUp.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                                discreteInptData.SetTotalCorrectMoveUp.ConsecutiveAverageValue = TempRules.pctTotalCorrectMoveUp.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                                discreteInptData.SetTotalCorrectMoveBack.BarCondition = TempRules.pctTotalCorrectMoveDown.iScoreRequired;
                                discreteInptData.SetTotalCorrectMoveBack.ConsecutiveFailures = TempRules.pctTotalCorrectMoveDown.bConsequetiveIndex;
                                discreteInptData.SetTotalCorrectMoveBack.TotalTrial = TempRules.pctTotalCorrectMoveDown.iTotalInstance;
                                discreteInptData.SetTotalCorrectMoveBack.FailureNeeded = TempRules.pctTotalCorrectMoveDown.iTotalCorrectInstance;
                                discreteInptData.SetTotalCorrectMoveBack.bIOAReqd = TempRules.pctTotalCorrectMoveDown.bIOARequird;
                                discreteInptData.SetTotalCorrectMoveBack.bMultiTchr = TempRules.pctTotalCorrectMoveDown.bMultiTeacherRequired;
                                discreteInptData.SetTotalCorrectMoveBack.ConsecutiveAverageFailure = TempRules.pctTotalCorrectMoveDown.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                                discreteInptData.SetTotalCorrectMoveBack.ConsecutiveAverageFailValue = TempRules.pctTotalCorrectMoveDown.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                                discreteInptData.SetTotalIncorrectMoveBack.BarCondition = TempRules.pctTotalIncorrectMoveDown.iScoreRequired;
                                discreteInptData.SetTotalIncorrectMoveBack.ConsecutiveFailures = TempRules.pctTotalIncorrectMoveDown.bConsequetiveIndex;
                                discreteInptData.SetTotalIncorrectMoveBack.TotalTrial = TempRules.pctTotalIncorrectMoveDown.iTotalInstance;
                                discreteInptData.SetTotalIncorrectMoveBack.FailureNeeded = TempRules.pctTotalIncorrectMoveDown.iTotalCorrectInstance;
                                discreteInptData.SetTotalIncorrectMoveBack.bIOAReqd = TempRules.pctTotalIncorrectMoveDown.bIOARequird;
                                discreteInptData.SetTotalIncorrectMoveBack.bMultiTchr = TempRules.pctTotalIncorrectMoveDown.bMultiTeacherRequired;
                                discreteInptData.SetTotalIncorrectMoveBack.ConsecutiveAverageFailure = TempRules.pctTotalIncorrectMoveDown.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                                discreteInptData.SetTotalIncorrectMoveBack.ConsecutiveAverageFailValue = TempRules.pctTotalIncorrectMoveDown.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                                /* discreteInptData.IOARequired = TempRules.bIOARequird;
                                discreteInptData.MultiTeacherRequired = TempRules.bMultiTeacherRequired;*/
                            }
                        }
                        #endregion
                        #region promptrules
                        TempRules = new Rules();
                        TempRules = GetPromptRules(oTemp.TemplateId, iColId);
                        if (TempRules.count > 0)
                        {
                            bPrompt = true;
                            discreteInptData.PromptHirecharchy = true;
                            disRuleNAChk = true;
                            //Liju
                            bPromptMoveUpIOA = bPromptMoveUpIOA | TempRules.pctIndMoveUp.bIOARequird | TempRules.pctAccyMoveUp.bIOARequird | TempRules.pctTotalDurationMoveUp.bIOARequird | TempRules.pctAvgDurationMoveUp.bIOARequird | TempRules.pctFrequencyMoveUp.bIOARequird | TempRules.pctCustomMoveUp.bIOARequird;
                            bPromptMoveUpMultiTecher = bPromptMoveUpMultiTecher | TempRules.pctIndMoveUp.bMultiTeacherRequired | TempRules.pctAccyMoveUp.bMultiTeacherRequired | TempRules.pctTotalDurationMoveUp.bMultiTeacherRequired | TempRules.pctAvgDurationMoveUp.bMultiTeacherRequired | TempRules.pctFrequencyMoveUp.bMultiTeacherRequired | TempRules.pctCustomMoveUp.bMultiTeacherRequired;
                            bPromptMoveDownIOA = bPromptMoveDownIOA | TempRules.pctIndMoveDown.bIOARequird | TempRules.pctAccyMoveDown.bIOARequird | TempRules.pctTotalDurationMoveDown.bIOARequird | TempRules.pctAvgDurationMoveDown.bIOARequird | TempRules.pctFrequencyMoveDown.bIOARequird | TempRules.pctCustomMoveDown.bIOARequird;
                            bPromptMoveDownMultiTecher = bPromptMoveDownMultiTecher | TempRules.pctIndMoveDown.bMultiTeacherRequired | TempRules.pctAccyMoveDown.bMultiTeacherRequired | TempRules.pctTotalDurationMoveDown.bMultiTeacherRequired | TempRules.pctAvgDurationMoveDown.bMultiTeacherRequired | TempRules.pctFrequencyMoveDown.bMultiTeacherRequired | TempRules.pctCustomMoveDown.bMultiTeacherRequired;


                            discreteInptData.PromptPercentAccuracy.BarCondition = TempRules.pctAccyMoveUp.iScoreRequired;
                            discreteInptData.PromptPercentAccuracy.ConsecutiveSuccess = TempRules.pctAccyMoveUp.bConsequetiveIndex;
                            discreteInptData.PromptPercentAccuracy.TotalTrial = TempRules.pctAccyMoveUp.iTotalInstance;
                            discreteInptData.PromptPercentAccuracy.SuccessNeeded = TempRules.pctAccyMoveUp.iTotalCorrectInstance;
                            discreteInptData.PromptPercentAccuracy.bIOAReqd = TempRules.pctAccyMoveUp.bIOARequird;
                            discreteInptData.PromptPercentAccuracy.bMultiTchr = TempRules.pctAccyMoveUp.bMultiTeacherRequired;
                            discreteInptData.PromptPercentAccuracy.ConsecutiveAverage = TempRules.pctAccyMoveUp.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                            discreteInptData.PromptPercentAccuracy.ConsecutiveAverageValue = TempRules.pctAccyMoveUp.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                            discreteInptData.PromptPercentIndependence.BarCondition = TempRules.pctIndMoveUp.iScoreRequired;
                            discreteInptData.PromptPercentIndependence.ConsecutiveSuccess = TempRules.pctIndMoveUp.bConsequetiveIndex;
                            discreteInptData.PromptPercentIndependence.TotalTrial = TempRules.pctIndMoveUp.iTotalInstance;
                            discreteInptData.PromptPercentIndependence.SuccessNeeded = TempRules.pctIndMoveUp.iTotalCorrectInstance;
                            discreteInptData.PromptPercentIndependence.bIOAReqd = TempRules.pctIndMoveUp.bIOARequird;
                            discreteInptData.PromptPercentIndependence.bMultiTchr = TempRules.pctIndMoveUp.bMultiTeacherRequired;
                            discreteInptData.PromptPercentIndependence.ConsecutiveAverage = TempRules.pctIndMoveUp.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                            discreteInptData.PromptPercentIndependence.ConsecutiveAverageValue = TempRules.pctIndMoveUp.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                            discreteInptData.MoveBackPromptPercentAccuracy.BarCondition = TempRules.pctAccyMoveDown.iScoreRequired;
                            discreteInptData.MoveBackPromptPercentAccuracy.ConsecutiveFailures = TempRules.pctAccyMoveDown.bConsequetiveIndex;
                            discreteInptData.MoveBackPromptPercentAccuracy.TotalTrial = TempRules.pctAccyMoveDown.iTotalInstance;
                            discreteInptData.MoveBackPromptPercentAccuracy.FailureNeeded = TempRules.pctAccyMoveDown.iTotalCorrectInstance;
                            discreteInptData.MoveBackPromptPercentAccuracy.bIOAReqd = TempRules.pctAccyMoveDown.bIOARequird;
                            discreteInptData.MoveBackPromptPercentAccuracy.bMultiTchr = TempRules.pctAccyMoveDown.bMultiTeacherRequired;
                            discreteInptData.MoveBackPromptPercentAccuracy.ConsecutiveAverageFailure = TempRules.pctAccyMoveDown.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                            discreteInptData.MoveBackPromptPercentAccuracy.ConsecutiveAverageFailValue = TempRules.pctAccyMoveDown.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                            discreteInptData.MoveBackPromptPercentIndependance.BarCondition = TempRules.pctIndMoveDown.iScoreRequired;
                            discreteInptData.MoveBackPromptPercentIndependance.ConsecutiveFailures = TempRules.pctIndMoveDown.bConsequetiveIndex;
                            discreteInptData.MoveBackPromptPercentIndependance.TotalTrial = TempRules.pctIndMoveDown.iTotalInstance;
                            discreteInptData.MoveBackPromptPercentIndependance.FailureNeeded = TempRules.pctIndMoveDown.iTotalCorrectInstance;
                            discreteInptData.MoveBackPromptPercentIndependance.bIOAReqd = TempRules.pctIndMoveDown.bIOARequird;
                            discreteInptData.MoveBackPromptPercentIndependance.bMultiTchr = TempRules.pctIndMoveDown.bMultiTeacherRequired;
                            discreteInptData.MoveBackPromptPercentIndependance.ConsecutiveAverageFailure = TempRules.pctIndMoveDown.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                            discreteInptData.MoveBackPromptPercentIndependance.ConsecutiveAverageFailValue = TempRules.pctIndMoveDown.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                            discreteInptData.PromptPercentAllIndependence.BarCondition = TempRules.pctIndAllMoveUp.iScoreRequired;
                            discreteInptData.PromptPercentAllIndependence.ConsecutiveSuccess = TempRules.pctIndAllMoveUp.bConsequetiveIndex;
                            discreteInptData.PromptPercentAllIndependence.TotalTrial = TempRules.pctIndAllMoveUp.iTotalInstance;
                            discreteInptData.PromptPercentAllIndependence.SuccessNeeded = TempRules.pctIndAllMoveUp.iTotalCorrectInstance;
                            discreteInptData.PromptPercentAllIndependence.bIOAReqd = TempRules.pctIndAllMoveUp.bIOARequird;
                            discreteInptData.PromptPercentAllIndependence.bMultiTchr = TempRules.pctIndAllMoveUp.bMultiTeacherRequired;
                            discreteInptData.PromptPercentAllIndependence.ConsecutiveAverage = TempRules.pctIndAllMoveUp.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                            discreteInptData.PromptPercentAllIndependence.ConsecutiveAverageValue = TempRules.pctIndAllMoveUp.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                            discreteInptData.MoveBackPromptPercentAllIndependance.BarCondition = TempRules.pctIndAllMoveDown.iScoreRequired;
                            discreteInptData.MoveBackPromptPercentAllIndependance.ConsecutiveFailures = TempRules.pctIndAllMoveDown.bConsequetiveIndex;
                            discreteInptData.MoveBackPromptPercentAllIndependance.TotalTrial = TempRules.pctIndAllMoveDown.iTotalInstance;
                            discreteInptData.MoveBackPromptPercentAllIndependance.FailureNeeded = TempRules.pctIndAllMoveDown.iTotalCorrectInstance;
                            discreteInptData.MoveBackPromptPercentAllIndependance.bIOAReqd = TempRules.pctIndAllMoveDown.bIOARequird;
                            discreteInptData.MoveBackPromptPercentAllIndependance.bMultiTchr = TempRules.pctIndAllMoveDown.bMultiTeacherRequired;
                            discreteInptData.MoveBackPromptPercentAllIndependance.ConsecutiveAverageFailure = TempRules.pctIndAllMoveDown.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                            discreteInptData.MoveBackPromptPercentAllIndependance.ConsecutiveAverageFailValue = TempRules.pctIndAllMoveDown.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                            discreteInptData.AvgDurationMoveUp.BarCondition = TempRules.pctAvgDurationMoveUp.iScoreRequired;
                            discreteInptData.AvgDurationMoveUp.ConsecutiveSuccess = TempRules.pctAvgDurationMoveUp.bConsequetiveIndex;
                            discreteInptData.AvgDurationMoveUp.TotalTrial = TempRules.pctAvgDurationMoveUp.iTotalInstance;
                            discreteInptData.AvgDurationMoveUp.SuccessNeeded = TempRules.pctAvgDurationMoveUp.iTotalCorrectInstance;
                            discreteInptData.AvgDurationMoveUp.bIOAReqd = TempRules.pctAvgDurationMoveUp.bIOARequird;
                            discreteInptData.AvgDurationMoveUp.bMultiTchr = TempRules.pctAvgDurationMoveUp.bMultiTeacherRequired;
                            discreteInptData.AvgDurationMoveUp.ConsecutiveAverage = TempRules.pctAvgDurationMoveUp.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                            discreteInptData.AvgDurationMoveUp.ConsecutiveAverageValue = TempRules.pctAvgDurationMoveUp.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                            discreteInptData.TotalDurationMoveUp.BarCondition = TempRules.pctTotalDurationMoveUp.iScoreRequired;
                            discreteInptData.TotalDurationMoveUp.ConsecutiveSuccess = TempRules.pctTotalDurationMoveUp.bConsequetiveIndex;
                            discreteInptData.TotalDurationMoveUp.TotalTrial = TempRules.pctTotalDurationMoveUp.iTotalInstance;
                            discreteInptData.TotalDurationMoveUp.SuccessNeeded = TempRules.pctTotalDurationMoveUp.iTotalCorrectInstance;
                            discreteInptData.TotalDurationMoveUp.bIOAReqd = TempRules.pctTotalDurationMoveUp.bIOARequird;
                            discreteInptData.TotalDurationMoveUp.bMultiTchr = TempRules.pctTotalDurationMoveUp.bMultiTeacherRequired;
                            discreteInptData.TotalDurationMoveUp.ConsecutiveAverage = TempRules.pctTotalDurationMoveUp.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                            discreteInptData.TotalDurationMoveUp.ConsecutiveAverageValue = TempRules.pctTotalDurationMoveUp.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                            discreteInptData.FrequencyMoveUp.BarCondition = TempRules.pctFrequencyMoveUp.iScoreRequired;
                            discreteInptData.FrequencyMoveUp.ConsecutiveSuccess = TempRules.pctFrequencyMoveUp.bConsequetiveIndex;
                            discreteInptData.FrequencyMoveUp.TotalTrial = TempRules.pctFrequencyMoveUp.iTotalInstance;
                            discreteInptData.FrequencyMoveUp.SuccessNeeded = TempRules.pctFrequencyMoveUp.iTotalCorrectInstance;
                            discreteInptData.FrequencyMoveUp.bIOAReqd = TempRules.pctFrequencyMoveUp.bIOARequird;
                            discreteInptData.FrequencyMoveUp.bMultiTchr = TempRules.pctFrequencyMoveUp.bMultiTeacherRequired;
                            discreteInptData.FrequencyMoveUp.ConsecutiveAverage = TempRules.pctFrequencyMoveUp.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                            discreteInptData.FrequencyMoveUp.ConsecutiveAverageValue = TempRules.pctFrequencyMoveUp.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                            discreteInptData.AvgDurationMoveDown.BarCondition = TempRules.pctAvgDurationMoveDown.iScoreRequired;
                            discreteInptData.AvgDurationMoveDown.ConsecutiveFailures = TempRules.pctAvgDurationMoveDown.bConsequetiveIndex;
                            discreteInptData.AvgDurationMoveDown.TotalTrial = TempRules.pctAvgDurationMoveDown.iTotalInstance;
                            discreteInptData.AvgDurationMoveDown.FailureNeeded = TempRules.pctAvgDurationMoveDown.iTotalCorrectInstance;
                            discreteInptData.AvgDurationMoveDown.bIOAReqd = TempRules.pctAvgDurationMoveDown.bIOARequird;
                            discreteInptData.AvgDurationMoveDown.bMultiTchr = TempRules.pctAvgDurationMoveDown.bMultiTeacherRequired;
                            discreteInptData.AvgDurationMoveDown.ConsecutiveAverageFailure = TempRules.pctAvgDurationMoveDown.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                            discreteInptData.AvgDurationMoveDown.ConsecutiveAverageFailValue = TempRules.pctAvgDurationMoveDown.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                            discreteInptData.TotalDurationMoveDown.BarCondition = TempRules.pctTotalDurationMoveDown.iScoreRequired;
                            discreteInptData.TotalDurationMoveDown.ConsecutiveFailures = TempRules.pctTotalDurationMoveDown.bConsequetiveIndex;
                            discreteInptData.TotalDurationMoveDown.TotalTrial = TempRules.pctTotalDurationMoveDown.iTotalInstance;
                            discreteInptData.TotalDurationMoveDown.FailureNeeded = TempRules.pctTotalDurationMoveDown.iTotalCorrectInstance;
                            discreteInptData.TotalDurationMoveDown.bIOAReqd = TempRules.pctTotalDurationMoveDown.bIOARequird;
                            discreteInptData.TotalDurationMoveDown.bMultiTchr = TempRules.pctTotalDurationMoveDown.bMultiTeacherRequired;
                            discreteInptData.TotalDurationMoveDown.ConsecutiveAverageFailure = TempRules.pctTotalDurationMoveDown.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                            discreteInptData.TotalDurationMoveDown.ConsecutiveAverageFailValue = TempRules.pctTotalDurationMoveDown.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                            discreteInptData.FrequencyMoveDown.BarCondition = TempRules.pctFrequencyMoveDown.iScoreRequired;
                            discreteInptData.FrequencyMoveDown.ConsecutiveFailures = TempRules.pctFrequencyMoveDown.bConsequetiveIndex;
                            discreteInptData.FrequencyMoveDown.TotalTrial = TempRules.pctFrequencyMoveDown.iTotalInstance;
                            discreteInptData.FrequencyMoveDown.FailureNeeded = TempRules.pctFrequencyMoveDown.iTotalCorrectInstance;
                            discreteInptData.FrequencyMoveDown.bIOAReqd = TempRules.pctFrequencyMoveDown.bIOARequird;
                            discreteInptData.FrequencyMoveDown.bMultiTchr = TempRules.pctFrequencyMoveDown.bMultiTeacherRequired;
                            discreteInptData.FrequencyMoveDown.ConsecutiveAverageFailure = TempRules.pctFrequencyMoveDown.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                            discreteInptData.FrequencyMoveDown.ConsecutiveAverageFailValue = TempRules.pctFrequencyMoveDown.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//


                            discreteInptData.PromptTotalCorrectMoveUp.BarCondition = TempRules.pctTotalCorrectMoveUp.iScoreRequired;
                            discreteInptData.PromptTotalCorrectMoveUp.ConsecutiveSuccess = TempRules.pctTotalCorrectMoveUp.bConsequetiveIndex;
                            discreteInptData.PromptTotalCorrectMoveUp.TotalTrial = TempRules.pctTotalCorrectMoveUp.iTotalInstance;
                            discreteInptData.PromptTotalCorrectMoveUp.SuccessNeeded = TempRules.pctTotalCorrectMoveUp.iTotalCorrectInstance;
                            discreteInptData.PromptTotalCorrectMoveUp.bIOAReqd = TempRules.pctTotalCorrectMoveUp.bIOARequird;
                            discreteInptData.PromptTotalCorrectMoveUp.bMultiTchr = TempRules.pctTotalCorrectMoveUp.bMultiTeacherRequired;
                            discreteInptData.PromptTotalCorrectMoveUp.ConsecutiveAverage = TempRules.pctTotalCorrectMoveUp.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                            discreteInptData.PromptTotalCorrectMoveUp.ConsecutiveAverageValue = TempRules.pctTotalCorrectMoveUp.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                            discreteInptData.PromptTotalCorrectMoveBack.BarCondition = TempRules.pctTotalCorrectMoveDown.iScoreRequired;
                            discreteInptData.PromptTotalCorrectMoveBack.ConsecutiveFailures = TempRules.pctTotalCorrectMoveDown.bConsequetiveIndex;
                            discreteInptData.PromptTotalCorrectMoveBack.TotalTrial = TempRules.pctTotalCorrectMoveDown.iTotalInstance;
                            discreteInptData.PromptTotalCorrectMoveBack.FailureNeeded = TempRules.pctTotalCorrectMoveDown.iTotalCorrectInstance;
                            discreteInptData.PromptTotalCorrectMoveBack.bIOAReqd = TempRules.pctTotalCorrectMoveDown.bIOARequird;
                            discreteInptData.PromptTotalCorrectMoveBack.bMultiTchr = TempRules.pctTotalCorrectMoveDown.bMultiTeacherRequired;
                            discreteInptData.PromptTotalCorrectMoveBack.ConsecutiveAverageFailure = TempRules.pctTotalCorrectMoveDown.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                            discreteInptData.PromptTotalCorrectMoveBack.ConsecutiveAverageFailValue = TempRules.pctTotalCorrectMoveDown.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                            discreteInptData.PromptTotalIncorrectMoveBack.BarCondition = TempRules.pctTotalIncorrectMoveDown.iScoreRequired;
                            discreteInptData.PromptTotalIncorrectMoveBack.ConsecutiveFailures = TempRules.pctTotalIncorrectMoveDown.bConsequetiveIndex;
                            discreteInptData.PromptTotalIncorrectMoveBack.TotalTrial = TempRules.pctTotalIncorrectMoveDown.iTotalInstance;
                            discreteInptData.PromptTotalIncorrectMoveBack.FailureNeeded = TempRules.pctTotalIncorrectMoveDown.iTotalCorrectInstance;
                            discreteInptData.PromptTotalIncorrectMoveBack.bIOAReqd = TempRules.pctTotalIncorrectMoveDown.bIOARequird;
                            discreteInptData.PromptTotalIncorrectMoveBack.bMultiTchr = TempRules.pctTotalIncorrectMoveDown.bMultiTeacherRequired;
                            discreteInptData.PromptTotalIncorrectMoveBack.ConsecutiveAverageFailure = TempRules.pctTotalIncorrectMoveDown.bConsecutiveAvg; //--- [New Criteria] May 2020 ---//
                            discreteInptData.PromptTotalIncorrectMoveBack.ConsecutiveAverageFailValue = TempRules.pctTotalIncorrectMoveDown.iConsecutiveAvgval; //--- [New Criteria] May 2020 ---//

                            /*  if (!discreteInptData.IOARequired)
                                discreteInptData.IOARequired = TempRules.bIOARequird;
                            if (!discreteInptData.MultiTeacherRequired)
                                discreteInptData.MultiTeacherRequired = TempRules.bMultiTeacherRequired;*/
                        }
                        #endregion
                        discreteCols.Add(sColName, discreteInptData);

                        //if (discreteInptData.PromptHirecharchy == false)
                        //{
                        //    prompt = "-,+";
                        //    //promptUsed = prompt.Split(',');
                        //    sCurrentPrompt = "+";
                        //    TargetPrompt = "+";
                        //    promptUsed = new string[1];
                        //    promptUsed[0] = "+";
                        //}
                        //else
                        //{

                        Prompt[] arPromtList = GetPrompts(oTemp.TemplateId);

                        promptUsed = new string[arPromtList.Count()];
                        LessonpromptUsed = new string[arPromtList.Count()];
                        LessonpromptUsedOther = new string[arPromtList.Count()];
                        bPromtHirchy = true;
                        for (int iCount = 0; iCount < arPromtList.Count(); iCount++)
                        {
                            promptUsed[iCount] = arPromtList[iCount].promptId.ToString();
                            LessonpromptUsed[iCount] = arPromtList[iCount].promptId.ToString();
                            LessonpromptUsedOther[iCount] = arPromtList[iCount].promptId.ToString();
                            if (!String.IsNullOrEmpty(sCurrentLessonPrompt) && sCurrentLessonPrompt != "0")
                            {
                                if (arPromtList[iCount].promptId.ToString() == sCurrentLessonPrompt)
                                    crntPrmtIndex = iCount;
                            }
                        }
                        if (promptUsed.Length > 0)
                        {
                            TargetPrompt = promptUsed[promptUsed.Length - 1];
                            LessonTargetPrompt = TargetPrompt;

                            if (String.IsNullOrEmpty(sCurrentLessonPrompt) || sCurrentLessonPrompt == "0")
                            {
                                sCurrentPrompt = promptUsed[0];
                                Session["sCurrentPrompt"] = sCurrentPrompt;
                                sCurrentLessonPrompt = sCurrentPrompt;
                            }
                        }
                        if (!discreteInptData.PromptHirecharchy)
                            bPromtHirchy = false;
                        //}

                        if (dr["ColTypeCd"].ToString() == "+/-")
                        {
                            prompt = "-,+";
                            //promptUsed = prompt.Split(',');
                            sCurrentPrompt = "+";
                            TargetPrompt = "+";
                            promptUsed = new string[1];
                            promptUsed[0] = "+";
                        }
                        string sEventType = "";
                        DiscreteTrials TrialLists = new DiscreteTrials();
                        reader.Close();
                        int counter = discreteCols.Count;
                        int ind = 0;
                        oDisc = new DiscreteSession();
                        TrialLists = oDisc.GetTrialLists(oSession.StudentId, oTemp.TemplateId, iCurrentSetId, iCurrentStep, discreteCols[sColName].RequiredSession(), sColName, false, hfPlusMinusResp.Value, coltypeCode, oDS.ChainType);
                        //if (discreteInptData.MultiTeacherRequired)
                        bMultyTchr = oDisc.MultiTeacherStatus(oSession.StudentId, oTemp.TemplateId);
                        // else
                        //    bMultyTchr = false;

                        // if (discreteInptData.IOARequired)
                        bIOA = oDisc.IOAStats(oSession.StudentId, oTemp.TemplateId);
                        // else
                        //     bIOA = false;
                        //Trials = trails.GetTrialLists(8, 1, ht[key].RequiredSession(), key);
                        discreteCols[sColName].SessionCount = TrialLists.sessionCount;
                        discreteCols[sColName].TrialCount = TrialLists.trialsCount;
                        discreteCols[sColName].PromptsUsed = promptUsed;
                        discreteCols[sColName].NoPromptsUsed = LessonpromptUsed;
                        discreteCols[sColName].sCurrentLessonPrompt = sCurrentLessonPrompt;
                        discreteCols[sColName].TotalSets = TrialLists.totalSet;
                        int reqSess = discreteCols[sColName].RequiredSession();
                        bool bcustMoveUp = false;
                        bool bCustMoveDown = false;
                        bool bTotDurationMoveUp = true;
                        bool bTotDurationMoveDown = true;
                        bool bPromptTotDurationMoveUp = true;
                        bool bPromptTotDurationMoveDown = true;

                        bool bAvgDurationMoveUp = true;
                        bool bAvgDurationMoveDown = true;
                        bool bPromptAvgDurationMoveUp = true;
                        bool bPromptAvgDurationMoveDown = true;

                        bool bFrequencyMoveUp = true;
                        bool bFrequencyMoveDown = true;
                        bool bPromptFrequencyMoveUp = true;
                        bool bPromptFrequencyMoveDown = true;

                        bool bIndallMoveUp = true;
                        bool bIndallMoveDown = true;
                        bool bPromptIndallMoveUp = true;
                        bool bPromptIndallMoveDown = true;
                        int MoveUpstat = 1;
                        string CompletionStatus = "";
                        // CompletionStatusSet = "";
                        bool FreqDurTextFlag = false;

                        if (dr["ColTypeCd"].ToString() == "Text")
                        {
                            DiscreteFreqDurTextFlag = true;


                        }

                        if (discreteCols[sColName].TrialCount == 0)
                        {
                            if (count - 1 == loop)
                            {
                                if (!disRuleNAChk && count == 1)
                                {
                                    return;
                                }
                            }
                            else
                            {
                                loop++;
                                continue;
                            }
                        }


                        //if (discreteCols[sColName].TrialCount == 0)
                        //{
                        //    return;
                        //}

                        string strPromptCriteria = "";
                        int promptUp = 0, promptDown = 0;
                        strPromptCriteria = "SELECT  Count(DR.DSTempRuleId)	FROM DSTempHdr DT  INNER JOIN DSTempSetCol DST ON DT.DSTempHdrId = DST.DSTempHdrId " +
                            "INNER JOIN DSTempSetColCalc DC ON DST.DSTempSetColId = DC.DSTempSetColId  INNER JOIN DSTempRule DR ON DR.DSTempSetColCalcId = DC.DSTempSetColCalcId " +
                            "WHERE (DT.DSTempHdrId =" + oTemp.TemplateId + ")AND DR.RuleType='PROMPT' AND DR.CriteriaType='MOVE UP' " +//AND DR.DSTempSetColId=" + iColId +
                            " AND DR.ActiveInd='A' AND DR.IsNA=1";
                        promptUp = Convert.ToInt32(oData.FetchValue(strPromptCriteria));
                        strPromptCriteria = "SELECT  Count(DR.DSTempRuleId)	FROM DSTempHdr DT  INNER JOIN DSTempSetCol DST ON DT.DSTempHdrId = DST.DSTempHdrId " +
                            "INNER JOIN DSTempSetColCalc DC ON DST.DSTempSetColId = DC.DSTempSetColId  INNER JOIN DSTempRule DR ON DR.DSTempSetColCalcId = DC.DSTempSetColCalcId " +
                            "WHERE (DT.DSTempHdrId =" + oTemp.TemplateId + ")AND DR.RuleType='PROMPT' AND DR.CriteriaType='MOVE DOWN' " +//AND DR.DSTempSetColId=" + iColId +
                            " AND DR.ActiveInd='A' AND DR.IsNA=1";
                        promptDown = Convert.ToInt32(oData.FetchValue(strPromptCriteria));
                        discreteCols[sColName].promptUp = promptUp;
                        discreteCols[sColName].promptDown = promptDown;

                        string strqry2 = " select case when'%Independent of All Steps' in(SELECT  DC.CalcType FROM DSTempHdr DT " +
                                        " INNER JOIN DSTempSetCol DST ON DT.DSTempHdrId = DST.DSTempHdrId " +
                                        "INNER JOIN DSTempSetColCalc DC ON DST.DSTempSetColId = DC.DSTempSetColId" +
                                        " WHERE DT.DSTempHdrId =" + oTemp.TemplateId + ") then 'true' else 'false' end";
                        object colt2 = oData.FetchValue(strqry2);
                        //string h2 = colt2.ToString();
                        bool indtest = false;
                        TempRules = GetPromptRules(oTemp.TemplateId, iColId);
                        if (TempRules.pctIndAllMoveUp.iScoreRequired > 0)
                        {
                            indtest = true;
                        }
                        TempRules = GetStepRules(oTemp.TemplateId, iColId);
                        if (TempRules.pctIndAllMoveUp.iScoreRequired > 0)
                        {
                            indtest = true;
                        }
                        TempRules = GetSetRules(oTemp.TemplateId, iColId);
                        if (TempRules.pctIndAllMoveUp.iScoreRequired > 0)
                        {
                            indtest = true;
                        }

                        if (discreteCols[sColName].TrialCount > 0)
                        {
                            sesResult = new DiscreetTrial.Result[discreteCols.Count];
                            #region Text
                            if (dr["ColTypeCd"].ToString() == "Text")
                            {

                                TempRules = GetSetRules(oTemp.TemplateId, iColId);
                                colCalId = Convert.ToInt32(ViewState["colCalId"]);
                                if (TempRules.pctCustomMoveUp.iScoreRequired > 0)
                                {
                                    CompletionStatusSet = "";
                                    //int iStudentId, int colCalId, float iScoreRequired, int iSessonNumber,int iTotalCorrectInstance,bool bConsequetiveIndex, bool flag
                                    bool status = false;
                                    bcustMoveUp = ValidateUp(oSession.StudentId, colCalId, TempRules.pctCustomMoveUp.iScoreRequired, reqSess,
                                        TempRules.pctCustomMoveUp.iTotalCorrectInstance, TempRules.pctCustomMoveUp.bConsequetiveIndex, status);
                                    int setcount = TrialLists.totalSet;

                                    bRuleStatusIOA = oDisc.checkConditionIOA(bCustomMoveupIOA, bIOA);
                                    bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bCustomMoveupMultiTchr, bMultyTchr);
                                    if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                    {

                                        if (bcustMoveUp && bSetMoveUp)
                                        {
                                            if (oDS.CrntSetNbr < setcount)
                                                nextSet = oDS.CrntSetNbr + 1;
                                            if (oDS.CrntSetNbr == setcount)
                                            {
                                                nextSet = setcount;
                                                CompletionStatusSet = "COMPLETED";
                                            }
                                            bSetMoveUp = true;
                                            bSetMoveBack = false;
                                            GlobalSetMoveUp = true;
                                            GlobalSetMoveBack = false;
                                        }
                                        else
                                        {
                                            bSetMoveUp = false;
                                            //GlobalSetMoveUp = false;
                                        }
                                    }
                                }
                                if (TempRules.pctCustomMoveDown.iScoreRequired > 0)
                                {
                                    bool status = false;
                                    bCustMoveDown = ValidateDown(oSession.StudentId, colCalId, TempRules.pctCustomMoveDown.iScoreRequired, reqSess,
                                        TempRules.pctCustomMoveDown.iTotalCorrectInstance, TempRules.pctCustomMoveDown.bConsequetiveIndex, status);
                                    int setcount = TrialLists.totalSet;

                                    bRuleStatusIOA = oDisc.checkConditionIOA(bCustomMovedownIOA, bIOA);
                                    bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bCustomMovedownMultiTchr, bMultyTchr);
                                    if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                    {

                                        if (bCustMoveDown && bSetMoveBack)
                                        {
                                            if (oDS.CrntSetNbr <= setcount)
                                                nextSet = oDS.CrntSetNbr - 1;
                                            if (oDS.CrntSetNbr == 1)
                                                nextSet = 1;
                                            bSetMoveBack = true;
                                            bSetMoveUp = false;
                                            GlobalSetMoveBack = true;
                                            //GlobalSetMoveUp = false;
                                        }
                                        else
                                        {
                                            bSetMoveBack = false;
                                            GlobalSetMoveBack = false;
                                        }
                                    }


                                }
                                DiscreteFreqDurTextFlag = true;

                            }
                            #endregion
                            #region duration
                            else if (dr["ColTypeCd"].ToString() == "Duration")
                            {
                                int colId = Convert.ToInt32(dr["DSTempSetColId"]);
                                string selqry1 = "select Moveupstat from dstempsetcol DsCol inner join DSTempHdr Hdr on Hdr.DSTempHdrId=DsCol.DSTempHdrId where dsCol.DSTempHdrId=" + oTemp.TemplateId + " And DSTempSetColId= " + colId;
                                object stat = oData.FetchValue(selqry1);
                                if (stat != null)
                                    MoveUpstat = Convert.ToInt16(stat);
                                #region MoveUp in Less Than criteria- default
                                if (MoveUpstat == 1)
                                {
                                    TempRules = GetPromptRules(oTemp.TemplateId, iColId);

                                    if (TempRules.pctAvgDurationMoveUp.iScoreRequired == 0 || TempRules.pctAvgDurationMoveDown.iScoreRequired == 0)
                                    {
                                        freqdureloop++;
                                        bool status = true;
                                        //CompletionStatusSet = "";
                                        TempRules = GetSetRules(oTemp.TemplateId, iColId);
                                        avgDurationId = Convert.ToInt32(ViewState["avgDurationId"]);
                                        totDuraionId = Convert.ToInt32(ViewState["totDuraionId"]);
                                        if (TempRules.pctAvgDurationMoveUp.iScoreRequired > 0)
                                        {
                                            CompletionStatusSet = "";
                                            bAvgDurationMoveUp = ValidateUp(oSession.StudentId, avgDurationId, TempRules.pctAvgDurationMoveUp.iScoreRequired, reqSess,
                                                TempRules.pctAvgDurationMoveUp.iTotalCorrectInstance, TempRules.pctAvgDurationMoveUp.bConsequetiveIndex, status);
                                            int setcount = TrialLists.totalSet;

                                            bRuleStatusIOA = oDisc.checkConditionIOA(bAvgDurationMoveUpbIOAReqd, bIOA);
                                            bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bAvgDurationMoveUpbMultiTchr, bMultyTchr);
                                            if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                            {

                                                if (bAvgDurationMoveUp)
                                                {
                                                    if (oDS.CrntSetNbr < setcount)
                                                        nextSet = oDS.CrntSetNbr + 1;
                                                    if (oDS.CrntSetNbr == setcount)
                                                    {
                                                        nextSet = setcount;
                                                        CompletionStatusSet = "COMPLETED";
                                                    }
                                                    if (CompletionStatusSet == "COMPLETED")
                                                    {
                                                        bSetCompleted = true;
                                                        MaintenanceOrCompletion = true;
                                                    }
                                                    else
                                                    {
                                                        bSetCompleted = false;
                                                    }
                                                    if (bSetMoveUp && bAvgDurationMoveUp)
                                                    {
                                                        bSetMoveUp = true;
                                                        GlobalSetMoveUp = true;
                                                        if (bSetMoveUp == true && GlobalSetMoveUp == true)
                                                            bPrompt = true;
                                                    }
                                                }
                                            }



                                        }
                                        if (TempRules.pctAvgDurationMoveDown.iScoreRequired > 0)
                                        {
                                            bAvgDurationMoveDown = ValidateDown(oSession.StudentId, avgDurationId, TempRules.pctAvgDurationMoveDown.iScoreRequired, reqSess,
                                                TempRules.pctAvgDurationMoveDown.iTotalCorrectInstance, TempRules.pctAvgDurationMoveDown.bConsequetiveIndex, status);
                                            int setcount = TrialLists.totalSet;

                                            bRuleStatusIOA = oDisc.checkConditionIOA(bAvgDurationMoveDownbIOAReqd, bIOA);
                                            bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bAvgDurationMoveDownbMultiTchr, bMultyTchr);
                                            if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                            {

                                                if (bAvgDurationMoveDown)
                                                {
                                                    if (oDS.CrntSetNbr <= setcount)
                                                        nextSet = oDS.CrntSetNbr - 1;
                                                    if (oDS.CrntSetNbr == 1)
                                                        nextSet = 1;
                                                    if (bSetMoveBack && bAvgDurationMoveDown)
                                                    {
                                                        bSetMoveBack = true;
                                                        GlobalSetMoveBack = true;
                                                    }
                                                }
                                            }

                                        }
                                        DiscreteFreqDurTextFlag = true;
                                    }
                                    else
                                    {
                                        freqdureloop++;
                                        bool status = true;
                                        //CompletionStatusSet = "";
                                        avgDurationId = Convert.ToInt32(ViewState["avgDurationId"]);
                                        totDuraionId = Convert.ToInt32(ViewState["totDuraionId"]);
                                        TempRules = GetPromptRules(oTemp.TemplateId, iColId);

                                        //avg duration
                                        if (TempRules.pctAvgDurationMoveUp.iTotalCorrectInstance > 0)
                                        {
                                            if (promptUp >= 1)
                                                bPromptAvgDurationMoveUp = false;
                                            if (TempRules.pctAvgDurationMoveUp.iScoreRequired > 0)
                                            {
                                                bPromptAvgDurationMoveUp = ValidateUp(oSession.StudentId, avgDurationId, TempRules.pctAvgDurationMoveUp.iScoreRequired, reqSess,
                                                    TempRules.pctAvgDurationMoveUp.iTotalCorrectInstance, TempRules.pctAvgDurationMoveUp.bConsequetiveIndex, status);

                                                bRuleStatusIOA = oDisc.checkConditionIOA(bPromptMoveUpIOA, bIOA);
                                                bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bPromptMoveUpMultiTecher, bMultyTchr);
                                                if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                {
                                                    //bPromptFrequencyMoveUp = false;
                                                    if (bPromptAvgDurationMoveUp)
                                                    {
                                                        if (sCurrentPrompt != LessonpromptUsed[LessonpromptUsed.Length - 1])
                                                        {
                                                            int iPromptIndex = DiscreetTrial.Model.PromptIndex(LessonpromptUsed, sCurrentPrompt);
                                                            if (iPromptIndex < LessonpromptUsed.Length)
                                                            {
                                                                sNextLessonPrompt = LessonpromptUsed[iPromptIndex + 1];
                                                                bPromptMoveUp = true;
                                                                GlobalPromptMoveUp = true;
                                                                bAvgDurationMoveUp = false;
                                                                bAvgDurationMoveDown = false;
                                                            }
                                                            else
                                                                bPromptAvgDurationMoveUp = false;
                                                        }
                                                        else
                                                            bPromptAvgDurationMoveUp = false;
                                                    }
                                                }
                                            }
                                            else
                                                bPromptAvgDurationMoveUp = false;
                                            if (!bPromptAvgDurationMoveUp)
                                            {
                                                if (promptDown >= 1)
                                                    bPromptAvgDurationMoveDown = false;
                                                if (TempRules.pctAvgDurationMoveDown.iScoreRequired > 0)
                                                {
                                                    bPromptAvgDurationMoveDown = ValidateDown(oSession.StudentId, avgDurationId, TempRules.pctAvgDurationMoveDown.iScoreRequired, reqSess,
                                                        TempRules.pctAvgDurationMoveDown.iTotalCorrectInstance, TempRules.pctAvgDurationMoveDown.bConsequetiveIndex, status);

                                                    bRuleStatusIOA = oDisc.checkConditionIOA(bPromptMoveDownIOA, bIOA);
                                                    bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bPromptMoveDownMultiTecher, bMultyTchr);
                                                    if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                    {
                                                        if (bPromptAvgDurationMoveDown)
                                                        {
                                                            if (sCurrentPrompt != LessonpromptUsed[0])
                                                            {
                                                                int iPromptIndex = DiscreetTrial.Model.PromptIndex(LessonpromptUsed, sCurrentPrompt);
                                                                if (iPromptIndex > 0)
                                                                {
                                                                    sNextLessonPrompt = LessonpromptUsed[iPromptIndex - 1];
                                                                    bPromptMoveBack = true;
                                                                    bAvgDurationMoveDown = false;
                                                                    bAvgDurationMoveUp = false;
                                                                    GlobalPromptMoveBack = true;
                                                                }
                                                                else
                                                                    bPromptAvgDurationMoveDown = false;
                                                            }
                                                            else
                                                                bPromptAvgDurationMoveDown = false;
                                                        }

                                                    }
                                                }
                                            }
                                            else
                                                bPromptAvgDurationMoveDown = false;

                                            if (!bPromptAvgDurationMoveUp && !bPromptAvgDurationMoveDown)
                                            {
                                                TempRules = GetSetRules(oTemp.TemplateId, iColId);

                                                if (TempRules.pctAvgDurationMoveUp.iScoreRequired > 0)
                                                {
                                                    bAvgDurationMoveUp = ValidateUp(oSession.StudentId, avgDurationId, TempRules.pctAvgDurationMoveUp.iScoreRequired, reqSess,
                                                        TempRules.pctAvgDurationMoveUp.iTotalCorrectInstance, TempRules.pctAvgDurationMoveUp.bConsequetiveIndex, status);
                                                    int setcount = TrialLists.totalSet;

                                                    bRuleStatusIOA = oDisc.checkConditionIOA(bSetMoveUpIOA, bIOA);
                                                    bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bSetMoveUpMultiTecher, bMultyTchr);
                                                    if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                    {

                                                        if (bAvgDurationMoveUp)
                                                        {
                                                            if (oDS.CrntSetNbr < setcount)
                                                                nextSet = oDS.CrntSetNbr + 1;
                                                            if (oDS.CrntSetNbr == setcount)
                                                            {
                                                                nextSet = setcount;
                                                                CompletionStatusSet = "COMPLETED";
                                                            }
                                                            if (CompletionStatusSet == "COMPLETED")
                                                            {
                                                                bSetCompleted = true;
                                                                MaintenanceOrCompletion = true;
                                                            }
                                                            else
                                                            {
                                                                bSetCompleted = false;
                                                                MaintenanceOrCompletion = false;
                                                            }
                                                            if (bSetMoveUp && bAvgDurationMoveUp)
                                                            {
                                                                bSetMoveUp = true;
                                                                GlobalSetMoveUp = true;
                                                                if (bSetMoveUp == true && GlobalSetMoveUp == true)
                                                                    bPrompt = true;
                                                            }
                                                        }
                                                    }



                                                }
                                                if (TempRules.pctAvgDurationMoveDown.iScoreRequired > 0)
                                                {
                                                    bAvgDurationMoveDown = ValidateDown(oSession.StudentId, avgDurationId, TempRules.pctAvgDurationMoveDown.iScoreRequired, reqSess,
                                                        TempRules.pctAvgDurationMoveDown.iTotalCorrectInstance, TempRules.pctAvgDurationMoveDown.bConsequetiveIndex, status);
                                                    int setcount = TrialLists.totalSet;

                                                    bRuleStatusIOA = oDisc.checkConditionIOA(bSetMoveDownIOA, bIOA);
                                                    bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bSetMoveDownMultiTecher, bMultyTchr);
                                                    if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                    {

                                                        if (bAvgDurationMoveDown)
                                                        {
                                                            if (oDS.CrntSetNbr <= setcount)
                                                                nextSet = oDS.CrntSetNbr - 1;
                                                            if (oDS.CrntSetNbr == 1)
                                                                nextSet = 1;
                                                            if (bSetMoveBack && bAvgDurationMoveDown)
                                                            {
                                                                bSetMoveBack = true;
                                                                GlobalSetMoveBack = true;
                                                            }
                                                        }
                                                    }

                                                }

                                            }
                                        }
                                        DiscreteFreqDurTextFlag = true;
                                    }
                                    TempRules = GetPromptRules(oTemp.TemplateId, iColId);
                                    if (TempRules.pctTotalDurationMoveUp.iScoreRequired == 0 || TempRules.pctTotalDurationMoveDown.iScoreRequired == 0)
                                    {
                                        freqdureloop++;
                                        bool status = true;
                                        //CompletionStatusSet = "";
                                        TempRules = GetSetRules(oTemp.TemplateId, iColId);
                                        avgDurationId = Convert.ToInt32(ViewState["avgDurationId"]);
                                        totDuraionId = Convert.ToInt32(ViewState["totDuraionId"]);
                                        if (TempRules.pctTotalDurationMoveUp.iScoreRequired > 0)
                                        {
                                            CompletionStatusSet = "";
                                            bTotDurationMoveUp = ValidateUp(oSession.StudentId, totDuraionId, TempRules.pctTotalDurationMoveUp.iScoreRequired, reqSess,
                                                TempRules.pctTotalDurationMoveUp.iTotalCorrectInstance, TempRules.pctTotalDurationMoveUp.bConsequetiveIndex, status);
                                            int setcount = TrialLists.totalSet;

                                            bRuleStatusIOA = oDisc.checkConditionIOA(bTotalDurationMoveUpbIOAReqd, bIOA);
                                            bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bTotalDurationMoveUpbMultiTchr, bMultyTchr);
                                            if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                            {

                                                if (bTotDurationMoveUp)
                                                {
                                                    if (oDS.CrntSetNbr < setcount)
                                                        nextSet = oDS.CrntSetNbr + 1;
                                                    if (oDS.CrntSetNbr == setcount)
                                                    {
                                                        nextSet = setcount;
                                                        CompletionStatusSet = "COMPLETED";
                                                    }
                                                    if (CompletionStatusSet == "COMPLETED")
                                                    {
                                                        bSetCompleted = true;
                                                        MaintenanceOrCompletion = true;
                                                    }
                                                    else
                                                    {
                                                        bSetCompleted = false;
                                                        MaintenanceOrCompletion = false;
                                                    }
                                                    if (bSetMoveUp && bTotDurationMoveUp)
                                                    {
                                                        bSetMoveUp = true;
                                                        GlobalSetMoveUp = true;
                                                        if (bSetMoveUp == true && GlobalSetMoveUp == true)
                                                            bPrompt = true;
                                                    }
                                                }
                                            }


                                        }
                                        if (TempRules.pctTotalDurationMoveDown.iScoreRequired > 0)
                                        {
                                            bTotDurationMoveDown = ValidateDown(oSession.StudentId, totDuraionId, TempRules.pctTotalDurationMoveDown.iScoreRequired, reqSess,
                                                TempRules.pctTotalDurationMoveDown.iTotalCorrectInstance, TempRules.pctTotalDurationMoveDown.bConsequetiveIndex, status);
                                            int setcount = TrialLists.totalSet;

                                            bRuleStatusIOA = oDisc.checkConditionIOA(bTotalDurationMoveDownbIOAReqd, bIOA);
                                            bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bTotalDurationMoveDownbMultiTchr, bMultyTchr);
                                            if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                            {

                                                if (bTotDurationMoveDown)
                                                {
                                                    if (oDS.CrntSetNbr <= setcount)
                                                        nextSet = oDS.CrntSetNbr - 1;
                                                    if (oDS.CrntSetNbr == 1)
                                                        nextSet = 1;
                                                    if (bSetMoveBack && bTotDurationMoveDown)
                                                    {
                                                        bSetMoveBack = true;
                                                        GlobalSetMoveBack = true;
                                                    }
                                                }
                                            }




                                        }

                                        DiscreteFreqDurTextFlag = true;
                                    }
                                    else
                                    {
                                        freqdureloop++;
                                        bool status = true;
                                        //CompletionStatusSet = "";
                                        avgDurationId = Convert.ToInt32(ViewState["avgDurationId"]);
                                        totDuraionId = Convert.ToInt32(ViewState["totDuraionId"]);
                                        TempRules = GetPromptRules(oTemp.TemplateId, iColId);

                                        if (TempRules.pctTotalDurationMoveUp.iTotalCorrectInstance > 0)
                                        {
                                            if (promptUp >= 1)
                                                bPromptTotDurationMoveUp = false;
                                            if (TempRules.pctTotalDurationMoveUp.iScoreRequired > 0)
                                            {
                                                bPromptTotDurationMoveUp = ValidateUp(oSession.StudentId, totDuraionId, TempRules.pctTotalDurationMoveUp.iScoreRequired, reqSess,
                                                    TempRules.pctTotalDurationMoveUp.iTotalCorrectInstance, TempRules.pctTotalDurationMoveUp.bConsequetiveIndex, status);

                                                bRuleStatusIOA = oDisc.checkConditionIOA(bPromptMoveUpIOA, bIOA);
                                                bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bPromptMoveUpMultiTecher, bMultyTchr);
                                                if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                {

                                                    if (bPromptTotDurationMoveUp)
                                                    {
                                                        if (sCurrentPrompt != LessonpromptUsed[LessonpromptUsed.Length - 1])
                                                        {
                                                            int iPromptIndex = DiscreetTrial.Model.PromptIndex(LessonpromptUsed, sCurrentPrompt);
                                                            if (iPromptIndex < LessonpromptUsed.Length)
                                                            {
                                                                sNextLessonPrompt = LessonpromptUsed[iPromptIndex + 1];
                                                                bPromptMoveUp = true;
                                                                bTotDurationMoveUp = false;
                                                                bTotDurationMoveDown = false;
                                                                GlobalPromptMoveUp = true;
                                                            }
                                                            else
                                                                bPromptTotDurationMoveUp = false;
                                                        }
                                                        else
                                                            bPromptTotDurationMoveUp = false;
                                                    }
                                                }
                                            }
                                            else
                                                bPromptTotDurationMoveUp = false;
                                            if (!bPromptTotDurationMoveUp)
                                            {
                                                if (promptDown >= 1)
                                                    bPromptTotDurationMoveDown = false;
                                                if (TempRules.pctTotalDurationMoveDown.iScoreRequired > 0)
                                                {
                                                    bPromptTotDurationMoveDown = ValidateDown(oSession.StudentId, totDuraionId, TempRules.pctTotalDurationMoveDown.iScoreRequired, reqSess,
                                                        TempRules.pctTotalDurationMoveDown.iTotalCorrectInstance, TempRules.pctTotalDurationMoveDown.bConsequetiveIndex, status);

                                                    bRuleStatusIOA = oDisc.checkConditionIOA(bPromptMoveDownIOA, bIOA);
                                                    bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bPromptMoveDownMultiTecher, bMultyTchr);
                                                    if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                    {

                                                        if (bPromptTotDurationMoveDown)
                                                        {
                                                            if (sCurrentPrompt != LessonpromptUsed[0])
                                                            {
                                                                int iPromptIndex = DiscreetTrial.Model.PromptIndex(LessonpromptUsed, sCurrentPrompt);
                                                                if (iPromptIndex > 0)
                                                                {
                                                                    sNextLessonPrompt = LessonpromptUsed[iPromptIndex - 1];
                                                                    bPromptMoveBack = true;
                                                                    bTotDurationMoveDown = false;
                                                                    bTotDurationMoveUp = false;
                                                                    GlobalPromptMoveBack = true;
                                                                }
                                                                else
                                                                    bPromptTotDurationMoveDown = false;
                                                            }
                                                            else
                                                                bPromptTotDurationMoveDown = false;
                                                        }

                                                    }
                                                }
                                            }
                                            else
                                                bPromptTotDurationMoveDown = false;
                                            //total duration


                                            if (!bPromptTotDurationMoveUp && !bPromptTotDurationMoveDown)
                                            {
                                                TempRules = GetSetRules(oTemp.TemplateId, iColId);

                                                if (TempRules.pctTotalDurationMoveUp.iScoreRequired > 0)
                                                {
                                                    CompletionStatusSet = "";
                                                    bTotDurationMoveUp = ValidateUp(oSession.StudentId, totDuraionId, TempRules.pctTotalDurationMoveUp.iScoreRequired, reqSess,
                                                        TempRules.pctTotalDurationMoveUp.iTotalCorrectInstance, TempRules.pctTotalDurationMoveUp.bConsequetiveIndex, status);
                                                    int setcount = TrialLists.totalSet;

                                                    bRuleStatusIOA = oDisc.checkConditionIOA(bSetMoveUpIOA, bIOA);
                                                    bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bSetMoveUpMultiTecher, bMultyTchr);
                                                    if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                    {

                                                        if (bTotDurationMoveUp)
                                                        {
                                                            if (oDS.CrntSetNbr < setcount)
                                                                nextSet = oDS.CrntSetNbr + 1;
                                                            if (oDS.CrntSetNbr == setcount)
                                                            {
                                                                nextSet = setcount;
                                                                CompletionStatusSet = "COMPLETED";
                                                            }
                                                            if (bSetMoveUp && bTotDurationMoveUp)
                                                            {
                                                                bSetMoveUp = true;
                                                                GlobalSetMoveUp = true;
                                                                if (bSetMoveUp == true && GlobalSetMoveUp == true)
                                                                    bPrompt = true;
                                                            }
                                                        }
                                                    }


                                                }
                                                if (TempRules.pctTotalDurationMoveDown.iScoreRequired > 0)
                                                {
                                                    bTotDurationMoveDown = ValidateDown(oSession.StudentId, totDuraionId, TempRules.pctTotalDurationMoveDown.iScoreRequired, reqSess,
                                                        TempRules.pctTotalDurationMoveDown.iTotalCorrectInstance, TempRules.pctTotalDurationMoveDown.bConsequetiveIndex, status);
                                                    int setcount = TrialLists.totalSet;

                                                    bRuleStatusIOA = oDisc.checkConditionIOA(bSetMoveDownIOA, bIOA);
                                                    bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bSetMoveDownMultiTecher, bMultyTchr);
                                                    if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                    {

                                                        if (bTotDurationMoveDown)
                                                        {
                                                            if (oDS.CrntSetNbr <= setcount)
                                                                nextSet = oDS.CrntSetNbr - 1;
                                                            if (oDS.CrntSetNbr == 1)
                                                                nextSet = 1;
                                                            if (bSetMoveBack && bTotDurationMoveDown)
                                                            {
                                                                bSetMoveBack = true;
                                                                GlobalSetMoveBack = true;
                                                            }
                                                        }
                                                    }
                                                }
                                            }

                                        }
                                        DiscreteFreqDurTextFlag = true;
                                    }



                                }
                                #endregion
                                //Code added for List 5 Task #9 16-feb-2021 change Moveup/down Criteria for Frequncy and Duration START--
                                #region MoveUp in More Than Criteria
                                else if (MoveUpstat == 0)
                                {
                                    TempRules = GetPromptRules(oTemp.TemplateId, iColId);

                                    if (TempRules.pctAvgDurationMoveUp.iScoreRequired == 0 || TempRules.pctAvgDurationMoveDown.iScoreRequired == 0)
                                    {
                                        freqdureloop++;
                                        bool status = true;
                                        CompletionStatusSet = "";
                                        TempRules = GetSetRules(oTemp.TemplateId, iColId);
                                        avgDurationId = Convert.ToInt32(ViewState["avgDurationId"]);
                                        totDuraionId = Convert.ToInt32(ViewState["totDuraionId"]);
                                        if (TempRules.pctAvgDurationMoveUp.iScoreRequired > 0)
                                        {
                                            bAvgDurationMoveUp = ValidateDown(oSession.StudentId, avgDurationId, TempRules.pctAvgDurationMoveUp.iScoreRequired, reqSess,
                                                TempRules.pctAvgDurationMoveUp.iTotalCorrectInstance, TempRules.pctAvgDurationMoveUp.bConsequetiveIndex, status);
                                            int setcount = TrialLists.totalSet;

                                            bRuleStatusIOA = oDisc.checkConditionIOA(bAvgDurationMoveUpbIOAReqd, bIOA);
                                            bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bAvgDurationMoveUpbMultiTchr, bMultyTchr);
                                            if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                            {

                                                if (bAvgDurationMoveUp)
                                                {
                                                    if (oDS.CrntSetNbr < setcount)
                                                        nextSet = oDS.CrntSetNbr + 1;
                                                    if (oDS.CrntSetNbr == setcount)
                                                    {
                                                        nextSet = setcount;
                                                        CompletionStatusSet = "COMPLETED";
                                                    }
                                                    if (CompletionStatusSet == "COMPLETED")
                                                    {
                                                        bSetCompleted = true;
                                                        MaintenanceOrCompletion = true;
                                                    }
                                                    else
                                                    {
                                                        bSetCompleted = false;
                                                        MaintenanceOrCompletion = false;
                                                    }
                                                    if (bSetMoveUp && bAvgDurationMoveUp)
                                                    {
                                                        bSetMoveUp = true;
                                                        GlobalSetMoveUp = true;
                                                        if (bSetMoveUp == true && GlobalSetMoveUp == true)
                                                            bPrompt = true;
                                                    }
                                                }
                                            }



                                        }
                                        if (TempRules.pctAvgDurationMoveDown.iScoreRequired > 0)
                                        {
                                            bAvgDurationMoveDown = ValidateUp(oSession.StudentId, avgDurationId, TempRules.pctAvgDurationMoveDown.iScoreRequired, reqSess,
                                                TempRules.pctAvgDurationMoveDown.iTotalCorrectInstance, TempRules.pctAvgDurationMoveDown.bConsequetiveIndex, status);
                                            int setcount = TrialLists.totalSet;

                                            bRuleStatusIOA = oDisc.checkConditionIOA(bAvgDurationMoveDownbIOAReqd, bIOA);
                                            bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bAvgDurationMoveDownbMultiTchr, bMultyTchr);
                                            if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                            {

                                                if (bAvgDurationMoveDown)
                                                {
                                                    if (oDS.CrntSetNbr <= setcount)
                                                        nextSet = oDS.CrntSetNbr - 1;
                                                    if (oDS.CrntSetNbr == 1)
                                                        nextSet = 1;
                                                    if (bSetMoveBack && bAvgDurationMoveDown)
                                                    {
                                                        bSetMoveBack = true;
                                                        GlobalSetMoveBack = true;
                                                    }
                                                }
                                            }

                                        }
                                        DiscreteFreqDurTextFlag = true;
                                    }
                                    else
                                    {
                                        freqdureloop++;
                                        bool status = true;
                                        CompletionStatusSet = "";
                                        avgDurationId = Convert.ToInt32(ViewState["avgDurationId"]);
                                        totDuraionId = Convert.ToInt32(ViewState["totDuraionId"]);
                                        TempRules = GetPromptRules(oTemp.TemplateId, iColId);

                                        //avg duration
                                        if (TempRules.pctAvgDurationMoveUp.iTotalCorrectInstance > 0)
                                        {
                                            if (promptUp >= 1)
                                                bPromptAvgDurationMoveUp = false;
                                            if (TempRules.pctAvgDurationMoveUp.iScoreRequired > 0)
                                            {
                                                bPromptAvgDurationMoveUp = ValidateDown(oSession.StudentId, avgDurationId, TempRules.pctAvgDurationMoveUp.iScoreRequired, reqSess,
                                                    TempRules.pctAvgDurationMoveUp.iTotalCorrectInstance, TempRules.pctAvgDurationMoveUp.bConsequetiveIndex, status);

                                                bRuleStatusIOA = oDisc.checkConditionIOA(bPromptMoveUpIOA, bIOA);
                                                bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bPromptMoveUpMultiTecher, bMultyTchr);
                                                if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                {
                                                    bPromptFrequencyMoveUp = false;
                                                    if (bPromptAvgDurationMoveUp)
                                                    {
                                                        if (sCurrentPrompt != LessonpromptUsed[LessonpromptUsed.Length - 1])
                                                        {
                                                            int iPromptIndex = DiscreetTrial.Model.PromptIndex(LessonpromptUsed, sCurrentPrompt);
                                                            if (iPromptIndex < LessonpromptUsed.Length)
                                                            {
                                                                sNextLessonPrompt = LessonpromptUsed[iPromptIndex + 1];
                                                                bPromptMoveUp = true;
                                                                bAvgDurationMoveUp = false;
                                                                bAvgDurationMoveDown = false;
                                                                GlobalPromptMoveUp = true;
                                                            }
                                                            else
                                                                bPromptAvgDurationMoveUp = false;
                                                        }
                                                        else
                                                            bPromptAvgDurationMoveUp = false;
                                                    }
                                                }
                                            }
                                            else
                                                bPromptAvgDurationMoveUp = false;
                                            if (!bPromptAvgDurationMoveUp)
                                            {
                                                if (promptDown >= 1)
                                                    bPromptAvgDurationMoveDown = false;
                                                if (TempRules.pctAvgDurationMoveDown.iScoreRequired > 0)
                                                {
                                                    bPromptAvgDurationMoveDown = ValidateUp(oSession.StudentId, avgDurationId, TempRules.pctAvgDurationMoveDown.iScoreRequired, reqSess,
                                                        TempRules.pctAvgDurationMoveDown.iTotalCorrectInstance, TempRules.pctAvgDurationMoveDown.bConsequetiveIndex, status);

                                                    bRuleStatusIOA = oDisc.checkConditionIOA(bPromptMoveDownIOA, bIOA);
                                                    bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bPromptMoveDownMultiTecher, bMultyTchr);
                                                    if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                    {
                                                        if (bPromptAvgDurationMoveDown)
                                                        {
                                                            if (sCurrentPrompt != LessonpromptUsed[0])
                                                            {
                                                                int iPromptIndex = DiscreetTrial.Model.PromptIndex(LessonpromptUsed, sCurrentPrompt);
                                                                if (iPromptIndex > 0)
                                                                {
                                                                    sNextLessonPrompt = LessonpromptUsed[iPromptIndex - 1];
                                                                    bPromptMoveBack = true;
                                                                    bAvgDurationMoveDown = false;
                                                                    bAvgDurationMoveUp = false;
                                                                    GlobalPromptMoveBack = true;
                                                                }
                                                                else
                                                                    bPromptAvgDurationMoveDown = false;
                                                            }
                                                            else
                                                                bPromptAvgDurationMoveDown = false;
                                                        }

                                                    }
                                                }
                                            }
                                            else
                                                bPromptAvgDurationMoveDown = false;

                                            if (!bPromptAvgDurationMoveUp && !bPromptAvgDurationMoveDown)
                                            {
                                                TempRules = GetSetRules(oTemp.TemplateId, iColId);

                                                if (TempRules.pctAvgDurationMoveUp.iScoreRequired > 0)
                                                {
                                                    bAvgDurationMoveUp = ValidateDown(oSession.StudentId, avgDurationId, TempRules.pctAvgDurationMoveUp.iScoreRequired, reqSess,
                                                        TempRules.pctAvgDurationMoveUp.iTotalCorrectInstance, TempRules.pctAvgDurationMoveUp.bConsequetiveIndex, status);
                                                    int setcount = TrialLists.totalSet;

                                                    bRuleStatusIOA = oDisc.checkConditionIOA(bSetMoveUpIOA, bIOA);
                                                    bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bSetMoveUpMultiTecher, bMultyTchr);
                                                    if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                    {

                                                        if (bAvgDurationMoveUp)
                                                        {
                                                            if (oDS.CrntSetNbr < setcount)
                                                                nextSet = oDS.CrntSetNbr + 1;
                                                            if (oDS.CrntSetNbr == setcount)
                                                            {
                                                                nextSet = setcount;
                                                                CompletionStatusSet = "COMPLETED";
                                                            }
                                                            if (CompletionStatusSet == "COMPLETED")
                                                            {
                                                                bSetCompleted = true;
                                                                MaintenanceOrCompletion = true;
                                                            }
                                                            else
                                                            {
                                                                bSetCompleted = false;
                                                                MaintenanceOrCompletion = false;
                                                            }
                                                            if (bSetMoveUp && bAvgDurationMoveUp)
                                                            {
                                                                bSetMoveUp = true;
                                                                GlobalSetMoveUp = true;
                                                                if (bSetMoveUp == true && GlobalSetMoveUp == true)
                                                                    bPrompt = true;
                                                            }
                                                        }
                                                    }



                                                }
                                                if (TempRules.pctAvgDurationMoveDown.iScoreRequired > 0)
                                                {
                                                    bAvgDurationMoveDown = ValidateUp(oSession.StudentId, avgDurationId, TempRules.pctAvgDurationMoveDown.iScoreRequired, reqSess,
                                                        TempRules.pctAvgDurationMoveDown.iTotalCorrectInstance, TempRules.pctAvgDurationMoveDown.bConsequetiveIndex, status);
                                                    int setcount = TrialLists.totalSet;

                                                    bRuleStatusIOA = oDisc.checkConditionIOA(bSetMoveDownIOA, bIOA);
                                                    bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bSetMoveDownMultiTecher, bMultyTchr);
                                                    if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                    {

                                                        if (bAvgDurationMoveDown)
                                                        {
                                                            if (oDS.CrntSetNbr <= setcount)
                                                                nextSet = oDS.CrntSetNbr - 1;
                                                            if (oDS.CrntSetNbr == 1)
                                                                nextSet = 1;
                                                            if (bSetMoveBack && bAvgDurationMoveDown)
                                                            {
                                                                bSetMoveBack = true;
                                                                GlobalSetMoveBack = true;
                                                            }
                                                        }
                                                    }

                                                }

                                            }
                                        }
                                        DiscreteFreqDurTextFlag = true;
                                    }
                                    TempRules = GetPromptRules(oTemp.TemplateId, iColId);
                                    if (TempRules.pctTotalDurationMoveUp.iScoreRequired == 0 || TempRules.pctTotalDurationMoveDown.iScoreRequired == 0)
                                    {
                                        freqdureloop++;
                                        bool status = true;
                                        CompletionStatusSet = "";
                                        TempRules = GetSetRules(oTemp.TemplateId, iColId);
                                        avgDurationId = Convert.ToInt32(ViewState["avgDurationId"]);
                                        totDuraionId = Convert.ToInt32(ViewState["totDuraionId"]);
                                        if (TempRules.pctTotalDurationMoveUp.iScoreRequired > 0)
                                        {
                                            CompletionStatusSet = "";
                                            bTotDurationMoveUp = ValidateDown(oSession.StudentId, totDuraionId, TempRules.pctTotalDurationMoveUp.iScoreRequired, reqSess,
                                                TempRules.pctTotalDurationMoveUp.iTotalCorrectInstance, TempRules.pctTotalDurationMoveUp.bConsequetiveIndex, status);
                                            int setcount = TrialLists.totalSet;

                                            bRuleStatusIOA = oDisc.checkConditionIOA(bTotalDurationMoveUpbIOAReqd, bIOA);
                                            bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bTotalDurationMoveUpbMultiTchr, bMultyTchr);
                                            if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                            {

                                                if (bTotDurationMoveUp)
                                                {
                                                    if (oDS.CrntSetNbr < setcount)
                                                        nextSet = oDS.CrntSetNbr + 1;
                                                    if (oDS.CrntSetNbr == setcount)
                                                    {
                                                        nextSet = setcount;
                                                        CompletionStatusSet = "COMPLETED";
                                                    }
                                                    if (CompletionStatusSet == "COMPLETED")
                                                    {
                                                        bSetCompleted = true;
                                                        MaintenanceOrCompletion = true;
                                                    }
                                                    else
                                                    {
                                                        bSetCompleted = false;
                                                        MaintenanceOrCompletion = false;
                                                    }
                                                    if (bSetMoveUp && bTotDurationMoveUp)
                                                    {
                                                        bSetMoveUp = true;
                                                        GlobalSetMoveUp = true;
                                                        if (bSetMoveUp == true && GlobalSetMoveUp == true)
                                                            bPrompt = true;
                                                    }
                                                }
                                            }


                                        }
                                        if (TempRules.pctTotalDurationMoveDown.iScoreRequired > 0)
                                        {
                                            bTotDurationMoveDown = ValidateUp(oSession.StudentId, totDuraionId, TempRules.pctTotalDurationMoveDown.iScoreRequired, reqSess,
                                                TempRules.pctTotalDurationMoveDown.iTotalCorrectInstance, TempRules.pctTotalDurationMoveDown.bConsequetiveIndex, status);
                                            int setcount = TrialLists.totalSet;

                                            bRuleStatusIOA = oDisc.checkConditionIOA(bTotalDurationMoveDownbIOAReqd, bIOA);
                                            bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bTotalDurationMoveDownbMultiTchr, bMultyTchr);
                                            if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                            {

                                                if (bTotDurationMoveDown)
                                                {
                                                    if (oDS.CrntSetNbr <= setcount)
                                                        nextSet = oDS.CrntSetNbr - 1;
                                                    if (oDS.CrntSetNbr == 1)
                                                        nextSet = 1;
                                                    if (bSetMoveBack && bTotDurationMoveDown)
                                                    {
                                                        bSetMoveBack = true;
                                                        GlobalSetMoveBack = true;
                                                    }
                                                }
                                            }




                                        }

                                        DiscreteFreqDurTextFlag = true;
                                    }
                                    else
                                    {
                                        freqdureloop++;
                                        bool status = true;
                                        CompletionStatusSet = "";
                                        avgDurationId = Convert.ToInt32(ViewState["avgDurationId"]);
                                        totDuraionId = Convert.ToInt32(ViewState["totDuraionId"]);
                                        TempRules = GetPromptRules(oTemp.TemplateId, iColId);

                                        if (TempRules.pctTotalDurationMoveUp.iTotalCorrectInstance > 0)
                                        {
                                            if (promptUp >= 1)
                                                bPromptTotDurationMoveUp = false;
                                            if (TempRules.pctTotalDurationMoveUp.iScoreRequired > 0)
                                            {
                                                bPromptTotDurationMoveUp = ValidateDown(oSession.StudentId, totDuraionId, TempRules.pctTotalDurationMoveUp.iScoreRequired, reqSess,
                                                    TempRules.pctTotalDurationMoveUp.iTotalCorrectInstance, TempRules.pctTotalDurationMoveUp.bConsequetiveIndex, status);

                                                bRuleStatusIOA = oDisc.checkConditionIOA(bPromptMoveUpIOA, bIOA);
                                                bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bPromptMoveUpMultiTecher, bMultyTchr);
                                                if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                {

                                                    if (bPromptTotDurationMoveUp)
                                                    {
                                                        if (sCurrentPrompt != LessonpromptUsed[LessonpromptUsed.Length - 1])
                                                        {
                                                            int iPromptIndex = DiscreetTrial.Model.PromptIndex(LessonpromptUsed, sCurrentPrompt);
                                                            if (iPromptIndex < LessonpromptUsed.Length)
                                                            {
                                                                sNextLessonPrompt = LessonpromptUsed[iPromptIndex + 1];
                                                                bPromptMoveUp = true;
                                                                bTotDurationMoveUp = false;
                                                                bTotDurationMoveDown = false;
                                                                GlobalPromptMoveUp = true;
                                                            }
                                                            else
                                                                bPromptTotDurationMoveUp = false;
                                                        }
                                                        else
                                                            bPromptTotDurationMoveUp = false;
                                                    }
                                                }
                                            }
                                            else
                                                bPromptTotDurationMoveUp = false;
                                            if (!bPromptTotDurationMoveUp)
                                            {
                                                if (promptDown >= 1)
                                                    bPromptTotDurationMoveDown = false;
                                                if (TempRules.pctTotalDurationMoveDown.iScoreRequired > 0)
                                                {
                                                    bPromptTotDurationMoveDown = ValidateUp(oSession.StudentId, totDuraionId, TempRules.pctTotalDurationMoveDown.iScoreRequired, reqSess,
                                                        TempRules.pctTotalDurationMoveDown.iTotalCorrectInstance, TempRules.pctTotalDurationMoveDown.bConsequetiveIndex, status);

                                                    bRuleStatusIOA = oDisc.checkConditionIOA(bPromptMoveDownIOA, bIOA);
                                                    bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bPromptMoveDownMultiTecher, bMultyTchr);
                                                    if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                    {

                                                        if (bPromptTotDurationMoveDown)
                                                        {
                                                            if (sCurrentPrompt != LessonpromptUsed[0])
                                                            {
                                                                int iPromptIndex = DiscreetTrial.Model.PromptIndex(LessonpromptUsed, sCurrentPrompt);
                                                                if (iPromptIndex > 0)
                                                                {
                                                                    sNextLessonPrompt = LessonpromptUsed[iPromptIndex - 1];
                                                                    bPromptMoveBack = true;
                                                                    bTotDurationMoveDown = false;
                                                                    bTotDurationMoveUp = false;
                                                                    GlobalPromptMoveBack = true;
                                                                }
                                                                else
                                                                    bPromptTotDurationMoveDown = false;
                                                            }
                                                            else
                                                                bPromptTotDurationMoveDown = false;
                                                        }

                                                    }
                                                }
                                            }
                                            else
                                                bPromptTotDurationMoveDown = false;
                                            //total duration


                                            if (!bPromptTotDurationMoveUp && !bPromptTotDurationMoveDown)
                                            {
                                                TempRules = GetSetRules(oTemp.TemplateId, iColId);

                                                if (TempRules.pctTotalDurationMoveUp.iScoreRequired > 0)
                                                {
                                                    CompletionStatusSet = "";
                                                    bTotDurationMoveUp = ValidateDown(oSession.StudentId, totDuraionId, TempRules.pctTotalDurationMoveUp.iScoreRequired, reqSess,
                                                        TempRules.pctTotalDurationMoveUp.iTotalCorrectInstance, TempRules.pctTotalDurationMoveUp.bConsequetiveIndex, status);
                                                    int setcount = TrialLists.totalSet;

                                                    bRuleStatusIOA = oDisc.checkConditionIOA(bSetMoveUpIOA, bIOA);
                                                    bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bSetMoveUpMultiTecher, bMultyTchr);
                                                    if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                    {

                                                        if (bTotDurationMoveUp)
                                                        {
                                                            if (oDS.CrntSetNbr < setcount)
                                                                nextSet = oDS.CrntSetNbr + 1;
                                                            if (oDS.CrntSetNbr == setcount)
                                                            {
                                                                nextSet = setcount;
                                                                CompletionStatusSet = "COMPLETED";
                                                            }
                                                            if (bSetMoveUp && bTotDurationMoveUp)
                                                            {
                                                                bSetMoveUp = true;
                                                                GlobalSetMoveUp = true;
                                                                if (bSetMoveUp == true && GlobalSetMoveUp == true)
                                                                    bPrompt = true;
                                                            }
                                                        }
                                                    }


                                                }
                                                if (TempRules.pctTotalDurationMoveDown.iScoreRequired > 0)
                                                {
                                                    bTotDurationMoveDown = ValidateUp(oSession.StudentId, totDuraionId, TempRules.pctTotalDurationMoveDown.iScoreRequired, reqSess,
                                                        TempRules.pctTotalDurationMoveDown.iTotalCorrectInstance, TempRules.pctTotalDurationMoveDown.bConsequetiveIndex, status);
                                                    int setcount = TrialLists.totalSet;

                                                    bRuleStatusIOA = oDisc.checkConditionIOA(bSetMoveDownIOA, bIOA);
                                                    bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bSetMoveDownMultiTecher, bMultyTchr);
                                                    if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                    {

                                                        if (bTotDurationMoveDown)
                                                        {
                                                            if (oDS.CrntSetNbr <= setcount)
                                                                nextSet = oDS.CrntSetNbr - 1;
                                                            if (oDS.CrntSetNbr == 1)
                                                                nextSet = 1;
                                                            if (bSetMoveBack && bTotDurationMoveDown)
                                                            {
                                                                bSetMoveBack = true;
                                                                GlobalSetMoveBack = true;
                                                            }
                                                        }
                                                    }
                                                }
                                            }

                                        }
                                        DiscreteFreqDurTextFlag = true;
                                    }



                                }
                                #endregion
                                //Code added for List 5 Task #9 16-feb-2021 change Moveup/down Criteria for Frequncy and Duration END--
                            }
                            #endregion
                            #region frequency
                            else if (dr["ColTypeCd"].ToString() == "Frequency")
                            {
                                int colId = Convert.ToInt32(dr["DSTempSetColId"]);
                                string selqry1 = "select Moveupstat from dstempsetcol DsCol inner join DSTempHdr Hdr on Hdr.DSTempHdrId=DsCol.DSTempHdrId where dsCol.DSTempHdrId=" + oTemp.TemplateId + " And DSTempSetColId= " + colId;
                                object stat = oData.FetchValue(selqry1);
                                if (stat != null)
                                    MoveUpstat = Convert.ToInt16(stat);
                                #region MoveUp in Less Than criteria - Default
                                if (MoveUpstat == 1)
                                {
                                    TempRules = GetPromptRules(oTemp.TemplateId, iColId);
                                    if (TempRules.pctFrequencyMoveUp.iScoreRequired == 0 || TempRules.pctFrequencyMoveDown.iScoreRequired == 0)
                                    {
                                        freqdureloop++;
                                        bool status = true;
                                        CompletionStatusSet = "";
                                        TempRules = GetSetRules(oTemp.TemplateId, iColId);
                                        freqId = Convert.ToInt32(ViewState["freqId"]);
                                        if (TempRules.pctFrequencyMoveUp.iScoreRequired > 0)
                                        {
                                            bFrequencyMoveUp = ValidateUp(oSession.StudentId, freqId, TempRules.pctFrequencyMoveUp.iScoreRequired, reqSess,
                                                TempRules.pctFrequencyMoveUp.iTotalCorrectInstance, TempRules.pctFrequencyMoveUp.bConsequetiveIndex, status);
                                            int setcount = TrialLists.totalSet;

                                            bRuleStatusIOA = oDisc.checkConditionIOA(bFrequencyMoveUpbIOAReqd, bIOA);
                                            bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bFrequencyMoveUpbMultiTchr, bMultyTchr);
                                            if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                            {

                                                if (bFrequencyMoveUp)
                                                {

                                                    if (oDS.CrntSetNbr < setcount)
                                                        nextSet = oDS.CrntSetNbr + 1;
                                                    if (oDS.CrntSetNbr == setcount)
                                                    {
                                                        nextSet = setcount;
                                                        CompletionStatusSet = "COMPLETED";
                                                    }
                                                    if (CompletionStatusSet == "COMPLETED")
                                                    {
                                                        bSetCompleted = true;
                                                        MaintenanceOrCompletion = true;
                                                    }
                                                    else
                                                    {
                                                        bSetCompleted = false;
                                                    }
                                                    if (bSetMoveUp && bFrequencyMoveUp)
                                                    {
                                                        bSetMoveUp = true;
                                                        GlobalSetMoveUp = true;
                                                        if (bSetMoveUp == true && GlobalSetMoveUp == true)
                                                            bPrompt = true;
                                                    }
                                                }
                                            }
                                        }
                                        if (TempRules.pctFrequencyMoveDown.iScoreRequired > 0)
                                        {
                                            bFrequencyMoveDown = ValidateDown(oSession.StudentId, freqId, TempRules.pctFrequencyMoveDown.iScoreRequired, reqSess,
                                                TempRules.pctFrequencyMoveDown.iTotalCorrectInstance, TempRules.pctFrequencyMoveDown.bConsequetiveIndex, status);
                                            int setcount = TrialLists.totalSet;

                                            bRuleStatusIOA = oDisc.checkConditionIOA(bFrequencyMoveDownbIOAReqd, bIOA);
                                            bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bFrequencyMoveDownbMultiTchr, bMultyTchr);
                                            if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                            {

                                                if (bFrequencyMoveDown)
                                                {
                                                    if (oDS.CrntSetNbr <= setcount)
                                                        nextSet = oDS.CrntSetNbr - 1;
                                                    if (oDS.CrntSetNbr == 1)
                                                        nextSet = 1;
                                                    if (bSetMoveBack && bFrequencyMoveDown)
                                                    {
                                                        bSetMoveBack = true;
                                                        GlobalSetMoveBack = true;
                                                    }
                                                }
                                            }
                                        }
                                        DiscreteFreqDurTextFlag = true;


                                    }

                                    else
                                    {
                                        freqdureloop++;
                                        bool status = true;
                                        CompletionStatusSet = "";
                                        freqId = Convert.ToInt32(ViewState["freqId"]);
                                        //for prompt move
                                        TempRules = GetPromptRules(oTemp.TemplateId, iColId);
                                        if (promptUp >= 1)
                                            bPromptFrequencyMoveUp = false;
                                        if (TempRules.pctFrequencyMoveUp.iScoreRequired > 0)
                                        {
                                            bPromptFrequencyMoveUp = ValidateUp(oSession.StudentId, freqId, TempRules.pctFrequencyMoveUp.iScoreRequired, reqSess,
                                                TempRules.pctFrequencyMoveUp.iTotalCorrectInstance, TempRules.pctFrequencyMoveUp.bConsequetiveIndex, status);

                                            bRuleStatusIOA = oDisc.checkConditionIOA(bPromptFrequencyMoveUpbIOAReqd, bIOA);
                                            bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bPromptFrequencyMoveUpbMultiTchr, bMultyTchr);
                                            if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                            {

                                                if (bPromptFrequencyMoveUp)
                                                {
                                                    if (sCurrentPrompt != LessonpromptUsed[LessonpromptUsed.Length - 1])
                                                    {
                                                        int iPromptIndex = DiscreetTrial.Model.PromptIndex(LessonpromptUsed, sCurrentPrompt);
                                                        if (iPromptIndex < LessonpromptUsed.Length)
                                                        {
                                                            sNextLessonPrompt = LessonpromptUsed[iPromptIndex + 1];
                                                            bPromptMoveUp = true;
                                                            bFrequencyMoveUp = false;
                                                            bFrequencyMoveDown = false;
                                                            GlobalPromptMoveUp = true;
                                                        }
                                                        else
                                                            bPromptFrequencyMoveUp = false;
                                                    }
                                                    else
                                                        bPromptFrequencyMoveUp = false;
                                                }
                                            }
                                        }
                                        else
                                            bPromptFrequencyMoveUp = false;
                                        if (!bPromptFrequencyMoveUp)
                                        {
                                            if (promptDown >= 1)
                                                bPromptFrequencyMoveDown = false;
                                            if (TempRules.pctFrequencyMoveDown.iScoreRequired > 0)
                                            {
                                                bPromptFrequencyMoveDown = ValidateDown(oSession.StudentId, freqId, TempRules.pctFrequencyMoveDown.iScoreRequired, reqSess,
                                                    TempRules.pctFrequencyMoveDown.iTotalCorrectInstance, TempRules.pctFrequencyMoveDown.bConsequetiveIndex, status);

                                                bRuleStatusIOA = oDisc.checkConditionIOA(bPromptFrequencyMoveDownbIOAReqd, bIOA);
                                                bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bPromptFrequencyMoveDownbMultiTchr, bMultyTchr);
                                                if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                {
                                                    if (bPromptFrequencyMoveDown)
                                                    {
                                                        if (sCurrentPrompt != LessonpromptUsed[0])
                                                        {
                                                            int iPromptIndex = DiscreetTrial.Model.PromptIndex(LessonpromptUsed, sCurrentPrompt);
                                                            if (iPromptIndex > 0)
                                                            {
                                                                sNextLessonPrompt = LessonpromptUsed[iPromptIndex - 1];
                                                                bPromptMoveBack = true;
                                                                bFrequencyMoveDown = false;
                                                                bFrequencyMoveUp = false;
                                                                GlobalPromptMoveBack = true;
                                                            }
                                                            else
                                                                bPromptFrequencyMoveDown = false;
                                                        }
                                                        else
                                                            bPromptFrequencyMoveDown = false;
                                                    }

                                                }
                                            }
                                        }
                                        else
                                            bPromptFrequencyMoveDown = false;
                                        //end prompt section
                                        if (!bPromptFrequencyMoveUp && !bPromptFrequencyMoveDown)
                                        {
                                            TempRules = GetSetRules(oTemp.TemplateId, iColId);

                                            if (TempRules.pctFrequencyMoveUp.iScoreRequired > 0)
                                            {
                                                bFrequencyMoveUp = ValidateUp(oSession.StudentId, freqId, TempRules.pctFrequencyMoveUp.iScoreRequired, reqSess,
                                                    TempRules.pctFrequencyMoveUp.iTotalCorrectInstance, TempRules.pctFrequencyMoveUp.bConsequetiveIndex, status);
                                                int setcount = TrialLists.totalSet;

                                                bRuleStatusIOA = oDisc.checkConditionIOA(bFrequencyMoveUpbIOAReqd, bIOA);
                                                bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bFrequencyMoveUpbMultiTchr, bMultyTchr);
                                                if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                {

                                                    if (bFrequencyMoveUp)
                                                    {

                                                        if (oDS.CrntSetNbr < setcount)
                                                            nextSet = oDS.CrntSetNbr + 1;
                                                        if (oDS.CrntSetNbr == setcount)
                                                        {
                                                            nextSet = setcount;
                                                            CompletionStatusSet = "COMPLETED";
                                                        }
                                                        if (CompletionStatusSet == "COMPLETED")
                                                        {
                                                            bSetCompleted = true;
                                                            MaintenanceOrCompletion = true;
                                                        }
                                                        else
                                                        {
                                                            bSetCompleted = false;
                                                            MaintenanceOrCompletion = false;
                                                        }
                                                        if (bSetMoveUp && bFrequencyMoveUp)
                                                        {
                                                            bSetMoveUp = true;
                                                            GlobalSetMoveUp = true;
                                                            if (bSetMoveUp == true && GlobalSetMoveUp == true)
                                                                bPrompt = true;
                                                        }
                                                    }
                                                }
                                            }
                                            if (TempRules.pctFrequencyMoveDown.iScoreRequired > 0)
                                            {
                                                bFrequencyMoveDown = ValidateDown(oSession.StudentId, freqId, TempRules.pctFrequencyMoveDown.iScoreRequired, reqSess,
                                                    TempRules.pctFrequencyMoveDown.iTotalCorrectInstance, TempRules.pctFrequencyMoveDown.bConsequetiveIndex, status);
                                                int setcount = TrialLists.totalSet;

                                                bRuleStatusIOA = oDisc.checkConditionIOA(bFrequencyMoveDownbIOAReqd, bIOA);
                                                bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bFrequencyMoveDownbMultiTchr, bMultyTchr);
                                                if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                {

                                                    if (bFrequencyMoveDown)
                                                    {
                                                        if (oDS.CrntSetNbr <= setcount)
                                                            nextSet = oDS.CrntSetNbr - 1;
                                                        if (oDS.CrntSetNbr == 1)
                                                            nextSet = 1;
                                                        if (bSetMoveBack && bFrequencyMoveDown)
                                                        {
                                                            bSetMoveBack = true;
                                                            GlobalSetMoveBack = true;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        DiscreteFreqDurTextFlag = true;

                                    }
                                }
                                #endregion
                                //Code added for List 5 Task #9 16-feb-2021 change Moveup/down Criteria for Frequncy and Duration START--
                                #region MoveUp in More Than Criteria
                                else if (MoveUpstat == 0)
                                {
                                    TempRules = GetPromptRules(oTemp.TemplateId, iColId);
                                    if (TempRules.pctFrequencyMoveUp.iScoreRequired == 0 || TempRules.pctFrequencyMoveDown.iScoreRequired == 0)
                                    {
                                        freqdureloop++;
                                        bool status = true;
                                        CompletionStatusSet = "";
                                        TempRules = GetSetRules(oTemp.TemplateId, iColId);
                                        freqId = Convert.ToInt32(ViewState["freqId"]);
                                        if (TempRules.pctFrequencyMoveUp.iScoreRequired > 0)
                                        {
                                            bFrequencyMoveUp = ValidateDown(oSession.StudentId, freqId, TempRules.pctFrequencyMoveUp.iScoreRequired, reqSess,
                                                TempRules.pctFrequencyMoveUp.iTotalCorrectInstance, TempRules.pctFrequencyMoveUp.bConsequetiveIndex, status);
                                            int setcount = TrialLists.totalSet;

                                            bRuleStatusIOA = oDisc.checkConditionIOA(bFrequencyMoveUpbIOAReqd, bIOA);
                                            bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bFrequencyMoveUpbMultiTchr, bMultyTchr);
                                            if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                            {

                                                if (bFrequencyMoveUp)
                                                {

                                                    if (oDS.CrntSetNbr < setcount)
                                                        nextSet = oDS.CrntSetNbr + 1;
                                                    if (oDS.CrntSetNbr == setcount)
                                                    {
                                                        nextSet = setcount;
                                                        CompletionStatusSet = "COMPLETED";
                                                    }
                                                    if (CompletionStatusSet == "COMPLETED")
                                                    {
                                                        bSetCompleted = true;
                                                        MaintenanceOrCompletion = true;
                                                    }
                                                    else
                                                    {
                                                        bSetCompleted = false;
                                                        MaintenanceOrCompletion = false;
                                                    }
                                                    if (bSetMoveUp && bFrequencyMoveUp)
                                                    {
                                                        bSetMoveUp = true;
                                                        GlobalSetMoveUp = true;
                                                        if (bSetMoveUp == true && GlobalSetMoveUp == true)
                                                            bPrompt = true;
                                                    }
                                                }
                                            }
                                        }
                                        if (TempRules.pctFrequencyMoveDown.iScoreRequired > 0)
                                        {
                                            bFrequencyMoveDown = ValidateUp(oSession.StudentId, freqId, TempRules.pctFrequencyMoveDown.iScoreRequired, reqSess,
                                                TempRules.pctFrequencyMoveDown.iTotalCorrectInstance, TempRules.pctFrequencyMoveDown.bConsequetiveIndex, status);
                                            int setcount = TrialLists.totalSet;

                                            bRuleStatusIOA = oDisc.checkConditionIOA(bFrequencyMoveDownbIOAReqd, bIOA);
                                            bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bFrequencyMoveDownbMultiTchr, bMultyTchr);
                                            if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                            {

                                                if (bFrequencyMoveDown)
                                                {
                                                    if (oDS.CrntSetNbr <= setcount)
                                                        nextSet = oDS.CrntSetNbr - 1;
                                                    if (oDS.CrntSetNbr == 1)
                                                        nextSet = 1;
                                                    if (bSetMoveBack && bFrequencyMoveDown)
                                                    {
                                                        bSetMoveBack = true;
                                                        GlobalSetMoveBack = true;
                                                    }
                                                }
                                            }
                                        }
                                        DiscreteFreqDurTextFlag = true;


                                    }

                                    else
                                    {
                                        freqdureloop++;
                                        bool status = true;
                                        CompletionStatusSet = "";
                                        freqId = Convert.ToInt32(ViewState["freqId"]);
                                        //for prompt move
                                        TempRules = GetPromptRules(oTemp.TemplateId, iColId);
                                        if (promptUp >= 1)
                                            bPromptFrequencyMoveUp = false;
                                        if (TempRules.pctFrequencyMoveUp.iScoreRequired > 0)
                                        {
                                            bPromptFrequencyMoveUp = ValidateDown(oSession.StudentId, freqId, TempRules.pctFrequencyMoveUp.iScoreRequired, reqSess,
                                                TempRules.pctFrequencyMoveUp.iTotalCorrectInstance, TempRules.pctFrequencyMoveUp.bConsequetiveIndex, status);

                                            bRuleStatusIOA = oDisc.checkConditionIOA(bPromptFrequencyMoveUpbIOAReqd, bIOA);
                                            bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bPromptFrequencyMoveUpbMultiTchr, bMultyTchr);
                                            if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                            {

                                                if (bPromptFrequencyMoveUp)
                                                {
                                                    if (sCurrentPrompt != LessonpromptUsed[LessonpromptUsed.Length - 1])
                                                    {
                                                        int iPromptIndex = DiscreetTrial.Model.PromptIndex(LessonpromptUsed, sCurrentPrompt);
                                                        if (iPromptIndex < LessonpromptUsed.Length)
                                                        {
                                                            sNextLessonPrompt = LessonpromptUsed[iPromptIndex + 1];
                                                            bPromptMoveUp = true;
                                                            bFrequencyMoveUp = false;
                                                            bFrequencyMoveDown = false;
                                                            GlobalPromptMoveUp = true;
                                                        }
                                                        else
                                                            bPromptFrequencyMoveUp = false;
                                                    }
                                                    else
                                                        bPromptFrequencyMoveUp = false;
                                                }
                                            }
                                        }
                                        else
                                            bPromptFrequencyMoveUp = false;
                                        if (!bPromptFrequencyMoveUp)
                                        {
                                            if (promptDown >= 1)
                                                bPromptFrequencyMoveDown = false;
                                            if (TempRules.pctFrequencyMoveDown.iScoreRequired > 0)
                                            {
                                                bPromptFrequencyMoveDown = ValidateUp(oSession.StudentId, freqId, TempRules.pctFrequencyMoveDown.iScoreRequired, reqSess,
                                                    TempRules.pctFrequencyMoveDown.iTotalCorrectInstance, TempRules.pctFrequencyMoveDown.bConsequetiveIndex, status);

                                                bRuleStatusIOA = oDisc.checkConditionIOA(bPromptFrequencyMoveDownbIOAReqd, bIOA);
                                                bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bPromptFrequencyMoveDownbMultiTchr, bMultyTchr);
                                                if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                {
                                                    if (bPromptFrequencyMoveDown)
                                                    {
                                                        if (sCurrentPrompt != LessonpromptUsed[0])
                                                        {
                                                            int iPromptIndex = DiscreetTrial.Model.PromptIndex(LessonpromptUsed, sCurrentPrompt);
                                                            if (iPromptIndex > 0)
                                                            {
                                                                sNextLessonPrompt = LessonpromptUsed[iPromptIndex - 1];
                                                                bPromptMoveBack = true;
                                                                bFrequencyMoveDown = false;
                                                                bFrequencyMoveUp = false;
                                                                GlobalPromptMoveBack = true;
                                                            }
                                                            else
                                                                bPromptFrequencyMoveDown = false;
                                                        }
                                                        else
                                                            bPromptFrequencyMoveDown = false;
                                                    }

                                                }
                                            }
                                        }
                                        else
                                            bPromptFrequencyMoveDown = false;
                                        //end prompt section
                                        if (!bPromptFrequencyMoveUp && !bPromptFrequencyMoveDown)
                                        {
                                            TempRules = GetSetRules(oTemp.TemplateId, iColId);

                                            if (TempRules.pctFrequencyMoveUp.iScoreRequired > 0)
                                            {
                                                bFrequencyMoveUp = ValidateDown(oSession.StudentId, freqId, TempRules.pctFrequencyMoveUp.iScoreRequired, reqSess,
                                                    TempRules.pctFrequencyMoveUp.iTotalCorrectInstance, TempRules.pctFrequencyMoveUp.bConsequetiveIndex, status);
                                                int setcount = TrialLists.totalSet;

                                                bRuleStatusIOA = oDisc.checkConditionIOA(bFrequencyMoveUpbIOAReqd, bIOA);
                                                bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bFrequencyMoveUpbMultiTchr, bMultyTchr);
                                                if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                {

                                                    if (bFrequencyMoveUp)
                                                    {

                                                        if (oDS.CrntSetNbr < setcount)
                                                            nextSet = oDS.CrntSetNbr + 1;
                                                        if (oDS.CrntSetNbr == setcount)
                                                        {
                                                            nextSet = setcount;
                                                            CompletionStatusSet = "COMPLETED";
                                                        }
                                                        if (CompletionStatusSet == "COMPLETED")
                                                        {
                                                            bSetCompleted = true;
                                                            MaintenanceOrCompletion = true;
                                                        }
                                                        else
                                                        {
                                                            bSetCompleted = false;
                                                            MaintenanceOrCompletion = false;
                                                        }
                                                        if (bSetMoveUp && bFrequencyMoveUp)
                                                        {
                                                            bSetMoveUp = true;
                                                            GlobalSetMoveUp = true;
                                                            if (bSetMoveUp == true && GlobalSetMoveUp == true)
                                                                bPrompt = true;
                                                        }
                                                    }
                                                }
                                            }
                                            if (TempRules.pctFrequencyMoveDown.iScoreRequired > 0)
                                            {
                                                bFrequencyMoveDown = ValidateUp(oSession.StudentId, freqId, TempRules.pctFrequencyMoveDown.iScoreRequired, reqSess,
                                                    TempRules.pctFrequencyMoveDown.iTotalCorrectInstance, TempRules.pctFrequencyMoveDown.bConsequetiveIndex, status);
                                                int setcount = TrialLists.totalSet;

                                                bRuleStatusIOA = oDisc.checkConditionIOA(bFrequencyMoveDownbIOAReqd, bIOA);
                                                bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bFrequencyMoveDownbMultiTchr, bMultyTchr);
                                                if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                                {

                                                    if (bFrequencyMoveDown)
                                                    {
                                                        if (oDS.CrntSetNbr <= setcount)
                                                            nextSet = oDS.CrntSetNbr - 1;
                                                        if (oDS.CrntSetNbr == 1)
                                                            nextSet = 1;
                                                        if (bSetMoveBack && bFrequencyMoveDown)
                                                        {
                                                            bSetMoveBack = true;
                                                            GlobalSetMoveBack = true;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        DiscreteFreqDurTextFlag = true;

                                    }
                                }
                                #endregion
                                //Code added for List 5 Task #9 16-feb-2021 change Moveup/down Criteria for Frequncy and Duration END--
                            }
                            #endregion
                            #region %independent of all steps
                            else if (dr["ColTypeCd"].ToString() == "Prompt" && colt2.ToString() == "true" && indtest)
                            {
                                TempRules = GetPromptRules(oTemp.TemplateId, iColId);
                                freqdureloop++;
                                bool status = true;
                                bool check = true;
                                bool check1 = true;
                                CompletionStatusSet = "";
                                IndeallId = Convert.ToInt32(ViewState["IndeallId"]);

                                //for prompt move
                                TempRules = GetPromptRules(oTemp.TemplateId, iColId);
                                if (promptUp >= 1)
                                    bPromptIndallMoveUp = false;
                                if (TempRules.pctIndAllMoveUp.iScoreRequired > 0)
                                {
                                    bPromptIndallMoveUp = ValidateUp1(oSession.StudentId, IndeallId, TempRules.pctIndAllMoveUp.iScoreRequired, reqSess,
                                        TempRules.pctIndAllMoveUp.iTotalCorrectInstance, TempRules.pctIndAllMoveUp.bConsequetiveIndex, status);

                                    bRuleStatusIOA = oDisc.checkConditionIOA(bPromptIndallMoveUpbIOAReqd, bIOA);
                                    bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bPromptIndallMoveUpbMultiTchr, bMultyTchr);
                                    if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                    {

                                        if (bPromptIndallMoveUp)
                                        {
                                            if (sCurrentPrompt != LessonpromptUsed[LessonpromptUsed.Length - 1])
                                            {
                                                int iPromptIndex = DiscreetTrial.Model.PromptIndex(LessonpromptUsed, sCurrentPrompt);
                                                if (iPromptIndex < LessonpromptUsed.Length)
                                                {
                                                    sNextLessonPrompt = LessonpromptUsed[iPromptIndex + 1];
                                                    bPromptMoveUp = true;
                                                    bIndallMoveUp = false;
                                                    bIndallMoveDown = false;
                                                    GlobalPromptMoveUp = true;
                                                }
                                                else
                                                    bPromptIndallMoveUp = false;
                                            }
                                            else
                                                bPromptIndallMoveUp = false;
                                        }
                                    }
                                }
                                else
                                    bPromptIndallMoveUp = false;
                                int iPromptIndex1 = DiscreetTrial.Model.PromptIndex(LessonpromptUsed, sCurrentPrompt);
                                if (iPromptIndex1 > 0 || LessonpromptUsed.Length == 1)
                                {
                                    check = false;
                                }
                                if (!bPromptIndallMoveUp)
                                {
                                    if (promptDown >= 1)
                                        bPromptIndallMoveDown = false;
                                    if (TempRules.pctIndAllMoveDown.iTotalCorrectInstance > 0)
                                    {
                                        bPromptIndallMoveDown = ValidateDown1(oSession.StudentId, IndeallId, TempRules.pctIndAllMoveDown.iScoreRequired, reqSess,
                                            TempRules.pctIndAllMoveDown.iTotalCorrectInstance, TempRules.pctIndAllMoveDown.bConsequetiveIndex, status);

                                        bRuleStatusIOA = oDisc.checkConditionIOA(bPromptIndallMoveDownbIOAReqd, bIOA);
                                        bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bPromptIndallMoveDownbMultiTchr, bMultyTchr);
                                        if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                        {
                                            if (bPromptIndallMoveDown)
                                            {
                                                if (sCurrentPrompt != LessonpromptUsed[0])
                                                {
                                                    int iPromptIndex = DiscreetTrial.Model.PromptIndex(LessonpromptUsed, sCurrentPrompt);
                                                    if (iPromptIndex > 0)
                                                    {
                                                        sNextLessonPrompt = LessonpromptUsed[iPromptIndex - 1];
                                                        bPromptMoveBack = true;
                                                        bIndallMoveDown = false;
                                                        bIndallMoveUp = false;
                                                        GlobalPromptMoveBack = true;
                                                    }
                                                    else
                                                        bPromptIndallMoveDown = false;
                                                }
                                                else
                                                    bPromptIndallMoveDown = false;
                                            }

                                        }
                                    }
                                    else
                                    {
                                        bPromptIndallMoveDown = false;
                                        check1 = false;
                                    }
                                }
                                else
                                    bPromptIndallMoveDown = false;
                                //end prompt section
                                // set Move up
                                if (!bPromptIndallMoveUp && !bPromptIndallMoveDown)
                                {
                                    TempRules = GetSetRules(oTemp.TemplateId, iColId);

                                    if (TempRules.pctIndAllMoveUp.iScoreRequired > 0 && !check)
                                    {
                                        bIndallMoveUp = ValidateUp1(oSession.StudentId, IndeallId, TempRules.pctIndAllMoveUp.iScoreRequired, reqSess,
                                            TempRules.pctIndAllMoveUp.iTotalCorrectInstance, TempRules.pctIndAllMoveUp.bConsequetiveIndex, status);
                                        int setcount = TrialLists.totalSet;

                                        bRuleStatusIOA = oDisc.checkConditionIOA(bIndallMoveUpbIOAReqd, bIOA);
                                        bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bIndallMoveUpbMultiTchr, bMultyTchr);
                                        if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                        {

                                            if (bIndallMoveUp)
                                            {

                                                if (oDS.CrntSetNbr < setcount)
                                                    nextSet = oDS.CrntSetNbr + 1;
                                                if (oDS.CrntSetNbr == setcount)
                                                {
                                                    nextSet = setcount;
                                                    CompletionStatusSet = "COMPLETED";
                                                }
                                                if (bSetMoveUp && bIndallMoveUp)
                                                {
                                                    bSetMoveUp = true;
                                                    GlobalSetMoveUp = true;
                                                }
                                                else
                                                {
                                                    bSetMoveUp = false;
                                                    //GlobalSetMoveUp = false;
                                                }
                                            }
                                            else
                                            {
                                                bSetMoveUp = false;
                                                //GlobalSetMoveUp = false;
                                            }
                                        }
                                    }
                                    if ((TempRules.pctIndAllMoveDown.iTotalCorrectInstance > 0 && check) || (TempRules.pctIndAllMoveDown.iTotalCorrectInstance > 0 && !check1))
                                    {
                                        bIndallMoveDown = ValidateDown1(oSession.StudentId, IndeallId, TempRules.pctIndAllMoveDown.iScoreRequired, reqSess,
                                            TempRules.pctIndAllMoveDown.iTotalCorrectInstance, TempRules.pctIndAllMoveDown.bConsequetiveIndex, status);
                                        int setcount = TrialLists.totalSet;

                                        bRuleStatusIOA = oDisc.checkConditionIOA(bIndallMoveDownbIOAReqd, bIOA);
                                        bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bIndallMoveDownbMultiTchr, bMultyTchr);
                                        if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                        {

                                            if (bIndallMoveDown)
                                            {
                                                if (oDS.CrntSetNbr <= setcount)
                                                    nextSet = oDS.CrntSetNbr - 1;
                                                if (oDS.CrntSetNbr == 1)
                                                {
                                                    nextSet = 1;
                                                    bSetMoveBack = false;
                                                    GlobalStepMoveBack = false;
                                                }
                                                if (bSetMoveBack && bIndallMoveDown)
                                                {
                                                    bSetMoveBack = true;
                                                    GlobalSetMoveBack = true;
                                                }
                                                else
                                                {
                                                    bSetMoveBack = false;
                                                    GlobalSetMoveBack = false;
                                                }
                                            }
                                            else
                                            {
                                                bSetMoveBack = false;
                                                GlobalSetMoveBack = false;
                                            }
                                        }
                                    }
                                }
                                DiscreteFreqDurTextFlag = true;
                            }
                            #endregion
                            #region +/- %independent of all steps

                            else if (dr["ColTypeCd"].ToString() == "+/-" && colt2.ToString() == "true" && indtest)
                            {
                                TempRules = GetPromptRules(oTemp.TemplateId, iColId);
                                freqdureloop++;
                                bool status = true;
                                bool check = true;
                                bool check1 = true;
                                CompletionStatusSet = "";
                                IndeallId = Convert.ToInt32(ViewState["IndeallId"]);

                                //for prompt move
                                TempRules = GetPromptRules(oTemp.TemplateId, iColId);
                                if (promptUp >= 1)
                                    bPromptIndallMoveUp = false;
                                if (TempRules.pctIndAllMoveUp.iScoreRequired > 0)
                                {
                                    bPromptIndallMoveUp = ValidateUp1(oSession.StudentId, IndeallId, TempRules.pctIndAllMoveUp.iScoreRequired, reqSess,
                                        TempRules.pctIndAllMoveUp.iTotalCorrectInstance, TempRules.pctIndAllMoveUp.bConsequetiveIndex, status);

                                    bRuleStatusIOA = oDisc.checkConditionIOA(bPromptIndallMoveUpbIOAReqd, bIOA);
                                    bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bPromptIndallMoveUpbMultiTchr, bMultyTchr);
                                    if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                    {

                                        if (bPromptIndallMoveUp)
                                        {
                                            if (sCurrentLessonPrompt != LessonpromptUsed[LessonpromptUsed.Length - 1])
                                            {
                                                int iPromptIndex = DiscreetTrial.Model.PromptIndex(LessonpromptUsed, sCurrentLessonPrompt);
                                                if (iPromptIndex < LessonpromptUsed.Length)
                                                {
                                                    sNextLessonPrompt = LessonpromptUsed[iPromptIndex + 1];
                                                    bPromptMoveUp = true;
                                                    bIndallMoveUp = false;
                                                    bIndallMoveDown = false;
                                                    GlobalPromptMoveUp = true;
                                                }
                                                else
                                                    bPromptIndallMoveUp = false;
                                            }
                                            else
                                                bPromptIndallMoveUp = false;
                                        }
                                    }
                                }
                                else
                                    bPromptIndallMoveUp = false;
                                int iPromptIndex1 = DiscreetTrial.Model.PromptIndex(LessonpromptUsed, sCurrentLessonPrompt);
                                if (iPromptIndex1 > 0 || LessonpromptUsed.Length == 1)
                                {
                                    check = false;
                                }
                                if (!bPromptIndallMoveUp)
                                {
                                    if (promptDown >= 1)
                                        bPromptIndallMoveDown = false;
                                    if (TempRules.pctIndAllMoveDown.iTotalCorrectInstance > 0)
                                    {
                                        bPromptIndallMoveDown = ValidateDown1(oSession.StudentId, IndeallId, TempRules.pctIndAllMoveDown.iScoreRequired, reqSess,
                                            TempRules.pctIndAllMoveDown.iTotalCorrectInstance, TempRules.pctIndAllMoveDown.bConsequetiveIndex, status);

                                        bRuleStatusIOA = oDisc.checkConditionIOA(bPromptIndallMoveDownbIOAReqd, bIOA);
                                        bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bPromptIndallMoveDownbMultiTchr, bMultyTchr);
                                        if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                        {
                                            if (bPromptIndallMoveDown)
                                            {
                                                if (sCurrentLessonPrompt != LessonpromptUsed[0])
                                                {
                                                    int iPromptIndex = DiscreetTrial.Model.PromptIndex(LessonpromptUsed, sCurrentLessonPrompt);
                                                    if (iPromptIndex > 0)
                                                    {
                                                        sNextLessonPrompt = LessonpromptUsed[iPromptIndex - 1];
                                                        bPromptMoveBack = true;
                                                        bIndallMoveDown = false;
                                                        bIndallMoveUp = false;
                                                        GlobalPromptMoveBack = true;
                                                    }
                                                    else
                                                        bPromptIndallMoveDown = false;
                                                }
                                                else
                                                    bPromptIndallMoveDown = false;
                                            }

                                        }
                                    }
                                    else
                                    {
                                        bPromptIndallMoveDown = false;
                                        check1 = false;
                                    }
                                }
                                else
                                    bPromptIndallMoveDown = false;
                                //end prompt section
                                // set Move up
                                if (!bPromptIndallMoveUp && !bPromptIndallMoveDown)
                                {
                                    TempRules = GetSetRules(oTemp.TemplateId, iColId);

                                    if (TempRules.pctIndAllMoveUp.iScoreRequired > 0 && !check)
                                    {
                                        bIndallMoveUp = ValidateUp1(oSession.StudentId, IndeallId, TempRules.pctIndAllMoveUp.iScoreRequired, reqSess,
                                            TempRules.pctIndAllMoveUp.iTotalCorrectInstance, TempRules.pctIndAllMoveUp.bConsequetiveIndex, status);
                                        int setcount = TrialLists.totalSet;

                                        bRuleStatusIOA = oDisc.checkConditionIOA(bIndallMoveUpbIOAReqd, bIOA);
                                        bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bIndallMoveUpbMultiTchr, bMultyTchr);
                                        if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                        {

                                            if (bIndallMoveUp)
                                            {

                                                if (oDS.CrntSetNbr < setcount)
                                                    nextSet = oDS.CrntSetNbr + 1;
                                                if (oDS.CrntSetNbr == setcount)
                                                {
                                                    nextSet = setcount;
                                                    CompletionStatusSet = "COMPLETED";
                                                }
                                                if (bSetMoveUp && bIndallMoveUp)
                                                {
                                                    bSetMoveUp = true;
                                                    GlobalSetMoveUp = true;
                                                }
                                                else
                                                {
                                                    bSetMoveUp = false;
                                                    //GlobalSetMoveUp = false;
                                                }
                                            }
                                            else
                                            {
                                                bSetMoveUp = false;
                                                //GlobalSetMoveUp = false;
                                            }
                                        }
                                    }
                                    if ((TempRules.pctIndAllMoveDown.iTotalCorrectInstance > 0 && check) || (TempRules.pctIndAllMoveDown.iTotalCorrectInstance > 0 && !check1))
                                    {
                                        bIndallMoveDown = ValidateDown1(oSession.StudentId, IndeallId, TempRules.pctIndAllMoveDown.iScoreRequired, reqSess,
                                            TempRules.pctIndAllMoveDown.iTotalCorrectInstance, TempRules.pctIndAllMoveDown.bConsequetiveIndex, status);
                                        int setcount = TrialLists.totalSet;

                                        bRuleStatusIOA = oDisc.checkConditionIOA(bIndallMoveDownbIOAReqd, bIOA);
                                        bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bIndallMoveDownbMultiTchr, bMultyTchr);
                                        if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                        {

                                            if (bIndallMoveDown)
                                            {
                                                if (oDS.CrntSetNbr <= setcount)
                                                    nextSet = oDS.CrntSetNbr - 1;
                                                if (oDS.CrntSetNbr == 1)
                                                {
                                                    nextSet = 1;
                                                    bSetMoveBack = false;
                                                    GlobalSetMoveBack = false;
                                                }
                                                if (bSetMoveBack && bIndallMoveDown)
                                                {
                                                    bSetMoveBack = true;
                                                    GlobalSetMoveBack = true;
                                                }
                                                else
                                                {
                                                    bSetMoveBack = false;
                                                    GlobalSetMoveBack = false;
                                                }
                                            }
                                            else
                                            {
                                                bSetMoveBack = false;
                                                GlobalSetMoveBack = false;
                                            }
                                        }
                                    }
                                }
                                DiscreteFreqDurTextFlag = true;
                            }
                            #endregion
                            else
                            {
                                discreteCols[sColName].SetInputData(sCurrentPrompt, TargetPrompt, iCurrentSetNbr.ToString(), TrialLists.totalSet.ToString(), TrialLists.arTrials);
                                sesResult[index] = DiscreetTrial.Model.Execute(discreteCols[sColName], bpromptColumn);
                                if (set_moveupCount > 0)
                                {
                                    if (sesResult[index].MovedForwardSet && discreteCols[sColName].IsInfluencedBy(DiscreteMoveType.SetMoveUp))
                                    {
                                        bSetMoveUp = sesResult[index].MovedForwardSet;
                                        nextSet = sesResult[index].NextSet;
                                        CompletionStatusSet = sesResult[index].CompletionStatus;
                                        if (bSetMoveUp)
                                            GlobalSetMoveUp = true;
                                        if (CompletionStatusSet == "COMPLETED")
                                        {
                                            bSetCompleted = true;
                                            MaintenanceOrCompletion = true;
                                        }
                                        else
                                        {
                                            bSetCompleted = false;
                                            MaintenanceOrCompletion = false;
                                        }
                                    }
                                    else
                                    {
                                        bSetMoveUp = false;
                                    }
                                }
                                else
                                {
                                    bSetMoveUp = false;
                                }

                                if (set_movedownCount > 0)
                                {

                                    if (sesResult[index].MovedBackSet && discreteCols[sColName].IsInfluencedBy(DiscreteMoveType.SetMoveDown))
                                    {
                                        if (iCurrentSetNbr > 1)
                                        {
                                            bSetMoveBack = sesResult[index].MovedBackSet;
                                            nextSet = sesResult[index].NextSet;
                                            if (bSetMoveBack)
                                            {
                                                bSetCompleted = false;
                                                GlobalSetMoveBack = true;
                                            }
                                        }
                                        else
                                        {
                                            bSetMoveBack = false;
                                            //GlobalSetMoveBack = false;
                                        }


                                    }
                                    else
                                    {
                                        bSetMoveBack = false;
                                        //GlobalSetMoveBack = false;
                                    }
                                }
                                else
                                {
                                    bSetMoveBack = false;
                                }




                                if (sesResult[index].MovedForwardPrompt && discreteCols[sColName].IsInfluencedBy(DiscreteMoveType.PromptMoveup))
                                {
                                    bPromptMoveUp = true;
                                    GlobalPromptMoveUp = true;
                                    sNextLessonPrompt = sesResult[index].NextPrompt;
                                    if (sesResult[index].NextPrompt == "+")
                                    {
                                        if (LessonpromptUsedOther.Length > crntPrmtIndex + 1)
                                        {
                                            sNextLessonPrompt = LessonpromptUsedOther[crntPrmtIndex + 1];
                                            sesResult[index].CompletionStatus = "NOT COMPLETED";
                                        }
                                        else
                                        {
                                            bPromptMoveUp = false;
                                            GlobalPromptMoveUp = false;
                                        }
                                        //bSetMoveUp = sesResult[index].MovedForwardSet;
                                        //bSetMoveBack = sesResult[index].MovedBackSet;
                                    }
                                }
                                if (sesResult[index].MovedBackPrompt && discreteCols[sColName].IsInfluencedBy(DiscreteMoveType.PromptMoveDown))
                                {
                                    bPromptMoveBack = true;
                                    GlobalPromptMoveBack = true;
                                    sNextLessonPrompt = sesResult[index].NextPrompt;
                                    if (sesResult[index].NextPrompt == "+")
                                    {
                                        if (crntPrmtIndex > 0)
                                        {
                                            sNextLessonPrompt = LessonpromptUsedOther[crntPrmtIndex - 1];
                                            sesResult[index].CompletionStatus = "NOT COMPLETED";
                                        }
                                        else
                                        {
                                            bPromptMoveBack = false;
                                            GlobalPromptMoveBack = false;
                                        }
                                    }
                                    //bSetMoveUp = sesResult[index].MovedForwardSet;
                                    //bSetMoveBack = sesResult[index].MovedBackSet;
                                }
                            }

                            loop++;
                        }
                        else
                        {
                            loop++;

                            //bSetMoveUp = false;
                            //bSetMoveBack = false;
                            //bPromptMoveUp = false;
                            //bPromptMoveBack = false;
                        }


                        ///-----------------------------------------------------------------------------------


                        if (bSetMoveUp && (bTotDurationMoveUp && bAvgDurationMoveUp && bFrequencyMoveUp))
                        {
                            bSetMoveUp = true;
                            GlobalSetMoveUp = true;
                            //bSetMoveBack = false;
                            if (CompletionStatusSet == "COMPLETED")
                            {
                                bSetCompleted = true;
                                MaintenanceOrCompletion = true;
                            }
                            else
                            {
                                bSetCompleted = false;
                                MaintenanceOrCompletion = false;
                            }
                        }
                        else
                        {
                            bSetMoveUp = false;
                            //GlobalSetMoveUp = false;
                        }


                        if (bSetMoveBack && (bTotDurationMoveDown && bAvgDurationMoveDown && bFrequencyMoveDown))
                        {
                            //bSetMoveUp = false;
                            bSetMoveBack = true;
                            //GlobalSetMoveBack = true;
                        }
                        else
                        {
                            bSetMoveBack = false;
                            //GlobalSetMoveBack = false;
                        }






                        ////----------------------------------------------------------------------------------




                        if (bPrompt == false && promptUsed.Length > 0)
                        {
                            promptUsed[0] = "0";
                        }
                        int iPrompt = 0;
                        string sEventAlertStatus = "";

                        //ash: set isColNA to true if the col is used is criteria and its score is NA
                        if (checkIfScoreIsNA(discreteCols[sColName].IsInfluencedBy(DiscreteMoveType.PromptMoveDown), iColId) == true || checkIfScoreIsNA(discreteCols[sColName].IsInfluencedBy(DiscreteMoveType.SetMoveDown), iColId) == true)
                        {
                            isColNA = true;
                        }

                        if (count == loop && isColNA == false)
                        {
                            oDisc = new DiscreteSession();
                            bSetMoveUp = false;
                            bSetMoveBack = false;

                            if (bPromtHirchy && (LessonTargetPrompt.Trim() != sCurrentLessonPrompt.Trim()))
                            {

                                bSetMoveUp = false;
                                bSetCompleted = false;
                                if (!bSetMoveUp && !bSetCompleted)
                                {
                                    MaintenanceOrCompletion = false;
                                    CompletionStatusSet = "";
                                    GlobalSetMoveUp = false;
                                }
                            }

                        }
                    }
                    #endregion
                }
                #endregion  -- NAColumn Remove
            }
            #endregion

            #region Chained new Movement
            if (sSkillType == "Chained")
            {
                string Status = "";
                if (GlobalPromptMoveBack || GlobalStepMoveBack || GlobalSetMoveBack)
                {
                    if (oDS.ChainType == "Total Task")
                    {
                        GlobalIsFirstStep = true;
                    }
                    if (!GlobalPromptMoveBack && !GlobalStepMoveBack && GlobalSetMoveBack && GlobalIsFirstStep && GlobalIsFirstPrompt)
                    {
                        Status = "SetMoveBack";
                    }
                    else if (!GlobalPromptMoveBack && GlobalStepMoveBack && !GlobalSetMoveBack && GlobalIsFirstPrompt)
                    {
                        Status = "StepMoveBack";
                    }
                    else if (GlobalPromptMoveBack && !GlobalStepMoveBack && !GlobalSetMoveBack && !GlobalIsFirstPrompt)
                    {
                        Status = "PromptMoveBack";
                    }
                    else if (GlobalPromptMoveBack && GlobalStepMoveBack && !GlobalSetMoveBack && GlobalIsFirstPrompt)
                    {
                        Status = "StepMoveBack";
                    }
                    else if (!GlobalPromptMoveBack && GlobalStepMoveBack && GlobalSetMoveBack && GlobalIsFirstPrompt)
                    {
                        Status = "StepMoveBack";
                    }
                    else if (GlobalPromptMoveBack && !GlobalStepMoveBack && GlobalSetMoveBack && !GlobalIsFirstPrompt)
                    {
                        Status = "PromptMoveBack";
                    }
                }
                else if (GlobalPromptMoveUp || GlobalStepMoveUp || GlobalSetMoveUp)
                {
                    if (oDS.ChainType == "Total Task")
                    {
                        GlobalIsFinalStep = true;
                    }
                    if (!MaintenanceOrCompletion)
                    {
                        bSetCompleted = false;
                        CompletionStatusSet = "";
                    }
                    if (!GlobalPromptMoveUp && !GlobalStepMoveUp && GlobalSetMoveUp && GlobalIsFinalStep && GlobalIsFinalPrompt && !MaintenanceOrCompletion)
                    {
                        Status = "SetMoveUP";
                    }
                    else if (!GlobalPromptMoveUp && GlobalStepMoveUp && !GlobalSetMoveUp && GlobalIsFinalPrompt && !MaintenanceOrCompletion)
                    {
                        Status = "StepMoveUP";
                    }
                    else if (GlobalPromptMoveUp && !GlobalStepMoveUp && !GlobalSetMoveUp && !GlobalIsFinalPrompt && !MaintenanceOrCompletion)
                    {
                        Status = "PromptMoveUP";
                    }
                    else if (GlobalPromptMoveUp && GlobalStepMoveUp && !GlobalSetMoveUp && GlobalIsFinalPrompt && !MaintenanceOrCompletion)
                    {
                        Status = "StepMoveUP";
                    }
                    else if (!GlobalPromptMoveUp && GlobalStepMoveUp && GlobalSetMoveUp && GlobalIsFinalPrompt && !MaintenanceOrCompletion)
                    {
                        Status = "StepMoveUP";
                    }
                    else if (GlobalPromptMoveUp && !GlobalStepMoveUp && GlobalSetMoveUp && !GlobalIsFinalPrompt && !MaintenanceOrCompletion)
                    {
                        Status = "PromptMoveUP";
                    }
                    else if (!GlobalPromptMoveUp && !GlobalStepMoveUp && GlobalSetMoveUp && GlobalIsFinalSet && GlobalIsFinalStep && GlobalIsFinalPrompt && MaintenanceOrCompletion)
                    {
                        //bSetCompleted = true;
                        CompletionStatusSet = "COMPLETED";
                        Status = "SetMoveUP";
                    }
                    else
                    {
                        CompletionStatusSet = "";
                        bSetCompleted = false;
                        MaintenanceOrCompletion = false;
                    }
                }


                if (sesResultchain != null && sesResultchainBkp != null)
                    for (int i = 0; i < sesResultchainBkp.Length; i++)
                    {
                        if (sesResultchainBkp[i] != null)
                        {
                            if (sesResultchainBkp[i].MovedBackSet && Status.Equals("SetMoveBack"))
                            {
                                sesResultchain[0] = sesResultchainBkp[i];
                                nextSet = sesResultchain[0].NextSet;
                            }
                            if (sesResultchainBkp[i].MovedBackStep && Status.Equals("StepMoveBack"))
                            {
                                sesResultchain[0] = sesResultchainBkp[i];
                            }
                            if (sesResultchainBkp[i].MovedBackPrompt && Status.Equals("PromptMoveBack"))
                            {
                                sesResultchain[0] = sesResultchainBkp[i];
                            }
                            if (sesResultchainBkp[i].MovedForwardSet && Status.Equals("SetMoveUP"))
                            {
                                sesResultchain[0] = sesResultchainBkp[i];
                                nextSet = sesResultchain[0].NextSet;
                            }
                            if (sesResultchainBkp[i].MovedForwardStep && Status.Equals("StepMoveUP"))
                            {
                                sesResultchain[0] = sesResultchainBkp[i];
                            }
                            if (sesResultchainBkp[i].MovedForwardPrompt && Status.Equals("PromptMoveUP"))
                            {
                                sesResultchain[0] = sesResultchainBkp[i];
                            }
                            if (sesResultchainBkp[i].CompletionStatus.Equals("COMPLETED") && Status.Equals("SetMoveUP"))
                            {
                                sesResultchain[0] = sesResultchainBkp[i];
                                nextSet = sesResultchain[0].NextSet;
                            }
                        }
                    }



                int iPrompt = 0;
                string sEventType = "";
                string sEventAlertStatus = "";
                oDisc = new DiscreteSession();
                #region setmoveup
                if ((bSetMoveUp || GlobalSetMoveUp) && (Status == "SetMoveUP"))
                {
                    string sLPused = "";
                    if (LessonpromptUsed.Length == 0)
                        sLPused = "0";
                    else
                        sLPused = LessonpromptUsed[LessonpromptUsed.Length - 1];
                    if ((bPromtHirchy && oDS.ChainType == "Total Task" &&
                        Session["StepLevelPrompt"] != null && Convert.ToBoolean(Session["StepLevelPrompt"]) == false
                        && LessonpromptUsed != null && sLessonPrompt == sLPused)
                        || !bPromtHirchy || (bPromtHirchy && oDS.ChainType == "Total Task" &&
                        Session["StepLevelPrompt"] != null && Convert.ToBoolean(Session["StepLevelPrompt"]) == true)
                        || (bPromtHirchy && oDS.ChainType != "Total Task" && LessonpromptUsed != null &&
                        sLessonPrompt == LessonpromptUsed[LessonpromptUsed.Length - 1]))
                    {
                        if (sesResultchain != null)
                        {
                            if (sesResultchain[0] != null)
                            {
                                bRuleStatusIOA = oDisc.checkConditionIOA(bSetMoveUpIOA, bIOA);
                                bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bSetMoveUpMultiTecher, bMultyTchr);

                                //bRuleStatusIOA = oDisc.checkConditionIOA(chainedInptData.IOARequired, bIOA);
                                //bRuleStatusMultiTchr = oDisc.checkConditionIOA(chainedInptData.MultiTeacherRequired, bMultyTchr);
                                if (bRuleStatusIOA && bRuleStatusMultiTchr)
                                {
                                    if (nextSet == 0) { nextSet = 1; }
                                    else
                                    {
                                        if ((bPrompt) || (LessonpromptUsed.Length > 0))
                                        {
                                            if (oDS.PromptProc != "NA")
                                            {
                                                if ((oDS.PromptProc == "Least-to-Most") || (oDS.PromptProc == "Graduated Guidance"))
                                                {

                                                    iPrompt = Convert.ToInt32(LessonpromptUsed[LessonpromptUsed.Length - 1]);
                                                    sesResultchain[0].NextPrompt = iPrompt.ToString();
                                                }
                                                else
                                                {
                                                    iPrompt = Convert.ToInt32(LessonpromptUsed[0]);

                                                }
                                            }
                                        }
                                        sEventType = "SET MOVEUP";
                                        if (bPrompt)
                                        {
                                            if (sesResultchain[0].CompletionStatus == "COMPLETED" || CompletionStatusSet == "COMPLETED")
                                            {
                                                oDisc.updateSetStatus(oSession.SchoolId, oSession.Classid, oSession.StudentId, oTemp.TemplateId, iCurrentSetId, Convert.ToInt32(LessonTargetPrompt), nextSet.ToString(), CompletionStatusSet, sEventType, iSessionNmbr, oSession.LoginId, sLessonPlanId);

                                            }
                                            else
                                            {
                                                oDisc.updateSetStatus(oSession.SchoolId, oSession.Classid, oSession.StudentId, oTemp.TemplateId, iCurrentSetId, iPrompt, nextSet.ToString(), CompletionStatusSet, sEventType, iSessionNmbr, oSession.LoginId, sLessonPlanId);
                                            }
                                        }
                                        else
                                        {
                                            if (LessonpromptUsed.Length > 0)
                                            {
                                                if (bSetPromptMoveupNA)
                                                {
                                                    if (oDS.PromptProc != "NA")
                                                    {
                                                        if ((oDS.PromptProc == "Least-to-Most") || (oDS.PromptProc == "Graduated Guidance"))
                                                        {
                                                            iPrompt = Convert.ToInt32(LessonpromptUsed[LessonpromptUsed.Length - 1]);
                                                            sesResultchain[0].NextPrompt = iPrompt.ToString();
                                                        }
                                                        else
                                                        {
                                                            iPrompt = Convert.ToInt32(LessonpromptUsed[0]);
                                                        }
                                                    }
                                                    if (sesResultchain[0].CompletionStatus == "COMPLETED" || CompletionStatusSet == "COMPLETED")
                                                    {
                                                        oDisc.updateSetStatus(oSession.SchoolId, oSession.Classid, oSession.StudentId, oTemp.TemplateId, iCurrentSetId, Convert.ToInt32(LessonTargetPrompt), nextSet.ToString(), CompletionStatusSet, sEventType, iSessionNmbr, oSession.LoginId, sLessonPlanId);

                                                    }
                                                    else
                                                    {
                                                        oDisc.updateSetStatus(oSession.SchoolId, oSession.Classid, oSession.StudentId, oTemp.TemplateId, iCurrentSetId, iPrompt, nextSet.ToString(), CompletionStatusSet, sEventType, iSessionNmbr, oSession.LoginId, sLessonPlanId);
                                                    }
                                                }
                                                else
                                                    oDisc.updateSetStatus(oSession.SchoolId, oSession.Classid, oSession.StudentId, oTemp.TemplateId, iCurrentSetId, nextSet.ToString(), CompletionStatusSet, sEventType, iSessionNmbr, oSession.LoginId, sLessonPlanId);
                                            }
                                            else
                                                oDisc.updateSetStatus(oSession.SchoolId, oSession.Classid, oSession.StudentId, oTemp.TemplateId, iCurrentSetId, nextSet.ToString(), CompletionStatusSet, sEventType, iSessionNmbr, oSession.LoginId, sLessonPlanId);

                                        }
                                        bPromptMoveUp = false;
                                        GlobalPromptMoveUp = false;
                                        //oDisc.updateSetStatus(oSession.SchoolId, oSession.Classid, oSession.StudentId, oTemp.TemplateId, sesResultchain[0].NextSet.ToString(), sesResultchain[0].CompletionStatus, sEventType, iSessionNmbr, oSession.LoginId);
                                        //if (sesResultchain[0].CompletionStatus == "COMPLETED")
                                        //{
                                        //    oDisc.insertEventStatus(oSession.SchoolId, oSession.Classid, oSession.StudentId, oTemp.TemplateId, sesResultchain[0].CompletionStatus, sEventType, iSessionNmbr);
                                        //}
                                        if (oDS.ChainType == "Total Task")
                                        {
                                            if (sesResultchain[0].CompletionStatus == "COMPLETED")
                                            {
                                                oDisc.updateStepPromptForTotalTask(oTemp.TemplateId, oSession.StudentId, oSession.LoginId, Convert.ToInt32(LessonTargetPrompt));
                                            }
                                            else
                                            {
                                                oDisc.updateStepPromptForTotalTask(oTemp.TemplateId, oSession.StudentId, oSession.LoginId, iPrompt);
                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    sesResultchain[0].CompletionStatus = "NOT COMPLETED";
                                    bSetCompleted = false;
                                    if (!bRuleStatusIOA)
                                    {

                                        // Functionto reset rule type values in StdtEvent Table
                                        oDisc.resetEvntStatus(oSession.Classid, oSession.StudentId, oTemp.TemplateId);
                                        sEventAlertStatus = "IOAEvntStatus=true,Set_MoveUp=true";
                                        // Functionto Update rule Events values in StdtEvent Table
                                        oDisc.UpdateAlertEvent(oTemp.TemplateId, sEventAlertStatus);
                                    }
                                    if (!bRuleStatusMultiTchr)
                                    {
                                        // Functionto reset rule type values in StdtEvent Table
                                        oDisc.resetEvntStatus(oSession.Classid, oSession.StudentId, oTemp.TemplateId);
                                        sEventAlertStatus = "MultiTchrEvntStatus=true,Set_MoveUp=true";
                                        // Functionto Update rule Events values in StdtEvent Table
                                        oDisc.UpdateAlertEvent(oTemp.TemplateId, sEventType);
                                    }
                                }
                            }
                            else
                            {
                                bSetCompleted = false;
                            }
                        }
                    }


                    DisplayIOA_MTstatus(bRuleStatusIOA, bRuleStatusMultiTchr, oDS.CrntSet, bSetMoveUp, "Set");
                }
                #endregion
                #region setmoveback
                if ((bSetMoveBack || GlobalSetMoveBack) && (Status == "SetMoveBack"))
                {
                    bRuleStatusIOA = oDisc.checkConditionIOA(bSetMoveDownIOA, bIOA);
                    bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bSetMoveDownMultiTecher, bMultyTchr);
                    if (sesResultchain != null)
                    {
                        if (sesResultchain[0] != null)
                        {
                            if (bRuleStatusIOA && bRuleStatusMultiTchr)
                            {
                                if (nextSet == 0) { nextSet = 1; }
                                else
                                {
                                    DataTable dtModificatn = GetModificationDetails("SET", oTemp.TemplateId);
                                    if (dtModificatn != null)
                                    {
                                        if (dtModificatn.Rows.Count > 0)
                                        {
                                            bool mod_flag = CheckSetModification(Convert.ToInt32(dtModificatn.Rows[0]["ModificationRule"].ToString()), oTemp.TemplateId, iCurrentSetId);

                                            //if (mod_flag)
                                            //{
                                            //    oData = new clsData();
                                            //    string updqry = "UPDATE DSTempHdr SET ModificationInd=1,ModifiedBy=" + oSession.LoginId + ",ModifiedOn=GETDATE() WHERE DSTempHdrId=" + oTemp.TemplateId;
                                            //    oData.Execute(updqry);
                                            //}
                                            if (mod_flag)
                                            {
                                                oData = new clsData();
                                                string selqry = "SELECT ISNULL(ModificationInd, 0) as ModificationInd FROM DSTempHdr WHERE DSTempHdrId=" + oTemp.TemplateId;
                                                object mod = oData.FetchValue(selqry);
                                                if (mod != null)
                                                {
                                                    if (Convert.ToBoolean(mod) != true)
                                                    {
                                                        string insqry = "INSERT INTO StdtSessEvent(SchoolId,ClassId,StudentId,DSTempHdrId,StdtSessEventType,EvntTs,SessionNbr,EventType)VALUES" +
                                                        "(" + oSession.SchoolId + "," + oSession.Classid + "," + oSession.StudentId + "," + oTemp.TemplateId + ",'MODIFICATION',GETDATE()," + iSessionNmbr + ",'EV')";
                                                        oData.Execute(insqry);

                                                        string updqry = "UPDATE DSTempHdr SET ModificationInd=1,ModifiedBy=" + oSession.LoginId + ",ModifiedOn=GETDATE() WHERE DSTempHdrId=" + oTemp.TemplateId;
                                                        oData.Execute(updqry);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    if ((bPrompt) || (LessonpromptUsed.Length > 0))
                                    {
                                        if (oDS.PromptProc != "NA")
                                        {
                                            if ((oDS.PromptProc == "Least-to-Most") || (oDS.PromptProc == "Graduated Guidance"))
                                            {
                                                iPrompt = Convert.ToInt32(LessonpromptUsed[LessonpromptUsed.Length - 1]);
                                                sesResultchain[0].NextPrompt = iPrompt.ToString();
                                            }
                                            else
                                            {
                                                iPrompt = Convert.ToInt32(LessonpromptUsed[0]);

                                            }
                                        }
                                    }
                                    sEventType = "SET MOVEDOWN";
                                    if (bPrompt)
                                        oDisc.updateSetStatus(oSession.SchoolId, oSession.Classid, oSession.StudentId, oTemp.TemplateId, iCurrentSetId, iPrompt, nextSet.ToString(), sesResultchain[0].CompletionStatus, sEventType, iSessionNmbr, oSession.LoginId, sLessonPlanId);
                                    else
                                    {
                                        if (LessonpromptUsed.Length > 0)
                                        {
                                            if (bSetPromptMovedownNA)
                                            {
                                                if (oDS.PromptProc != "NA")
                                                {
                                                    if ((oDS.PromptProc == "Least-to-Most") || (oDS.PromptProc == "Graduated Guidance"))
                                                    {
                                                        iPrompt = Convert.ToInt32(LessonpromptUsed[LessonpromptUsed.Length - 1]);
                                                        sesResultchain[0].NextPrompt = iPrompt.ToString();
                                                    }
                                                    else
                                                    {
                                                        iPrompt = Convert.ToInt32(LessonpromptUsed[0]);
                                                    }
                                                }
                                                oDisc.updateSetStatus(oSession.SchoolId, oSession.Classid, oSession.StudentId, oTemp.TemplateId, iCurrentSetId, iPrompt, nextSet.ToString(), sesResultchain[0].CompletionStatus, sEventType, iSessionNmbr, oSession.LoginId, sLessonPlanId);
                                            }
                                            else
                                                oDisc.updateSetStatus(oSession.SchoolId, oSession.Classid, oSession.StudentId, oTemp.TemplateId, iCurrentSetId, nextSet.ToString(), sesResultchain[0].CompletionStatus, sEventType, iSessionNmbr, oSession.LoginId, sLessonPlanId);
                                        }
                                        else
                                            oDisc.updateSetStatus(oSession.SchoolId, oSession.Classid, oSession.StudentId, oTemp.TemplateId, iCurrentSetId, nextSet.ToString(), sesResultchain[0].CompletionStatus, sEventType, iSessionNmbr, oSession.LoginId, sLessonPlanId);


                                    }
                                    //oDisc.updateSetStatus(oSession.SchoolId, oSession.Classid, oSession.StudentId, oTemp.TemplateId, sesResultchain[0].NextSet.ToString(), sesResultchain[0].CompletionStatus, sEventType, iSessionNmbr, oSession.LoginId);
                                    //if (sesResultchain[0].CompletionStatus == "COMPLETED")
                                    //{
                                    //    oDisc.insertEventStatus(oSession.SchoolId, oSession.Classid, oSession.StudentId, oTemp.TemplateId, sesResultchain[0].CompletionStatus, sEventType, iSessionNmbr);
                                    //}
                                    if (oDS.ChainType == "Total Task")
                                    {
                                        oDisc.updateStepPromptForTotalTask(oTemp.TemplateId, oSession.StudentId, oSession.LoginId, Convert.ToInt32(iPrompt));
                                    }
                                }
                            }
                            else
                            {
                                sesResultchain[0].CompletionStatus = "NOT COMPLETED";
                                bSetCompleted = false;
                                if (!bRuleStatusIOA)
                                {
                                    // Functionto reset rule type values in StdtEvent Table
                                    oDisc.resetEvntStatus(oSession.Classid, oSession.StudentId, oTemp.TemplateId);
                                    sEventAlertStatus = "IOAEvntStatus=true,Set_MoveDown=true";
                                    // Functionto Update rule Events values in StdtEvent Table
                                    oDisc.UpdateAlertEvent(oTemp.TemplateId, sEventAlertStatus);
                                }
                                if (!bRuleStatusMultiTchr)
                                {
                                    // Functionto reset rule type values in StdtEvent Table
                                    oDisc.resetEvntStatus(oSession.Classid, oSession.StudentId, oTemp.TemplateId);
                                    sEventAlertStatus = "MultiTchrEvntStatus=true,Set_MoveDown=true";
                                    // Functionto Update rule Events values in StdtEvent Table
                                    oDisc.UpdateAlertEvent(oTemp.TemplateId, sEventType);
                                }
                            }
                        }
                    }
                    DisplayIOA_MTstatus(bRuleStatusIOA, bRuleStatusMultiTchr, oDS.CrntSet, bSetMoveBack, "Set");
                }
                #endregion
                #region stepmoveup
                if ((bStepMoveUp || GlobalStepMoveUp) && (Status == "StepMoveUP"))
                {
                    bRuleStatusIOA = oDisc.checkConditionIOA(bStepMoveUpIOA, bIOA);
                    bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bStepMoveUpMultiTecher, bMultyTchr);
                    if (sesResultchain != null)
                    {
                        if (sesResultchain[0] != null)
                        {
                            if (bRuleStatusIOA && bRuleStatusMultiTchr)
                            {
                                if (nextStep == 0) { nextStep = 1; }
                                else
                                {
                                    if ((bPrompt) || (LessonpromptUsed.Length > 0))
                                    {
                                        if (oDS.PromptProc != "NA")
                                        {
                                            if ((oDS.PromptProc == "Least-to-Most") || (oDS.PromptProc == "Graduated Guidance"))
                                            {
                                                iPrompt = Convert.ToInt32(LessonpromptUsed[LessonpromptUsed.Length - 1]);
                                                sesResultchain[0].NextPrompt = iPrompt.ToString();
                                            }
                                            else
                                            {
                                                iPrompt = Convert.ToInt32(LessonpromptUsed[0]);
                                            }
                                        }
                                    }
                                    sEventType = "STEP MOVEUP";
                                    if (bPrompt)
                                        oDisc.updateStepStatus(oSession.SchoolId, oSession.Classid, oSession.StudentId, iCurrentStep, iCurrentSetId, oTemp.TemplateId, iPrompt, nextStep.ToString(), sesResultchain[0].CompletionStatus, sEventType, iSessionNmbr, oSession.LoginId, sLessonPlanId);
                                    else
                                    {
                                        if (LessonpromptUsed.Length > 0)
                                        {
                                            if (bPromptMoveupNA)
                                            {
                                                if (oDS.PromptProc != "NA")
                                                {
                                                    if ((oDS.PromptProc == "Least-to-Most") || (oDS.PromptProc == "Graduated Guidance"))
                                                    {
                                                        iPrompt = Convert.ToInt32(LessonpromptUsed[LessonpromptUsed.Length - 1]);
                                                        sesResultchain[0].NextPrompt = iPrompt.ToString();
                                                    }
                                                    else
                                                    {
                                                        iPrompt = Convert.ToInt32(LessonpromptUsed[0]);
                                                    }
                                                }
                                                oDisc.updateStepStatus(oSession.SchoolId, oSession.Classid, oSession.StudentId, iCurrentStep, iCurrentSetId, oTemp.TemplateId, iPrompt, nextStep.ToString(), sesResultchain[0].CompletionStatus, sEventType, iSessionNmbr, oSession.LoginId, sLessonPlanId);
                                            }
                                            else
                                                oDisc.updateStepStatus(oSession.SchoolId, oSession.Classid, oSession.StudentId, iCurrentStep, iCurrentSetId, oTemp.TemplateId, nextStep.ToString(), sesResultchain[0].CompletionStatus, sEventType, iSessionNmbr, oSession.LoginId, sLessonPlanId);
                                        }
                                        else
                                            oDisc.updateStepStatus(oSession.SchoolId, oSession.Classid, oSession.StudentId, iCurrentStep, iCurrentSetId, oTemp.TemplateId, nextStep.ToString(), sesResultchain[0].CompletionStatus, sEventType, iSessionNmbr, oSession.LoginId, sLessonPlanId);
                                    }
                                    bPromptMoveUp = false;
                                    GlobalPromptMoveUp = false;
                                    //oDisc.updateStepStatus(oSession.SchoolId, oSession.Classid, oSession.StudentId, oTemp.TemplateId, sesResultchain[0].NextStep.ToString(), sesResultchain[0].CompletionStatus, sEventType, iSessionNmbr, oSession.LoginId);
                                    //if (sesResultchain[0].CompletionStatus == "COMPLETED")
                                    //{
                                    //    oDisc.insertEventStatus(oSession.SchoolId, oSession.Classid, oSession.StudentId, oTemp.TemplateId, sesResultchain[0].CompletionStatus, sEventType, iSessionNmbr);
                                    //}
                                }
                            }
                            else
                            {
                                sesResultchain[0].CompletionStatus = "NOT COMPLETED";
                                bSetCompleted = false;
                                if (!bRuleStatusIOA)
                                {
                                    // Functionto reset rule type values in StdtEvent Table
                                    oDisc.resetEvntStatus(oSession.Classid, oSession.StudentId, oTemp.TemplateId);
                                    sEventAlertStatus = "IOAEvntStatus=true,Step_MoveUp=true";
                                    // Functionto Update rule Events values in StdtEvent Table
                                    oDisc.UpdateAlertEvent(oTemp.TemplateId, sEventAlertStatus);
                                }
                                if (!bRuleStatusMultiTchr)
                                {
                                    // Functionto reset rule type values in StdtEvent Table
                                    oDisc.resetEvntStatus(oSession.Classid, oSession.StudentId, oTemp.TemplateId);
                                    sEventAlertStatus = "MultiTchrEvntStatus=true,Step_MoveUp=true";
                                    // Functionto Update rule Events values in StdtEvent Table
                                    oDisc.UpdateAlertEvent(oTemp.TemplateId, sEventType);
                                }
                            }
                        }
                    }
                    DisplayIOA_MTstatus(bRuleStatusIOA, bRuleStatusMultiTchr, oDS.CrntStep, bStepMoveUp, "Step");
                }
                #endregion
                #region stepmoveback
                if ((bStepMoveBack || GlobalStepMoveBack) && (Status == "StepMoveBack"))
                {
                    bRuleStatusIOA = oDisc.checkConditionIOA(bStepMoveDownIOA, bIOA);
                    bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bStepMoveDownMultiTecher, bMultyTchr);
                    if (sesResultchain != null)
                    {
                        if (sesResultchain[0] != null)
                        {
                            if (bRuleStatusIOA && bRuleStatusMultiTchr)
                            {
                                if (nextStep == 0) { nextStep = 1; }
                                else
                                {
                                    DataTable dtModificatn = GetModificationDetails("STEP", oTemp.TemplateId);
                                    if (dtModificatn != null)
                                    {
                                        if (dtModificatn.Rows.Count > 0)
                                        {
                                            bool mod_flag = CheckStepModification(Convert.ToInt32(dtModificatn.Rows[0]["ModificationRule"].ToString()), oTemp.TemplateId, iCurrentSetId, iCurrentStep);

                                            if (mod_flag)
                                            {
                                                oData = new clsData();
                                                string selqry = "SELECT ISNULL(ModificationInd, 0) as ModificationInd FROM DSTempHdr WHERE DSTempHdrId=" + oTemp.TemplateId;
                                                object mod = oData.FetchValue(selqry);
                                                if (mod != null)
                                                {
                                                    if (Convert.ToBoolean(mod) != true)
                                                    {
                                                        string insqry = "INSERT INTO StdtSessEvent(SchoolId,ClassId,StudentId,DSTempHdrId,StdtSessEventType,EvntTs,SessionNbr,EventType)VALUES" +
                                                        "(" + oSession.SchoolId + "," + oSession.Classid + "," + oSession.StudentId + "," + oTemp.TemplateId + ",'MODIFICATION',GETDATE()," + iSessionNmbr + ",'EV')";
                                                        oData.Execute(insqry);

                                                        string updqry = "UPDATE DSTempHdr SET ModificationInd=1,ModifiedBy=" + oSession.LoginId + ",ModifiedOn=GETDATE() WHERE DSTempHdrId=" + oTemp.TemplateId;
                                                        oData.Execute(updqry);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    if ((bPrompt) || (LessonpromptUsed.Length > 0))
                                    {
                                        if (oDS.PromptProc != "NA")
                                        {
                                            if ((oDS.PromptProc == "Least-to-Most") || (oDS.PromptProc == "Graduated Guidance"))
                                            {
                                                iPrompt = Convert.ToInt32(LessonpromptUsed[LessonpromptUsed.Length - 1]);
                                                sesResultchain[0].NextPrompt = iPrompt.ToString();
                                            }
                                            else
                                            {
                                                iPrompt = Convert.ToInt32(LessonpromptUsed[0]);
                                            }
                                        }
                                    }
                                    sEventType = "STEP MOVEDOWN";
                                    if (bPrompt)
                                        oDisc.updateStepStatus(oSession.SchoolId, oSession.Classid, oSession.StudentId, iCurrentStep, iCurrentSetId, oTemp.TemplateId, iPrompt, nextStep.ToString(), sesResultchain[0].CompletionStatus, sEventType, iSessionNmbr, oSession.LoginId, sLessonPlanId);
                                    else
                                    {
                                        if (LessonpromptUsed.Length > 0)
                                        {
                                            if (bPromptMovedownNA)
                                            {
                                                if (oDS.PromptProc != "NA")
                                                {
                                                    if ((oDS.PromptProc == "Least-to-Most") || (oDS.PromptProc == "Graduated Guidance"))
                                                    {
                                                        iPrompt = Convert.ToInt32(LessonpromptUsed[LessonpromptUsed.Length - 1]);
                                                        sesResultchain[0].NextPrompt = iPrompt.ToString();
                                                    }
                                                    else
                                                    {
                                                        iPrompt = Convert.ToInt32(LessonpromptUsed[0]);
                                                    }
                                                }
                                                oDisc.updateStepStatus(oSession.SchoolId, oSession.Classid, oSession.StudentId, iCurrentStep, iCurrentSetId, oTemp.TemplateId, iPrompt, nextStep.ToString(), sesResultchain[0].CompletionStatus, sEventType, iSessionNmbr, oSession.LoginId, sLessonPlanId);
                                            }
                                            else
                                                oDisc.updateStepStatus(oSession.SchoolId, oSession.Classid, oSession.StudentId, iCurrentStep, iCurrentSetId, oTemp.TemplateId, nextStep.ToString(), sesResultchain[0].CompletionStatus, sEventType, iSessionNmbr, oSession.LoginId, sLessonPlanId);
                                        }
                                        else
                                            oDisc.updateStepStatus(oSession.SchoolId, oSession.Classid, oSession.StudentId, iCurrentStep, iCurrentSetId, oTemp.TemplateId, nextStep.ToString(), sesResultchain[0].CompletionStatus, sEventType, iSessionNmbr, oSession.LoginId, sLessonPlanId);
                                    }
                                    //oDisc.updateStepStatus(oSession.SchoolId, oSession.Classid, oSession.StudentId, oTemp.TemplateId, sesResultchain[0].NextStep.ToString(), sesResultchain[0].CompletionStatus, sEventType, iSessionNmbr, oSession.LoginId);
                                    //if (sesResultchain[0].CompletionStatus == "COMPLETED")
                                    //{
                                    //    oDisc.insertEventStatus(oSession.SchoolId, oSession.Classid, oSession.StudentId, oTemp.TemplateId, sesResultchain[0].CompletionStatus, sEventType, iSessionNmbr);
                                    //}
                                }
                            }
                            else
                            {
                                sesResultchain[0].CompletionStatus = "NOT COMPLETED";
                                bSetCompleted = false;
                                if (!bRuleStatusIOA)
                                {
                                    // Functionto reset rule type values in StdtEvent Table
                                    oDisc.resetEvntStatus(oSession.Classid, oSession.StudentId, oTemp.TemplateId);
                                    sEventAlertStatus = "IOAEvntStatus=true,Step_MoveDown=true";
                                    // Functionto Update rule Events values in StdtEvent Table
                                    oDisc.UpdateAlertEvent(oTemp.TemplateId, sEventAlertStatus);
                                }
                                if (!bRuleStatusMultiTchr)
                                {
                                    // Functionto reset rule type values in StdtEvent Table
                                    oDisc.resetEvntStatus(oSession.Classid, oSession.StudentId, oTemp.TemplateId);
                                    sEventAlertStatus = "MultiTchrEvntStatus=true,Step_MoveDown=true";
                                    // Functionto Update rule Events values in StdtEvent Table
                                    oDisc.UpdateAlertEvent(oTemp.TemplateId, sEventType);
                                }
                            }
                        }
                    }
                    DisplayIOA_MTstatus(bRuleStatusIOA, bRuleStatusMultiTchr, oDS.CrntStep, bStepMoveBack, "Step");
                }
                #endregion
                #region promptmoveup
                if ((bPromptMoveUp || GlobalPromptMoveUp) && (Status == "PromptMoveUP"))
                {
                    bRuleStatusIOA = oDisc.checkConditionIOA(bPromptMoveUpIOA, bIOA);
                    bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bPromptMoveUpMultiTecher, bMultyTchr);
                    if (sesResultchain != null)
                    {
                        if (sesResultchain[0] != null)
                        {
                            if (bRuleStatusIOA && bRuleStatusMultiTchr)
                            {
                                sEventType = "PROMPT MOVEUP";
                                if (sCurrentLessonPrompt == sNextLessonPrompt)
                                { }
                                else
                                    oDisc.updatePromptStatus(oSession.SchoolId, oSession.Classid, oSession.StudentId, oTemp.TemplateId, sNextLessonPrompt, sesResultchain[0].CompletionStatus, sEventType, iSessionNmbr, oSession.LoginId, Convert.ToInt32(sCurrentLessonPrompt), iCurrentSetId, iCurrentStep, sLessonPlanId);
                                //if (sesResultchain[0].CompletionStatus == "COMPLETED")
                                //{
                                //    oDisc.insertEventStatus(oSession.SchoolId, oSession.Classid, oSession.StudentId, oTemp.TemplateId, sesResultchain[0].CompletionStatus, sEventType, iSessionNmbr);
                                //}
                            }
                            else
                            {
                                //sesResultchain[0].CompletionStatus = "NOT COMPLETED";
                                bSetCompleted = false;
                                if (!bRuleStatusIOA)
                                {
                                    // Functionto reset rule type values in StdtEvent Table
                                    oDisc.resetEvntStatus(oSession.Classid, oSession.StudentId, oTemp.TemplateId);
                                    sEventAlertStatus = "IOAEvntStatus=true,Prompt_MoveUp=true";
                                    // Functionto Update rule Events values in StdtEvent Table
                                    oDisc.UpdateAlertEvent(oTemp.TemplateId, sEventAlertStatus);
                                }
                                if (!bRuleStatusMultiTchr)
                                {
                                    // Functionto reset rule type values in StdtEvent Table
                                    oDisc.resetEvntStatus(oSession.Classid, oSession.StudentId, oTemp.TemplateId);
                                    sEventAlertStatus = "MultiTchrEvntStatus=true,Prompt_MoveUp=true";
                                    // Functionto Update rule Events values in StdtEvent Table
                                    oDisc.UpdateAlertEvent(oTemp.TemplateId, sEventType);
                                }
                            }
                        }
                    }
                    DisplayIOA_MTstatus(bRuleStatusIOA, bRuleStatusMultiTchr, oDS.CrntPrompt, bPromptMoveUp, "Prompt");
                }
                #endregion
                #region promptmoveback
                if ((bPromptMoveBack || GlobalPromptMoveBack) && (Status == "PromptMoveBack"))
                {
                    bRuleStatusIOA = oDisc.checkConditionIOA(bPromptMoveDownIOA, bIOA);
                    bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bPromptMoveDownMultiTecher, bMultyTchr);
                    if (sesResultchain != null)
                    {
                        if (sesResultchain[0] != null)
                        {
                            if (bRuleStatusIOA && bRuleStatusMultiTchr)
                            {
                                DataTable dtModificatn = GetModificationDetails("PROMPT", oTemp.TemplateId);
                                if (dtModificatn != null)
                                {
                                    if (dtModificatn.Rows.Count > 0)
                                    {
                                        bool mod_flag = CheckPromptModification(Convert.ToInt32(dtModificatn.Rows[0]["ModificationRule"].ToString()), oTemp.TemplateId, iCurrentSetId, iCurrentStep, Convert.ToInt32(sCurrentLessonPrompt));

                                        if (mod_flag)
                                        {
                                            oData = new clsData();
                                            string selqry = "SELECT ISNULL(ModificationInd, 0) as ModificationInd FROM DSTempHdr WHERE DSTempHdrId=" + oTemp.TemplateId;
                                            object mod = oData.FetchValue(selqry);
                                            if (mod != null)
                                            {
                                                if (Convert.ToBoolean(mod) != true)
                                                {
                                                    string insqry = "INSERT INTO StdtSessEvent(SchoolId,ClassId,StudentId,DSTempHdrId,StdtSessEventType,EvntTs,SessionNbr,EventType)VALUES" +
                                                    "(" + oSession.SchoolId + "," + oSession.Classid + "," + oSession.StudentId + "," + oTemp.TemplateId + ",'MODIFICATION',GETDATE()," + iSessionNmbr + ",'EV')";
                                                    oData.Execute(insqry);

                                                    string updqry = "UPDATE DSTempHdr SET ModificationInd=1,ModifiedBy=" + oSession.LoginId + ",ModifiedOn=GETDATE() WHERE DSTempHdrId=" + oTemp.TemplateId;
                                                    oData.Execute(updqry);
                                                }
                                            }
                                        }
                                    }
                                }


                                sEventType = "PROMPT MOVEDOWN";
                                oDisc.updatePromptStatus(oSession.SchoolId, oSession.Classid, oSession.StudentId, oTemp.TemplateId, sNextLessonPrompt, sesResultchain[0].CompletionStatus, sEventType, iSessionNmbr, oSession.LoginId, Convert.ToInt32(sCurrentLessonPrompt), iCurrentSetId, iCurrentStep, sLessonPlanId);
                                //if (sesResultchain[0].CompletionStatus == "COMPLETED")
                                //{
                                //    oDisc.insertEventStatus(oSession.SchoolId, oSession.Classid, oSession.StudentId, oTemp.TemplateId, sesResultchain[0].CompletionStatus, sEventType, iSessionNmbr);
                                //}
                            }
                            else
                            {
                                //sesResultchain[0].CompletionStatus = "NOT COMPLETED";
                                bSetCompleted = false;
                                if (!bRuleStatusIOA)
                                {
                                    // Functionto reset rule type values in StdtEvent Table
                                    oDisc.resetEvntStatus(oSession.Classid, oSession.StudentId, oTemp.TemplateId);
                                    sEventAlertStatus = "IOAEvntStatus=true,Prompt_MoveDown=true";
                                    // Functionto Update rule Events values in StdtEvent Table
                                    oDisc.UpdateAlertEvent(oTemp.TemplateId, sEventAlertStatus);
                                }
                                if (!bRuleStatusMultiTchr)
                                {
                                    // Functionto reset rule type values in StdtEvent Table
                                    oDisc.resetEvntStatus(oSession.Classid, oSession.StudentId, oTemp.TemplateId);
                                    sEventAlertStatus = "MultiTchrEvntStatus=true,Prompt_MoveDown=true";
                                    // Functionto Update rule Events values in StdtEvent Table
                                    oDisc.UpdateAlertEvent(oTemp.TemplateId, sEventType);
                                }
                            }
                        }
                    }
                    DisplayIOA_MTstatus(bRuleStatusIOA, bRuleStatusMultiTchr, oDS.CrntPrompt, bPromptMoveBack, "Prompt");
                }
                #endregion
                if (sesResultchain != null)
                {
                    if (sesResultchain[0] != null)
                    {
                        if (MaintenanceOrCompletion)
                        {

                            //oDisc = new DiscreteSession();
                            //oDS.CrntStep = sesResultchain[0].NextStep - 1;
                            //if (bPrompt)
                            //    oDisc.updateStepStatus(oSession.SchoolId, oSession.Classid, oSession.StudentId, Convert.ToInt32(sesResultchain[0].NextPrompt), oTemp.TemplateId, oDS.CrntStep.ToString(), sesResultchain[0].CompletionStatus, sEventType, iSessionNmbr);
                            //else
                            //    oDisc.updateStepStatus(oSession.SchoolId, oSession.Classid, oSession.StudentId, oTemp.TemplateId, oDS.CrntStep.ToString(), sesResultchain[0].CompletionStatus, sEventType, iSessionNmbr);
                            //oDisc.insertEventStatus(oSession.SchoolId, oSession.Classid, oSession.StudentId, oTemp.TemplateId, sesResultchain[0].CompletionStatus, sEventType, iSessionNmbr);
                            oDisc.insertEventStatus(oSession.SchoolId, oSession.Classid, oSession.StudentId, oTemp.TemplateId, iCurrentSetId, "COMPLETED", sEventType, iSessionNmbr, oSession.LoginId, sLessonPlanId);
                            //oDisc.insertEventStatus(oSession.SchoolId, oSession.Classid, oSession.StudentId, oTemp.TemplateId, sesResultchain[0].CompletionStatus, sEventType, iSessionNmbr, oSession.LoginId);

                        }
                        else if (bSetMoveUp == true)
                        {
                            bRuleStatusIOA = oDisc.checkConditionIOA(bSetMoveUpIOA, bIOA);
                            bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bSetMoveUpMultiTecher, bMultyTchr);
                            DisplayIOA_MTstatus(bRuleStatusIOA, bRuleStatusMultiTchr, 0, false, "Complete");
                        }
                    }
                }
            }
            #endregion
            #region Discrete new Movement
            if (sSkillType == "Discrete")
            {
                string Status = "";
                GlobalIsFirstStep = true;
                if (GlobalPromptMoveBack || GlobalStepMoveBack || GlobalSetMoveBack)
                {
                    if (!GlobalPromptMoveBack && !GlobalStepMoveBack && GlobalSetMoveBack && GlobalIsFirstStep && GlobalIsFirstPrompt)
                    {
                        Status = "SetMoveBack";
                    }
                    else if (!GlobalPromptMoveBack && GlobalStepMoveBack && !GlobalSetMoveBack && GlobalIsFirstPrompt)
                    {
                        Status = "StepMoveBack";
                    }
                    else if (GlobalPromptMoveBack && !GlobalStepMoveBack && !GlobalSetMoveBack && !GlobalIsFirstPrompt)
                    {
                        Status = "PromptMoveBack";
                    }
                    else if (GlobalPromptMoveBack && GlobalStepMoveBack && !GlobalSetMoveBack && GlobalIsFirstPrompt)
                    {
                        Status = "StepMoveBack";
                    }
                    else if (!GlobalPromptMoveBack && GlobalStepMoveBack && GlobalSetMoveBack && GlobalIsFirstPrompt)
                    {
                        Status = "StepMoveBack";
                    }
                    else if (GlobalPromptMoveBack && !GlobalStepMoveBack && GlobalSetMoveBack && !GlobalIsFirstPrompt)
                    {
                        Status = "PromptMoveBack";
                    }
                }
                else if (GlobalPromptMoveUp || GlobalStepMoveUp || GlobalSetMoveUp)
                {
                    GlobalIsFinalStep = true;
                    if (!MaintenanceOrCompletion)
                    {
                        bSetCompleted = false;
                        CompletionStatusSet = "";
                    }
                    if (!GlobalPromptMoveUp && !GlobalStepMoveUp && GlobalSetMoveUp && GlobalIsFinalStep && GlobalIsFinalPrompt && !MaintenanceOrCompletion)
                    {
                        Status = "SetMoveUP";
                    }
                    else if (!GlobalPromptMoveUp && GlobalStepMoveUp && !GlobalSetMoveUp && GlobalIsFinalPrompt && !MaintenanceOrCompletion)
                    {
                        Status = "StepMoveUP";
                    }
                    else if (GlobalPromptMoveUp && !GlobalStepMoveUp && !GlobalSetMoveUp && !GlobalIsFinalPrompt && !MaintenanceOrCompletion)
                    {
                        Status = "PromptMoveUP";
                    }
                    else if (GlobalPromptMoveUp && GlobalStepMoveUp && !GlobalSetMoveUp && GlobalIsFinalPrompt && !MaintenanceOrCompletion)
                    {
                        Status = "StepMoveUP";
                    }
                    else if (!GlobalPromptMoveUp && GlobalStepMoveUp && GlobalSetMoveUp && GlobalIsFinalPrompt && !MaintenanceOrCompletion)
                    {
                        Status = "StepMoveUP";
                    }
                    else if (GlobalPromptMoveUp && !GlobalStepMoveUp && GlobalSetMoveUp && !GlobalIsFinalPrompt && !MaintenanceOrCompletion)
                    {
                        Status = "PromptMoveUP";
                    }
                    else if (!GlobalPromptMoveUp && !GlobalStepMoveUp && GlobalSetMoveUp && GlobalIsFinalSet && GlobalIsFinalStep && GlobalIsFinalPrompt && MaintenanceOrCompletion)
                    {
                        //bSetCompleted = true;
                        CompletionStatusSet = "COMPLETED";
                        Status = "SetMoveUP";
                    }
                    else
                    {
                        CompletionStatusSet = "";
                        bSetCompleted = false;
                        MaintenanceOrCompletion = false;
                    }
                }


                int iPrompt = 0;
                string sEventType = "";
                string sEventAlertStatus = "";
                oDisc = new DiscreteSession();
                #region setmoveup
                if ((bSetMoveUp || GlobalSetMoveUp) && (Status == "SetMoveUP"))
                {
                    //CompletionStatusSet = CompletionStatus;
                    bSetMoveBack = false;
                    string sLPused = "";
                    if (LessonpromptUsed.Length == 0)
                        sLPused = "0";
                    else
                        sLPused = LessonpromptUsed[LessonpromptUsed.Length - 1];
                    if ((bPromtHirchy && LessonpromptUsed != null && sLessonPrompt == sLPused) || !bPromtHirchy)
                    {
                        bRuleStatusIOA = oDisc.checkConditionIOA(bSetMoveUpIOA, bIOA);
                        bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bSetMoveUpMultiTecher, bMultyTchr);

                        //bRuleStatusIOA = oDisc.checkConditionIOA(discreteInptData.IOARequired, bIOA);
                        //bRuleStatusMultiTchr = oDisc.checkConditionIOA(discreteInptData.MultiTeacherRequired, bMultyTchr);
                        if (bRuleStatusIOA && bRuleStatusMultiTchr)
                        {
                            if (nextSet == 0) { nextSet = 1; }
                            else
                            {
                                if (bPrompt)
                                {
                                    if (oDS.PromptProc != "NA")
                                    {
                                        if ((oDS.PromptProc == "Least-to-Most") || (oDS.PromptProc == "Graduated Guidance"))
                                        {
                                            iPrompt = Convert.ToInt32(LessonpromptUsed[LessonpromptUsed.Length - 1]);
                                            if (sesResult[0] != null)
                                            {
                                                sesResult[0].NextPrompt = iPrompt.ToString();
                                            }
                                        }
                                        else
                                        {
                                            iPrompt = Convert.ToInt32(LessonpromptUsed[0]);
                                        }
                                    }
                                }
                                else
                                {
                                    if (LessonpromptUsed.Length > 0)
                                    {
                                        if (oDS.PromptProc != "NA")
                                        {
                                            if ((oDS.PromptProc == "Least-to-Most") || (oDS.PromptProc == "Graduated Guidance"))
                                            {
                                                iPrompt = Convert.ToInt32(LessonpromptUsed[LessonpromptUsed.Length - 1]);
                                                if (sesResult[0] != null)
                                                {
                                                    sesResult[0].NextPrompt = iPrompt.ToString();
                                                }
                                            }
                                            else
                                            {
                                                iPrompt = Convert.ToInt32(LessonpromptUsed[0]);
                                            }
                                        }
                                    }
                                }
                                sEventType = "SET MOVEUP";

                                if (sesResult[0] != null)
                                {
                                    if (sesResult[0].CompletionStatus == "COMPLETED" || CompletionStatusSet == "COMPLETED")
                                    {
                                        oDisc.updateSetStatus(oSession.SchoolId, oSession.Classid, oSession.StudentId, oTemp.TemplateId, iCurrentSetId, Convert.ToInt32(LessonTargetPrompt), nextSet.ToString(), CompletionStatusSet, sEventType, iSessionNmbr, oSession.LoginId, sLessonPlanId);
                                    }
                                    else
                                    {
                                        oDisc.updateSetStatus(oSession.SchoolId, oSession.Classid, oSession.StudentId, oTemp.TemplateId, iCurrentSetId, iPrompt, nextSet.ToString(), CompletionStatusSet, sEventType, iSessionNmbr, oSession.LoginId, sLessonPlanId);
                                    }
                                }
                                else
                                {
                                    if (DiscreteFreqDurTextFlag == true)
                                    {
                                        if (CompletionStatusSet == "COMPLETED")
                                        {
                                            oDisc.updateSetStatus(oSession.SchoolId, oSession.Classid, oSession.StudentId, oTemp.TemplateId, iCurrentSetId, Convert.ToInt32(LessonTargetPrompt), nextSet.ToString(), CompletionStatusSet, sEventType, iSessionNmbr, oSession.LoginId, sLessonPlanId);
                                        }
                                        else
                                        {
                                            oDisc.updateSetStatus(oSession.SchoolId, oSession.Classid, oSession.StudentId, oTemp.TemplateId, iCurrentSetId, iPrompt, nextSet.ToString(), CompletionStatusSet, sEventType, iSessionNmbr, oSession.LoginId, sLessonPlanId);
                                        }
                                    }
                                }



                                bPromptMoveUp = false;
                                //if (sesResult[0].CompletionStatus == "COMPLETED")
                                //{
                                //    oDisc.insertEventStatus(oSession.SchoolId, oSession.Classid, oSession.StudentId, oTemp.TemplateId, sesResult[0].CompletionStatus, sEventType, iSessionNmbr);
                                //}                                        
                            }
                        }
                        else
                        {
                            //sesResult[0].CompletionStatus = "NOT COMPLETED";
                            bSetCompleted = false;
                            if (!bRuleStatusIOA)
                            {
                                // Function to reset rule type values in StdtEvent Table
                                oDisc.resetEvntStatus(oSession.Classid, oSession.StudentId, oTemp.TemplateId);
                                sEventAlertStatus = "IOAEvntStatus=true,Set_MoveUp=true";
                                // Functionto Update rule Events values in StdtEvent Table
                                oDisc.UpdateAlertEvent(oTemp.TemplateId, sEventAlertStatus);
                            }
                            if (!bRuleStatusMultiTchr)
                            {
                                // Functionto reset rule type values in StdtEvent Table
                                oDisc.resetEvntStatus(oSession.Classid, oSession.StudentId, oTemp.TemplateId);
                                sEventAlertStatus = "MultiTchrEvntStatus=true,Set_MoveUp=true";
                                // Functionto Update rule Events values in StdtEvent Table
                                oDisc.UpdateAlertEvent(oTemp.TemplateId, sEventType);
                            }


                        }



                    }
                    else
                    {
                        bSetCompleted = false;
                    }

                    DisplayIOA_MTstatus(bRuleStatusIOA, bRuleStatusMultiTchr, oDS.CrntSet, bSetMoveUp, "Set");
                }
                #endregion
                #region setmoveback
                if ((bSetMoveBack || GlobalSetMoveBack) && (Status == "SetMoveBack"))
                {
                    bRuleStatusIOA = oDisc.checkConditionIOA(bSetMoveDownIOA, bIOA);
                    bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bSetMoveDownMultiTecher, bMultyTchr);

                    //bRuleStatusIOA = oDisc.checkConditionIOA(discreteInptData.IOARequired, bIOA);
                    //bRuleStatusMultiTchr = oDisc.checkConditionIOA(discreteInptData.MultiTeacherRequired, bMultyTchr);
                    if (bRuleStatusIOA && bRuleStatusMultiTchr)
                    {
                        if (nextSet == 0) { nextSet = 1; }
                        else
                        {
                            DataTable dtModificatn = GetModificationDetails("SET", oTemp.TemplateId);
                            if (dtModificatn != null)
                            {
                                if (dtModificatn.Rows.Count > 0)
                                {
                                    bool mod_flag = CheckSetModification(Convert.ToInt32(dtModificatn.Rows[0]["ModificationRule"].ToString()), oTemp.TemplateId, iCurrentSetId);

                                    if (mod_flag)
                                    {
                                        oData = new clsData();
                                        string selqry = "SELECT ISNULL(ModificationInd, 0) as ModificationInd FROM DSTempHdr WHERE DSTempHdrId=" + oTemp.TemplateId;
                                        object mod = oData.FetchValue(selqry);
                                        if (mod != null)
                                        {
                                            if (Convert.ToBoolean(mod) != true)
                                            {
                                                string insqry = "INSERT INTO StdtSessEvent(SchoolId,ClassId,StudentId,DSTempHdrId,StdtSessEventType,EvntTs,SessionNbr,EventType)VALUES" +
                                                "(" + oSession.SchoolId + "," + oSession.Classid + "," + oSession.StudentId + "," + oTemp.TemplateId + ",'MODIFICATION',GETDATE()," + iSessionNmbr + ",'EV')";
                                                oData.Execute(insqry);

                                                string updqry = "UPDATE DSTempHdr SET ModificationInd=1,ModifiedBy=" + oSession.LoginId + ",ModifiedOn=GETDATE() WHERE DSTempHdrId=" + oTemp.TemplateId;
                                                oData.Execute(updqry);
                                            }
                                        }
                                    }
                                }
                            }
                            if ((bPrompt) || (LessonpromptUsed.Length > 0))
                            {
                                if (oDS.PromptProc != "NA")
                                {
                                    if ((oDS.PromptProc == "Least-to-Most") || (oDS.PromptProc == "Graduated Guidance"))
                                    {
                                        iPrompt = Convert.ToInt32(LessonpromptUsed[LessonpromptUsed.Length - 1]);
                                        if (sesResult[0] != null)
                                        {
                                            sesResult[0].NextPrompt = iPrompt.ToString();
                                        }
                                    }
                                    else
                                    {
                                        iPrompt = Convert.ToInt32(LessonpromptUsed[0]);
                                    }
                                }
                            }
                            sEventType = "SET MOVEDOWN";
                            if (sesResult[0] != null) //liju
                                oDisc.updateSetStatus(oSession.SchoolId, oSession.Classid, oSession.StudentId, oTemp.TemplateId, iCurrentSetId, iPrompt, nextSet.ToString(), sesResult[0].CompletionStatus, sEventType, iSessionNmbr, oSession.LoginId, sLessonPlanId);
                            else
                            {
                                if (DiscreteFreqDurTextFlag)
                                {
                                    oDisc.updateSetStatus(oSession.SchoolId, oSession.Classid, oSession.StudentId, oTemp.TemplateId, iCurrentSetId, iPrompt, nextSet.ToString(), CompletionStatusSet, sEventType, iSessionNmbr, oSession.LoginId, sLessonPlanId);
                                }
                            }
                            bPromptMoveUp = false;
                            //if (sesResult[0].CompletionStatus == "COMPLETED")
                            //{
                            //    oDisc.insertEventStatus(oSession.SchoolId, oSession.Classid, oSession.StudentId, oTemp.TemplateId, sesResult[0].CompletionStatus, sEventType, iSessionNmbr);
                            //}
                        }
                    }
                    else
                    {
                        //sesResult[0].CompletionStatus = "NOT COMPLETED";
                        bSetCompleted = false;
                        if (!bRuleStatusIOA)
                        {
                            // Functionto reset rule type values in StdtEvent Table
                            oDisc.resetEvntStatus(oSession.Classid, oSession.StudentId, oTemp.TemplateId);
                            sEventAlertStatus = "IOAEvntStatus=true,Set_MoveDown=true";
                            // Functionto Update rule Events values in StdtEvent Table
                            oDisc.UpdateAlertEvent(oTemp.TemplateId, sEventAlertStatus);
                        }
                        if (!bRuleStatusMultiTchr)
                        {
                            // Functionto reset rule type values in StdtEvent Table
                            oDisc.resetEvntStatus(oSession.Classid, oSession.StudentId, oTemp.TemplateId);
                            sEventAlertStatus = "MultiTchrEvntStatus=true,Set_MoveDown=true";
                            // Functionto Update rule Events values in StdtEvent Table
                            oDisc.UpdateAlertEvent(oTemp.TemplateId, sEventType);
                        }

                    }

                    DisplayIOA_MTstatus(bRuleStatusIOA, bRuleStatusMultiTchr, oDS.CrntSet, bSetMoveBack, "Set");
                }
                #endregion
                #region promptmoveup
                if (((bPromptMoveUp && bPrompt) || GlobalPromptMoveUp) && (Status == "PromptMoveUP"))
                {
                    bRuleStatusIOA = oDisc.checkConditionIOA(bPromptMoveUpIOA, bIOA);
                    bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bPromptMoveUpMultiTecher, bMultyTchr);

                    //bRuleStatusIOA = oDisc.checkConditionIOA(discreteInptData.IOARequired, bIOA);
                    //bRuleStatusMultiTchr = oDisc.checkConditionIOA(discreteInptData.MultiTeacherRequired, bMultyTchr);
                    if (bRuleStatusIOA && bRuleStatusMultiTchr)
                    {
                        sEventType = "PROMPT MOVEUP";
                        if (sCurrentLessonPrompt == sNextLessonPrompt)
                        { }
                        else
                            if (sesResult[0] != null)
                                oDisc.updatePromptStatus(oSession.SchoolId, oSession.Classid, oSession.StudentId, oTemp.TemplateId, sNextLessonPrompt, sesResult[0].CompletionStatus, sEventType, iSessionNmbr, oSession.LoginId, Convert.ToInt32(sCurrentLessonPrompt), iCurrentSetId, iCurrentStep, sLessonPlanId);
                            else
                            {
                                if (DiscreteFreqDurTextFlag)
                                {
                                    oDisc.updatePromptStatus(oSession.SchoolId, oSession.Classid, oSession.StudentId, oTemp.TemplateId, sNextLessonPrompt, CompletionStatusSet, sEventType, iSessionNmbr, oSession.LoginId, Convert.ToInt32(sCurrentLessonPrompt), iCurrentSetId, iCurrentStep, sLessonPlanId);
                                }
                            }
                        //if (sesResult[0].CompletionStatus == "COMPLETED")
                        //{
                        //    oDisc.insertEventStatus(oSession.SchoolId, oSession.Classid, oSession.StudentId, oTemp.TemplateId, sesResult[0].CompletionStatus, sEventType, iSessionNmbr);
                        //}
                    }
                    else
                    {
                        //sesResult[0].CompletionStatus = "NOT COMPLETED";
                        bSetCompleted = false;
                        if (!bRuleStatusIOA)
                        {
                            // Functionto reset rule type values in StdtEvent Table
                            oDisc.resetEvntStatus(oSession.Classid, oSession.StudentId, oTemp.TemplateId);
                            sEventAlertStatus = "IOAEvntStatus=true,Prompt_MoveUp=true";
                            // Functionto Update rule Events values in StdtEvent Table
                            oDisc.UpdateAlertEvent(oTemp.TemplateId, sEventAlertStatus);
                        }
                        if (!bRuleStatusMultiTchr)
                        {
                            // Functionto reset rule type values in StdtEvent Table
                            oDisc.resetEvntStatus(oSession.Classid, oSession.StudentId, oTemp.TemplateId);
                            sEventAlertStatus = "MultiTchrEvntStatus=true,Prompt_MoveUp=true";
                            // Functionto Update rule Events values in StdtEvent Table
                            oDisc.UpdateAlertEvent(oTemp.TemplateId, sEventType);
                        }
                    }

                    DisplayIOA_MTstatus(bRuleStatusIOA, bRuleStatusMultiTchr, oDS.CrntPrompt, bPromptMoveUp, "Prompt");
                }
                #endregion
                #region promptmoveback
                if (((bPromptMoveBack && bPrompt) || GlobalPromptMoveBack) && (Status == "PromptMoveBack"))
                {
                    bRuleStatusIOA = oDisc.checkConditionIOA(bPromptMoveDownIOA, bIOA);
                    bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bPromptMoveDownMultiTecher, bMultyTchr);

                    //bRuleStatusIOA = oDisc.checkConditionIOA(discreteInptData.IOARequired, bIOA);
                    //bRuleStatusMultiTchr = oDisc.checkConditionIOA(discreteInptData.MultiTeacherRequired, bMultyTchr);
                    if (bRuleStatusIOA && bRuleStatusMultiTchr)
                    {
                        iCurrentStep = 0;
                        DataTable dtModificatn = GetModificationDetails("PROMPT", oTemp.TemplateId);
                        if (dtModificatn != null)
                        {
                            if (dtModificatn.Rows.Count > 0)
                            {
                                bool mod_flag = CheckPromptModification(Convert.ToInt32(dtModificatn.Rows[0]["ModificationRule"].ToString()), oTemp.TemplateId, iCurrentSetId, iCurrentStep, Convert.ToInt32(sCurrentLessonPrompt));

                                if (mod_flag)
                                {
                                    oData = new clsData();
                                    string selqry = "SELECT ISNULL(ModificationInd, 0) as ModificationInd FROM DSTempHdr WHERE DSTempHdrId=" + oTemp.TemplateId;
                                    object mod = oData.FetchValue(selqry);
                                    if (mod != null)
                                    {
                                        if (Convert.ToBoolean(mod) != true)
                                        {
                                            string insqry = "INSERT INTO StdtSessEvent(SchoolId,ClassId,StudentId,DSTempHdrId,StdtSessEventType,EvntTs,SessionNbr,EventType)VALUES" +
                                            "(" + oSession.SchoolId + "," + oSession.Classid + "," + oSession.StudentId + "," + oTemp.TemplateId + ",'MODIFICATION',GETDATE()," + iSessionNmbr + ",'EV')";
                                            oData.Execute(insqry);

                                            string updqry = "UPDATE DSTempHdr SET ModificationInd=1,ModifiedBy=" + oSession.LoginId + ",ModifiedOn=GETDATE() WHERE DSTempHdrId=" + oTemp.TemplateId;
                                            oData.Execute(updqry);
                                        }
                                    }
                                }
                            }
                        }


                        sEventType = "PROMPT MOVEDOWN";
                        if (sesResult[0] != null)
                            oDisc.updatePromptStatus(oSession.SchoolId, oSession.Classid, oSession.StudentId, oTemp.TemplateId, sNextLessonPrompt, sesResult[0].CompletionStatus, sEventType, iSessionNmbr, oSession.LoginId, Convert.ToInt32(sCurrentLessonPrompt), iCurrentSetId, iCurrentStep, sLessonPlanId);
                        else
                        {
                            if (DiscreteFreqDurTextFlag)
                            {
                                oDisc.updatePromptStatus(oSession.SchoolId, oSession.Classid, oSession.StudentId, oTemp.TemplateId, sNextLessonPrompt, CompletionStatusSet, sEventType, iSessionNmbr, oSession.LoginId, Convert.ToInt32(sCurrentLessonPrompt), iCurrentSetId, iCurrentStep, sLessonPlanId);
                            }
                        }
                        //if (sesResult[0].CompletionStatus == "COMPLETED")
                        //{
                        //    oDisc.insertEventStatus(oSession.SchoolId, oSession.Classid, oSession.StudentId, oTemp.TemplateId, sesResult[0].CompletionStatus, sEventType, iSessionNmbr);
                        //}
                    }
                    else
                    {
                        //sesResult[0].CompletionStatus = "NOT COMPLETED";
                        bSetCompleted = false;
                        if (!bRuleStatusIOA)
                        {
                            // Functionto reset rule type values in StdtEvent Table
                            oDisc.resetEvntStatus(oSession.Classid, oSession.StudentId, oTemp.TemplateId);
                            sEventAlertStatus = "IOAEvntStatus=true,Prompt_MoveDown=true";
                            // Functionto Update rule Events values in StdtEvent Table
                            oDisc.UpdateAlertEvent(oTemp.TemplateId, sEventAlertStatus);
                        }
                        if (!bRuleStatusMultiTchr)
                        {
                            // Functionto reset rule type values in StdtEvent Table
                            oDisc.resetEvntStatus(oSession.Classid, oSession.StudentId, oTemp.TemplateId);
                            sEventAlertStatus = "MultiTchrEvntStatus=true,Prompt_MoveDown=true";
                            // Functionto Update rule Events values in StdtEvent Table
                            oDisc.UpdateAlertEvent(oTemp.TemplateId, sEventType);
                        }
                    }

                    DisplayIOA_MTstatus(bRuleStatusIOA, bRuleStatusMultiTchr, oDS.CrntPrompt, bPromptMoveBack, "Prompt");
                }
                #endregion
                if (sesResult != null)
                {
                    if (sesResult.Count() > 0)
                    {
                        if (sesResult[0] != null)
                        {
                            if (bSetCompleted)
                            {
                                //bStatusFlag = true;
                                oDisc.insertEventStatus(oSession.SchoolId, oSession.Classid, oSession.StudentId, oTemp.TemplateId, iCurrentSetId, "COMPLETED", sEventType, iSessionNmbr, oSession.LoginId, sLessonPlanId);
                            }
                            else if (bSetMoveUp == true)
                            {
                                bRuleStatusIOA = oDisc.checkConditionIOA(bSetMoveUpIOA, bIOA);
                                bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bSetMoveUpMultiTecher, bMultyTchr);
                                DisplayIOA_MTstatus(bRuleStatusIOA, bRuleStatusMultiTchr, 0, false, "Complete");
                            }
                        }
                        else
                        {
                            if (DiscreteFreqDurTextFlag)
                            {
                                if (bSetCompleted)
                                {
                                    oDisc.insertEventStatus(oSession.SchoolId, oSession.Classid, oSession.StudentId, oTemp.TemplateId, iCurrentSetId, "COMPLETED", sEventType, iSessionNmbr, oSession.LoginId, sLessonPlanId);
                                }
                                else if (bSetMoveUp == true)
                                {
                                    bRuleStatusIOA = oDisc.checkConditionIOA(bSetMoveUpIOA, bIOA);
                                    bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bSetMoveUpMultiTecher, bMultyTchr);
                                    DisplayIOA_MTstatus(bRuleStatusIOA, bRuleStatusMultiTchr, 0, false, "Complete");
                                }
                            }
                        }
                    }
                    else
                        if (DiscreteFreqDurTextFlag)
                        {
                            if (bSetCompleted)
                            {
                                oDisc.insertEventStatus(oSession.SchoolId, oSession.Classid, oSession.StudentId, oTemp.TemplateId, iCurrentSetId, "COMPLETED", sEventType, iSessionNmbr, oSession.LoginId, sLessonPlanId);
                            }
                            else if (bSetMoveUp == true)
                            {
                                bRuleStatusIOA = oDisc.checkConditionIOA(bSetMoveUpIOA, bIOA);
                                bRuleStatusMultiTchr = oDisc.checkConditionMultiTchr(bSetMoveUpMultiTecher, bMultyTchr);
                                DisplayIOA_MTstatus(bRuleStatusIOA, bRuleStatusMultiTchr, 0, false, "Complete");
                            }
                        }
                }
            }
            #endregion
        }
    }

    private void ResetIOAStatus(int Temphdrid)
    {
        oData = new clsData();
        string strQry = "UPDATE DSTempHdr SET IsMT_IOA=0 WHERE DSTempHdrId=" + Temphdrid;
        oData.Execute(strQry);
    }
    //To display IOA / Multiteacher required for MOVEUP or MOVEDOWN
    private void DisplayIOA_MTstatus(bool bRuleStatusIOA, bool bRuleStatusMultiTchr, int Id, bool Completed, string Type)
    {
        if (Type == "Set")
        {
            if (Session["iCurrentSetId"] != null)
            {
                if (Convert.ToInt32(Session["iCurrentSetId"]) == Id)
                {
                    if (Completed == true)
                    {
                        UpdateRequirementCriteria(bRuleStatusIOA, bRuleStatusMultiTchr);
                    }
                }
            }
        }
        else if (Type == "Step")
        {
            if (Session["iCurrentStep"] != null)
            {
                if (Convert.ToInt32(Session["iCurrentStep"]) == Id)
                {
                    if (Completed == true)
                    {
                        UpdateRequirementCriteria(bRuleStatusIOA, bRuleStatusMultiTchr);
                    }
                }
            }

        }
        else if (Type == "Prompt")
        {
            if (Session["sCurrentPrompt"] != null)
            {
                if (Convert.ToInt32(Session["sCurrentPrompt"]) == Id)
                {
                    if (Completed == true)
                    {
                        UpdateRequirementCriteria(bRuleStatusIOA, bRuleStatusMultiTchr);
                    }
                }
            }
        }
        else if (Type == "Complete")
        {
            UpdateRequirementCriteria(bRuleStatusIOA, bRuleStatusMultiTchr);
        }

    }

    private void UpdateRequirementCriteria(bool bRuleStatusIOA, bool bRuleStatusMultiTchr)
    {
        oData = new clsData();
        oTemp = (ClsTemplateSession)Session["BiweeklySession"];
        string UpdateQuery = "";
        string message = "";
        bool IsMaintanace = Convert.ToBoolean(hdn_isMaintainance.Value);
        if (bRuleStatusIOA == true && bRuleStatusMultiTchr == true)
        {
            UpdateQuery = "UPDATE DSTempHdr SET IsMT_IOA=0 WHERE DSTempHdrId=" + oTemp.TemplateId;
        }
        else
        {
            if (bRuleStatusIOA == false && bRuleStatusMultiTchr == false)
            {
                UpdateQuery = "UPDATE DSTempHdr SET IsMT_IOA=3 WHERE DSTempHdrId=" + oTemp.TemplateId;
                message = "Both IOA and Multi Teacher Required";
            }
            else if (bRuleStatusIOA == false && bRuleStatusMultiTchr == true)
            {
                UpdateQuery = "UPDATE DSTempHdr SET IsMT_IOA=1 WHERE DSTempHdrId=" + oTemp.TemplateId;
                message = "IOA Required";
            }
            else if (bRuleStatusIOA == true && bRuleStatusMultiTchr == false)
            {
                UpdateQuery = "UPDATE DSTempHdr SET IsMT_IOA=2 WHERE DSTempHdrId=" + oTemp.TemplateId;
                message = "Multi Teacher Required";
            }
            if (IsMaintanace == true)
            {
                UpdateQuery = "UPDATE DSTempHdr SET IsMT_IOA=0 WHERE DSTempHdrId=" + oTemp.TemplateId;
            }
        }
        oData.Execute(UpdateQuery);

        Session["ioa_mt_message"] = message;
    }


    public DataTable GetModificationDetails(string RuleType, int TemplateId)
    {
        oData = new clsData();
        DataTable dt = new DataTable();
        string sqlstr = "SELECT CriteriaDetails,IsComment,ModificationComment,ModificationRule FROM DSTempRule WHERE DSTempHdrId=" + TemplateId +
                        " AND ActiveInd='A' AND CriteriaType='MODIFICATION'";
        dt = oData.ReturnDataTable(sqlstr, false);

        return dt;
    }
    public bool CheckSetModification(int ModificationRule, int TemplateId, int SetId)
    {
        bool flag = false;
        string selstr = "SELECT COUNT(*)+1 FROM StdtSessEvent WHERE CheckUp_Down='SET MOVEDOWN' AND StudentId= " + oSession.StudentId + " AND DSTempHdrId=" + TemplateId;
        oData = new clsData();
        object count = oData.FetchValue(selstr);
        if (count != null)
        {
            if (Convert.ToInt32(count) >= ModificationRule)
            {
                flag = true;
            }
        }
        string selbanner = "SELECT isnull(Bannerstatus,2) FROM DSTemphdr WHERE StudentId= " + oSession.StudentId + " AND DSTempHdrId=" + TemplateId;
        oData = new clsData();
        int chkbanner = Convert.ToInt32(oData.FetchValue(selbanner));
        if (chkbanner != 0 && flag == true)
        {
            string UpdateQuerybnr = "UPDATE DSTempHdr SET Bannerstatus=1 WHERE StudentId= " + oSession.StudentId + " AND DSTempHdrId=" + oTemp.TemplateId; 
        oData.Execute(UpdateQuerybnr);
        }
        return flag;
    }
    public bool CheckStepModification(int ModificationRule, int TemplateId, int SetId, int StepId)
    {
        bool flag = false;
        string selstr = "SELECT COUNT(*)+1 FROM StdtSessEvent WHERE CheckUp_Down='STEP MOVEDOWN' AND StudentId= " + oSession.StudentId + " AND DSTempHdrId=" + TemplateId;
        oData = new clsData();
        object count = oData.FetchValue(selstr);
        if (count != null)
        {
            if (Convert.ToInt32(count) >= ModificationRule)
            {
                flag = true;
            }
        }
        string selbanner = "SELECT  isnull(Bannerstatus,2)  FROM DSTemphdr WHERE StudentId= " + oSession.StudentId + " AND DSTempHdrId=" + TemplateId;
        oData = new clsData();
        int chkbanner = Convert.ToInt32(oData.FetchValue(selbanner));
        if (chkbanner != 0 && flag == true)
        {
            string UpdateQuerybnr = "UPDATE DSTempHdr SET Bannerstatus=1 WHERE StudentId= " + oSession.StudentId + " AND DSTempHdrId=" + oTemp.TemplateId;
            oData.Execute(UpdateQuerybnr);
        }
        return flag;
    }
    public bool CheckPromptModification(int ModificationRule, int TemplateId, int SetId, int StepId, int PromptId)
    {
        bool flag = false;
        string selstr = "SELECT COUNT(*)+1 FROM StdtSessEvent WHERE CheckUp_Down='PROMPT MOVEDOWN' AND StudentId= " + oSession.StudentId + " AND DSTempHdrId=" + TemplateId;
        oData = new clsData();
        object count = oData.FetchValue(selstr);
        if (count != null)
        {
            if (Convert.ToInt32(count) >= ModificationRule)
            {
                flag = true;
            }
        }
        string selbanner = "SELECT  isnull(Bannerstatus,2)  FROM DSTemphdr WHERE StudentId= " + oSession.StudentId + " AND DSTempHdrId=" + TemplateId;
        oData = new clsData();
        int chkbanner = Convert.ToInt32(oData.FetchValue(selbanner));
        if (chkbanner != 0 && flag == true)
        {
            string UpdateQuerybnr = "UPDATE DSTempHdr SET Bannerstatus=1 WHERE StudentId= " + oSession.StudentId + " AND DSTempHdrId=" + oTemp.TemplateId;
            oData.Execute(UpdateQuerybnr);
        }
        return flag;
    }

    protected bool ValidateUp(int iStudentId, int colCalId, float iScoreRequired, int iSessonNumber, int iTotalCorrectInstance, bool bConsequetiveIndex, bool flag)
    {
        oData = new clsData();
        bool status = false;
        int consecutiveCount = 0;
        float barCondition = iScoreRequired;
        DataTable dt = new DataTable();
        string sqlstr = "SELECT Score FROM StdtSessColScore SC INNER JOIN StdtSessionHdr SH on SC.StdtSessionHdrId = sh.StdtSessionHdrId " +
                        "WHERE SH.StdtSessionHdrId IN (select StdtSessionHdrId from ( select hdr.StdtSessionHdrId, RANK()" +
                        "OVER (ORDER BY (CASE(IOAInd) WHEN 'N' THEN 1 WHEN 'Y' THEN 2 END), EndTs DESC) as RNK  FROM StdtSessionHdr hdr " +
                        "WHERE StudentId = " + iStudentId + " AND SC.DSTempSetColCalcId=" + colCalId + " ) as Rk WHERE RNK <= " + iSessonNumber + ") AND SH.IOAInd<>'Y' AND StartTs > " +
                        "(SELECT ISNULL(MAX(EvntTs),'1900-01-01') FROM StdtSessEvent " +
                        "WHERE  StudentId =" + iStudentId + " ) ORDER BY SH.StdtSessionHdrId";

        dt = oData.ReturnDataTable(sqlstr, false);
        int length = dt.Rows.Count;
        float[] values = new float[length];
        int itreator = 0;
        foreach (DataRow dr in dt.Rows)
        {
            values[itreator] = float.Parse(dr["Score"].ToString());
            itreator++;
        }
        if (flag == true)
        {
            for (int index = 0; index < values.Length; index++)
            {
                if (values[index] >= 0)
                {
                    values[index] = barCondition - values[index];
                }
            }
            barCondition = 0;
        }
        if (flag == false)
        {
            for (int index = 0; index < values.Length; index++)
            {
                if (values[index] >= 0)
                {
                    values[index] = values[index] - barCondition;
                }
            }
            barCondition = 0;
        }

        if (bConsequetiveIndex)
        {
            consecutiveCount = Chained.Model.ConsecutiveCount(values, barCondition, true);
            if (iTotalCorrectInstance <= consecutiveCount)
            {
                status = true;
            }
        }
        else
        {
            consecutiveCount = Chained.Model.SuccessORFailureCount(values, barCondition, iTotalCorrectInstance, true);
            if (iTotalCorrectInstance <= consecutiveCount)
            {
                status = true;
            }
        }
        return status;
    }

    protected bool ValidateUp1(int iStudentId, int colCalId, float iScoreRequired, int iSessonNumber, int iTotalCorrectInstance, bool bConsequetiveIndex, bool flag)
    {
        oData = new clsData();
        bool status = false;
        int consecutiveCount = 0;
        float barCondition = iScoreRequired;
        DataTable dt = new DataTable();
        string sqlstr = "SELECT Score FROM StdtSessColScore SC INNER JOIN StdtSessionHdr SH on SC.StdtSessionHdrId = sh.StdtSessionHdrId " +
                        "WHERE SH.StdtSessionHdrId IN (select StdtSessionHdrId from ( select hdr.StdtSessionHdrId, RANK()" +
                        "OVER (ORDER BY (CASE(IOAInd) WHEN 'N' THEN 1 WHEN 'Y' THEN 2 END), EndTs DESC) as RNK  FROM StdtSessionHdr hdr " +
                        "WHERE StudentId = " + iStudentId + " AND SC.DSTempSetColCalcId=" + colCalId + " ) as Rk WHERE RNK <= " + iSessonNumber + ") AND SH.IOAInd<>'Y' AND StartTs > " +
                        "(SELECT ISNULL(MAX(EvntTs),'1900-01-01') FROM StdtSessEvent " +
                        "WHERE  StudentId =" + iStudentId + " ) ORDER BY SH.StdtSessionHdrId";

        dt = oData.ReturnDataTable(sqlstr, false);
        int length = dt.Rows.Count;
        float[] values = new float[length];
        int itreator = 0;
        foreach (DataRow dr in dt.Rows)
        {
            values[itreator] = float.Parse(dr["Score"].ToString());
            itreator++;
        }
        if (flag == true)
        {
            for (int index = 0; index < values.Length; index++)
            {
                values[index] = values[index] - barCondition;
            }
            barCondition = 0;
        }
        if (flag == false)
        {
            for (int index = 0; index < values.Length; index++)
            {
                values[index] = barCondition - values[index];
            }
            barCondition = 0;
        }

        if (bConsequetiveIndex)
        {
            consecutiveCount = Chained.Model.ConsecutiveCount(values, barCondition, true);
            if (iTotalCorrectInstance <= consecutiveCount)
            {
                status = true;
            }
        }
        else
        {
            consecutiveCount = Chained.Model.SuccessORFailureCount(values, barCondition, iTotalCorrectInstance, true);
            if (iTotalCorrectInstance <= consecutiveCount)
            {
                status = true;
            }
        }
        return status;
    }

    protected bool ValidateDown(int iStudentId, int colCalId, float iScoreRequired, int iSessonNumber, int iTotalCorrectInstance, bool bConsequetiveIndex, bool flag)
    {
        oData = new clsData();
        bool status = false;
        int consecutiveCount = 0;
        float barCondition = iScoreRequired;
        DataTable dt = new DataTable();
        string sqlstr = "SELECT Score FROM StdtSessColScore SC INNER JOIN StdtSessionHdr SH on SC.StdtSessionHdrId = sh.StdtSessionHdrId " +
                        "WHERE SH.StdtSessionHdrId IN (select StdtSessionHdrId from ( select hdr.StdtSessionHdrId, RANK()" +
                        "OVER (ORDER BY (CASE(IOAInd) WHEN 'N' THEN 1 WHEN 'Y' THEN 2 END), EndTs DESC) as RNK  FROM StdtSessionHdr hdr " +
                        "WHERE StudentId = " + iStudentId + " AND SC.DSTempSetColCalcId=" + colCalId + " ) as Rk WHERE RNK <= " + iSessonNumber + ") AND SH.IOAInd<>'Y' AND StartTs > " +
                        "(SELECT ISNULL(MAX(EvntTs),'1900-01-01') FROM StdtSessEvent " +
                        "WHERE  StudentId =" + iStudentId + " ) ORDER BY SH.StdtSessionHdrId";

        dt = oData.ReturnDataTable(sqlstr, false);
        int length = dt.Rows.Count;
        float[] values = new float[length];
        int itreator = 0;
        foreach (DataRow dr in dt.Rows)
        {
            values[itreator] = float.Parse(dr["Score"].ToString());
            itreator++;
        }
        if (flag == true)
        {
            for (int index = 0; index < values.Length; index++)
            {
                values[index] = values[index] - barCondition;
            }
            barCondition = 0;
        }
        if (flag == false)
        {
            for (int index = 0; index < values.Length; index++)
            {
                values[index] = barCondition - values[index];
            }
            barCondition = 0;
        }
        if (bConsequetiveIndex)
        {
            consecutiveCount = Chained.Model.ConsecutiveCount(values, barCondition, true);
            if (iTotalCorrectInstance <= consecutiveCount)
            {
                status = true;
            }
        }
        else
        {
            consecutiveCount = Chained.Model.SuccessORFailureCount(values, barCondition, iTotalCorrectInstance, true);
            if (iTotalCorrectInstance <= consecutiveCount)
            {
                status = true;
            }
        }

        return status;
    }

    protected bool ValidateDown1(int iStudentId, int colCalId, float iScoreRequired, int iSessonNumber, int iTotalCorrectInstance, bool bConsequetiveIndex, bool flag)
    {
        oData = new clsData();
        bool status = false;
        int consecutiveCount = 0;
        float barCondition = iScoreRequired;
        DataTable dt = new DataTable();
        string sqlstr = "SELECT Score FROM StdtSessColScore SC INNER JOIN StdtSessionHdr SH on SC.StdtSessionHdrId = sh.StdtSessionHdrId " +
                        "WHERE SH.StdtSessionHdrId IN (select StdtSessionHdrId from ( select hdr.StdtSessionHdrId, RANK()" +
                        "OVER (ORDER BY (CASE(IOAInd) WHEN 'N' THEN 1 WHEN 'Y' THEN 2 END), EndTs DESC) as RNK  FROM StdtSessionHdr hdr " +
                        "WHERE StudentId = " + iStudentId + " AND SC.DSTempSetColCalcId=" + colCalId + " ) as Rk WHERE RNK <= " + iSessonNumber + ") AND SH.IOAInd<>'Y' AND StartTs > " +
                        "(SELECT ISNULL(MAX(EvntTs),'1900-01-01') FROM StdtSessEvent " +
                        "WHERE  StudentId =" + iStudentId + " ) ORDER BY SH.StdtSessionHdrId";

        dt = oData.ReturnDataTable(sqlstr, false);
        int length = dt.Rows.Count;
        float[] values = new float[length];
        int itreator = 0;
        foreach (DataRow dr in dt.Rows)
        {
            values[itreator] = float.Parse(dr["Score"].ToString());
            itreator++;
        }
        if (flag == true)
        {
            for (int index = 0; index < values.Length; index++)
            {
                values[index] = barCondition - values[index];
            }
            barCondition = 0;
        }
        if (flag == false)
        {
            for (int index = 0; index < values.Length; index++)
            {
                values[index] = values[index] - barCondition;
            }
            barCondition = 0;
        }
        if (bConsequetiveIndex)
        {
            consecutiveCount = Chained.Model.ConsecutiveCount(values, barCondition, true);
            if (iTotalCorrectInstance <= consecutiveCount)
            {
                status = true;
            }
        }
        else
        {
            consecutiveCount = Chained.Model.SuccessORFailureCount(values, barCondition, iTotalCorrectInstance, true);
            if (iTotalCorrectInstance <= consecutiveCount)
            {
                status = true;
            }
        }

        return status;
    }

    protected Rules GetSetRules(int tempId, int colId)
    {
        oData = new clsData();
        //bSetMoveUp = true;
        //bSetMoveBack = true;
        colCalId = 0;
        bool bIOAReq = false;
        bool bMultiTeacher = false;
        bool bMultiSet = false;
        bool bIncludeMisTrail = false;
        Rules ruleData = new Rules();
        RuleDetails setRuleMoveUpDetails = new RuleDetails();
        string sql = " SELECT  DR.RuleType, DR.CriteriaType, DR.IOAReqInd, DR.DSTempSetColCalcId, DR.MultiTeacherReqInd, DR.TotalInstance, DR.TotCorrInstance,DST.IncMisTrialInd, DST.ColName," +
                   " DC.CalcType,DC.CalcFormula,DT.MultiSetsInd, DT.DSTempHdrId, DR.ScoreReq,DR.ConsequetiveInd,ISNULL(DR.ConsequetiveAvgInd,0) AS ConsequetiveAvgInd FROM DSTempHdr DT " + //--- [New Criteria] May 2020 ---//
                   " INNER JOIN DSTempSetCol DST ON DT.DSTempHdrId = DST.DSTempHdrId " +
                   " INNER JOIN DSTempSetColCalc DC ON DST.DSTempSetColId = DC.DSTempSetColId " +
                   " INNER JOIN DSTempRule DR ON DR.DSTempSetColCalcId = DC.DSTempSetColCalcId " +
                   " WHERE (DT.DSTempHdrId =" + tempId + ")AND DR.RuleType='SET' AND DR.DSTempSetColId=" + colId + " AND DR.ActiveInd='A' AND DR.IsNA<>1";
        DataTable dt = new DataTable();
        dt = oData.ReturnDataTable(sql, false);
        foreach (DataRow dr in dt.Rows)
        {
            ruleData.count++;
            //reader = objData.ReturnDataReader(sql, false);
            if (dr["CriteriaType"].ToString() == "MOVE UP")
            {
                ruleData.moveup++;
                if (dr["CalcType"].ToString().Replace(" ", "") == "%Accuracy")
                {
                    ruleData.pctAccyMoveUp.iScoreRequired = Convert.ToInt32(dr["ScoreReq"].ToString());
                    ruleData.pctAccyMoveUp.bConsequetiveIndex = Convert.ToBoolean(dr["ConsequetiveInd"].ToString());
                    ruleData.pctAccyMoveUp.bConsecutiveAvg = Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()); //--- [New Criteria] May 2020 ---//
                    if (Convert.ToBoolean(dr["ConsequetiveInd"].ToString()))
                    {
                        ruleData.pctAccyMoveUp.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    }
                    else if (Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()))  //--- [New Criteria] May 2020 - (Start) ---//
                    {
                        ruleData.pctAccyMoveUp.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    } //--- [New Criteria] May 2020 - (End) ---//
                    else
                    {
                        ruleData.pctAccyMoveUp.iTotalCorrectInstance = Convert.ToInt32(dr["TotCorrInstance"].ToString());
                    }
                    ruleData.pctAccyMoveUp.iTotalInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    if (!bIOAReq)
                    {
                        ruleData.pctAccyMoveUp.bIOARequird = Convert.ToBoolean(dr["IOAReqInd"].ToString());
                        //bSetIOA = bIOAReq;
                    }
                    if (!bMultiTeacher)
                    {
                        ruleData.pctAccyMoveUp.bMultiTeacherRequired = Convert.ToBoolean(dr["MultiTeacherReqInd"].ToString());
                    }
                    if (!bIncludeMisTrail)
                    {
                        bIncludeMisTrail = Convert.ToBoolean(dr["IncMisTrialInd"].ToString());
                    }

                }
                if (dr["CalcType"].ToString().Replace(" ", "") == "%Independent")
                {
                    ruleData.pctIndMoveUp.iScoreRequired = Convert.ToInt32(dr["ScoreReq"].ToString());
                    ruleData.pctIndMoveUp.bConsequetiveIndex = Convert.ToBoolean(dr["ConsequetiveInd"].ToString());
                    ruleData.pctIndMoveUp.bConsecutiveAvg = Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()); //--- [New Criteria] May 2020 ---//
                    if (Convert.ToBoolean(dr["ConsequetiveInd"].ToString()))
                    {
                        ruleData.pctIndMoveUp.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    }
                    else if (Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()))  //--- [New Criteria] May 2020 - (Start) ---//
                    {
                        ruleData.pctIndMoveUp.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    } //--- [New Criteria] May 2020 - (End) ---//
                    else
                    {
                        ruleData.pctIndMoveUp.iTotalCorrectInstance = Convert.ToInt32(dr["TotCorrInstance"].ToString());
                    }
                    ruleData.pctIndMoveUp.iTotalInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    if (!bIOAReq)
                    {
                        ruleData.pctIndMoveUp.bIOARequird = Convert.ToBoolean(dr["IOAReqInd"].ToString());
                    }
                    if (!bMultiTeacher)
                    {
                        ruleData.pctIndMoveUp.bMultiTeacherRequired = Convert.ToBoolean(dr["MultiTeacherReqInd"].ToString());
                    }
                    if (!bIncludeMisTrail)
                    {
                        bIncludeMisTrail = Convert.ToBoolean(dr["IncMisTrialInd"].ToString());
                    }
                }

                if (dr["CalcType"].ToString().Replace(" ", "") == "%IndependentofAllSteps")
                {
                    ruleData.pctIndAllMoveUp.iScoreRequired = Convert.ToInt32(dr["ScoreReq"].ToString());
                    ruleData.pctIndAllMoveUp.bConsequetiveIndex = Convert.ToBoolean(dr["ConsequetiveInd"].ToString());
                    ruleData.pctIndAllMoveUp.bConsecutiveAvg = Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()); //--- [New Criteria] May 2020 ---//
                    if (Convert.ToBoolean(dr["ConsequetiveInd"].ToString()))
                    {
                        ruleData.pctIndAllMoveUp.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    }
                    else if (Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()))  //--- [New Criteria] May 2020 - (Start) ---//
                    {
                        ruleData.pctIndAllMoveUp.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    } //--- [New Criteria] May 2020 - (End) ---//
                    else
                    {
                        ruleData.pctIndAllMoveUp.iTotalCorrectInstance = Convert.ToInt32(dr["TotCorrInstance"].ToString());
                    }
                    ruleData.pctIndAllMoveUp.iTotalInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    if (!bIOAReq)
                    {
                        ruleData.pctIndAllMoveUp.bIOARequird = Convert.ToBoolean(dr["IOAReqInd"].ToString());
                    }
                    if (!bMultiTeacher)
                    {
                        ruleData.pctIndAllMoveUp.bMultiTeacherRequired = Convert.ToBoolean(dr["MultiTeacherReqInd"].ToString());
                    }
                    if (!bIncludeMisTrail)
                    {
                        bIncludeMisTrail = Convert.ToBoolean(dr["IncMisTrialInd"].ToString());
                    }

                    IndeallId = Convert.ToInt32(dr["DSTempSetColCalcId"].ToString());
                    ViewState["IndeallId"] = IndeallId;
                }

                if (dr["CalcType"].ToString().Replace(" ", "") == "%Prompted")
                {
                    ruleData.pctPrmtMoveUp.iScoreRequired = Convert.ToInt32(dr["ScoreReq"].ToString());
                    ruleData.pctPrmtMoveUp.bConsequetiveIndex = Convert.ToBoolean(dr["ConsequetiveInd"].ToString());
                    ruleData.pctPrmtMoveUp.bConsecutiveAvg = Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()); //--- [New Criteria] May 2020 ---//
                    if (Convert.ToBoolean(dr["ConsequetiveInd"].ToString()))
                    {
                        ruleData.pctPrmtMoveUp.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    }
                    else if (Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()))  //--- [New Criteria] May 2020 - (Start) ---//
                    {
                        ruleData.pctPrmtMoveUp.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    } //--- [New Criteria] May 2020 - (End) ---//
                    else
                    {
                        ruleData.pctPrmtMoveUp.iTotalCorrectInstance = Convert.ToInt32(dr["TotCorrInstance"].ToString());
                    }
                    ruleData.pctPrmtMoveUp.iTotalInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    if (!bIOAReq)
                    {
                        ruleData.pctPrmtMoveUp.bIOARequird = Convert.ToBoolean(dr["IOAReqInd"].ToString());
                    }
                    if (!bMultiTeacher)
                    {
                        ruleData.pctPrmtMoveUp.bMultiTeacherRequired = Convert.ToBoolean(dr["MultiTeacherReqInd"].ToString());
                    }
                    if (!bIncludeMisTrail)
                    {
                        bIncludeMisTrail = Convert.ToBoolean(dr["IncMisTrialInd"].ToString());
                    }
                }
                if (dr["CalcType"].ToString() == "Customize")
                {
                    ruleData.pctCustomMoveUp.iScoreRequired = Convert.ToInt32(dr["ScoreReq"].ToString());
                    ruleData.pctCustomMoveUp.bConsequetiveIndex = Convert.ToBoolean(dr["ConsequetiveInd"].ToString());
                    ruleData.pctCustomMoveUp.bConsecutiveAvg = Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()); //--- [New Criteria] May 2020 ---//
                    if (Convert.ToBoolean(dr["ConsequetiveInd"].ToString()))
                    {
                        ruleData.pctCustomMoveUp.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    }
                    else if (Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()))  //--- [New Criteria] May 2020 - (Start) ---//
                    {
                        ruleData.pctCustomMoveUp.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    } //--- [New Criteria] May 2020 - (End) ---//
                    else
                    {
                        ruleData.pctCustomMoveUp.iTotalCorrectInstance = Convert.ToInt32(dr["TotCorrInstance"].ToString());
                    }
                    ruleData.pctCustomMoveUp.iTotalInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    if (!bIOAReq)
                    {
                        ruleData.pctCustomMoveUp.bIOARequird = Convert.ToBoolean(dr["IOAReqInd"].ToString());
                    }
                    if (!bMultiTeacher)
                    {
                        ruleData.pctCustomMoveUp.bMultiTeacherRequired = Convert.ToBoolean(dr["MultiTeacherReqInd"].ToString());
                    }
                    if (!bIncludeMisTrail)
                    {
                        bIncludeMisTrail = Convert.ToBoolean(dr["IncMisTrialInd"].ToString());
                    }
                    //custom += dr["CalcFormula"].ToString() + "#";
                    colCalId = Convert.ToInt32(dr["DSTempSetColCalcId"].ToString());
                    ViewState["colCalId"] = colCalId;
                }
                if (dr["CalcType"].ToString().Replace(" ", "") == "AvgDuration")
                {
                    ruleData.pctAvgDurationMoveUp.iScoreRequired = Convert.ToInt32(dr["ScoreReq"].ToString());
                    ruleData.pctAvgDurationMoveUp.bConsequetiveIndex = Convert.ToBoolean(dr["ConsequetiveInd"].ToString());
                    ruleData.pctAvgDurationMoveUp.bConsecutiveAvg = Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()); //--- [New Criteria] May 2020 ---//
                    if (Convert.ToBoolean(dr["ConsequetiveInd"].ToString()))
                    {
                        ruleData.pctAvgDurationMoveUp.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    }
                    else if (Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()))  //--- [New Criteria] May 2020 - (Start) ---//
                    {
                        ruleData.pctAvgDurationMoveUp.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    } //--- [New Criteria] May 2020 - (End) ---//
                    else
                    {
                        ruleData.pctAvgDurationMoveUp.iTotalCorrectInstance = Convert.ToInt32(dr["TotCorrInstance"].ToString());
                    }
                    ruleData.pctAvgDurationMoveUp.iTotalInstance = Convert.ToInt32(dr["TotalInstance"].ToString());

                    if (!bIOAReq)
                    {
                        ruleData.pctAvgDurationMoveUp.bIOARequird = Convert.ToBoolean(dr["IOAReqInd"].ToString());
                    }
                    if (!bMultiTeacher)
                    {
                        ruleData.pctAvgDurationMoveUp.bMultiTeacherRequired = Convert.ToBoolean(dr["MultiTeacherReqInd"].ToString());
                    }
                    if (!bIncludeMisTrail)
                    {
                        bIncludeMisTrail = Convert.ToBoolean(dr["IncMisTrialInd"].ToString());
                    }
                    avgDurationId = Convert.ToInt32(dr["DSTempSetColCalcId"].ToString());
                    ViewState["avgDurationId"] = avgDurationId;
                }
                if (dr["CalcType"].ToString().Replace(" ", "") == "TotalDuration")
                {
                    ruleData.pctTotalDurationMoveUp.iScoreRequired = Convert.ToInt32(dr["ScoreReq"].ToString());
                    ruleData.pctTotalDurationMoveUp.bConsequetiveIndex = Convert.ToBoolean(dr["ConsequetiveInd"].ToString());
                    ruleData.pctTotalDurationMoveUp.bConsecutiveAvg = Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()); //--- [New Criteria] May 2020 ---//
                    if (Convert.ToBoolean(dr["ConsequetiveInd"].ToString()))
                    {
                        ruleData.pctTotalDurationMoveUp.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    }
                    else if (Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()))  //--- [New Criteria] May 2020 - (Start) ---//
                    {
                        ruleData.pctTotalDurationMoveUp.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    } //--- [New Criteria] May 2020 - (End) ---//
                    else
                    {
                        ruleData.pctTotalDurationMoveUp.iTotalCorrectInstance = Convert.ToInt32(dr["TotCorrInstance"].ToString());
                    }
                    ruleData.pctTotalDurationMoveUp.iTotalInstance = Convert.ToInt32(dr["TotalInstance"].ToString());

                    if (!bIOAReq)
                    {
                        ruleData.pctTotalDurationMoveUp.bIOARequird = Convert.ToBoolean(dr["IOAReqInd"].ToString());
                    }
                    if (!bMultiTeacher)
                    {
                        ruleData.pctTotalDurationMoveUp.bMultiTeacherRequired = Convert.ToBoolean(dr["MultiTeacherReqInd"].ToString());
                    }
                    if (!bIncludeMisTrail)
                    {
                        bIncludeMisTrail = Convert.ToBoolean(dr["IncMisTrialInd"].ToString());
                    }
                    totDuraionId = Convert.ToInt32(dr["DSTempSetColCalcId"].ToString());
                    ViewState["totDuraionId"] = totDuraionId;
                }
                if (dr["CalcType"].ToString() == "Frequency")
                {
                    ruleData.pctFrequencyMoveUp.iScoreRequired = Convert.ToInt32(dr["ScoreReq"].ToString());
                    ruleData.pctFrequencyMoveUp.bConsequetiveIndex = Convert.ToBoolean(dr["ConsequetiveInd"].ToString());
                    ruleData.pctFrequencyMoveUp.bConsecutiveAvg = Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()); //--- [New Criteria] May 2020 ---//
                    if (Convert.ToBoolean(dr["ConsequetiveInd"].ToString()))
                    {
                        ruleData.pctFrequencyMoveUp.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    }
                    else if (Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()))  //--- [New Criteria] May 2020 - (Start) ---//
                    {
                        ruleData.pctFrequencyMoveUp.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    } //--- [New Criteria] May 2020 - (End) ---//
                    else
                    {
                        ruleData.pctFrequencyMoveUp.iTotalCorrectInstance = Convert.ToInt32(dr["TotCorrInstance"].ToString());
                    }
                    ruleData.pctFrequencyMoveUp.iTotalInstance = Convert.ToInt32(dr["TotalInstance"].ToString());

                    if (!bIOAReq)
                    {
                        ruleData.pctFrequencyMoveUp.bIOARequird = Convert.ToBoolean(dr["IOAReqInd"].ToString());
                    }
                    if (!bMultiTeacher)
                    {
                        ruleData.pctFrequencyMoveUp.bMultiTeacherRequired = Convert.ToBoolean(dr["MultiTeacherReqInd"].ToString());
                    }
                    if (!bIncludeMisTrail)
                    {
                        bIncludeMisTrail = Convert.ToBoolean(dr["IncMisTrialInd"].ToString());
                    }
                    freqId = Convert.ToInt32(dr["DSTempSetColCalcId"].ToString());
                    ViewState["freqId"] = freqId;
                }
                if (dr["CalcType"].ToString().Replace(" ", "") == "%AccuracyatTrainingStep")
                {
                    ruleData.pctlearnedStepMoveUp.iScoreRequired = Convert.ToInt32(dr["ScoreReq"].ToString());
                    ruleData.pctlearnedStepMoveUp.bConsequetiveIndex = Convert.ToBoolean(dr["ConsequetiveInd"].ToString());
                    ruleData.pctlearnedStepMoveUp.bConsecutiveAvg = Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()); //--- [New Criteria] May 2020 ---//
                    if (Convert.ToBoolean(dr["ConsequetiveInd"].ToString()))
                    {
                        ruleData.pctlearnedStepMoveUp.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    }
                    else if (Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()))  //--- [New Criteria] May 2020 - (Start) ---//
                    {
                        ruleData.pctlearnedStepMoveUp.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    } //--- [New Criteria] May 2020 - (End) ---//
                    else
                    {
                        ruleData.pctlearnedStepMoveUp.iTotalCorrectInstance = Convert.ToInt32(dr["TotCorrInstance"].ToString());
                    }
                    ruleData.pctlearnedStepMoveUp.iTotalInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    if (!bIOAReq)
                    {
                        ruleData.pctlearnedStepMoveUp.bIOARequird = Convert.ToBoolean(dr["IOAReqInd"].ToString());
                        //bStepIOA = bIOAReq;
                    }
                    if (!bMultiTeacher)
                    {
                        ruleData.pctlearnedStepMoveUp.bMultiTeacherRequired = Convert.ToBoolean(dr["MultiTeacherReqInd"].ToString());
                    }
                    if (!bIncludeMisTrail)
                    {
                        bIncludeMisTrail = Convert.ToBoolean(dr["IncMisTrialInd"].ToString());
                    }
                    acc_trainId = Convert.ToInt32(dr["DSTempSetColCalcId"].ToString());
                    ViewState["acc_trainId"] = acc_trainId;

                }


                if (dr["CalcType"].ToString().Replace(" ", "") == "%AccuracyatPreviouslyLearnedSteps")
                {
                    ruleData.Set_ExcludeCrntStepMoveUp.iScoreRequired = Convert.ToInt32(dr["ScoreReq"].ToString());
                    ruleData.Set_ExcludeCrntStepMoveUp.bConsequetiveIndex = Convert.ToBoolean(dr["ConsequetiveInd"].ToString());
                    ruleData.Set_ExcludeCrntStepMoveUp.bConsecutiveAvg = Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()); //--- [New Criteria] May 2020 ---//
                    if (Convert.ToBoolean(dr["ConsequetiveInd"].ToString()))
                    {
                        ruleData.Set_ExcludeCrntStepMoveUp.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    }
                    else if (Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()))  //--- [New Criteria] May 2020 - (Start) ---//
                    {
                        ruleData.Set_ExcludeCrntStepMoveUp.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    } //--- [New Criteria] May 2020 - (End) ---//
                    else
                    {
                        ruleData.Set_ExcludeCrntStepMoveUp.iTotalCorrectInstance = Convert.ToInt32(dr["TotCorrInstance"].ToString());
                    }
                    ruleData.Set_ExcludeCrntStepMoveUp.iTotalInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    if (!bIOAReq)
                    {
                        ruleData.Set_ExcludeCrntStepMoveUp.bIOARequird = Convert.ToBoolean(dr["IOAReqInd"].ToString());
                        //bStepIOA = bIOAReq;
                    }
                    if (!bMultiTeacher)
                    {
                        ruleData.Set_ExcludeCrntStepMoveUp.bMultiTeacherRequired = Convert.ToBoolean(dr["MultiTeacherReqInd"].ToString());
                    }
                    if (!bIncludeMisTrail)
                    {
                        bIncludeMisTrail = Convert.ToBoolean(dr["IncMisTrialInd"].ToString());
                    }
                }
                if (dr["CalcType"].ToString().Replace(" ", "") == "TotalCorrect")
                {
                    ruleData.pctTotalCorrectMoveUp.iScoreRequired = Convert.ToInt32(dr["ScoreReq"].ToString());
                    ruleData.pctTotalCorrectMoveUp.bConsequetiveIndex = Convert.ToBoolean(dr["ConsequetiveInd"].ToString());
                    ruleData.pctTotalCorrectMoveUp.bConsecutiveAvg = Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()); //--- [New Criteria] May 2020 ---//
                    if (Convert.ToBoolean(dr["ConsequetiveInd"].ToString()))
                    {
                        ruleData.pctTotalCorrectMoveUp.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    }
                    else if (Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()))  //--- [New Criteria] May 2020 - (Start) ---//
                    {
                        ruleData.pctTotalCorrectMoveUp.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    } //--- [New Criteria] May 2020 - (End) ---//
                    else
                    {
                        ruleData.pctTotalCorrectMoveUp.iTotalCorrectInstance = Convert.ToInt32(dr["TotCorrInstance"].ToString());
                    }
                    ruleData.pctTotalCorrectMoveUp.iTotalInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    if (!bIOAReq)
                    {
                        ruleData.pctTotalCorrectMoveUp.bIOARequird = Convert.ToBoolean(dr["IOAReqInd"].ToString());
                        // bPromptIOA = bIOAReq;
                    }
                    if (!bMultiTeacher)
                    {
                        ruleData.pctTotalCorrectMoveUp.bMultiTeacherRequired = Convert.ToBoolean(dr["MultiTeacherReqInd"].ToString());
                    }
                    if (!bIncludeMisTrail)
                    {
                        bIncludeMisTrail = Convert.ToBoolean(dr["IncMisTrialInd"].ToString());
                    }
                }
                if (dr["CalcType"].ToString().Replace(" ", "") == "TotalIncorrect")
                {
                    ruleData.pctTotalIncorrectMoveUp.iScoreRequired = Convert.ToInt32(dr["ScoreReq"].ToString());
                    ruleData.pctTotalIncorrectMoveUp.bConsequetiveIndex = Convert.ToBoolean(dr["ConsequetiveInd"].ToString());
                    ruleData.pctTotalIncorrectMoveUp.bConsecutiveAvg = Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()); //--- [New Criteria] May 2020 ---//
                    if (Convert.ToBoolean(dr["ConsequetiveInd"].ToString()))
                    {
                        ruleData.pctTotalIncorrectMoveUp.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    }
                    else if (Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()))  //--- [New Criteria] May 2020 - (Start) ---//
                    {
                        ruleData.pctTotalIncorrectMoveUp.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    } //--- [New Criteria] May 2020 - (End) ---//
                    else
                    {
                        ruleData.pctTotalIncorrectMoveUp.iTotalCorrectInstance = Convert.ToInt32(dr["TotCorrInstance"].ToString());
                    }
                    ruleData.pctTotalIncorrectMoveUp.iTotalInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    if (!bIOAReq)
                    {
                        ruleData.pctTotalIncorrectMoveUp.bIOARequird = Convert.ToBoolean(dr["IOAReqInd"].ToString());
                        // bPromptIOA = bIOAReq;
                    }
                    if (!bMultiTeacher)
                    {
                        ruleData.pctTotalIncorrectMoveUp.bMultiTeacherRequired = Convert.ToBoolean(dr["MultiTeacherReqInd"].ToString());
                    }
                    if (!bIncludeMisTrail)
                    {
                        bIncludeMisTrail = Convert.ToBoolean(dr["IncMisTrialInd"].ToString());
                    }
                }
            }
            if (dr["CriteriaType"].ToString() == "MOVE DOWN")
            {
                ruleData.movedown++;
                if (dr["CalcType"].ToString().Replace(" ", "") == "%Accuracy")
                {
                    ruleData.pctAccyMoveDown.iScoreRequired = Convert.ToInt32(dr["ScoreReq"].ToString());
                    ruleData.pctAccyMoveDown.bConsequetiveIndex = Convert.ToBoolean(dr["ConsequetiveInd"].ToString());
                    ruleData.pctAccyMoveDown.bConsecutiveAvg = Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()); //--- [New Criteria] May 2020 ---//
                    if (Convert.ToBoolean(dr["ConsequetiveInd"].ToString()))
                    {
                        ruleData.pctAccyMoveDown.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    }
                    else if (Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()))  //--- [New Criteria] May 2020 - (Start) ---//
                    {
                        ruleData.pctAccyMoveDown.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    } //--- [New Criteria] May 2020 - (End) ---//
                    else
                    {
                        ruleData.pctAccyMoveDown.iTotalCorrectInstance = Convert.ToInt32(dr["TotCorrInstance"].ToString());
                    }
                    ruleData.pctAccyMoveDown.iTotalInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    if (!bIOAReq)
                    {
                        ruleData.pctAccyMoveDown.bIOARequird = Convert.ToBoolean(dr["IOAReqInd"].ToString());
                    }
                    if (!bMultiTeacher)
                    {
                        ruleData.pctAccyMoveDown.bMultiTeacherRequired = Convert.ToBoolean(dr["MultiTeacherReqInd"].ToString());
                    }
                    if (!bIncludeMisTrail)
                    {
                        bIncludeMisTrail = Convert.ToBoolean(dr["IncMisTrialInd"].ToString());
                    }
                }
                if (dr["CalcType"].ToString().Replace(" ", "") == "%Independent")
                {
                    ruleData.pctIndMoveDown.iScoreRequired = Convert.ToInt32(dr["ScoreReq"].ToString());
                    ruleData.pctIndMoveDown.bConsequetiveIndex = Convert.ToBoolean(dr["ConsequetiveInd"].ToString());
                    ruleData.pctIndMoveDown.bConsecutiveAvg = Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()); //--- [New Criteria] May 2020 ---//
                    if (Convert.ToBoolean(dr["ConsequetiveInd"].ToString()))
                    {
                        ruleData.pctIndMoveDown.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    }
                    else if (Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()))  //--- [New Criteria] May 2020 - (Start) ---//
                    {
                        ruleData.pctIndMoveDown.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    } //--- [New Criteria] May 2020 - (End) ---//
                    else
                    {
                        ruleData.pctIndMoveDown.iTotalCorrectInstance = Convert.ToInt32(dr["TotCorrInstance"].ToString());
                    }
                    ruleData.pctIndMoveDown.iTotalInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    if (!bIOAReq)
                    {
                        ruleData.pctIndMoveDown.bIOARequird = Convert.ToBoolean(dr["IOAReqInd"].ToString());
                    }
                    if (!bMultiTeacher)
                    {
                        ruleData.pctIndMoveDown.bMultiTeacherRequired = Convert.ToBoolean(dr["MultiTeacherReqInd"].ToString());
                    }
                    if (!bIncludeMisTrail)
                    {
                        bIncludeMisTrail = Convert.ToBoolean(dr["IncMisTrialInd"].ToString());
                    }

                }
                if (dr["CalcType"].ToString().Replace(" ", "") == "%IndependentofAllSteps")
                {
                    ruleData.pctIndAllMoveDown.iScoreRequired = Convert.ToInt32(dr["ScoreReq"].ToString());
                    ruleData.pctIndAllMoveDown.bConsequetiveIndex = Convert.ToBoolean(dr["ConsequetiveInd"].ToString());
                    ruleData.pctIndAllMoveDown.bConsecutiveAvg = Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()); //--- [New Criteria] May 2020 ---//
                    if (Convert.ToBoolean(dr["ConsequetiveInd"].ToString()))
                    {
                        ruleData.pctIndAllMoveDown.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    }
                    else if (Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()))  //--- [New Criteria] May 2020 - (Start) ---//
                    {
                        ruleData.pctIndAllMoveDown.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    } //--- [New Criteria] May 2020 - (End) ---//
                    else
                    {
                        ruleData.pctIndAllMoveDown.iTotalCorrectInstance = Convert.ToInt32(dr["TotCorrInstance"].ToString());
                    }
                    ruleData.pctIndAllMoveDown.iTotalInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    if (!bIOAReq)
                    {
                        ruleData.pctIndAllMoveDown.bIOARequird = Convert.ToBoolean(dr["IOAReqInd"].ToString());
                    }
                    if (!bMultiTeacher)
                    {
                        ruleData.pctIndAllMoveDown.bMultiTeacherRequired = Convert.ToBoolean(dr["MultiTeacherReqInd"].ToString());
                    }
                    if (!bIncludeMisTrail)
                    {
                        bIncludeMisTrail = Convert.ToBoolean(dr["IncMisTrialInd"].ToString());
                    }

                    IndeallId = Convert.ToInt32(dr["DSTempSetColCalcId"].ToString());
                    ViewState["IndeallId"] = IndeallId;
                }
                if (dr["CalcType"].ToString().Replace(" ", "") == "%Prompted")
                {
                    ruleData.pctPrmtMoveDown.iScoreRequired = Convert.ToInt32(dr["ScoreReq"].ToString());
                    ruleData.pctPrmtMoveDown.bConsequetiveIndex = Convert.ToBoolean(dr["ConsequetiveInd"].ToString());
                    ruleData.pctPrmtMoveDown.bConsecutiveAvg = Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()); //--- [New Criteria] May 2020 ---//
                    if (Convert.ToBoolean(dr["ConsequetiveInd"].ToString()))
                    {
                        ruleData.pctPrmtMoveDown.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    }
                    else if (Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()))  //--- [New Criteria] May 2020 - (Start) ---//
                    {
                        ruleData.pctPrmtMoveDown.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    } //--- [New Criteria] May 2020 - (End) ---//
                    else
                    {
                        ruleData.pctPrmtMoveDown.iTotalCorrectInstance = Convert.ToInt32(dr["TotCorrInstance"].ToString());
                    }
                    ruleData.pctPrmtMoveDown.iTotalInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    if (!bIOAReq)
                    {
                        ruleData.pctPrmtMoveDown.bIOARequird = Convert.ToBoolean(dr["IOAReqInd"].ToString());
                    }
                    if (!bMultiTeacher)
                    {
                        ruleData.pctPrmtMoveDown.bMultiTeacherRequired = Convert.ToBoolean(dr["MultiTeacherReqInd"].ToString());
                    }
                    if (!bIncludeMisTrail)
                    {
                        bIncludeMisTrail = Convert.ToBoolean(dr["IncMisTrialInd"].ToString());
                    }

                }
                if (dr["CalcType"].ToString() == "Customize")
                {
                    ruleData.pctCustomMoveDown.iScoreRequired = Convert.ToInt32(dr["ScoreReq"].ToString());
                    ruleData.pctCustomMoveDown.bConsequetiveIndex = Convert.ToBoolean(dr["ConsequetiveInd"].ToString());
                    ruleData.pctCustomMoveDown.bConsecutiveAvg = Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()); //--- [New Criteria] May 2020 ---//
                    if (Convert.ToBoolean(dr["ConsequetiveInd"].ToString()))
                    {
                        ruleData.pctCustomMoveDown.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    }
                    else if (Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()))  //--- [New Criteria] May 2020 - (Start) ---//
                    {
                        ruleData.pctCustomMoveDown.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    } //--- [New Criteria] May 2020 - (End) ---//
                    else
                    {
                        ruleData.pctCustomMoveDown.iTotalCorrectInstance = Convert.ToInt32(dr["TotCorrInstance"].ToString());
                    }
                    ruleData.pctCustomMoveDown.iTotalInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    if (!bIOAReq)
                    {
                        ruleData.pctCustomMoveDown.bIOARequird = Convert.ToBoolean(dr["IOAReqInd"].ToString());
                    }
                    if (!bMultiTeacher)
                    {
                        ruleData.pctCustomMoveDown.bMultiTeacherRequired = Convert.ToBoolean(dr["MultiTeacherReqInd"].ToString());
                    }
                    if (!bIncludeMisTrail)
                    {
                        bIncludeMisTrail = Convert.ToBoolean(dr["IncMisTrialInd"].ToString());
                    }
                    //custom += dr["CalcFormula"].ToString() + "#";

                    colCalId = Convert.ToInt32(dr["DSTempSetColCalcId"].ToString());
                    ViewState["colCalId"] = colCalId;
                }
                if (dr["CalcType"].ToString().Replace(" ", "") == "AvgDuration")
                {
                    ruleData.pctAvgDurationMoveDown.iScoreRequired = Convert.ToInt32(dr["ScoreReq"].ToString());
                    ruleData.pctAvgDurationMoveDown.bConsequetiveIndex = Convert.ToBoolean(dr["ConsequetiveInd"].ToString());
                    ruleData.pctAvgDurationMoveDown.bConsecutiveAvg = Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()); //--- [New Criteria] May 2020 ---//
                    if (Convert.ToBoolean(dr["ConsequetiveInd"].ToString()))
                    {
                        ruleData.pctAvgDurationMoveDown.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    }
                    else if (Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()))  //--- [New Criteria] May 2020 - (Start) ---//
                    {
                        ruleData.pctAvgDurationMoveDown.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    } //--- [New Criteria] May 2020 - (End) ---//
                    else
                    {
                        ruleData.pctAvgDurationMoveDown.iTotalCorrectInstance = Convert.ToInt32(dr["TotCorrInstance"].ToString());
                    }
                    ruleData.pctAvgDurationMoveDown.iTotalInstance = Convert.ToInt32(dr["TotalInstance"].ToString());

                    if (!bIOAReq)
                    {
                        ruleData.pctAvgDurationMoveDown.bIOARequird = Convert.ToBoolean(dr["IOAReqInd"].ToString());
                    }
                    if (!bMultiTeacher)
                    {
                        ruleData.pctAvgDurationMoveDown.bMultiTeacherRequired = Convert.ToBoolean(dr["MultiTeacherReqInd"].ToString());
                    }
                    if (!bIncludeMisTrail)
                    {
                        bIncludeMisTrail = Convert.ToBoolean(dr["IncMisTrialInd"].ToString());
                    }
                    avgDurationId = Convert.ToInt32(dr["DSTempSetColCalcId"].ToString());
                    ViewState["avgDurationId"] = avgDurationId;
                }
                if (dr["CalcType"].ToString().Replace(" ", "") == "TotalDuration")
                {
                    ruleData.pctTotalDurationMoveDown.iScoreRequired = Convert.ToInt32(dr["ScoreReq"].ToString());
                    ruleData.pctTotalDurationMoveDown.bConsequetiveIndex = Convert.ToBoolean(dr["ConsequetiveInd"].ToString());
                    ruleData.pctTotalDurationMoveDown.bConsecutiveAvg = Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()); //--- [New Criteria] May 2020 ---//
                    if (Convert.ToBoolean(dr["ConsequetiveInd"].ToString()))
                    {
                        ruleData.pctTotalDurationMoveDown.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    }
                    else if (Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()))  //--- [New Criteria] May 2020 - (Start) ---//
                    {
                        ruleData.pctTotalDurationMoveDown.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    } //--- [New Criteria] May 2020 - (End) ---//
                    else
                    {
                        ruleData.pctTotalDurationMoveDown.iTotalCorrectInstance = Convert.ToInt32(dr["TotCorrInstance"].ToString());
                    }
                    ruleData.pctTotalDurationMoveDown.iTotalInstance = Convert.ToInt32(dr["TotalInstance"].ToString());

                    if (!bIOAReq)
                    {
                        ruleData.pctTotalDurationMoveDown.bIOARequird = Convert.ToBoolean(dr["IOAReqInd"].ToString());
                    }
                    if (!bMultiTeacher)
                    {
                        ruleData.pctTotalDurationMoveDown.bMultiTeacherRequired = Convert.ToBoolean(dr["MultiTeacherReqInd"].ToString());
                    }
                    if (!bIncludeMisTrail)
                    {
                        bIncludeMisTrail = Convert.ToBoolean(dr["IncMisTrialInd"].ToString());
                    }
                    totDuraionId = Convert.ToInt32(dr["DSTempSetColCalcId"].ToString());
                    ViewState["totDuraionId"] = totDuraionId;
                }
                if (dr["CalcType"].ToString() == "Frequency")
                {
                    ruleData.pctFrequencyMoveDown.iScoreRequired = Convert.ToInt32(dr["ScoreReq"].ToString());
                    ruleData.pctFrequencyMoveDown.bConsequetiveIndex = Convert.ToBoolean(dr["ConsequetiveInd"].ToString());
                    ruleData.pctFrequencyMoveDown.bConsecutiveAvg = Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()); //--- [New Criteria] May 2020 ---//
                    if (Convert.ToBoolean(dr["ConsequetiveInd"].ToString()))
                    {
                        ruleData.pctFrequencyMoveDown.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    }
                    else if (Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()))  //--- [New Criteria] May 2020 - (Start) ---//
                    {
                        ruleData.pctFrequencyMoveDown.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    } //--- [New Criteria] May 2020 - (End) ---//
                    else
                    {
                        ruleData.pctFrequencyMoveDown.iTotalCorrectInstance = Convert.ToInt32(dr["TotCorrInstance"].ToString());
                    }
                    ruleData.pctFrequencyMoveDown.iTotalInstance = Convert.ToInt32(dr["TotalInstance"].ToString());

                    if (!bIOAReq)
                    {
                        ruleData.pctFrequencyMoveDown.bIOARequird = Convert.ToBoolean(dr["IOAReqInd"].ToString());
                    }
                    if (!bMultiTeacher)
                    {
                        ruleData.pctFrequencyMoveDown.bMultiTeacherRequired = Convert.ToBoolean(dr["MultiTeacherReqInd"].ToString());
                    }
                    if (!bIncludeMisTrail)
                    {
                        bIncludeMisTrail = Convert.ToBoolean(dr["IncMisTrialInd"].ToString());
                    }
                    freqId = Convert.ToInt32(dr["DSTempSetColCalcId"].ToString());
                    ViewState["freqId"] = freqId;
                }
                if (dr["CalcType"].ToString().Replace(" ", "") == "%AccuracyatTrainingStep")
                {
                    ruleData.pctlearnedStepMoveDown.iScoreRequired = Convert.ToInt32(dr["ScoreReq"].ToString());
                    ruleData.pctlearnedStepMoveDown.bConsequetiveIndex = Convert.ToBoolean(dr["ConsequetiveInd"].ToString());
                    ruleData.pctlearnedStepMoveDown.bConsecutiveAvg = Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()); //--- [New Criteria] May 2020 ---//
                    if (Convert.ToBoolean(dr["ConsequetiveInd"].ToString()))
                    {
                        ruleData.pctlearnedStepMoveDown.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    }
                    else if (Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()))  //--- [New Criteria] May 2020 - (Start) ---//
                    {
                        ruleData.pctlearnedStepMoveDown.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    } //--- [New Criteria] May 2020 - (End) ---//
                    else
                    {
                        ruleData.pctlearnedStepMoveDown.iTotalCorrectInstance = Convert.ToInt32(dr["TotCorrInstance"].ToString());
                    }
                    ruleData.pctlearnedStepMoveDown.iTotalInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    if (!bIOAReq)
                    {
                        ruleData.pctlearnedStepMoveDown.bIOARequird = Convert.ToBoolean(dr["IOAReqInd"].ToString());
                        //bStepIOA = bIOAReq;
                    }
                    if (!bMultiTeacher)
                    {
                        ruleData.pctlearnedStepMoveDown.bMultiTeacherRequired = Convert.ToBoolean(dr["MultiTeacherReqInd"].ToString());
                    }
                    if (!bIncludeMisTrail)
                    {
                        bIncludeMisTrail = Convert.ToBoolean(dr["IncMisTrialInd"].ToString());
                    }
                }
                if (dr["CalcType"].ToString().Replace(" ", "") == "%AccuracyatPreviouslyLearnedSteps")
                {
                    ruleData.Set_ExcludeCrntStepMoveDown.iScoreRequired = Convert.ToInt32(dr["ScoreReq"].ToString());
                    ruleData.Set_ExcludeCrntStepMoveDown.bConsequetiveIndex = Convert.ToBoolean(dr["ConsequetiveInd"].ToString());
                    ruleData.Set_ExcludeCrntStepMoveDown.bConsecutiveAvg = Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()); //--- [New Criteria] May 2020 ---//
                    if (Convert.ToBoolean(dr["ConsequetiveInd"].ToString()))
                    {
                        ruleData.Set_ExcludeCrntStepMoveDown.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    }
                    else if (Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()))  //--- [New Criteria] May 2020 - (Start) ---//
                    {
                        ruleData.Set_ExcludeCrntStepMoveDown.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    } //--- [New Criteria] May 2020 - (End) ---//
                    else
                    {
                        ruleData.Set_ExcludeCrntStepMoveDown.iTotalCorrectInstance = Convert.ToInt32(dr["TotCorrInstance"].ToString());
                    }
                    ruleData.Set_ExcludeCrntStepMoveDown.iTotalInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    if (!bIOAReq)
                    {
                        ruleData.Set_ExcludeCrntStepMoveDown.bIOARequird = Convert.ToBoolean(dr["IOAReqInd"].ToString());
                        //bStepIOA = bIOAReq;
                    }
                    if (!bMultiTeacher)
                    {
                        ruleData.Set_ExcludeCrntStepMoveDown.bMultiTeacherRequired = Convert.ToBoolean(dr["MultiTeacherReqInd"].ToString());
                    }
                    if (!bIncludeMisTrail)
                    {
                        bIncludeMisTrail = Convert.ToBoolean(dr["IncMisTrialInd"].ToString());
                    }
                }
                if (dr["CalcType"].ToString().Replace(" ", "") == "TotalCorrect")
                {
                    ruleData.pctTotalCorrectMoveDown.iScoreRequired = Convert.ToInt32(dr["ScoreReq"].ToString());
                    ruleData.pctTotalCorrectMoveDown.bConsequetiveIndex = Convert.ToBoolean(dr["ConsequetiveInd"].ToString());
                    ruleData.pctTotalCorrectMoveDown.bConsecutiveAvg = Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()); //--- [New Criteria] May 2020 ---//
                    if (Convert.ToBoolean(dr["ConsequetiveInd"].ToString()))
                    {
                        ruleData.pctTotalCorrectMoveDown.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    }
                    else if (Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()))  //--- [New Criteria] May 2020 - (Start) ---//
                    {
                        ruleData.pctTotalCorrectMoveDown.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    } //--- [New Criteria] May 2020 - (End) ---//
                    else
                    {
                        ruleData.pctTotalCorrectMoveDown.iTotalCorrectInstance = Convert.ToInt32(dr["TotCorrInstance"].ToString());
                    }
                    ruleData.pctTotalCorrectMoveDown.iTotalInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    if (!bIOAReq)
                    {
                        ruleData.pctTotalCorrectMoveDown.bIOARequird = Convert.ToBoolean(dr["IOAReqInd"].ToString());
                        // bPromptIOA = bIOAReq;
                    }
                    if (!bMultiTeacher)
                    {
                        ruleData.pctTotalCorrectMoveDown.bMultiTeacherRequired = Convert.ToBoolean(dr["MultiTeacherReqInd"].ToString());
                    }
                    if (!bIncludeMisTrail)
                    {
                        bIncludeMisTrail = Convert.ToBoolean(dr["IncMisTrialInd"].ToString());
                    }
                }
                if (dr["CalcType"].ToString().Replace(" ", "") == "TotalIncorrect")
                {
                    ruleData.pctTotalIncorrectMoveDown.iScoreRequired = Convert.ToInt32(dr["ScoreReq"].ToString());
                    ruleData.pctTotalIncorrectMoveDown.bConsequetiveIndex = Convert.ToBoolean(dr["ConsequetiveInd"].ToString());
                    ruleData.pctTotalIncorrectMoveDown.bConsecutiveAvg = Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()); //--- [New Criteria] May 2020 ---//
                    if (Convert.ToBoolean(dr["ConsequetiveInd"].ToString()))
                    {
                        ruleData.pctTotalIncorrectMoveDown.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    }
                    else if (Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()))  //--- [New Criteria] May 2020 - (Start) ---//
                    {
                        ruleData.pctTotalIncorrectMoveDown.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    } //--- [New Criteria] May 2020 - (End) ---//
                    else
                    {
                        ruleData.pctTotalIncorrectMoveDown.iTotalCorrectInstance = Convert.ToInt32(dr["TotCorrInstance"].ToString());
                    }
                    ruleData.pctTotalIncorrectMoveDown.iTotalInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    if (!bIOAReq)
                    {
                        ruleData.pctTotalIncorrectMoveDown.bIOARequird = Convert.ToBoolean(dr["IOAReqInd"].ToString());
                        // bPromptIOA = bIOAReq;
                    }
                    if (!bMultiTeacher)
                    {
                        ruleData.pctTotalIncorrectMoveDown.bMultiTeacherRequired = Convert.ToBoolean(dr["MultiTeacherReqInd"].ToString());
                    }
                    if (!bIncludeMisTrail)
                    {
                        bIncludeMisTrail = Convert.ToBoolean(dr["IncMisTrialInd"].ToString());
                    }
                }
            }

            //ruleData.bIOARequird = bIOAReq;
            // ruleData.bMultiTeacherRequired = bMultiTeacher;
            //reader.Close();

            // DiscreteSession.updatePromptStatus(sess.SchoolId,sess.StudentId,tempId, sesResult[0].NextSet.ToString(), sesResult[0].CompletionStatus, sEventType,);

        }
        dt = null;
        return ruleData;

    }

    protected Rules GetPromptRules(int tempId, int colId)
    {
        oData = new clsData();
        bool bIOAReq = false;
        bool bMultiTeacher = false;
        bool bMultiSet = false;
        bool bIncludeMisTrail = false;
        Rules ruleData = new Rules();
        RuleDetails setRuleMoveUpDetails = new RuleDetails();

        string sql = " SELECT  DR.RuleType, DR.IOAReqInd, DR.MultiTeacherReqInd, DR.CriteriaType, DR.TotalInstance, DR.TotCorrInstance,DR.DSTempSetColCalcId,DST.IncMisTrialInd, DST.ColName," +
                   " DC.CalcType,DT.MultiSetsInd, DT.DSTempHdrId, DR.ScoreReq,DR.ConsequetiveInd,DR.IsNA, ISNULL(DR.ConsequetiveAvgInd,0) AS ConsequetiveAvgInd FROM DSTempHdr DT " + //--- [New Criteria] May 2020 ---//
                   " INNER JOIN DSTempSetCol DST ON DT.DSTempHdrId = DST.DSTempHdrId " +
                   " INNER JOIN DSTempSetColCalc DC ON DST.DSTempSetColId = DC.DSTempSetColId " +
                   " INNER JOIN DSTempRule DR ON DR.DSTempSetColCalcId = DC.DSTempSetColCalcId " +
                   " WHERE (DT.DSTempHdrId =" + tempId + ")AND DR.RuleType='PROMPT' AND DR.DSTempSetColId=" + colId + " AND DR.ActiveInd='A' AND DR.IsNA<>1";
        DataTable dt = oData.ReturnDataTable(sql, false);
        foreach (DataRow dr in dt.Rows)
        {
            ruleData.count++;
            if (dr["CriteriaType"].ToString() == "MOVE UP")
            {
                ruleData.moveup++;
                if (dr["CalcType"].ToString().Replace(" ", "") == "%Accuracy")
                {
                    ruleData.pctAccyMoveUp.iScoreRequired = Convert.ToInt32(dr["ScoreReq"].ToString());
                    if (Convert.ToBoolean(Session["StepLevelPrompt"]) == true)
                    {
                        ruleData.pctAccyMoveUp.iScoreRequired = 0;
                        //ruleData.pctAccyMoveUp.iScoreRequired = 0;
                    }
                    else
                    {
                        if (ruleData.pctAccyMoveUp.iScoreRequired == 0)
                            ruleData.pctAccyMoveUp.iScoreRequired = 1;
                        else if (ruleData.pctAccyMoveUp.iScoreRequired == 100)
                            ruleData.pctAccyMoveUp.iScoreRequired = 99;
                    }
                    ruleData.pctAccyMoveUp.bConsequetiveIndex = Convert.ToBoolean(dr["ConsequetiveInd"].ToString());
                    ruleData.pctAccyMoveUp.bConsecutiveAvg = Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()); //--- [New Criteria] May 2020 ---//
                    if (Convert.ToBoolean(dr["ConsequetiveInd"].ToString()))
                    {
                        ruleData.pctAccyMoveUp.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    }
                    else if (Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString())) //--- [New Criteria] May 2020 - (Start) ---//
                    {
                        ruleData.pctAccyMoveUp.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    }//--- [New Criteria] May 2020 - (End) ---//
                    else
                    {
                        ruleData.pctAccyMoveUp.iTotalCorrectInstance = Convert.ToInt32(dr["TotCorrInstance"].ToString());
                    }
                    ruleData.pctAccyMoveUp.iTotalInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    if (!bIOAReq)
                    {
                        ruleData.pctAccyMoveUp.bIOARequird = Convert.ToBoolean(dr["IOAReqInd"].ToString());
                        // bPromptIOA = bIOAReq;
                    }
                    if (!bMultiTeacher)
                    {
                        ruleData.pctAccyMoveUp.bMultiTeacherRequired = Convert.ToBoolean(dr["MultiTeacherReqInd"].ToString());
                    }
                    if (!bIncludeMisTrail)
                    {
                        bIncludeMisTrail = Convert.ToBoolean(dr["IncMisTrialInd"].ToString());
                    }
                }
                if (dr["CalcType"].ToString().Replace(" ", "") == "%Independent")
                {
                    ruleData.pctIndMoveUp.iScoreRequired = Convert.ToInt32(dr["ScoreReq"].ToString());
                    if (Convert.ToBoolean(Session["StepLevelPrompt"]) == true)
                    {
                        //ruleData.pctIndMoveUp.iScoreRequired = 0;
                        ruleData.pctAccyMoveUp.iScoreRequired = 0;
                    }
                    else
                    {
                        if (ruleData.pctAccyMoveUp.iScoreRequired == 0)
                            ruleData.pctAccyMoveUp.iScoreRequired = 1;
                        else if (ruleData.pctAccyMoveUp.iScoreRequired == 100)
                            ruleData.pctAccyMoveUp.iScoreRequired = 99;
                    }
                    ruleData.pctIndMoveUp.bConsequetiveIndex = Convert.ToBoolean(dr["ConsequetiveInd"].ToString());
                    ruleData.pctIndMoveUp.bConsecutiveAvg = Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()); //--- [New Criteria] May 2020 ---//
                    if (Convert.ToBoolean(dr["ConsequetiveInd"].ToString()))
                    {
                        ruleData.pctIndMoveUp.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    }
                    else if (Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString())) //--- [New Criteria] May 2020 - (Start) ---//
                    {
                        ruleData.pctIndMoveUp.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    }//--- [New Criteria] May 2020 - (End) ---//
                    else
                    {
                        ruleData.pctIndMoveUp.iTotalCorrectInstance = Convert.ToInt32(dr["TotCorrInstance"].ToString());
                    }
                    ruleData.pctIndMoveUp.iTotalInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    if (!bIOAReq)
                    {
                        ruleData.pctIndMoveUp.bIOARequird = Convert.ToBoolean(dr["IOAReqInd"].ToString());
                    }
                    if (!bMultiTeacher)
                    {
                        ruleData.pctIndMoveUp.bMultiTeacherRequired = Convert.ToBoolean(dr["MultiTeacherReqInd"].ToString());
                    }
                    if (!bIncludeMisTrail)
                    {
                        bIncludeMisTrail = Convert.ToBoolean(dr["IncMisTrialInd"].ToString());
                    }
                }
                if (dr["CalcType"].ToString().Replace(" ", "") == "%IndependentofAllSteps")
                {
                    ruleData.pctIndAllMoveUp.iScoreRequired = Convert.ToInt32(dr["ScoreReq"].ToString());
                    if (Convert.ToBoolean(Session["StepLevelPrompt"]) == true)
                    {
                        //ruleData.pctIndMoveUp.iScoreRequired = 0;
                        ruleData.pctAccyMoveUp.iScoreRequired = 0;
                    }
                    else
                    {
                        if (ruleData.pctAccyMoveUp.iScoreRequired == 0)
                            ruleData.pctAccyMoveUp.iScoreRequired = 1;
                        else if (ruleData.pctAccyMoveUp.iScoreRequired == 100)
                            ruleData.pctAccyMoveUp.iScoreRequired = 99;
                    }
                    ruleData.pctIndAllMoveUp.bConsequetiveIndex = Convert.ToBoolean(dr["ConsequetiveInd"].ToString());
                    ruleData.pctIndAllMoveUp.bConsecutiveAvg = Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()); //--- [New Criteria] May 2020 ---//
                    if (Convert.ToBoolean(dr["ConsequetiveInd"].ToString()))
                    {
                        ruleData.pctIndAllMoveUp.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    }
                    else if (Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString())) //--- [New Criteria] May 2020 - (Start) ---//
                    {
                        ruleData.pctIndAllMoveUp.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    }//--- [New Criteria] May 2020 - (End) ---//
                    else
                    {
                        ruleData.pctIndAllMoveUp.iTotalCorrectInstance = Convert.ToInt32(dr["TotCorrInstance"].ToString());
                    }
                    ruleData.pctIndAllMoveUp.iTotalInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    if (!bIOAReq)
                    {
                        ruleData.pctIndAllMoveUp.bIOARequird = Convert.ToBoolean(dr["IOAReqInd"].ToString());
                    }
                    if (!bMultiTeacher)
                    {
                        ruleData.pctIndAllMoveUp.bMultiTeacherRequired = Convert.ToBoolean(dr["MultiTeacherReqInd"].ToString());
                    }
                    if (!bIncludeMisTrail)
                    {
                        bIncludeMisTrail = Convert.ToBoolean(dr["IncMisTrialInd"].ToString());
                    }

                    IndeallId = Convert.ToInt32(dr["DSTempSetColCalcId"].ToString());
                    ViewState["IndeallId"] = IndeallId;
                }
                if (dr["CalcType"].ToString().Replace(" ", "") == "%Prompted")
                {
                    ruleData.pctPrmtMoveUp.iScoreRequired = Convert.ToInt32(dr["ScoreReq"].ToString());
                    if (Convert.ToBoolean(Session["StepLevelPrompt"]) == true)
                    {
                        ruleData.pctAccyMoveUp.iScoreRequired = 0;
                    }
                    else
                    {
                        if (ruleData.pctAccyMoveUp.iScoreRequired == 0)
                            ruleData.pctAccyMoveUp.iScoreRequired = 1;
                        else if (ruleData.pctAccyMoveUp.iScoreRequired == 100)
                            ruleData.pctAccyMoveUp.iScoreRequired = 99;
                    }
                    ruleData.pctPrmtMoveUp.bConsequetiveIndex = Convert.ToBoolean(dr["ConsequetiveInd"].ToString());
                    ruleData.pctPrmtMoveUp.bConsecutiveAvg = Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()); //--- [New Criteria] May 2020 ---//
                    if (Convert.ToBoolean(dr["ConsequetiveInd"].ToString()))
                    {
                        ruleData.pctPrmtMoveUp.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    }
                    else if (Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString())) //--- [New Criteria] May 2020 - (Start) ---//
                    {
                        ruleData.pctPrmtMoveUp.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    }//--- [New Criteria] May 2020 - (End) ---//
                    else
                    {
                        ruleData.pctPrmtMoveUp.iTotalCorrectInstance = Convert.ToInt32(dr["TotCorrInstance"].ToString());
                    }
                    ruleData.pctPrmtMoveUp.iTotalInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    if (!bIOAReq)
                    {
                        ruleData.pctPrmtMoveUp.bIOARequird = Convert.ToBoolean(dr["IOAReqInd"].ToString());
                    }
                    if (!bMultiTeacher)
                    {
                        ruleData.pctPrmtMoveUp.bMultiTeacherRequired = Convert.ToBoolean(dr["MultiTeacherReqInd"].ToString());
                    }
                    if (!bIncludeMisTrail)
                    {
                        bIncludeMisTrail = Convert.ToBoolean(dr["IncMisTrialInd"].ToString());
                    }
                }
                if (dr["CalcType"].ToString() == "Customize")
                {
                    if (!bIOAReq)
                    {
                        ruleData.pctCustomMoveUp.bIOARequird = Convert.ToBoolean(dr["IOAReqInd"].ToString());
                    }
                    if (!bMultiTeacher)
                    {
                        ruleData.pctCustomMoveUp.bMultiTeacherRequired = Convert.ToBoolean(dr["MultiTeacherReqInd"].ToString());
                    }
                    if (!bIncludeMisTrail)
                    {
                        bIncludeMisTrail = Convert.ToBoolean(dr["IncMisTrialInd"].ToString());
                    }

                }
                if (dr["CalcType"].ToString().Replace(" ", "") == "AvgDuration")
                {
                    ruleData.pctAvgDurationMoveUp.iScoreRequired = Convert.ToInt32(dr["ScoreReq"].ToString());
                    ruleData.pctAvgDurationMoveUp.bConsequetiveIndex = Convert.ToBoolean(dr["ConsequetiveInd"].ToString());
                    ruleData.pctAvgDurationMoveUp.bConsecutiveAvg = Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()); //--- [New Criteria] May 2020 ---//
                    if (Convert.ToBoolean(dr["ConsequetiveInd"].ToString()))
                    {
                        ruleData.pctAvgDurationMoveUp.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    }
                    else if (Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString())) //--- [New Criteria] May 2020 - (Start) ---//
                    {
                        ruleData.pctAvgDurationMoveUp.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    }//--- [New Criteria] May 2020 - (End) ---//
                    else
                    {
                        ruleData.pctAvgDurationMoveUp.iTotalCorrectInstance = Convert.ToInt32(dr["TotCorrInstance"].ToString());
                    }
                    ruleData.pctAvgDurationMoveUp.iTotalInstance = Convert.ToInt32(dr["TotalInstance"].ToString());

                    if (!bIOAReq)
                    {
                        ruleData.pctAvgDurationMoveUp.bIOARequird = Convert.ToBoolean(dr["IOAReqInd"].ToString());
                    }
                    if (!bMultiTeacher)
                    {
                        ruleData.pctAvgDurationMoveUp.bMultiTeacherRequired = Convert.ToBoolean(dr["MultiTeacherReqInd"].ToString());
                    }
                    if (!bIncludeMisTrail)
                    {
                        bIncludeMisTrail = Convert.ToBoolean(dr["IncMisTrialInd"].ToString());
                    }
                    avgDurationId = Convert.ToInt32(dr["DSTempSetColCalcId"].ToString());
                    ViewState["avgDurationId"] = avgDurationId;
                }
                if (dr["CalcType"].ToString().Replace(" ", "") == "TotalDuration")
                {
                    ruleData.pctTotalDurationMoveUp.iScoreRequired = Convert.ToInt32(dr["ScoreReq"].ToString());
                    ruleData.pctTotalDurationMoveUp.bConsequetiveIndex = Convert.ToBoolean(dr["ConsequetiveInd"].ToString());
                    ruleData.pctTotalDurationMoveUp.bConsecutiveAvg = Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()); //--- [New Criteria] May 2020 ---//
                    if (Convert.ToBoolean(dr["ConsequetiveInd"].ToString()))
                    {
                        ruleData.pctTotalDurationMoveUp.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    }
                    else if (Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString())) //--- [New Criteria] May 2020 - (Start) ---//
                    {
                        ruleData.pctTotalDurationMoveUp.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    }//--- [New Criteria] May 2020 - (End) ---//
                    else
                    {
                        ruleData.pctTotalDurationMoveUp.iTotalCorrectInstance = Convert.ToInt32(dr["TotCorrInstance"].ToString());
                    }
                    ruleData.pctTotalDurationMoveUp.iTotalInstance = Convert.ToInt32(dr["TotalInstance"].ToString());

                    if (!bIOAReq)
                    {
                        ruleData.pctTotalDurationMoveUp.bIOARequird = Convert.ToBoolean(dr["IOAReqInd"].ToString());
                    }
                    if (!bMultiTeacher)
                    {
                        ruleData.pctTotalDurationMoveUp.bMultiTeacherRequired = Convert.ToBoolean(dr["MultiTeacherReqInd"].ToString());
                    }
                    if (!bIncludeMisTrail)
                    {
                        bIncludeMisTrail = Convert.ToBoolean(dr["IncMisTrialInd"].ToString());
                    }
                    totDuraionId = Convert.ToInt32(dr["DSTempSetColCalcId"].ToString());
                    ViewState["totDuraionId"] = totDuraionId;
                }
                if (dr["CalcType"].ToString() == "Frequency")
                {
                    ruleData.pctFrequencyMoveUp.iScoreRequired = Convert.ToInt32(dr["ScoreReq"].ToString());
                    ruleData.pctFrequencyMoveUp.bConsequetiveIndex = Convert.ToBoolean(dr["ConsequetiveInd"].ToString());
                    ruleData.pctFrequencyMoveUp.bConsecutiveAvg = Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()); //--- [New Criteria] May 2020 ---//
                    if (Convert.ToBoolean(dr["ConsequetiveInd"].ToString()))
                    {
                        ruleData.pctFrequencyMoveUp.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    }
                    else if (Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString())) //--- [New Criteria] May 2020 - (Start) ---//
                    {
                        ruleData.pctFrequencyMoveUp.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    }//--- [New Criteria] May 2020 - (End) ---//
                    else
                    {
                        ruleData.pctFrequencyMoveUp.iTotalCorrectInstance = Convert.ToInt32(dr["TotCorrInstance"].ToString());
                    }
                    ruleData.pctFrequencyMoveUp.iTotalInstance = Convert.ToInt32(dr["TotalInstance"].ToString());

                    if (!bIOAReq)
                    {
                        ruleData.pctFrequencyMoveUp.bIOARequird = Convert.ToBoolean(dr["IOAReqInd"].ToString());
                    }
                    if (!bMultiTeacher)
                    {
                        ruleData.pctFrequencyMoveUp.bMultiTeacherRequired = Convert.ToBoolean(dr["MultiTeacherReqInd"].ToString());
                    }
                    if (!bIncludeMisTrail)
                    {
                        bIncludeMisTrail = Convert.ToBoolean(dr["IncMisTrialInd"].ToString());
                    }
                    freqId = Convert.ToInt32(dr["DSTempSetColCalcId"].ToString());
                    ViewState["freqId"] = freqId;
                }


                if (dr["CalcType"].ToString().Replace(" ", "") == "%AccuracyatPreviouslyLearnedSteps")
                {
                    ruleData.PromptExcludeCrntStepMoveUp.iScoreRequired = Convert.ToInt32(dr["ScoreReq"].ToString());
                    if (Convert.ToBoolean(Session["StepLevelPrompt"]) == true)
                    {
                        //ruleData.PromptExcludeCrntStepMoveUp.iScoreRequired = 0;
                        ruleData.pctAccyMoveUp.iScoreRequired = 0;
                    }
                    else
                    {
                        if (ruleData.pctAccyMoveUp.iScoreRequired == 0)
                            ruleData.pctAccyMoveUp.iScoreRequired = 1;
                        else if (ruleData.pctAccyMoveUp.iScoreRequired == 100)
                            ruleData.pctAccyMoveUp.iScoreRequired = 99;
                    }
                    ruleData.PromptExcludeCrntStepMoveUp.bConsequetiveIndex = Convert.ToBoolean(dr["ConsequetiveInd"].ToString());
                    ruleData.PromptExcludeCrntStepMoveUp.bConsecutiveAvg = Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()); //--- [New Criteria] May 2020 ---//
                    if (Convert.ToBoolean(dr["ConsequetiveInd"].ToString()))
                    {
                        ruleData.PromptExcludeCrntStepMoveUp.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    }
                    else if (Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString())) //--- [New Criteria] May 2020 - (Start) ---//
                    {
                        ruleData.PromptExcludeCrntStepMoveUp.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    }//--- [New Criteria] May 2020 - (End) ---//
                    else
                    {
                        ruleData.PromptExcludeCrntStepMoveUp.iTotalCorrectInstance = Convert.ToInt32(dr["TotCorrInstance"].ToString());
                    }
                    ruleData.PromptExcludeCrntStepMoveUp.iTotalInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    if (!bIOAReq)
                    {
                        ruleData.PromptExcludeCrntStepMoveUp.bIOARequird = Convert.ToBoolean(dr["IOAReqInd"].ToString());
                        //bStepIOA = bIOAReq;
                    }
                    if (!bMultiTeacher)
                    {
                        ruleData.PromptExcludeCrntStepMoveUp.bMultiTeacherRequired = Convert.ToBoolean(dr["MultiTeacherReqInd"].ToString());
                    }
                    if (!bIncludeMisTrail)
                    {
                        bIncludeMisTrail = Convert.ToBoolean(dr["IncMisTrialInd"].ToString());
                    }
                }
                if (dr["CalcType"].ToString().Replace(" ", "") == "%AccuracyatTrainingStep")
                {
                    ruleData.pctlearnedStepMoveUp.iScoreRequired = Convert.ToInt32(dr["ScoreReq"].ToString());
                    ruleData.pctlearnedStepMoveUp.bConsequetiveIndex = Convert.ToBoolean(dr["ConsequetiveInd"].ToString());
                    ruleData.pctlearnedStepMoveUp.bConsecutiveAvg = Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()); //--- [New Criteria] May 2020 ---//
                    if (Convert.ToBoolean(dr["ConsequetiveInd"].ToString()))
                    {
                        ruleData.pctlearnedStepMoveUp.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    }
                    else if (Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString())) //--- [New Criteria] May 2020 - (Start) ---//
                    {
                        ruleData.pctlearnedStepMoveUp.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    }//--- [New Criteria] May 2020 - (End) ---//
                    else
                    {
                        ruleData.pctlearnedStepMoveUp.iTotalCorrectInstance = Convert.ToInt32(dr["TotCorrInstance"].ToString());
                    }
                    ruleData.pctlearnedStepMoveUp.iTotalInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    if (!bIOAReq)
                    {
                        ruleData.pctlearnedStepMoveUp.bIOARequird = Convert.ToBoolean(dr["IOAReqInd"].ToString());
                        //bStepIOA = bIOAReq;
                    }
                    if (!bMultiTeacher)
                    {
                        ruleData.pctlearnedStepMoveUp.bMultiTeacherRequired = Convert.ToBoolean(dr["MultiTeacherReqInd"].ToString());
                    }
                    if (!bIncludeMisTrail)
                    {
                        bIncludeMisTrail = Convert.ToBoolean(dr["IncMisTrialInd"].ToString());
                    }
                }
                if (dr["CalcType"].ToString() == "Frequency")
                {
                    ruleData.pctFrequencyMoveUp.iScoreRequired = Convert.ToInt32(dr["ScoreReq"].ToString());
                    ruleData.pctFrequencyMoveUp.bConsequetiveIndex = Convert.ToBoolean(dr["ConsequetiveInd"].ToString());
                    ruleData.pctFrequencyMoveUp.bConsecutiveAvg = Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()); //--- [New Criteria] May 2020 ---//
                    if (Convert.ToBoolean(dr["ConsequetiveInd"].ToString()))
                    {
                        ruleData.pctFrequencyMoveUp.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    }
                    else if (Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString())) //--- [New Criteria] May 2020 - (Start) ---//
                    {
                        ruleData.pctFrequencyMoveUp.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    }//--- [New Criteria] May 2020 - (End) ---//
                    else
                    {
                        ruleData.pctFrequencyMoveUp.iTotalCorrectInstance = Convert.ToInt32(dr["TotCorrInstance"].ToString());
                    }
                    ruleData.pctFrequencyMoveUp.iTotalInstance = Convert.ToInt32(dr["TotalInstance"].ToString());

                    if (!bIOAReq)
                    {
                        ruleData.pctFrequencyMoveUp.bIOARequird = Convert.ToBoolean(dr["IOAReqInd"].ToString());
                    }
                    if (!bMultiTeacher)
                    {
                        ruleData.pctFrequencyMoveUp.bMultiTeacherRequired = Convert.ToBoolean(dr["MultiTeacherReqInd"].ToString());
                    }
                    if (!bIncludeMisTrail)
                    {
                        bIncludeMisTrail = Convert.ToBoolean(dr["IncMisTrialInd"].ToString());
                    }
                    freqId = Convert.ToInt32(dr["DSTempSetColCalcId"].ToString());
                    ViewState["freqId"] = freqId;
                }

                if (dr["CalcType"].ToString().Replace(" ", "") == "TotalCorrect")
                {
                    ruleData.pctTotalCorrectMoveUp.iScoreRequired = Convert.ToInt32(dr["ScoreReq"].ToString());
                    ruleData.pctTotalCorrectMoveUp.bConsequetiveIndex = Convert.ToBoolean(dr["ConsequetiveInd"].ToString());
                    ruleData.pctTotalCorrectMoveUp.bConsecutiveAvg = Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()); //--- [New Criteria] May 2020 ---//
                    if (Convert.ToBoolean(dr["ConsequetiveInd"].ToString()))
                    {
                        ruleData.pctTotalCorrectMoveUp.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    }
                    else if (Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString())) //--- [New Criteria] May 2020 - (Start) ---//
                    {
                        ruleData.pctTotalCorrectMoveUp.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    }//--- [New Criteria] May 2020 - (End) ---//
                    else
                    {
                        ruleData.pctTotalCorrectMoveUp.iTotalCorrectInstance = Convert.ToInt32(dr["TotCorrInstance"].ToString());
                    }
                    ruleData.pctTotalCorrectMoveUp.iTotalInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    if (!bIOAReq)
                    {
                        ruleData.pctTotalCorrectMoveUp.bIOARequird = Convert.ToBoolean(dr["IOAReqInd"].ToString());
                        // bPromptIOA = bIOAReq;
                    }
                    if (!bMultiTeacher)
                    {
                        ruleData.pctTotalCorrectMoveUp.bMultiTeacherRequired = Convert.ToBoolean(dr["MultiTeacherReqInd"].ToString());
                    }
                    if (!bIncludeMisTrail)
                    {
                        bIncludeMisTrail = Convert.ToBoolean(dr["IncMisTrialInd"].ToString());
                    }
                }
                if (dr["CalcType"].ToString().Replace(" ", "") == "TotalIncorrect")
                {
                    ruleData.pctTotalIncorrectMoveUp.iScoreRequired = Convert.ToInt32(dr["ScoreReq"].ToString());
                    ruleData.pctTotalIncorrectMoveUp.bConsequetiveIndex = Convert.ToBoolean(dr["ConsequetiveInd"].ToString());
                    ruleData.pctTotalIncorrectMoveUp.bConsecutiveAvg = Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()); //--- [New Criteria] May 2020 ---//
                    if (Convert.ToBoolean(dr["ConsequetiveInd"].ToString()))
                    {
                        ruleData.pctTotalIncorrectMoveUp.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    }
                    else if (Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString())) //--- [New Criteria] May 2020 - (Start) ---//
                    {
                        ruleData.pctTotalIncorrectMoveUp.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    }//--- [New Criteria] May 2020 - (End) ---//
                    else
                    {
                        ruleData.pctTotalIncorrectMoveUp.iTotalCorrectInstance = Convert.ToInt32(dr["TotCorrInstance"].ToString());
                    }
                    ruleData.pctTotalIncorrectMoveUp.iTotalInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    if (!bIOAReq)
                    {
                        ruleData.pctTotalIncorrectMoveUp.bIOARequird = Convert.ToBoolean(dr["IOAReqInd"].ToString());
                        // bPromptIOA = bIOAReq;
                    }
                    if (!bMultiTeacher)
                    {
                        ruleData.pctTotalIncorrectMoveUp.bMultiTeacherRequired = Convert.ToBoolean(dr["MultiTeacherReqInd"].ToString());
                    }
                    if (!bIncludeMisTrail)
                    {
                        bIncludeMisTrail = Convert.ToBoolean(dr["IncMisTrialInd"].ToString());
                    }
                }
            }
            if (dr["CriteriaType"].ToString() == "MOVE DOWN")
            {
                ruleData.movedown++;
                if (dr["CalcType"].ToString().Replace(" ", "") == "%Accuracy")
                {
                    ruleData.pctAccyMoveDown.iScoreRequired = Convert.ToInt32(dr["ScoreReq"].ToString());
                    if (Convert.ToBoolean(Session["StepLevelPrompt"]) == true)
                    {
                        //ruleData.pctAccyMoveDown.iScoreRequired = 0;
                        ruleData.pctAccyMoveUp.iScoreRequired = 0;
                    }
                    else
                    {
                        if (ruleData.pctAccyMoveUp.iScoreRequired == 0)
                            ruleData.pctAccyMoveUp.iScoreRequired = 1;
                        else if (ruleData.pctAccyMoveUp.iScoreRequired == 100)
                            ruleData.pctAccyMoveUp.iScoreRequired = 99;
                    }
                    ruleData.pctAccyMoveDown.bConsequetiveIndex = Convert.ToBoolean(dr["ConsequetiveInd"].ToString());
                    ruleData.pctAccyMoveDown.bConsecutiveAvg = Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()); //--- [New Criteria] May 2020 ---//
                    if (Convert.ToBoolean(dr["ConsequetiveInd"].ToString()))
                    {
                        ruleData.pctAccyMoveDown.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    }
                    else if (Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()))  //--- [New Criteria] May 2020 - (Start) ---//
                    {
                        ruleData.pctAccyMoveDown.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    }//--- [New Criteria] May 2020 - (End) ---//
                    else
                    {
                        ruleData.pctAccyMoveDown.iTotalCorrectInstance = Convert.ToInt32(dr["TotCorrInstance"].ToString());
                    }
                    ruleData.pctAccyMoveDown.iTotalInstance = Convert.ToInt32(dr["TotalInstance"].ToString());

                    if (!bIOAReq)
                    {
                        ruleData.pctAccyMoveDown.bIOARequird = Convert.ToBoolean(dr["IOAReqInd"].ToString());
                    }
                    if (!bMultiTeacher)
                    {
                        ruleData.pctAccyMoveDown.bMultiTeacherRequired = Convert.ToBoolean(dr["MultiTeacherReqInd"].ToString());
                    }
                    if (!bIncludeMisTrail)
                    {
                        bIncludeMisTrail = Convert.ToBoolean(dr["IncMisTrialInd"].ToString());
                    }
                }
                if (dr["CalcType"].ToString().Replace(" ", "") == "%Independent")
                {
                    ruleData.pctIndMoveDown.iScoreRequired = Convert.ToInt32(dr["ScoreReq"].ToString());
                    if (Convert.ToBoolean(Session["StepLevelPrompt"]) == true)
                    {
                        //ruleData.pctIndMoveDown.iScoreRequired = 0;
                        ruleData.pctAccyMoveUp.iScoreRequired = 0;
                    }
                    else
                    {
                        if (ruleData.pctAccyMoveUp.iScoreRequired == 0)
                            ruleData.pctAccyMoveUp.iScoreRequired = 1;
                        else if (ruleData.pctAccyMoveUp.iScoreRequired == 100)
                            ruleData.pctAccyMoveUp.iScoreRequired = 99;
                    }
                    ruleData.pctIndMoveDown.bConsequetiveIndex = Convert.ToBoolean(dr["ConsequetiveInd"].ToString());
                    ruleData.pctIndMoveDown.bConsecutiveAvg = Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()); //--- [New Criteria] May 2020 ---//
                    if (Convert.ToBoolean(dr["ConsequetiveInd"].ToString()))
                    {
                        ruleData.pctIndMoveDown.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    }
                    else if (Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()))  //--- [New Criteria] May 2020 - (Start) ---//
                    {
                        ruleData.pctIndMoveDown.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    }//--- [New Criteria] May 2020 - (End) ---//
                    else
                    {
                        ruleData.pctIndMoveDown.iTotalCorrectInstance = Convert.ToInt32(dr["TotCorrInstance"].ToString());
                    }
                    ruleData.pctIndMoveDown.iTotalInstance = Convert.ToInt32(dr["TotalInstance"].ToString());

                    if (!bIOAReq)
                    {
                        ruleData.pctIndMoveDown.bIOARequird = Convert.ToBoolean(dr["IOAReqInd"].ToString());
                    }
                    if (!bMultiTeacher)
                    {
                        ruleData.pctIndMoveDown.bMultiTeacherRequired = Convert.ToBoolean(dr["MultiTeacherReqInd"].ToString());
                    }
                    if (!bIncludeMisTrail)
                    {
                        bIncludeMisTrail = Convert.ToBoolean(dr["IncMisTrialInd"].ToString());
                    }
                }
                if (dr["CalcType"].ToString().Replace(" ", "") == "%IndependentofAllSteps")
                {
                    ruleData.pctIndAllMoveDown.iScoreRequired = Convert.ToInt32(dr["ScoreReq"].ToString());
                    if (Convert.ToBoolean(Session["StepLevelPrompt"]) == true)
                    {
                        //ruleData.pctIndMoveDown.iScoreRequired = 0;
                        ruleData.pctAccyMoveUp.iScoreRequired = 0;
                    }
                    else
                    {
                        if (ruleData.pctAccyMoveUp.iScoreRequired == 0)
                            ruleData.pctAccyMoveUp.iScoreRequired = 1;
                        else if (ruleData.pctAccyMoveUp.iScoreRequired == 100)
                            ruleData.pctAccyMoveUp.iScoreRequired = 99;
                    }
                    ruleData.pctIndAllMoveDown.bConsequetiveIndex = Convert.ToBoolean(dr["ConsequetiveInd"].ToString());
                    ruleData.pctIndAllMoveDown.bConsecutiveAvg = Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()); //--- [New Criteria] May 2020 ---//
                    if (Convert.ToBoolean(dr["ConsequetiveInd"].ToString()))
                    {
                        ruleData.pctIndAllMoveDown.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    }
                    else if (Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()))  //--- [New Criteria] May 2020 - (Start) ---//
                    {
                        ruleData.pctIndAllMoveDown.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    }//--- [New Criteria] May 2020 - (End) ---//
                    else
                    {
                        ruleData.pctIndAllMoveDown.iTotalCorrectInstance = Convert.ToInt32(dr["TotCorrInstance"].ToString());
                    }
                    ruleData.pctIndAllMoveDown.iTotalInstance = Convert.ToInt32(dr["TotalInstance"].ToString());

                    if (!bIOAReq)
                    {
                        ruleData.pctIndAllMoveDown.bIOARequird = Convert.ToBoolean(dr["IOAReqInd"].ToString());
                    }
                    if (!bMultiTeacher)
                    {
                        ruleData.pctIndAllMoveDown.bMultiTeacherRequired = Convert.ToBoolean(dr["MultiTeacherReqInd"].ToString());
                    }
                    if (!bIncludeMisTrail)
                    {
                        bIncludeMisTrail = Convert.ToBoolean(dr["IncMisTrialInd"].ToString());
                    }

                    IndeallId = Convert.ToInt32(dr["DSTempSetColCalcId"].ToString());
                    ViewState["IndeallId"] = IndeallId;
                }
                if (dr["CalcType"].ToString().Replace(" ", "") == "%Prompted")
                {
                    ruleData.pctPrmtMoveDown.iScoreRequired = Convert.ToInt32(dr["ScoreReq"].ToString());
                    if (Convert.ToBoolean(Session["StepLevelPrompt"]) == true)
                    {
                        //ruleData.pctPrmtMoveDown.iScoreRequired = 0;
                        ruleData.pctAccyMoveUp.iScoreRequired = 0;
                    }
                    else
                    {
                        if (ruleData.pctAccyMoveUp.iScoreRequired == 0)
                            ruleData.pctAccyMoveUp.iScoreRequired = 1;
                        else if (ruleData.pctAccyMoveUp.iScoreRequired == 100)
                            ruleData.pctAccyMoveUp.iScoreRequired = 99;
                    }
                    ruleData.pctPrmtMoveDown.bConsequetiveIndex = Convert.ToBoolean(dr["ConsequetiveInd"].ToString());
                    ruleData.pctPrmtMoveDown.bConsecutiveAvg = Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()); //--- [New Criteria] May 2020 ---//
                    if (Convert.ToBoolean(dr["ConsequetiveInd"].ToString()))
                    {
                        ruleData.pctPrmtMoveDown.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    }
                    else if (Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()))  //--- [New Criteria] May 2020 - (Start) ---//
                    {
                        ruleData.pctPrmtMoveDown.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    }//--- [New Criteria] May 2020 - (End) ---//
                    else
                    {
                        ruleData.pctPrmtMoveDown.iTotalCorrectInstance = Convert.ToInt32(dr["TotCorrInstance"].ToString());
                    }
                    ruleData.pctPrmtMoveDown.iTotalInstance = Convert.ToInt32(dr["TotalInstance"].ToString());

                    if (!bIOAReq)
                    {
                        ruleData.pctPrmtMoveDown.bIOARequird = Convert.ToBoolean(dr["IOAReqInd"].ToString());
                    }
                    if (!bMultiTeacher)
                    {
                        ruleData.pctPrmtMoveDown.bMultiTeacherRequired = Convert.ToBoolean(dr["MultiTeacherReqInd"].ToString());
                    }
                    if (!bIncludeMisTrail)
                    {
                        bIncludeMisTrail = Convert.ToBoolean(dr["IncMisTrialInd"].ToString());
                    }
                }
                if (dr["CalcType"].ToString() == "Customize")
                {
                    if (!bIOAReq)
                    {
                        ruleData.pctCustomMoveDown.bIOARequird = Convert.ToBoolean(dr["IOAReqInd"].ToString());
                    }
                    if (!bMultiTeacher)
                    {
                        ruleData.pctCustomMoveDown.bMultiTeacherRequired = Convert.ToBoolean(dr["MultiTeacherReqInd"].ToString());
                    }
                    if (!bIncludeMisTrail)
                    {
                        bIncludeMisTrail = Convert.ToBoolean(dr["IncMisTrialInd"].ToString());
                    }

                }
                if (dr["CalcType"].ToString().Replace(" ", "") == "AvgDuration")
                {
                    ruleData.pctAvgDurationMoveDown.iScoreRequired = Convert.ToInt32(dr["ScoreReq"].ToString());
                    ruleData.pctAvgDurationMoveDown.bConsequetiveIndex = Convert.ToBoolean(dr["ConsequetiveInd"].ToString());
                    ruleData.pctAvgDurationMoveDown.bConsecutiveAvg = Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()); //--- [New Criteria] May 2020 ---//
                    if (Convert.ToBoolean(dr["ConsequetiveInd"].ToString()))
                    {
                        ruleData.pctAvgDurationMoveDown.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    }
                    else if (Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()))  //--- [New Criteria] May 2020 - (Start) ---//
                    {
                        ruleData.pctAvgDurationMoveDown.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    }//--- [New Criteria] May 2020 - (End) ---//
                    else
                    {
                        ruleData.pctAvgDurationMoveDown.iTotalCorrectInstance = Convert.ToInt32(dr["TotCorrInstance"].ToString());
                    }
                    ruleData.pctAvgDurationMoveDown.iTotalInstance = Convert.ToInt32(dr["TotalInstance"].ToString());

                    if (!bIOAReq)
                    {
                        ruleData.pctAvgDurationMoveDown.bIOARequird = Convert.ToBoolean(dr["IOAReqInd"].ToString());
                    }
                    if (!bMultiTeacher)
                    {
                        ruleData.pctAvgDurationMoveDown.bMultiTeacherRequired = Convert.ToBoolean(dr["MultiTeacherReqInd"].ToString());
                    }
                    if (!bIncludeMisTrail)
                    {
                        bIncludeMisTrail = Convert.ToBoolean(dr["IncMisTrialInd"].ToString());
                    }
                    avgDurationId = Convert.ToInt32(dr["DSTempSetColCalcId"].ToString());
                    ViewState["avgDurationId"] = avgDurationId;
                }
                if (dr["CalcType"].ToString().Replace(" ", "") == "TotalDuration")
                {
                    ruleData.pctTotalDurationMoveDown.iScoreRequired = Convert.ToInt32(dr["ScoreReq"].ToString());
                    ruleData.pctTotalDurationMoveDown.bConsequetiveIndex = Convert.ToBoolean(dr["ConsequetiveInd"].ToString());
                    ruleData.pctTotalDurationMoveDown.bConsecutiveAvg = Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()); //--- [New Criteria] May 2020 ---//
                    if (Convert.ToBoolean(dr["ConsequetiveInd"].ToString()))
                    {
                        ruleData.pctTotalDurationMoveDown.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    }
                    else if (Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()))  //--- [New Criteria] May 2020 - (Start) ---//
                    {
                        ruleData.pctTotalDurationMoveDown.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    }//--- [New Criteria] May 2020 - (End) ---//
                    else
                    {
                        ruleData.pctTotalDurationMoveDown.iTotalCorrectInstance = Convert.ToInt32(dr["TotCorrInstance"].ToString());
                    }
                    ruleData.pctTotalDurationMoveDown.iTotalInstance = Convert.ToInt32(dr["TotalInstance"].ToString());

                    if (!bIOAReq)
                    {
                        ruleData.pctTotalDurationMoveDown.bIOARequird = Convert.ToBoolean(dr["IOAReqInd"].ToString());
                    }
                    if (!bMultiTeacher)
                    {
                        ruleData.pctTotalDurationMoveDown.bMultiTeacherRequired = Convert.ToBoolean(dr["MultiTeacherReqInd"].ToString());
                    }
                    if (!bIncludeMisTrail)
                    {
                        bIncludeMisTrail = Convert.ToBoolean(dr["IncMisTrialInd"].ToString());
                    }
                    totDuraionId = Convert.ToInt32(dr["DSTempSetColCalcId"].ToString());
                    ViewState["totDuraionId"] = totDuraionId;
                }
                if (dr["CalcType"].ToString() == "Frequency")
                {
                    ruleData.pctFrequencyMoveDown.iScoreRequired = Convert.ToInt32(dr["ScoreReq"].ToString());
                    ruleData.pctFrequencyMoveDown.bConsequetiveIndex = Convert.ToBoolean(dr["ConsequetiveInd"].ToString());
                    ruleData.pctFrequencyMoveDown.bConsecutiveAvg = Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()); //--- [New Criteria] May 2020 ---//
                    if (Convert.ToBoolean(dr["ConsequetiveInd"].ToString()))
                    {
                        ruleData.pctFrequencyMoveDown.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    }
                    else if (Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()))  //--- [New Criteria] May 2020 - (Start) ---//
                    {
                        ruleData.pctFrequencyMoveDown.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    }//--- [New Criteria] May 2020 - (End) ---//
                    else
                    {
                        ruleData.pctFrequencyMoveDown.iTotalCorrectInstance = Convert.ToInt32(dr["TotCorrInstance"].ToString());
                    }
                    ruleData.pctFrequencyMoveDown.iTotalInstance = Convert.ToInt32(dr["TotalInstance"].ToString());

                    if (!bIOAReq)
                    {
                        ruleData.pctFrequencyMoveDown.bIOARequird = Convert.ToBoolean(dr["IOAReqInd"].ToString());
                    }
                    if (!bMultiTeacher)
                    {
                        ruleData.pctFrequencyMoveDown.bMultiTeacherRequired = Convert.ToBoolean(dr["MultiTeacherReqInd"].ToString());
                    }
                    if (!bIncludeMisTrail)
                    {
                        bIncludeMisTrail = Convert.ToBoolean(dr["IncMisTrialInd"].ToString());
                    }
                    freqId = Convert.ToInt32(dr["DSTempSetColCalcId"].ToString());
                    ViewState["freqId"] = freqId;
                }
                if (dr["CalcType"].ToString().Replace(" ", "") == "%AccuracyatPreviouslyLearnedSteps")
                {
                    ruleData.PromptExcludeCrntStepMoveDown.iScoreRequired = Convert.ToInt32(dr["ScoreReq"].ToString());
                    if (Convert.ToBoolean(Session["StepLevelPrompt"]) == true)
                    {
                        //ruleData.PromptExcludeCrntStepMoveDown.iScoreRequired = 0;
                        ruleData.pctAccyMoveUp.iScoreRequired = 0;
                    }
                    else
                    {
                        if (ruleData.pctAccyMoveUp.iScoreRequired == 0)
                            ruleData.pctAccyMoveUp.iScoreRequired = 1;
                        else if (ruleData.pctAccyMoveUp.iScoreRequired == 100)
                            ruleData.pctAccyMoveUp.iScoreRequired = 99;
                    }
                    ruleData.PromptExcludeCrntStepMoveDown.bConsequetiveIndex = Convert.ToBoolean(dr["ConsequetiveInd"].ToString());
                    ruleData.PromptExcludeCrntStepMoveDown.bConsecutiveAvg = Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()); //--- [New Criteria] May 2020 ---//
                    if (Convert.ToBoolean(dr["ConsequetiveInd"].ToString()))
                    {
                        ruleData.PromptExcludeCrntStepMoveDown.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    }
                    else if (Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()))  //--- [New Criteria] May 2020 - (Start) ---//
                    {
                        ruleData.PromptExcludeCrntStepMoveDown.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    }//--- [New Criteria] May 2020 - (End) ---//
                    else
                    {
                        ruleData.PromptExcludeCrntStepMoveDown.iTotalCorrectInstance = Convert.ToInt32(dr["TotCorrInstance"].ToString());
                    }
                    ruleData.PromptExcludeCrntStepMoveDown.iTotalInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    if (!bIOAReq)
                    {
                        ruleData.PromptExcludeCrntStepMoveDown.bIOARequird = Convert.ToBoolean(dr["IOAReqInd"].ToString());
                        //bStepIOA = bIOAReq;
                    }
                    if (!bMultiTeacher)
                    {
                        ruleData.PromptExcludeCrntStepMoveDown.bMultiTeacherRequired = Convert.ToBoolean(dr["MultiTeacherReqInd"].ToString());
                    }
                    if (!bIncludeMisTrail)
                    {
                        bIncludeMisTrail = Convert.ToBoolean(dr["IncMisTrialInd"].ToString());
                    }
                }
                if (dr["CalcType"].ToString().Replace(" ", "") == "%AccuracyatTrainingStep")
                {
                    ruleData.pctlearnedStepMoveDown.iScoreRequired = Convert.ToInt32(dr["ScoreReq"].ToString());
                    ruleData.pctlearnedStepMoveDown.bConsequetiveIndex = Convert.ToBoolean(dr["ConsequetiveInd"].ToString());
                    ruleData.pctlearnedStepMoveDown.bConsecutiveAvg = Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()); //--- [New Criteria] May 2020 ---//
                    if (Convert.ToBoolean(dr["ConsequetiveInd"].ToString()))
                    {
                        ruleData.pctlearnedStepMoveDown.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    }
                    else if (Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()))  //--- [New Criteria] May 2020 - (Start) ---//
                    {
                        ruleData.pctlearnedStepMoveDown.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    }//--- [New Criteria] May 2020 - (End) ---//
                    else
                    {
                        ruleData.pctlearnedStepMoveDown.iTotalCorrectInstance = Convert.ToInt32(dr["TotCorrInstance"].ToString());
                    }
                    ruleData.pctlearnedStepMoveDown.iTotalInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    if (!bIOAReq)
                    {
                        ruleData.pctlearnedStepMoveDown.bIOARequird = Convert.ToBoolean(dr["IOAReqInd"].ToString());
                        //bStepIOA = bIOAReq;
                    }
                    if (!bMultiTeacher)
                    {
                        ruleData.pctlearnedStepMoveDown.bMultiTeacherRequired = Convert.ToBoolean(dr["MultiTeacherReqInd"].ToString());
                    }
                    if (!bIncludeMisTrail)
                    {
                        bIncludeMisTrail = Convert.ToBoolean(dr["IncMisTrialInd"].ToString());
                    }
                }
                if (dr["CalcType"].ToString() == "Frequency")
                {
                    ruleData.pctFrequencyMoveDown.iScoreRequired = Convert.ToInt32(dr["ScoreReq"].ToString());
                    ruleData.pctFrequencyMoveDown.bConsequetiveIndex = Convert.ToBoolean(dr["ConsequetiveInd"].ToString());
                    ruleData.pctFrequencyMoveDown.bConsecutiveAvg = Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()); //--- [New Criteria] May 2020 ---//
                    if (Convert.ToBoolean(dr["ConsequetiveInd"].ToString()))
                    {
                        ruleData.pctFrequencyMoveDown.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    }
                    else if (Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()))  //--- [New Criteria] May 2020 - (Start) ---//
                    {
                        ruleData.pctFrequencyMoveDown.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    }//--- [New Criteria] May 2020 - (End) ---//
                    else
                    {
                        ruleData.pctFrequencyMoveDown.iTotalCorrectInstance = Convert.ToInt32(dr["TotCorrInstance"].ToString());
                    }
                    ruleData.pctFrequencyMoveDown.iTotalInstance = Convert.ToInt32(dr["TotalInstance"].ToString());

                    if (!bIOAReq)
                    {
                        ruleData.pctFrequencyMoveDown.bIOARequird = Convert.ToBoolean(dr["IOAReqInd"].ToString());
                    }
                    if (!bMultiTeacher)
                    {
                        ruleData.pctFrequencyMoveDown.bMultiTeacherRequired = Convert.ToBoolean(dr["MultiTeacherReqInd"].ToString());
                    }
                    if (!bIncludeMisTrail)
                    {
                        bIncludeMisTrail = Convert.ToBoolean(dr["IncMisTrialInd"].ToString());
                    }
                    freqId = Convert.ToInt32(dr["DSTempSetColCalcId"].ToString());
                    ViewState["freqId"] = freqId;
                }

                if (dr["CalcType"].ToString().Replace(" ", "") == "TotalCorrect")
                {
                    ruleData.pctTotalCorrectMoveDown.iScoreRequired = Convert.ToInt32(dr["ScoreReq"].ToString());
                    ruleData.pctTotalCorrectMoveDown.bConsequetiveIndex = Convert.ToBoolean(dr["ConsequetiveInd"].ToString());
                    ruleData.pctTotalCorrectMoveDown.bConsecutiveAvg = Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()); //--- [New Criteria] May 2020 ---//
                    if (Convert.ToBoolean(dr["ConsequetiveInd"].ToString()))
                    {
                        ruleData.pctTotalCorrectMoveDown.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    }
                    else if (Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()))  //--- [New Criteria] May 2020 - (Start) ---//
                    {
                        ruleData.pctTotalCorrectMoveDown.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    }//--- [New Criteria] May 2020 - (End) ---//
                    else
                    {
                        ruleData.pctTotalCorrectMoveDown.iTotalCorrectInstance = Convert.ToInt32(dr["TotCorrInstance"].ToString());
                    }
                    ruleData.pctTotalCorrectMoveDown.iTotalInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    if (!bIOAReq)
                    {
                        ruleData.pctTotalCorrectMoveDown.bIOARequird = Convert.ToBoolean(dr["IOAReqInd"].ToString());
                        // bPromptIOA = bIOAReq;
                    }
                    if (!bMultiTeacher)
                    {
                        ruleData.pctTotalCorrectMoveDown.bMultiTeacherRequired = Convert.ToBoolean(dr["MultiTeacherReqInd"].ToString());
                    }
                    if (!bIncludeMisTrail)
                    {
                        bIncludeMisTrail = Convert.ToBoolean(dr["IncMisTrialInd"].ToString());
                    }
                }
                if (dr["CalcType"].ToString().Replace(" ", "") == "TotalIncorrect")
                {
                    ruleData.pctTotalIncorrectMoveDown.iScoreRequired = Convert.ToInt32(dr["ScoreReq"].ToString());
                    ruleData.pctTotalIncorrectMoveDown.bConsequetiveIndex = Convert.ToBoolean(dr["ConsequetiveInd"].ToString());
                    ruleData.pctTotalIncorrectMoveDown.bConsecutiveAvg = Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()); //--- [New Criteria] May 2020 ---//
                    if (Convert.ToBoolean(dr["ConsequetiveInd"].ToString()))
                    {
                        ruleData.pctTotalIncorrectMoveDown.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    }
                    else if (Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()))  //--- [New Criteria] May 2020 - (Start) ---//
                    {
                        ruleData.pctTotalIncorrectMoveDown.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    }//--- [New Criteria] May 2020 - (End) ---//
                    else
                    {
                        ruleData.pctTotalIncorrectMoveDown.iTotalCorrectInstance = Convert.ToInt32(dr["TotCorrInstance"].ToString());
                    }
                    ruleData.pctTotalIncorrectMoveDown.iTotalInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    if (!bIOAReq)
                    {
                        ruleData.pctTotalIncorrectMoveDown.bIOARequird = Convert.ToBoolean(dr["IOAReqInd"].ToString());
                        // bPromptIOA = bIOAReq;
                    }
                    if (!bMultiTeacher)
                    {
                        ruleData.pctTotalIncorrectMoveDown.bMultiTeacherRequired = Convert.ToBoolean(dr["MultiTeacherReqInd"].ToString());
                    }
                    if (!bIncludeMisTrail)
                    {
                        bIncludeMisTrail = Convert.ToBoolean(dr["IncMisTrialInd"].ToString());
                    }
                }
            }
            /*ruleData.bIOARequird = bIOAReq;
            ruleData.bMultiTeacherRequired = bMultiTeacher;*/
        }
        dt = null;
        return ruleData;
    }

    protected Rules GetStepRules(int tempId, int colId)
    {
        oData = new clsData();
        Rules ruleData = new Rules();
        RuleDetails setRuleMoveUpDetails = new RuleDetails();
        bool bIOAReq = false;
        bool bMultiTeacher = false;
        bool bMultiSet = false;
        bool bIncludeMisTrail = false;
        string sql = " SELECT  DR.RuleType, DR.IOAReqInd, DR.MultiTeacherReqInd, DR.CriteriaType, DR.TotalInstance, DR.TotCorrInstance,DR.DSTempSetColCalcId,DST.IncMisTrialInd, DST.ColName," +
                   " DC.CalcType,DT.MultiSetsInd, DT.DSTempHdrId, DR.ScoreReq,DR.ConsequetiveInd,ISNULL(DR.ConsequetiveAvgInd,0) AS ConsequetiveAvgInd FROM DSTempHdr DT " + //--- [New Criteria] May 2020 ---//
                   " INNER JOIN DSTempSetCol DST ON DT.DSTempHdrId = DST.DSTempHdrId " +
                   " INNER JOIN DSTempSetColCalc DC ON DST.DSTempSetColId = DC.DSTempSetColId " +
                   " INNER JOIN DSTempRule DR ON DR.DSTempSetColCalcId = DC.DSTempSetColCalcId " +
                   " WHERE (DT.DSTempHdrId =" + tempId + ")AND DR.RuleType='STEP' AND DR.DSTempSetColId=" + colId + " AND DR.ActiveInd='A' AND DR.IsNA<>1";
        DataTable dt = new DataTable();
        dt = oData.ReturnDataTable(sql, false);
        foreach (DataRow dr in dt.Rows)
        {
            ruleData.count++;
            if (dr["CriteriaType"].ToString() == "MOVE UP")
            {
                ruleData.moveup++;
                if (dr["CalcType"].ToString().Replace(" ", "") == "%Accuracy")
                {
                    ruleData.pctAccyMoveUp.iScoreRequired = Convert.ToInt32(dr["ScoreReq"].ToString());
                    ruleData.pctAccyMoveUp.bConsequetiveIndex = Convert.ToBoolean(dr["ConsequetiveInd"].ToString());
                    ruleData.pctAccyMoveUp.bConsecutiveAvg = Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()); //--- [New Criteria] May 2020 ---//
                    if (Convert.ToBoolean(dr["ConsequetiveInd"].ToString()))
                    {
                        ruleData.pctAccyMoveUp.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    }
                    else if (Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString())) //--- [New Criteria] May 2020 - (Start) ---//
                    {
                        ruleData.pctAccyMoveUp.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    }//--- [New Criteria] May 2020 - (End) ---//
                    else
                    {
                        ruleData.pctAccyMoveUp.iTotalCorrectInstance = Convert.ToInt32(dr["TotCorrInstance"].ToString());
                    }
                    ruleData.pctAccyMoveUp.iTotalInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    if (!bIOAReq)
                    {
                        ruleData.pctAccyMoveUp.bIOARequird = Convert.ToBoolean(dr["IOAReqInd"].ToString());
                        // bStepIOA = bIOAReq;
                    }
                    if (!bMultiTeacher)
                    {
                        ruleData.pctAccyMoveUp.bMultiTeacherRequired = Convert.ToBoolean(dr["MultiTeacherReqInd"].ToString());
                    }
                    if (!bIncludeMisTrail)
                    {
                        bIncludeMisTrail = Convert.ToBoolean(dr["IncMisTrialInd"].ToString());
                    }
                }
                if (dr["CalcType"].ToString().Replace(" ", "") == "%Independent")
                {
                    ruleData.pctIndMoveUp.iScoreRequired = Convert.ToInt32(dr["ScoreReq"].ToString());
                    ruleData.pctIndMoveUp.bConsequetiveIndex = Convert.ToBoolean(dr["ConsequetiveInd"].ToString());
                    ruleData.pctIndMoveUp.bConsecutiveAvg = Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()); //--- [New Criteria] May 2020 ---//
                    if (Convert.ToBoolean(dr["ConsequetiveInd"].ToString()))
                    {
                        ruleData.pctIndMoveUp.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    }
                    else if (Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString())) //--- [New Criteria] May 2020 - (Start) ---//
                    {
                        ruleData.pctIndMoveUp.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    }//--- [New Criteria] May 2020 - (End) ---//
                    else
                    {
                        ruleData.pctIndMoveUp.iTotalCorrectInstance = Convert.ToInt32(dr["TotCorrInstance"].ToString());
                    }
                    ruleData.pctIndMoveUp.iTotalInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    if (!bIOAReq)
                    {
                        ruleData.pctIndMoveUp.bIOARequird = Convert.ToBoolean(dr["IOAReqInd"].ToString());
                    }
                    if (!bMultiTeacher)
                    {
                        ruleData.pctIndMoveUp.bMultiTeacherRequired = Convert.ToBoolean(dr["MultiTeacherReqInd"].ToString());
                    }
                    if (!bIncludeMisTrail)
                    {
                        bIncludeMisTrail = Convert.ToBoolean(dr["IncMisTrialInd"].ToString());
                    }
                }
                if (dr["CalcType"].ToString().Replace(" ", "") == "%IndependentofAllSteps")
                {
                    ruleData.pctIndAllMoveUp.iScoreRequired = Convert.ToInt32(dr["ScoreReq"].ToString());
                    ruleData.pctIndAllMoveUp.bConsequetiveIndex = Convert.ToBoolean(dr["ConsequetiveInd"].ToString());
                    ruleData.pctIndAllMoveUp.bConsecutiveAvg = Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()); //--- [New Criteria] May 2020 ---//
                    if (Convert.ToBoolean(dr["ConsequetiveInd"].ToString()))
                    {
                        ruleData.pctIndAllMoveUp.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    }
                    else if (Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString())) //--- [New Criteria] May 2020 - (Start) ---//
                    {
                        ruleData.pctIndAllMoveUp.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    }//--- [New Criteria] May 2020 - (End) ---//
                    else
                    {
                        ruleData.pctIndAllMoveUp.iTotalCorrectInstance = Convert.ToInt32(dr["TotCorrInstance"].ToString());
                    }
                    ruleData.pctIndAllMoveUp.iTotalInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    if (!bIOAReq)
                    {
                        ruleData.pctIndAllMoveUp.bIOARequird = Convert.ToBoolean(dr["IOAReqInd"].ToString());
                    }
                    if (!bMultiTeacher)
                    {
                        ruleData.pctIndAllMoveUp.bMultiTeacherRequired = Convert.ToBoolean(dr["MultiTeacherReqInd"].ToString());
                    }
                    if (!bIncludeMisTrail)
                    {
                        bIncludeMisTrail = Convert.ToBoolean(dr["IncMisTrialInd"].ToString());
                    }

                    IndeallId = Convert.ToInt32(dr["DSTempSetColCalcId"].ToString());
                    ViewState["IndeallId"] = IndeallId;
                }
                if (dr["CalcType"].ToString().Replace(" ", "") == "%Prompted")
                {
                    ruleData.pctPrmtMoveUp.iScoreRequired = Convert.ToInt32(dr["ScoreReq"].ToString());
                    ruleData.pctPrmtMoveUp.bConsequetiveIndex = Convert.ToBoolean(dr["ConsequetiveInd"].ToString());
                    ruleData.pctPrmtMoveUp.bConsecutiveAvg = Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()); //--- [New Criteria] May 2020 ---//
                    if (Convert.ToBoolean(dr["ConsequetiveInd"].ToString()))
                    {
                        ruleData.pctPrmtMoveUp.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    }
                    else if (Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString())) //--- [New Criteria] May 2020 - (Start) ---//
                    {
                        ruleData.pctPrmtMoveUp.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    }//--- [New Criteria] May 2020 - (End) ---//
                    else
                    {
                        ruleData.pctPrmtMoveUp.iTotalCorrectInstance = Convert.ToInt32(dr["TotCorrInstance"].ToString());
                    }
                    ruleData.pctPrmtMoveUp.iTotalInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    if (!bIOAReq)
                    {
                        ruleData.pctPrmtMoveUp.bIOARequird = Convert.ToBoolean(dr["IOAReqInd"].ToString());
                    }
                    if (!bMultiTeacher)
                    {
                        ruleData.pctPrmtMoveUp.bMultiTeacherRequired = Convert.ToBoolean(dr["MultiTeacherReqInd"].ToString());
                    }
                    if (!bIncludeMisTrail)
                    {
                        bIncludeMisTrail = Convert.ToBoolean(dr["IncMisTrialInd"].ToString());
                    }
                }
                if (dr["CalcType"].ToString() == "Customize")
                {
                    if (!bIOAReq)
                    {
                        ruleData.pctCustomMoveUp.bIOARequird = Convert.ToBoolean(dr["IOAReqInd"].ToString());
                    }
                    if (!bMultiTeacher)
                    {
                        ruleData.pctCustomMoveUp.bMultiTeacherRequired = Convert.ToBoolean(dr["MultiTeacherReqInd"].ToString());
                    }
                    if (!bIncludeMisTrail)
                    {
                        bIncludeMisTrail = Convert.ToBoolean(dr["IncMisTrialInd"].ToString());
                    }

                }


                if (dr["CalcType"].ToString().Replace(" ", "") == "AvgDuration")
                {
                    ruleData.pctAvgDurationMoveUp.iScoreRequired = Convert.ToInt32(dr["ScoreReq"].ToString());
                    ruleData.pctAvgDurationMoveUp.bConsequetiveIndex = Convert.ToBoolean(dr["ConsequetiveInd"].ToString());
                    ruleData.pctAvgDurationMoveUp.bConsecutiveAvg = Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()); //--- [New Criteria] May 2020 ---//
                    if (Convert.ToBoolean(dr["ConsequetiveInd"].ToString()))
                    {
                        ruleData.pctAvgDurationMoveUp.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    }
                    else if (Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString())) //--- [New Criteria] May 2020 - (Start) ---//
                    {
                        ruleData.pctAvgDurationMoveUp.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    }//--- [New Criteria] May 2020 - (End) ---//
                    else
                    {
                        ruleData.pctAvgDurationMoveUp.iTotalCorrectInstance = Convert.ToInt32(dr["TotCorrInstance"].ToString());
                    }
                    ruleData.pctAvgDurationMoveUp.iTotalInstance = Convert.ToInt32(dr["TotalInstance"].ToString());

                    if (!bIOAReq)
                    {
                        ruleData.pctAvgDurationMoveUp.bIOARequird = Convert.ToBoolean(dr["IOAReqInd"].ToString());
                    }
                    if (!bMultiTeacher)
                    {
                        ruleData.pctAvgDurationMoveUp.bMultiTeacherRequired = Convert.ToBoolean(dr["MultiTeacherReqInd"].ToString());
                    }
                    if (!bIncludeMisTrail)
                    {
                        bIncludeMisTrail = Convert.ToBoolean(dr["IncMisTrialInd"].ToString());
                    }
                    avgDurationId = Convert.ToInt32(dr["DSTempSetColCalcId"].ToString());
                    ViewState["avgDurationId"] = avgDurationId;
                }
                if (dr["CalcType"].ToString().Replace(" ", "") == "TotalDuration")
                {
                    ruleData.pctTotalDurationMoveUp.iScoreRequired = Convert.ToInt32(dr["ScoreReq"].ToString());
                    ruleData.pctTotalDurationMoveUp.bConsequetiveIndex = Convert.ToBoolean(dr["ConsequetiveInd"].ToString());
                    ruleData.pctTotalDurationMoveUp.bConsecutiveAvg = Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()); //--- [New Criteria] May 2020 ---//
                    if (Convert.ToBoolean(dr["ConsequetiveInd"].ToString()))
                    {
                        ruleData.pctTotalDurationMoveUp.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    }
                    else if (Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString())) //--- [New Criteria] May 2020 - (Start) ---//
                    {
                        ruleData.pctTotalDurationMoveUp.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    }//--- [New Criteria] May 2020 - (End) ---//
                    else
                    {
                        ruleData.pctTotalDurationMoveUp.iTotalCorrectInstance = Convert.ToInt32(dr["TotCorrInstance"].ToString());
                    }
                    ruleData.pctTotalDurationMoveUp.iTotalInstance = Convert.ToInt32(dr["TotalInstance"].ToString());

                    if (!bIOAReq)
                    {
                        ruleData.pctTotalDurationMoveUp.bIOARequird = Convert.ToBoolean(dr["IOAReqInd"].ToString());
                    }
                    if (!bMultiTeacher)
                    {
                        ruleData.pctTotalDurationMoveUp.bMultiTeacherRequired = Convert.ToBoolean(dr["MultiTeacherReqInd"].ToString());
                    }
                    if (!bIncludeMisTrail)
                    {
                        bIncludeMisTrail = Convert.ToBoolean(dr["IncMisTrialInd"].ToString());
                    }
                    totDuraionId = Convert.ToInt32(dr["DSTempSetColCalcId"].ToString());
                    ViewState["totDuraionId"] = totDuraionId;
                }
                if (dr["CalcType"].ToString() == "Frequency")
                {
                    ruleData.pctFrequencyMoveUp.iScoreRequired = Convert.ToInt32(dr["ScoreReq"].ToString());
                    ruleData.pctFrequencyMoveUp.bConsequetiveIndex = Convert.ToBoolean(dr["ConsequetiveInd"].ToString());
                    ruleData.pctFrequencyMoveUp.bConsecutiveAvg = Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()); //--- [New Criteria] May 2020 ---//
                    if (Convert.ToBoolean(dr["ConsequetiveInd"].ToString()))
                    {
                        ruleData.pctFrequencyMoveUp.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    }
                    else if (Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString())) //--- [New Criteria] May 2020 - (Start) ---//
                    {
                        ruleData.pctFrequencyMoveUp.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    }//--- [New Criteria] May 2020 - (End) ---//
                    else
                    {
                        ruleData.pctFrequencyMoveUp.iTotalCorrectInstance = Convert.ToInt32(dr["TotCorrInstance"].ToString());
                    }
                    ruleData.pctFrequencyMoveUp.iTotalInstance = Convert.ToInt32(dr["TotalInstance"].ToString());

                    if (!bIOAReq)
                    {
                        ruleData.pctFrequencyMoveUp.bIOARequird = Convert.ToBoolean(dr["IOAReqInd"].ToString());
                    }
                    if (!bMultiTeacher)
                    {
                        ruleData.pctFrequencyMoveUp.bMultiTeacherRequired = Convert.ToBoolean(dr["MultiTeacherReqInd"].ToString());
                    }
                    if (!bIncludeMisTrail)
                    {
                        bIncludeMisTrail = Convert.ToBoolean(dr["IncMisTrialInd"].ToString());
                    }
                    freqId = Convert.ToInt32(dr["DSTempSetColCalcId"].ToString());
                    ViewState["freqId"] = freqId;
                }
                if (dr["CalcType"].ToString().Replace(" ", "") == "%AccuracyatTrainingStep")
                {
                    ruleData.pctlearnedStepMoveUp.iScoreRequired = Convert.ToInt32(dr["ScoreReq"].ToString());
                    ruleData.pctlearnedStepMoveUp.bConsequetiveIndex = Convert.ToBoolean(dr["ConsequetiveInd"].ToString());
                    ruleData.pctlearnedStepMoveUp.bConsecutiveAvg = Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()); //--- [New Criteria] May 2020 ---//
                    if (Convert.ToBoolean(dr["ConsequetiveInd"].ToString()))
                    {
                        ruleData.pctlearnedStepMoveUp.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    }
                    else if (Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString())) //--- [New Criteria] May 2020 - (Start) ---//
                    {
                        ruleData.pctlearnedStepMoveUp.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    }//--- [New Criteria] May 2020 - (End) ---//
                    else
                    {
                        ruleData.pctlearnedStepMoveUp.iTotalCorrectInstance = Convert.ToInt32(dr["TotCorrInstance"].ToString());
                    }
                    ruleData.pctlearnedStepMoveUp.iTotalInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    if (!bIOAReq)
                    {
                        ruleData.pctlearnedStepMoveUp.bIOARequird = Convert.ToBoolean(dr["IOAReqInd"].ToString());
                        //bStepIOA = bIOAReq;
                    }
                    if (!bMultiTeacher)
                    {
                        ruleData.pctlearnedStepMoveUp.bMultiTeacherRequired = Convert.ToBoolean(dr["MultiTeacherReqInd"].ToString());
                    }
                    if (!bIncludeMisTrail)
                    {
                        bIncludeMisTrail = Convert.ToBoolean(dr["IncMisTrialInd"].ToString());
                    }
                }

                if (dr["CalcType"].ToString().Replace(" ", "") == "%AccuracyatPreviouslyLearnedSteps")
                {
                    ruleData.excludeCrntStepMoveUp.iScoreRequired = Convert.ToInt32(dr["ScoreReq"].ToString());
                    ruleData.excludeCrntStepMoveUp.bConsequetiveIndex = Convert.ToBoolean(dr["ConsequetiveInd"].ToString());
                    ruleData.excludeCrntStepMoveUp.bConsecutiveAvg = Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()); //--- [New Criteria] May 2020 ---//
                    if (Convert.ToBoolean(dr["ConsequetiveInd"].ToString()))
                    {
                        ruleData.excludeCrntStepMoveUp.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    }
                    else if (Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString())) //--- [New Criteria] May 2020 - (Start) ---//
                    {
                        ruleData.excludeCrntStepMoveUp.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    }//--- [New Criteria] May 2020 - (End) ---//
                    else
                    {
                        ruleData.excludeCrntStepMoveUp.iTotalCorrectInstance = Convert.ToInt32(dr["TotCorrInstance"].ToString());
                    }
                    ruleData.excludeCrntStepMoveUp.iTotalInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    if (!bIOAReq)
                    {
                        ruleData.excludeCrntStepMoveUp.bIOARequird = Convert.ToBoolean(dr["IOAReqInd"].ToString());
                        //bStepIOA = bIOAReq;
                    }
                    if (!bMultiTeacher)
                    {
                        ruleData.excludeCrntStepMoveUp.bMultiTeacherRequired = Convert.ToBoolean(dr["MultiTeacherReqInd"].ToString());
                    }
                    if (!bIncludeMisTrail)
                    {
                        bIncludeMisTrail = Convert.ToBoolean(dr["IncMisTrialInd"].ToString());
                    }
                }
                if (dr["CalcType"].ToString().Replace(" ", "") == "TotalCorrect")
                {
                    ruleData.pctTotalCorrectMoveUp.iScoreRequired = Convert.ToInt32(dr["ScoreReq"].ToString());
                    ruleData.pctTotalCorrectMoveUp.bConsequetiveIndex = Convert.ToBoolean(dr["ConsequetiveInd"].ToString());
                    ruleData.pctTotalCorrectMoveUp.bConsecutiveAvg = Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()); //--- [New Criteria] May 2020 ---//
                    if (Convert.ToBoolean(dr["ConsequetiveInd"].ToString()))
                    {
                        ruleData.pctTotalCorrectMoveUp.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    }
                    else if (Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString())) //--- [New Criteria] May 2020 - (Start) ---//
                    {
                        ruleData.pctTotalCorrectMoveUp.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    }//--- [New Criteria] May 2020 - (End) ---//
                    else
                    {
                        ruleData.pctTotalCorrectMoveUp.iTotalCorrectInstance = Convert.ToInt32(dr["TotCorrInstance"].ToString());
                    }
                    ruleData.pctTotalCorrectMoveUp.iTotalInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    if (!bIOAReq)
                    {
                        ruleData.pctTotalCorrectMoveUp.bIOARequird = Convert.ToBoolean(dr["IOAReqInd"].ToString());
                        // bPromptIOA = bIOAReq;
                    }
                    if (!bMultiTeacher)
                    {
                        ruleData.pctTotalCorrectMoveUp.bMultiTeacherRequired = Convert.ToBoolean(dr["MultiTeacherReqInd"].ToString());
                    }
                    if (!bIncludeMisTrail)
                    {
                        bIncludeMisTrail = Convert.ToBoolean(dr["IncMisTrialInd"].ToString());
                    }
                }
                if (dr["CalcType"].ToString().Replace(" ", "") == "TotalIncorrect")
                {
                    ruleData.pctTotalIncorrectMoveUp.iScoreRequired = Convert.ToInt32(dr["ScoreReq"].ToString());
                    ruleData.pctTotalIncorrectMoveUp.bConsequetiveIndex = Convert.ToBoolean(dr["ConsequetiveInd"].ToString());
                    ruleData.pctTotalIncorrectMoveUp.bConsecutiveAvg = Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()); //--- [New Criteria] May 2020 ---//
                    if (Convert.ToBoolean(dr["ConsequetiveInd"].ToString()))
                    {
                        ruleData.pctTotalIncorrectMoveUp.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    }
                    else if (Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString())) //--- [New Criteria] May 2020 - (Start) ---//
                    {
                        ruleData.pctTotalIncorrectMoveUp.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    }//--- [New Criteria] May 2020 - (End) ---//
                    else
                    {
                        ruleData.pctTotalIncorrectMoveUp.iTotalCorrectInstance = Convert.ToInt32(dr["TotCorrInstance"].ToString());
                    }
                    ruleData.pctTotalIncorrectMoveUp.iTotalInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    if (!bIOAReq)
                    {
                        ruleData.pctTotalIncorrectMoveUp.bIOARequird = Convert.ToBoolean(dr["IOAReqInd"].ToString());
                        // bPromptIOA = bIOAReq;
                    }
                    if (!bMultiTeacher)
                    {
                        ruleData.pctTotalIncorrectMoveUp.bMultiTeacherRequired = Convert.ToBoolean(dr["MultiTeacherReqInd"].ToString());
                    }
                    if (!bIncludeMisTrail)
                    {
                        bIncludeMisTrail = Convert.ToBoolean(dr["IncMisTrialInd"].ToString());
                    }
                }

            }
            if (dr["CriteriaType"].ToString() == "MOVE DOWN")
            {
                ruleData.movedown++;
                if (dr["CalcType"].ToString().Replace(" ", "") == "%Accuracy")
                {
                    ruleData.pctAccyMoveDown.iScoreRequired = Convert.ToInt32(dr["ScoreReq"].ToString());
                    ruleData.pctAccyMoveDown.bConsequetiveIndex = Convert.ToBoolean(dr["ConsequetiveInd"].ToString());
                    ruleData.pctAccyMoveDown.bConsecutiveAvg = Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()); //--- [New Criteria] May 2020 ---//
                    if (Convert.ToBoolean(dr["ConsequetiveInd"].ToString()))
                    {
                        ruleData.pctAccyMoveDown.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    }
                    else if (Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()))  //--- [New Criteria] May 2020 - (Start) ---//
                    {
                        ruleData.pctAccyMoveDown.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    } //--- [New Criteria] May 2020 - (End) ---//
                    else
                    {
                        ruleData.pctAccyMoveDown.iTotalCorrectInstance = Convert.ToInt32(dr["TotCorrInstance"].ToString());
                    }
                    ruleData.pctAccyMoveDown.iTotalInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    if (!bIOAReq)
                    {
                        ruleData.pctAccyMoveDown.bIOARequird = Convert.ToBoolean(dr["IOAReqInd"].ToString());
                        //bStepIOA = bIOAReq;
                    }
                    if (!bMultiTeacher)
                    {
                        ruleData.pctAccyMoveDown.bMultiTeacherRequired = Convert.ToBoolean(dr["MultiTeacherReqInd"].ToString());
                    }
                    if (!bIncludeMisTrail)
                    {
                        bIncludeMisTrail = Convert.ToBoolean(dr["IncMisTrialInd"].ToString());
                    }
                }
                if (dr["CalcType"].ToString().Replace(" ", "") == "%Independent")
                {
                    ruleData.pctIndMoveDown.iScoreRequired = Convert.ToInt32(dr["ScoreReq"].ToString());
                    ruleData.pctIndMoveDown.bConsequetiveIndex = Convert.ToBoolean(dr["ConsequetiveInd"].ToString());
                    ruleData.pctIndMoveDown.bConsecutiveAvg = Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()); //--- [New Criteria] May 2020 ---//
                    if (Convert.ToBoolean(dr["ConsequetiveInd"].ToString()))
                    {
                        ruleData.pctIndMoveDown.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    }
                    else if (Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()))  //--- [New Criteria] May 2020 - (Start) ---//
                    {
                        ruleData.pctIndMoveDown.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    } //--- [New Criteria] May 2020 - (End) ---//
                    else
                    {
                        ruleData.pctIndMoveDown.iTotalCorrectInstance = Convert.ToInt32(dr["TotCorrInstance"].ToString());
                    }
                    ruleData.pctIndMoveDown.iTotalInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    if (!bIOAReq)
                    {
                        ruleData.pctIndMoveDown.bIOARequird = Convert.ToBoolean(dr["IOAReqInd"].ToString());
                        //bStepIOA = bIOAReq;
                    }
                    if (!bMultiTeacher)
                    {
                        ruleData.pctIndMoveDown.bMultiTeacherRequired = Convert.ToBoolean(dr["MultiTeacherReqInd"].ToString());
                    }
                    if (!bIncludeMisTrail)
                    {
                        bIncludeMisTrail = Convert.ToBoolean(dr["IncMisTrialInd"].ToString());
                    }
                }
                if (dr["CalcType"].ToString().Replace(" ", "") == "%IndependentofAllSteps")
                {
                    ruleData.pctIndAllMoveDown.iScoreRequired = Convert.ToInt32(dr["ScoreReq"].ToString());
                    ruleData.pctIndAllMoveDown.bConsequetiveIndex = Convert.ToBoolean(dr["ConsequetiveInd"].ToString());
                    ruleData.pctIndAllMoveDown.bConsecutiveAvg = Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()); //--- [New Criteria] May 2020 ---//
                    if (Convert.ToBoolean(dr["ConsequetiveInd"].ToString()))
                    {
                        ruleData.pctIndAllMoveDown.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    }
                    else if (Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()))  //--- [New Criteria] May 2020 - (Start) ---//
                    {
                        ruleData.pctIndAllMoveDown.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    } //--- [New Criteria] May 2020 - (End) ---//
                    else
                    {
                        ruleData.pctIndAllMoveDown.iTotalCorrectInstance = Convert.ToInt32(dr["TotCorrInstance"].ToString());
                    }
                    ruleData.pctIndAllMoveDown.iTotalInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    if (!bIOAReq)
                    {
                        ruleData.pctIndAllMoveDown.bIOARequird = Convert.ToBoolean(dr["IOAReqInd"].ToString());
                        //bStepIOA = bIOAReq;
                    }
                    if (!bMultiTeacher)
                    {
                        ruleData.pctIndAllMoveDown.bMultiTeacherRequired = Convert.ToBoolean(dr["MultiTeacherReqInd"].ToString());
                    }
                    if (!bIncludeMisTrail)
                    {
                        bIncludeMisTrail = Convert.ToBoolean(dr["IncMisTrialInd"].ToString());
                    }
                    IndeallId = Convert.ToInt32(dr["DSTempSetColCalcId"].ToString());
                    ViewState["IndeallId"] = IndeallId;
                }
                if (dr["CalcType"].ToString().Replace(" ", "") == "%Prompted")
                {
                    ruleData.pctPrmtMoveDown.iScoreRequired = Convert.ToInt32(dr["ScoreReq"].ToString());
                    ruleData.pctPrmtMoveDown.bConsequetiveIndex = Convert.ToBoolean(dr["ConsequetiveInd"].ToString());
                    ruleData.pctPrmtMoveDown.bConsecutiveAvg = Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()); //--- [New Criteria] May 2020 ---//
                    if (Convert.ToBoolean(dr["ConsequetiveInd"].ToString()))
                    {
                        ruleData.pctPrmtMoveDown.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    }
                    else if (Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()))  //--- [New Criteria] May 2020 - (Start) ---//
                    {
                        ruleData.pctPrmtMoveDown.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    } //--- [New Criteria] May 2020 - (End) ---//
                    else
                    {
                        ruleData.pctPrmtMoveDown.iTotalCorrectInstance = Convert.ToInt32(dr["TotCorrInstance"].ToString());
                    }
                    ruleData.pctPrmtMoveDown.iTotalInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    if (!bIOAReq)
                    {
                        ruleData.pctPrmtMoveDown.bIOARequird = Convert.ToBoolean(dr["IOAReqInd"].ToString());
                        //bStepIOA = bIOAReq;
                    }
                    if (!bMultiTeacher)
                    {
                        ruleData.pctPrmtMoveDown.bMultiTeacherRequired = Convert.ToBoolean(dr["MultiTeacherReqInd"].ToString());
                    }
                    if (!bIncludeMisTrail)
                    {
                        bIncludeMisTrail = Convert.ToBoolean(dr["IncMisTrialInd"].ToString());
                    }
                }
                if (dr["CalcType"].ToString() == "Customize")
                {
                    if (!bIOAReq)
                    {
                        ruleData.pctCustomMoveDown.bIOARequird = Convert.ToBoolean(dr["IOAReqInd"].ToString());
                    }
                    if (!bMultiTeacher)
                    {
                        ruleData.pctCustomMoveDown.bMultiTeacherRequired = Convert.ToBoolean(dr["MultiTeacherReqInd"].ToString());
                    }
                    if (!bIncludeMisTrail)
                    {
                        bIncludeMisTrail = Convert.ToBoolean(dr["IncMisTrialInd"].ToString());
                    }

                }


                if (dr["CalcType"].ToString().Replace(" ", "") == "%AccuracyatTrainingStep")
                {
                    ruleData.pctlearnedStepMoveDown.iScoreRequired = Convert.ToInt32(dr["ScoreReq"].ToString());
                    ruleData.pctlearnedStepMoveDown.bConsequetiveIndex = Convert.ToBoolean(dr["ConsequetiveInd"].ToString());
                    ruleData.pctlearnedStepMoveDown.bConsecutiveAvg = Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()); //--- [New Criteria] May 2020 ---//
                    if (Convert.ToBoolean(dr["ConsequetiveInd"].ToString()))
                    {
                        ruleData.pctlearnedStepMoveDown.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    }
                    else if (Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()))  //--- [New Criteria] May 2020 - (Start) ---//
                    {
                        ruleData.pctlearnedStepMoveDown.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    } //--- [New Criteria] May 2020 - (End) ---//
                    else
                    {
                        ruleData.pctlearnedStepMoveDown.iTotalCorrectInstance = Convert.ToInt32(dr["TotCorrInstance"].ToString());
                    }
                    ruleData.pctlearnedStepMoveDown.iTotalInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    if (!bIOAReq)
                    {
                        ruleData.pctlearnedStepMoveDown.bIOARequird = Convert.ToBoolean(dr["IOAReqInd"].ToString());
                        //bStepIOA = bIOAReq;
                    }
                    if (!bMultiTeacher)
                    {
                        ruleData.pctlearnedStepMoveDown.bMultiTeacherRequired = Convert.ToBoolean(dr["MultiTeacherReqInd"].ToString());
                    }
                    if (!bIncludeMisTrail)
                    {
                        bIncludeMisTrail = Convert.ToBoolean(dr["IncMisTrialInd"].ToString());
                    }
                }
                if (dr["CalcType"].ToString().Replace(" ", "") == "AvgDuration")
                {
                    ruleData.pctAvgDurationMoveDown.iScoreRequired = Convert.ToInt32(dr["ScoreReq"].ToString());
                    ruleData.pctAvgDurationMoveDown.bConsequetiveIndex = Convert.ToBoolean(dr["ConsequetiveInd"].ToString());
                    ruleData.pctAvgDurationMoveDown.bConsecutiveAvg = Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()); //--- [New Criteria] May 2020 ---//
                    if (Convert.ToBoolean(dr["ConsequetiveInd"].ToString()))
                    {
                        ruleData.pctAvgDurationMoveDown.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    }
                    else if (Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()))  //--- [New Criteria] May 2020 - (Start) ---//
                    {
                        ruleData.pctAvgDurationMoveDown.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    } //--- [New Criteria] May 2020 - (End) ---//
                    else
                    {
                        ruleData.pctAvgDurationMoveDown.iTotalCorrectInstance = Convert.ToInt32(dr["TotCorrInstance"].ToString());
                    }
                    ruleData.pctAvgDurationMoveDown.iTotalInstance = Convert.ToInt32(dr["TotalInstance"].ToString());

                    if (!bIOAReq)
                    {
                        ruleData.pctAvgDurationMoveDown.bIOARequird = Convert.ToBoolean(dr["IOAReqInd"].ToString());
                    }
                    if (!bMultiTeacher)
                    {
                        ruleData.pctAvgDurationMoveDown.bMultiTeacherRequired = Convert.ToBoolean(dr["MultiTeacherReqInd"].ToString());
                    }
                    if (!bIncludeMisTrail)
                    {
                        bIncludeMisTrail = Convert.ToBoolean(dr["IncMisTrialInd"].ToString());
                    }
                    avgDurationId = Convert.ToInt32(dr["DSTempSetColCalcId"].ToString());
                    ViewState["avgDurationId"] = avgDurationId;
                }
                if (dr["CalcType"].ToString().Replace(" ", "") == "TotalDuration")
                {
                    ruleData.pctTotalDurationMoveDown.iScoreRequired = Convert.ToInt32(dr["ScoreReq"].ToString());
                    ruleData.pctTotalDurationMoveDown.bConsequetiveIndex = Convert.ToBoolean(dr["ConsequetiveInd"].ToString());
                    ruleData.pctTotalDurationMoveDown.bConsecutiveAvg = Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()); //--- [New Criteria] May 2020 ---//
                    if (Convert.ToBoolean(dr["ConsequetiveInd"].ToString()))
                    {
                        ruleData.pctTotalDurationMoveDown.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    }
                    else if (Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()))  //--- [New Criteria] May 2020 - (Start) ---//
                    {
                        ruleData.pctTotalDurationMoveDown.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    } //--- [New Criteria] May 2020 - (End) ---//
                    else
                    {
                        ruleData.pctTotalDurationMoveDown.iTotalCorrectInstance = Convert.ToInt32(dr["TotCorrInstance"].ToString());
                    }
                    ruleData.pctTotalDurationMoveDown.iTotalInstance = Convert.ToInt32(dr["TotalInstance"].ToString());

                    if (!bIOAReq)
                    {
                        ruleData.pctTotalDurationMoveDown.bIOARequird = Convert.ToBoolean(dr["IOAReqInd"].ToString());
                    }
                    if (!bMultiTeacher)
                    {
                        ruleData.pctTotalDurationMoveDown.bMultiTeacherRequired = Convert.ToBoolean(dr["MultiTeacherReqInd"].ToString());
                    }
                    if (!bIncludeMisTrail)
                    {
                        bIncludeMisTrail = Convert.ToBoolean(dr["IncMisTrialInd"].ToString());
                    }
                    totDuraionId = Convert.ToInt32(dr["DSTempSetColCalcId"].ToString());
                    ViewState["totDuraionId"] = totDuraionId;
                }
                if (dr["CalcType"].ToString() == "Frequency")
                {
                    ruleData.pctFrequencyMoveDown.iScoreRequired = Convert.ToInt32(dr["ScoreReq"].ToString());
                    ruleData.pctFrequencyMoveDown.bConsequetiveIndex = Convert.ToBoolean(dr["ConsequetiveInd"].ToString());
                    ruleData.pctFrequencyMoveDown.bConsecutiveAvg = Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()); //--- [New Criteria] May 2020 ---//
                    if (Convert.ToBoolean(dr["ConsequetiveInd"].ToString()))
                    {
                        ruleData.pctFrequencyMoveDown.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    }
                    else if (Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()))  //--- [New Criteria] May 2020 - (Start) ---//
                    {
                        ruleData.pctFrequencyMoveDown.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    } //--- [New Criteria] May 2020 - (End) ---//
                    else
                    {
                        ruleData.pctFrequencyMoveDown.iTotalCorrectInstance = Convert.ToInt32(dr["TotCorrInstance"].ToString());
                    }
                    ruleData.pctFrequencyMoveDown.iTotalInstance = Convert.ToInt32(dr["TotalInstance"].ToString());

                    if (!bIOAReq)
                    {
                        ruleData.pctFrequencyMoveDown.bIOARequird = Convert.ToBoolean(dr["IOAReqInd"].ToString());
                    }
                    if (!bMultiTeacher)
                    {
                        ruleData.pctFrequencyMoveDown.bMultiTeacherRequired = Convert.ToBoolean(dr["MultiTeacherReqInd"].ToString());
                    }
                    if (!bIncludeMisTrail)
                    {
                        bIncludeMisTrail = Convert.ToBoolean(dr["IncMisTrialInd"].ToString());
                    }
                    freqId = Convert.ToInt32(dr["DSTempSetColCalcId"].ToString());
                    ViewState["freqId"] = freqId;
                }

                if (dr["CalcType"].ToString().Replace(" ", "") == "%AccuracyatPreviouslyLearnedSteps")
                {
                    ruleData.excludeCrntStepMoveDown.iScoreRequired = Convert.ToInt32(dr["ScoreReq"].ToString());
                    ruleData.excludeCrntStepMoveDown.bConsequetiveIndex = Convert.ToBoolean(dr["ConsequetiveInd"].ToString());
                    ruleData.excludeCrntStepMoveDown.bConsecutiveAvg = Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()); //--- [New Criteria] May 2020 ---//
                    if (Convert.ToBoolean(dr["ConsequetiveInd"].ToString()))
                    {
                        ruleData.excludeCrntStepMoveDown.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    }
                    else if (Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()))  //--- [New Criteria] May 2020 - (Start) ---//
                    {
                        ruleData.excludeCrntStepMoveDown.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    } //--- [New Criteria] May 2020 - (End) ---//
                    else
                    {
                        ruleData.excludeCrntStepMoveDown.iTotalCorrectInstance = Convert.ToInt32(dr["TotCorrInstance"].ToString());
                    }
                    ruleData.excludeCrntStepMoveDown.iTotalInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    if (!bIOAReq)
                    {
                        ruleData.excludeCrntStepMoveDown.bIOARequird = Convert.ToBoolean(dr["IOAReqInd"].ToString());
                        //bStepIOA = bIOAReq;
                    }
                    if (!bMultiTeacher)
                    {
                        ruleData.excludeCrntStepMoveDown.bMultiTeacherRequired = Convert.ToBoolean(dr["MultiTeacherReqInd"].ToString());
                    }
                    if (!bIncludeMisTrail)
                    {
                        bIncludeMisTrail = Convert.ToBoolean(dr["IncMisTrialInd"].ToString());
                    }
                }
                if (dr["CalcType"].ToString().Replace(" ", "") == "TotalCorrect")
                {
                    ruleData.pctTotalCorrectMoveDown.iScoreRequired = Convert.ToInt32(dr["ScoreReq"].ToString());
                    ruleData.pctTotalCorrectMoveDown.bConsequetiveIndex = Convert.ToBoolean(dr["ConsequetiveInd"].ToString());
                    ruleData.pctTotalCorrectMoveDown.bConsecutiveAvg = Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()); //--- [New Criteria] May 2020 ---//
                    if (Convert.ToBoolean(dr["ConsequetiveInd"].ToString()))
                    {
                        ruleData.pctTotalCorrectMoveDown.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    }
                    else if (Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()))  //--- [New Criteria] May 2020 - (Start) ---//
                    {
                        ruleData.pctTotalCorrectMoveDown.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    } //--- [New Criteria] May 2020 - (End) ---//
                    else
                    {
                        ruleData.pctTotalCorrectMoveDown.iTotalCorrectInstance = Convert.ToInt32(dr["TotCorrInstance"].ToString());
                    }
                    ruleData.pctTotalCorrectMoveDown.iTotalInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    if (!bIOAReq)
                    {
                        ruleData.pctTotalCorrectMoveDown.bIOARequird = Convert.ToBoolean(dr["IOAReqInd"].ToString());
                        // bPromptIOA = bIOAReq;
                    }
                    if (!bMultiTeacher)
                    {
                        ruleData.pctTotalCorrectMoveDown.bMultiTeacherRequired = Convert.ToBoolean(dr["MultiTeacherReqInd"].ToString());
                    }
                    if (!bIncludeMisTrail)
                    {
                        bIncludeMisTrail = Convert.ToBoolean(dr["IncMisTrialInd"].ToString());
                    }
                }
                if (dr["CalcType"].ToString().Replace(" ", "") == "TotalIncorrect")
                {
                    ruleData.pctTotalIncorrectMoveDown.iScoreRequired = Convert.ToInt32(dr["ScoreReq"].ToString());
                    ruleData.pctTotalIncorrectMoveDown.bConsequetiveIndex = Convert.ToBoolean(dr["ConsequetiveInd"].ToString());
                    ruleData.pctTotalIncorrectMoveDown.bConsecutiveAvg = Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()); //--- [New Criteria] May 2020 ---//
                    if (Convert.ToBoolean(dr["ConsequetiveInd"].ToString()))
                    {
                        ruleData.pctTotalIncorrectMoveDown.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    }
                    else if (Convert.ToBoolean(dr["ConsequetiveAvgInd"].ToString()))  //--- [New Criteria] May 2020 - (Start) ---//
                    {
                        ruleData.pctTotalIncorrectMoveDown.iTotalCorrectInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    } //--- [New Criteria] May 2020 - (End) ---//
                    else
                    {
                        ruleData.pctTotalIncorrectMoveDown.iTotalCorrectInstance = Convert.ToInt32(dr["TotCorrInstance"].ToString());
                    }
                    ruleData.pctTotalIncorrectMoveDown.iTotalInstance = Convert.ToInt32(dr["TotalInstance"].ToString());
                    if (!bIOAReq)
                    {
                        ruleData.pctTotalIncorrectMoveDown.bIOARequird = Convert.ToBoolean(dr["IOAReqInd"].ToString());
                        // bPromptIOA = bIOAReq;
                    }
                    if (!bMultiTeacher)
                    {
                        ruleData.pctTotalIncorrectMoveDown.bMultiTeacherRequired = Convert.ToBoolean(dr["MultiTeacherReqInd"].ToString());
                    }
                    if (!bIncludeMisTrail)
                    {
                        bIncludeMisTrail = Convert.ToBoolean(dr["IncMisTrialInd"].ToString());
                    }
                }

            }
            //ruleData.bIOARequird = bIOAReq;
            //ruleData.bMultiTeacherRequired = bMultiTeacher;
            //DiscreteSession.updateSetStatus(sess.SchoolId,sess.StudentId,tempId, sesResult[0].NextSet.ToString(), sesResult[0].CompletionStatus, sEventType);

        }
        dt = null;
        return ruleData;
    }

    protected Prompt[] GetPrompts(int iTempHdrId)
    {
        oData = new clsData();
        oDS = (clsDataSheet)Session[DatasheetKey];
        if (oDS != null)
        {
            //string where = "";

            //if ((oDS.PromptProc == "Least-to-Most") || (oDS.PromptProc == "Graduated Guidance"))     ///////----------------CHANGE FOR PROMPT ORDER-----------------////////
            //// if (oDS.PromptProc == "Most-to-Least")      //-------------------------------------------------------------------//
            //{
            //    where = "desc";

            //}
            //else
            //{
            //    where = " ";
            //}
            Prompt[] arPrompts = null;
            int index = 0, count = 0;
            string sqlStr = "SELECT lu.LookupName, lu.LookupId FROM LookUp lu INNER JOIN DSTempPrompt DS ON DS.PromptId=lu.LookupId WHERE" +
                " ds.ActiveInd='A' AND DS.DSTempHdrId=" + iTempHdrId + " ORDER BY SortOrder ";
            DataTable dt = oData.ReturnDataTable(sqlStr, false);
            index = 0;
            count = dt.Rows.Count;
            arPrompts = new Prompt[count];
            foreach (DataRow dr in dt.Rows)
            {
                Prompt PromptData = new Prompt();
                PromptData.promptName = dr["LookupName"].ToString();
                PromptData.promptId = Convert.ToInt32(dr["LookupId"]);
                arPrompts[index] = PromptData;
                index++;
            }
            return arPrompts;
        }
        else return null;
    }

    protected void Timer1_Tick(object sender, EventArgs e)
    {
        if (Convert.ToInt32(hfAutoSaveCount.Value) > 0)
        {
            updateDraft(Convert.ToInt32(ViewState["StdtSessHdr"]), "Save");
        }
        ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "stopTimer();", true);
    }


    protected void btnIOA_Click(object sender, EventArgs e)
    {
        oDS = (clsDataSheet)Session[DatasheetKey];
        string sqlStrNor = "";
        int SessNormId = 0;
        if (hfSessIDNorm.Value != "")
        {
            sqlStrNor = "SELECT IOAUserId from stdtsessionhdr where stdtsessionhdrid=" + Convert.ToInt32(hfSessIDNorm.Value);
            SessNormId = Convert.ToInt32(oData.FetchValue(sqlStrNor));
        }
        if (SessNormId != oSession.LoginId)
        {
            if (hfSessIDIOA.Value != "")
            {
                int SessHdrIDIOA = Convert.ToInt32(hfSessIDIOA.Value);
                string UpdateIOA = "UPDATE StdtSessionHdr SET CreatedBy=" + oSession.LoginId + ",IOAUserId=" + oSession.LoginId + " WHERE StdtSessionHdrId=" + SessHdrIDIOA;
                oData.Execute(UpdateIOA);
                ViewState["StdtSessHdr"] = Convert.ToInt32(hfSessIDIOA.Value);
                LoadData(Convert.ToInt32(hfSessIDIOA.Value), true);
            }
            oDS.IOASessHdr = Convert.ToInt32(hfSessIDNorm.Value);
            oDS.IOAInd = "Y";
            btnSubmitAndRepeat1.Visible = false;
            btnSubmitAndRepeat2.Visible = false;
            btnSubmitAndRepeat3.Visible = false;
            btnDiscardDatasheet.Visible = false;
            //generateSheet();
        }
        else
        {
            ScriptManager.RegisterStartupScript(this, this.GetType(), "script", "alert('Same user can not open both Normal session and IOA session.');", true);
            ClientScript.RegisterStartupScript(this.GetType(), "", "showPop(1);", true);
        }

    }
    protected void btnNormal_Click(object sender, EventArgs e)
    {
        oDS = (clsDataSheet)Session[DatasheetKey];
        ViewState["StdtSessHdr"] = Convert.ToInt32(hfSessIDNorm.Value);
        oDS.IOAInd = "N";
        string sqlStrIOA = "";
        int SessIOAId = 0;
        if (hfSessIDNorm.Value != "")
        {
            sqlStrIOA = "SELECT IOAUserId from stdtsessionhdr where stdtsessionhdrid=" + Convert.ToInt32(hfSessIDIOA.Value);
            SessIOAId = Convert.ToInt32(oData.FetchValue(sqlStrIOA));
        }
        if (SessIOAId != oSession.LoginId)
        {
            //generateSheet();
            int SessHdrIDNorm = Convert.ToInt32(hfSessIDNorm.Value);
            string UpdateNorm = "UPDATE StdtSessionHdr SET CreatedBy=" + oSession.LoginId + ",IOAUserId=" + oSession.LoginId + " WHERE StdtSessionHdrId=" + SessHdrIDNorm;
            oData.Execute(UpdateNorm);
            LoadData(Convert.ToInt32(hfSessIDNorm.Value), true);
        }
        else
        {
            ScriptManager.RegisterStartupScript(this, this.GetType(), "script", "alert('Same user can not open both Normal session and IOA session.');", true);
            ClientScript.RegisterStartupScript(this.GetType(), "", "showPop(1);", true);
        }
    }
    protected void btnPriorSessn_Click(object sender, EventArgs e)
    {
        string lpId = "";
        oDS = (clsDataSheet)Session[DatasheetKey];
        if (oDS != null)
            lpId = oTemp.TemplateId.ToString();
        clearOverrideSession(lpId);
        Response.Redirect("DSTempHistory.aspx?LPid=" + oDS.LessonPlanID);
    }
    //protected void grdDataSht_RowDataBound(object sender, GridViewRowEventArgs e)
    //{
    //    oDS = (clsDataSheet)Session[DatasheetKey];
    //    if (e.Row.RowType == DataControlRowType.DataRow)
    //    {
    //        if (oDS != null)
    //        {
    //            CheckBox chkMis = (CheckBox)e.Row.FindControl("chkMistrial");
    //            if (oDS.MisTrail == true) { chkMis.Visible = true; }
    //            else chkMis.Visible = false;

    //            if ((oDS.dtColumns != null) && (oDS.dtColumns.Rows.Count > 0))
    //            {
    //                foreach (DataRow dr in oDS.dtColumns.Rows)
    //                {
    //                    if (dr["ColTypeCd"].ToString() == "Text")
    //                    {
    //                        TextBox txtText = (TextBox)e.Row.FindControl("txtText_" + dr["DSTempSetColId"].ToString());
    //                        if (txtText.Enabled == true)
    //                        {
    //                            txtText.TextChanged += new EventHandler(txtText_TextChanged);
    //                        }
    //                    }
    //                }
    //            }
    //        }
    //    }
    //}

    protected void grdDataSht_RowDataBound(object sender, GridViewRowEventArgs e)
    {


        oDS = (clsDataSheet)Session[DatasheetKey];
        try
        {
            if (e.Row.RowType == DataControlRowType.DataRow)
            {
                if (oDS != null)
                {
                    if (oDS.ChainType == "Total Task")
                    {
                        CheckBox chkMis = (CheckBox)e.Row.FindControl("chkMistrial");
                        if (oDS.MisTrail == true) { chkMis.Visible = true; }
                        else chkMis.Visible = false;

                        if ((oDS.dtColumns != null) && (oDS.dtColumns.Rows.Count > 0))
                        {
                            foreach (DataRow dr in oDS.dtColumns.Rows)
                            {
                                if (dr["ColTypeCd"].ToString() == "Text")
                                {
                                    TextBox txtText = (TextBox)e.Row.FindControl("txtText_" + dr["DSTempSetColId"].ToString());
                                    if (txtText.Enabled == true)
                                    {

                                        if (getFormulae(dr["DSTempSetColId"].ToString()) != "")
                                        {
                                            txtText.TextChanged += new EventHandler(txtText_TextChanged);
                                        }
                                        else
                                        {
                                            txtText.Attributes.Remove("onchange");
                                            txtText.AutoPostBack = false;
                                        }

                                    }
                                }
                            }
                        }
                    }
                    else if (hfProbe.Value == "Probe")
                    {
                        CheckBox chkMis = (CheckBox)e.Row.FindControl("chkMistrial");
                        if (oDS.MisTrail == true) { chkMis.Visible = true; }
                        else chkMis.Visible = false;

                        if ((oDS.dtColumns != null) && (oDS.dtColumns.Rows.Count > 0))
                        {
                            foreach (DataRow dr in oDS.dtColumns.Rows)
                            {
                                if (dr["ColTypeCd"].ToString() == "Text")
                                {
                                    TextBox txtText = (TextBox)e.Row.FindControl("txtText_" + dr["DSTempSetColId"].ToString());
                                    if (txtText.Enabled == true)
                                    {

                                        if (getFormulae(dr["DSTempSetColId"].ToString()) != "")
                                        {
                                            txtText.TextChanged += new EventHandler(txtText_TextChanged);
                                        }
                                        else
                                        {
                                            txtText.Attributes.Remove("onchange");
                                            txtText.AutoPostBack = false;
                                        }

                                    }
                                }
                            }
                        }
                    }
                    else if (oDS.SkillType == "Chained")
                    {
                        HiddenField hfSetId = (HiddenField)e.Row.FindControl("hfStepID");
                        if (oDS.CrntStep < Convert.ToInt32(hfSetId.Value))
                        {
                            CheckBox chkMis = (CheckBox)e.Row.FindControl("chkMistrial");
                            if (oDS.MisTrail == true) { chkMis.Visible = true; }
                            else chkMis.Visible = false;

                            chkMis.Enabled = false;
                            if ((oDS.dtColumns != null) && (oDS.dtColumns.Rows.Count > 0))
                            {
                                foreach (DataRow dr in oDS.dtColumns.Rows)
                                {
                                    string sortNum1;
                                    string strQuery1;
                                    strQuery1 = "select (Select sortorder from DSTempSet where DSTempSetId=NextSetId) FROM StdtDSStat Where   DSTempHdrId in (select DSTempHdrId  from DSTempSetCol where DSTempSetColId=" + dr["DSTempSetColId"].ToString() + ")";
                                    sortNum1 = oData.FetchValue(strQuery1).ToString();

                                    if (dr["ColTypeCd"].ToString() == "Text")
                                    {
                                        TextBox txtText = (TextBox)e.Row.FindControl("txtText_" + dr["DSTempSetColId"].ToString());
                                        txtText.Enabled = false;

                                        if (oDS.CrntSetNbr < Convert.ToInt32(sortNum1))
                                        {
                                            txtText.Enabled = true;
                                        }
                                    }//txtDuratn_
                                    if (dr["ColTypeCd"].ToString() == "Duration")
                                    {
                                        HtmlInputText txtText = (HtmlInputText)e.Row.FindControl("txtDuratn_" + dr["DSTempSetColId"].ToString());
                                        txtText.Disabled = true;
                                        HtmlInputButton btnText = (HtmlInputButton)e.Row.FindControl("btnDuration_" + dr["DSTempSetColId"].ToString());
                                        btnText.Disabled = true;

                                        HtmlInputText txtHr = (HtmlInputText)e.Row.FindControl("txtHrDuratn_" + dr["DSTempSetColId"].ToString());
                                        HtmlInputText txtMin = (HtmlInputText)e.Row.FindControl("txtMinDuratn_" + dr["DSTempSetColId"].ToString());
                                        HtmlInputText txtSec = (HtmlInputText)e.Row.FindControl("txtSecDuratn_" + dr["DSTempSetColId"].ToString());
                                        txtHr.Disabled = true;
                                        txtMin.Disabled = true;
                                        txtSec.Disabled = true;
                                        HtmlInputButton btnEdit = (HtmlInputButton)e.Row.FindControl("btnEditDuration_" + dr["DSTempSetColId"].ToString());
                                        btnEdit.Disabled = true;
                                        HtmlInputText txtTimerId = (HtmlInputText)e.Row.FindControl("txtTimerId_" + dr["DSTempSetColId"].ToString());


                                        if (oDS.CrntSetNbr < Convert.ToInt32(sortNum1))
                                        {
                                            txtText.Disabled = false;
                                            btnText.Disabled = false;

                                            txtHr.Disabled = false;
                                            txtMin.Disabled = false;
                                            txtSec.Disabled = false;
                                            btnEdit.Disabled = false;
                                            txtTimerId.Disabled = false;
                                        }

                                    }
                                    if (dr["ColTypeCd"].ToString() == "Frequency")
                                    {
                                        TextBox txtText = (TextBox)e.Row.FindControl("txtFrequency_" + dr["DSTempSetColId"].ToString());
                                        txtText.Enabled = false;

                                        if (oDS.CrntSetNbr < Convert.ToInt32(sortNum1))
                                        {
                                            txtText.Enabled = true;
                                        }

                                    }
                                    if (dr["ColTypeCd"].ToString() == "Prompt")
                                    {
                                        DropDownList ddlText = (DropDownList)e.Row.FindControl("ddlPrompt_" + dr["DSTempSetColId"].ToString());
                                        ddlText.Enabled = false;

                                        if (oDS.CrntSetNbr < Convert.ToInt32(sortNum1))
                                        {
                                            ddlText.Enabled = true;
                                        }

                                    }
                                    if (dr["ColTypeCd"].ToString() == "+/-")
                                    {
                                        HtmlInputRadioButton rdbRespplus = (HtmlInputRadioButton)e.Row.FindControl("rdbRespPlus_" + dr["DSTempSetColId"].ToString());
                                        HtmlInputRadioButton rdbRespminus = (HtmlInputRadioButton)e.Row.FindControl("rdbRespMinus_" + dr["DSTempSetColId"].ToString());
                                        if (rdbRespplus != null && rdbRespminus != null)
                                        {
                                            rdbRespminus.Disabled = true;
                                            rdbRespplus.Disabled = true;
                                        }

                                        if (oDS.CrntSetNbr < Convert.ToInt32(sortNum1))
                                        {
                                            rdbRespminus.Disabled = false;
                                            rdbRespplus.Disabled = false;
                                        }
                                    }
                                }
                            }

                            TextBox txtMessage = (TextBox)e.Row.FindControl("txtStepNotes");
                            txtMessage.Enabled = false;

                        }
                        else
                        {
                            CheckBox chkMis = (CheckBox)e.Row.FindControl("chkMistrial");
                            if (oDS.MisTrail == true) { chkMis.Visible = true; }
                            else chkMis.Visible = false;

                            if ((oDS.dtColumns != null) && (oDS.dtColumns.Rows.Count > 0))
                            {
                                foreach (DataRow dr in oDS.dtColumns.Rows)
                                {
                                    if (dr["ColTypeCd"].ToString() == "Text")
                                    {
                                        TextBox txtText = (TextBox)e.Row.FindControl("txtText_" + dr["DSTempSetColId"].ToString());
                                        if (txtText.Enabled == true)
                                        {
                                            if (getFormulae(dr["DSTempSetColId"].ToString()) != "")
                                            {
                                                txtText.TextChanged += new EventHandler(txtText_TextChanged);
                                                //txtText.AutoPostBack = true;
                                                //txtText.CausesValidation = false;
                                            }
                                            else
                                            {
                                                txtText.Attributes.Remove("onchange");
                                                txtText.AutoPostBack = false;
                                            }

                                        }
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        CheckBox chkMis = (CheckBox)e.Row.FindControl("chkMistrial");
                        if (oDS.MisTrail == true) { chkMis.Visible = true; }
                        else chkMis.Visible = false;

                        if ((oDS.dtColumns != null) && (oDS.dtColumns.Rows.Count > 0))
                        {
                            foreach (DataRow dr in oDS.dtColumns.Rows)
                            {
                                if (dr["ColTypeCd"].ToString() == "Text")
                                {
                                    TextBox txtText = (TextBox)e.Row.FindControl("txtText_" + dr["DSTempSetColId"].ToString());
                                    if (txtText.Enabled == true)
                                    {

                                        if (getFormulae(dr["DSTempSetColId"].ToString()) != "")
                                        {
                                            txtText.TextChanged += new EventHandler(txtText_TextChanged);
                                        }
                                        else
                                        {
                                            txtText.Attributes.Remove("onchange");
                                            txtText.AutoPostBack = false;
                                        }

                                    }
                                }
                            }
                        }
                    }

                }
            }

            e.Row.Cells[(grdDataSht.Columns.Count) - 2].Style.Add("display", "none");// Visible = false;
        }
        catch (Exception Ex)
        {
            throw Ex;
        }
    }




    //protected void ImgBtn_Inactive_Click1(object sender, ImageClickEventArgs e)
    //{
    //    oData = new clsData();
    //    oTemp = (ClsTemplateSession)Session["BiweeklySession"];
    //    if (oTemp != null)
    //    {
    //        oSession = (clsSession)HttpContext.Current.Session["UserSession"];
    //        if (oSession != null)
    //        {
    //            oDS = (clsDataSheet)Session[DatasheetKey];
    //            if (oDS != null)
    //            {
    //                string strQuery = "INSERT INTO StdtSessEvent(SchoolId,ClassId,StudentId,DSTempHdrId,EventName,StdtSessEventType,EvntTs,SessionNbr,EventType,CreatedBy,CreatedOn)VALUES" +
    //               "(" + oSession.SchoolId + "," + oSession.Classid + "," + oSession.StudentId + "," + oTemp.TemplateId + ",(SELECT LP.LessonPlanName FROM DSTempHdr HDR INNER JOIN LessonPlan LP ON HDR.LessonPlanId=LP.LessonPlanId WHERE HDR.DSTempHdrId='" + oTemp.TemplateId + "'),'INACTIVE',GETDATE()," + oDS.SessNbr + ",'EV'," + oSession.LoginId + ",GETDATE())";
    //                int rtrnVal = oData.Execute(strQuery);
    //                if (rtrnVal > 0)
    //                {
    //                    strQuery = "SELECT LookupId from Lookup where LookupType='TemplateStatus' and LookupName='Inactive'";
    //                    int statusId = oData.Execute(strQuery);
    //                    string updQry = "UPDATE DSTempHdr SET DSMode='INACTIVE',StatusId=" + statusId + ",ModifiedBy=" + oSession.LoginId + ",ModifiedOn=GETDATE() WHERE DSTempHdrId=" + oTemp.TemplateId;
    //                    oData.Execute(updQry);
    //                    ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "refreshPage();", true);

    //                }
    //            }
    //        }
    //    }
    //}
    protected void btnExecute_Click(object sender, EventArgs e)
    {
        oDS = (clsDataSheet)Session[DatasheetKey];
        oData = new clsData();
        if (oDS != null)
        {
            Session["setvalue"] = oData.FetchValue("SELECT VTSetId FROM DSTempSet WHERE DSTempSetId=" + oDS.CrntSet);
            Session["VTLessonId"] = oDS.VTLessonId;

            if (Session["VTLessonId"] != null) { Page.ClientScript.RegisterStartupScript(this.GetType(), "OpenWindow", "window.open('../VisualTool/TeachPage_Redirecting.aspx','_top');", true); }
            // Response.Redirect("~/VisualTool/TeachPage_Redirecting.aspx");

        }
    }
    protected void btnProbe_Click(object sender, EventArgs e)
    {
        clsData objData = new clsData();
        oSession = (clsSession)HttpContext.Current.Session["UserSession"];
        if (oSession != null)
        {
            oTemp = (ClsTemplateSession)Session["BiweeklySession"];
            if (oTemp != null)
            {
                oDS = (clsDataSheet)Session[DatasheetKey];
                if (oDS != null)
                {
                    string strQuery = "INSERT INTO StdtSessEvent(SchoolId,ClassId,StudentId,EventName,DSTempHdrId,LessonPlanId,StdtSessEventType,EvntTs,SessionNbr,EventType)VALUES" +
                       "(" + oSession.SchoolId + "," + oSession.Classid + "," + oSession.StudentId + ",'ProbeMode'," + oTemp.TemplateId + ",(SELECT LessonPlanId FROM DSTempHdr WHERE DSTempHdrId=" + oTemp.TemplateId + "),'Minor',GETDATE()," + oDS.SessNbr + ",'EV')";
                    objData.ExecuteWithScope(strQuery);
                }
            }
        }
    }
    protected void grdDataSht_RowDeleting(object sender, GridViewDeleteEventArgs e)
    {

    }

    protected void btnMistrial_Click(object sender, EventArgs e)
    {
        //oSession = (clsSession)HttpContext.Current.Session["UserSession"];
        //if (oSession != null)
        //{
        //    oTemp = (ClsTemplateSession)Session["BiweeklySession"];
        //    if (oTemp != null)
        //    {
        //        oDS = (clsDataSheet)Session[DatasheetKey];
        //        if (oDS != null)
        //        {
        //oDS.SessionMistrial = true;
        //Session[DatasheetKey] = oDS;
        //        }
        //    }
        //}
    }

    protected void grdFile_RowEditing(object sender, GridViewEditEventArgs e)
    {
        e.Cancel = true;
        e.NewEditIndex = -1;
        grdFile.DataBind();
    }
    protected void FillDoc(int templateId)
    {
        oData = new clsData();
        string strQuery = "";
        strQuery = "Select ROW_NUMBER() OVER (ORDER BY LPDoc) AS No,DocURL as Document, LPDoc FROM LPDoc Where DocURL<>'' And DSTempHdrId = " + templateId + "";
        DataTable Dt = oData.ReturnDataTable(strQuery, false);

        if (Dt != null)
        {
            if (Dt.Rows.Count > 0)
            {
                Dt.Columns.Add("Name", typeof(string));


                for (int i = 0; i < Dt.Rows.Count; i++)
                {
                    string name = Dt.Rows[i]["Document"].ToString();
                    string[] ext = name.Split('.');
                    string ext_name = ext[1];
                    if (name != "")
                    {
                        if (name.Length > 50)
                        {
                            name = name.Substring(0, 30) + "....";
                            name += ext_name;
                        }
                    }
                    Dt.Rows[i]["Name"] = name;
                }
                grdFile.DataSource = Dt;
                grdFile.DataBind();
            }
            else
                divMessage.InnerHtml = clsGeneral.warningMsg("No Documents Found");
        }

        // else
        //    divMessage.InnerHtml = clsGeneral.warningMsg("No Documents Found");

    }

    protected void grdFile_PageIndexChanging(object sender, GridViewPageEventArgs e)
    {
        grdFile.PageIndex = e.NewPageIndex;
        int headerid = Convert.ToInt32(ViewState["HeaderId"]);
        FillDoc(headerid);
    }
    protected void Dismissbtn(object sender, EventArgs e)
    {
        banner.Visible = false;
        string updQrybnr = "UPDATE DSTempHdr SET Bannerstatus=0 WHERE StudentId= " + oSession.StudentId + " AND DSTempHdrId=" + oTemp.TemplateId;
        oData.Execute(updQrybnr);
    }
    protected void LessonBannerDismissBtn(object sender, EventArgs e)
    {
        LessonBanner.Visible = false;
        string updQrybnr = "UPDATE DSTempHdr SET LessonStatusforBanner='' WHERE StudentId= " + oSession.StudentId + " AND DSTempHdrId=" + oTemp.TemplateId;
        oData.Execute(updQrybnr);
    }
    protected void grdFile_RowCommand(object sender, GridViewCommandEventArgs e)
    {
        try
        {
            string file = Convert.ToString(e.CommandArgument);
            oData = new clsData();
            if (e.CommandName == "download")
            {
                try
                {
                    HttpContext context = HttpContext.Current;
                    context.Response.Clear();
                    HttpResponse Response = HttpContext.Current.Response;
                    Response.Clear();
                    Response.ClearContent();
                    Response.ClearHeaders();
                    Response.Buffer = true;
                    Byte[] data = (Byte[])oData.FetchValue("SELECT Data FROM binaryFiles WHERE DocId='" + file + "' AND type='LP_DOC' ");
                    string docURL = Convert.ToString(oData.FetchValue("SELECT DocURL FROM LPDoc WHERE LPDoc='" + file + "'"));
                    string contentType = GetContentType(System.IO.Path.GetExtension(docURL).ToLower().ToString());
                    Response.AddHeader("Content-type", contentType);
                    Response.AddHeader("Content-Disposition", "attachment; filename=" + docURL);
                    Response.BinaryWrite(data);
                    Response.Flush();
                    Response.End();

                }
                catch (Exception ex)
                {
                }
                // DownloadFile(file);
            }

            //ScriptManager.RegisterClientScriptBlock(this, typeof(System.Web.UI.Page), Guid.NewGuid().ToString(), "$(document).ready(function(){popPrompts();});", true);

        }
        catch (Exception Ex)
        {
            throw Ex;
        }
    }
    protected string GetContentType(string extension)
    {
        string ContentType = "";
        switch (extension)
        {
            case ".txt":
                ContentType = "text/plain";
                break;
            case ".doc":
                ContentType = "application/msword";
                break;
            case ".docx":
                ContentType = "application/vnd.openxmlformats-officedocument.wordprocessingml.document";
                break;
            case ".pdf":
                ContentType = "application/pdf";
                break;
            case ".xls":
                ContentType = "application/vnd.ms-excel";
                break;
            case ".xlsx":
                ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                break;
            case ".csv":
                ContentType = "application/vnd.ms-excel";
                break;
        }
        return ContentType;
    }
    public void deltDoccuments(string fileName)
    {
        string strQuerry = "";
        try
        {
            oData = new clsData();
            clsSession sess = (clsSession)Session["UserSession"];
            strQuerry = "DELETE FROM LPDoc WHERE  LPDoc = '" + fileName + "' ";
            oData.Execute(strQuerry);
            strQuerry = "DELETE FROM binaryFiles WHERE  DocId = '" + fileName + "' AND type='LP_DOC' ";
            oData.Execute(strQuerry);
        }
        catch (Exception Ex)
        {
            throw Ex;
        }
    }
    protected void grdFile_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        try
        {
            if (e.Row.RowType == DataControlRowType.DataRow)
            {
                LinkButton lbn = e.Row.FindControl("lnkDownload") as LinkButton;
                ScriptManager.GetCurrent(this).RegisterPostBackControl(lbn);
            }
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }


    protected void ImgBtn_Inactive_Click(object sender, EventArgs e)
    {
        oData = new clsData();
        oTemp = (ClsTemplateSession)Session["BiweeklySession"];
        if (oTemp != null)
        {
            oSession = (clsSession)HttpContext.Current.Session["UserSession"];
            if (oSession != null)
            {
                oDS = (clsDataSheet)Session[DatasheetKey];
                if (oDS != null)
                {
                    string strQuery = "INSERT INTO StdtSessEvent(SchoolId,ClassId,StudentId,DSTempHdrId,EventName,StdtSessEventType,EvntTs,SessionNbr,EventType,CreatedBy,CreatedOn)VALUES" +
                   "(" + oSession.SchoolId + "," + oSession.Classid + "," + oSession.StudentId + "," + oTemp.TemplateId + ",(SELECT LP.LessonPlanName FROM DSTempHdr HDR INNER JOIN LessonPlan LP ON HDR.LessonPlanId=LP.LessonPlanId WHERE HDR.DSTempHdrId='" + oTemp.TemplateId + "'),'INACTIVE',GETDATE()," + oDS.SessNbr + ",'EV'," + oSession.LoginId + ",GETDATE())";
                    int rtrnVal = oData.Execute(strQuery);
                    if (rtrnVal > 0)
                    {
                        strQuery = "SELECT LookupId from Lookup where LookupType='TemplateStatus' and LookupName='Inactive'";
                        int statusId = Convert.ToInt32(oData.FetchValue(strQuery));
                        string updQry = "UPDATE DSTempHdr SET DSMode='INACTIVE',StatusId=" + statusId + ",ModifiedBy=" + oSession.LoginId + ",ModifiedOn=GETDATE() WHERE DSTempHdrId=" + oTemp.TemplateId;
                        oData.Execute(updQry);
                        ScriptManager.RegisterStartupScript(this, this.GetType(), "closewindow", "closeIframe(" + oSession.StudentId + ");", true);
                    }
                }
            }
        }
    }


    public void loadSetsOverride()
    {

        int iCurrentSetId = 0;

        SqlDataReader reader = null;
        string strQry = " SELECT Hdr.SkillType, ISNULL(MAX(NextSetId),0) NextSetId,ISNULL(MAX(NextSetNmbr),0) NextSetNmbr " +
                 " ,ISNULL(MAX(NextStepId),0)NextStepId,ISNULL(MAX(NextPromptId),0)NextPromptId" +
                 " FROM DSTempHdr Hdr LEFT JOIN StdtDSStat Stat  ON Hdr.DSTempHdrId = Stat.DSTempHdrId " +
                  " WHERE Hdr.DSTempHdrId= " + oTemp.TemplateId + " GROUP BY Hdr.SkillType ";

        reader = oData.ReturnDataReader(strQry, false);
        if (reader.Read())
        {

            Session["iCurrentSetId"] = Convert.ToInt32(reader["NextSetId"]);
            Session["iCurrentStep"] = Convert.ToInt32(reader["NextStepId"]);
            string sCurrentPrompt = reader["NextPromptId"].ToString();
            if (!String.IsNullOrEmpty(sCurrentPrompt))
                Session["sCurrentPrompt"] = Convert.ToInt32(sCurrentPrompt);

        }
        reader.Close();
        if (Session["iCurrentSetId"] != null && Session["iCurrentSetId"] != "")
        {

            iCurrentSetId = Convert.ToInt32(Session["iCurrentSetId"]);
            hdnRadBtnSet.Value = iCurrentSetId.ToString();
        }
        oData = new clsData();
        oTemp = (ClsTemplateSession)Session["BiweeklySession"];
        if (oTemp != null)
        {
            oSession = (clsSession)HttpContext.Current.Session["UserSession"];
            if (oSession != null)
            {

                string sqlStr = "select DSTempSetId,SetCd,SetName,SortOrder from DSTempSet where DSTempHdrId=" + oTemp.TemplateId + " AND ActiveInd = 'A' order by SortOrder";
                DataSet ds = oData.ReturnDataSet(sqlStr, false);
                RadioButtonListSets.DataSource = ds;
                RadioButtonListSets.DataTextField = "SetCd";
                RadioButtonListSets.DataValueField = "DSTempSetId";
                RadioButtonListSets.DataBind();

                RadioButtonListSets_tt.DataSource = ds;
                RadioButtonListSets_tt.DataTextField = "SetCd";
                RadioButtonListSets_tt.DataValueField = "DSTempSetId";
                RadioButtonListSets_tt.DataBind();

                rptr_ListSets.DataSource = ds;
                rptr_ListSets.DataBind();



            }
        }
        if (iCurrentSetId > 0)
        {
            for (int i = 0; i < RadioButtonListSets.Items.Count; i++)
            {
                if (Convert.ToInt32(RadioButtonListSets.Items[i].Value) == iCurrentSetId)
                {
                    RadioButtonListSets.Items[i].Selected = true;
                    RadioButtonListSets_tt.Items[i].Selected = true;
                    loadStepOverrid(iCurrentSetId);
                }
            }

        }

        loadPromptOverrid();

    }

    private DataTable fn_getStepList(int setid)
    {

        string sqlStr = "SELECT ChainType,TotalTaskType FROM DSTempHdr where DSTempHdrId=" + oTemp.TemplateId;
        DataTable dataT = oData.ReturnDataTable(sqlStr, false);

        string type = dataT.Rows[0]["ChainType"].ToString();
        string totalTasktype = dataT.Rows[0]["TotalTaskType"].ToString();

        if (totalTasktype != "1")
        {
            ///UPDATE SORTORDER OF DSTempStep
            ///
            string selQuerry = "";
            string updateQry = "";
            int serial = 0;
            selQuerry = "SELECT COUNT(DSTempStepId) FROM DSTempStep WHERE DSTempHdrId=" + oTemp.TemplateId + " and DSTempSetId=" + setid + "  and ActiveInd = 'A' AND IsDynamic=0 AND SortOrder IS NOT NULL";
            int countID = Convert.ToInt32(oData.FetchValue(selQuerry));
            if (countID == 0)
            {
                selQuerry = "SELECT DSTempStepId, ROW_NUMBER() Over (Order by DSTempHdrId, SortOrder) As [Sln],SortOrder FROM DSTempStep WHERE DSTempHdrId=" + oTemp.TemplateId + " and DSTempSetId=" + setid + "  and ActiveInd = 'A' " +
                    "AND IsDynamic=0 AND SortOrder IS NULL ORDER BY DSTempHdrId, SortOrder";
                DataTable dtList = oData.ReturnDataTable(selQuerry, false);
                if (dtList.Rows.Count > 0)
                {
                    foreach (DataRow dr in dtList.Rows)
                    {
                        serial = Convert.ToInt32(dr["Sln"].ToString());
                        updateQry = "UPDATE DSTempStep SET SortOrder=" + serial + " WHERE DSTempStepId=" + Convert.ToInt32(dr["DSTempStepId"].ToString());
                        oData.Execute(updateQry);

                    }
                }
            }
            sqlStr = "select DSTempHdrId,DSTempStepId,StepCd,StepName,SortOrder from DSTempStep where DSTempHdrId=" + oTemp.TemplateId + " and DSTempSetId=" + setid + "  and ActiveInd = 'A' AND IsDynamic=0 order by SortOrder";
        }
        else
        {
            sqlStr = "select dsts.DSTempHdrId,dsts.DSTempStepId,dsts.StepCd,dsts.StepName,dsts.SortOrder, sdsss.PromptId from DSTempStep as dsts LEFT JOIN StdtDSStepStat sdsss on dsts.DSTempStepId = sdsss.DSTempStepId where dsts.DSTempHdrId=" + oTemp.TemplateId + " AND IsDynamic=0 and dsts.DSTempSetId=" + setid + "  and dsts.ActiveInd = 'A' order by dsts.SortOrder";
        }
        if (type == "Backward chain")
        {
            if (totalTasktype != "1")
            {
                sqlStr = "SELECT [DSTempStepId],[StepCd],[StepName],RANK() OVER(ORDER BY SortOrder ASC) as StepId,SortOrder  FROM [dbo].[DSTempStep] " +
                         "WHERE DSTempHdrId=" + oTemp.TemplateId + " AND  DsTempSetId=" + setid + "  AND ActiveInd='A' AND IsDynamic=0 ORDER BY [SortOrder] DESC";
            }
            else
            {

                sqlStr = "SELECT dsts.DSTempStepId,dsts.StepCd,dsts.StepName,RANK() OVER(ORDER BY dsts.SortOrder ASC) as StepId,dsts.SortOrder, sdsss.PromptId " +
                         "FROM [DSTempStep] as dsts LEFT JOIN StdtDSStepStat sdsss ON dsts.DSTempStepId = sdsss.DSTempStepId " +
                         "WHERE dsts.DSTempHdrId= " + oTemp.TemplateId + " AND  dsts.DsTempSetId=" + setid + "  AND dsts.ActiveInd='A' AND IsDynamic=0 ORDER BY dsts.SortOrder DESC";
            }
        }
        DataTable dt = oData.ReturnDataTable(sqlStr, false);

        return dt;
    }

    private void loadStepOverrid(int setid)
    {
        int iCurrentStep = 0;
        if (Session["iCurrentStep"] != null && Session["iCurrentStep"] != "")
        {
            iCurrentStep = Convert.ToInt32(Session["iCurrentStep"]);
            hdnRadBtnStep.Value = iCurrentStep.ToString();
        }
        oData = new clsData();
        oTemp = (ClsTemplateSession)Session["BiweeklySession"];
        string type = "";
        if (oTemp != null)
        {
            oSession = (clsSession)HttpContext.Current.Session["UserSession"];
            if (oSession != null)
            {
                string sqlStr = "SELECT ChainType,TotalTaskType FROM DSTempHdr where DSTempHdrId=" + oTemp.TemplateId;
                DataTable dataT = oData.ReturnDataTable(sqlStr, false);

                type = dataT.Rows[0]["ChainType"].ToString();
                string totalTasktype = dataT.Rows[0]["TotalTaskType"].ToString();

                //if (totalTasktype == "1") {
                //    totalTaskOverride.Visible = true;
                //    normalOverride.Visible = false;
                //}
                //if (totalTasktype == "2") {
                //    totalTaskOverride.Visible = false;
                //    normalOverride.Visible = true;
                //}
                if (totalTasktype != "1")
                {
                    sqlStr = "select DSTempHdrId,DSTempStepId,StepCd,StepName,SortOrder from DSTempStep where DSTempHdrId=" + oTemp.TemplateId + " and DSTempSetId=" + setid + " and ActiveInd = 'A' AND IsDynamic=0 order by SortOrder";

                    //sqlStr = "select DSTempHdrId,DSTempStepId,StepCd,StepName,SortOrder from DSTempStep where DSTempHdrId=" + oTemp.TemplateId + " and (DSTempSetId=" + setid + " OR DSTempSetId=0) and ActiveInd = 'A' order by SortOrder";
                }
                else
                {
                    sqlStr = "select dsts.DSTempHdrId,dsts.DSTempStepId,dsts.StepCd,dsts.StepName,dsts.SortOrder, sdsss.PromptId from DSTempStep as dsts LEFT JOIN StdtDSStepStat sdsss on dsts.DSTempStepId = sdsss.DSTempStepId where dsts.DSTempHdrId=" + oTemp.TemplateId + " and dsts.DSTempSetId=" + setid + " and dsts.ActiveInd = 'A' AND IsDynamic=0 order by dsts.SortOrder";

                    //sqlStr = "select dsts.DSTempHdrId,dsts.DSTempStepId,dsts.StepCd,dsts.StepName,dsts.SortOrder, sdsss.PromptId from DSTempStep as dsts LEFT JOIN StdtDSStepStat sdsss on dsts.DSTempStepId = sdsss.DSTempStepId where dsts.DSTempHdrId=" + oTemp.TemplateId + " and (dsts.DSTempSetId=" + setid + " OR dsts.DSTempSetId=0) and dsts.ActiveInd = 'A' order by dsts.SortOrder";
                }
                if (type == "Backward chain")
                {
                    if (totalTasktype != "1")
                    {
                        //sqlStr = "SELECT [DSTempHdrId],[DSTempStepId],[StepCd],[StepName],RANK() OVER(ORDER BY SortOrder ASC) as StepId  FROM [dbo].[DSTempStep] " +
                        //         "WHERE DSTempHdrId=" + oTemp.TemplateId + " AND (DsTempSetId=0 OR DsTempSetId=" + setid + ") AND ActiveInd='A' ORDER BY [SortOrder] DESC";
                        sqlStr = "SELECT [DSTempHdrId],[DSTempStepId],[StepCd],[StepName],RANK() OVER(ORDER BY SortOrder ASC) as StepId  FROM [dbo].[DSTempStep] " +
                                 "WHERE DSTempHdrId=" + oTemp.TemplateId + " AND DsTempSetId=" + setid + " AND ActiveInd='A' AND IsDynamic=0 ORDER BY [SortOrder] DESC";

                    }
                    else
                    {
                        //sqlStr = "SELECT dsts.DSTempHdrId,dsts.DSTempStepId,dsts.StepCd,dsts.StepName,RANK() OVER(ORDER BY dsts.SortOrder ASC) as StepId,dsts.SortOrder, sdsss.PromptId " +
                        //         "FROM [DSTempStep] as dsts LEFT JOIN StdtDSStepStat sdsss ON dsts.DSTempStepId = sdsss.DSTempStepId " +
                        //         "WHERE dsts.DSTempHdrId= " + oTemp.TemplateId + " AND (dsts.DsTempSetId=0 OR dsts.DsTempSetId=" + setid + ") AND dsts.ActiveInd='A' ORDER BY dsts.SortOrder DESC";

                        sqlStr = "SELECT dsts.DSTempHdrId,dsts.DSTempStepId,dsts.StepCd,dsts.StepName,RANK() OVER(ORDER BY dsts.SortOrder ASC) as StepId,dsts.SortOrder, sdsss.PromptId " +
                                 "FROM [DSTempStep] as dsts LEFT JOIN StdtDSStepStat sdsss ON dsts.DSTempStepId = sdsss.DSTempStepId " +
                                 "WHERE dsts.DSTempHdrId= " + oTemp.TemplateId + " AND dsts.DsTempSetId=" + setid + " AND dsts.ActiveInd='A' AND IsDynamic=0 ORDER BY dsts.SortOrder DESC";
                    }
                }
                DataTable dt = oData.ReturnDataTable(sqlStr, false);
                // DataSet ds = oData.ReturnDataSet(sqlStr, false);

                foreach (DataRow dr in dt.Rows)
                {
                    if (dr["StepCd"].ToString() != "" && dr["StepCd"].ToString() != null)
                    {
                        if (totalTasktype != "1")
                        {
                            RadioButtonListSteps.DataSource = dt;
                            RadioButtonListSteps.DataTextField = "StepCd";
                            RadioButtonListSteps.DataValueField = "DSTempStepId";
                            RadioButtonListSteps.DataBind();
                        }
                        else
                        {

                            rptr_listStep.DataSource = dt;
                            rptr_listStep.DataBind();
                        }

                    }
                }
                if (dt.Rows.Count == 0)
                {
                    RadioButtonListSteps.Items.Clear();
                    rptr_listStep.DataSource = null;
                    rptr_listStep.DataBind();

                }
            }
        }

        if (iCurrentStep > 0)
        {
            if (type == "Backward chain")
            {
                string sqlStr1 = "select ROW_NUMBER() OVER(ORDER BY SortOrder desc) as numRow,SortOrder from DSTempStep where DSTempHdrId=" + oTemp.TemplateId + " "
                                        + "and DSTempSetId=" + setid + " AND IsDynamic=0 ORDER BY SortOrder";
                DataTable dt = oData.ReturnDataTable(sqlStr1, false);
                foreach (DataRow dr in dt.Rows)
                {
                    if (dr["numRow"].ToString() == "" + iCurrentStep)
                    {
                        iCurrentStep = Convert.ToInt32(dr["SortOrder"]);
                        break;
                    }
                }
                //iCurrentStep = (RadioButtonListSteps.Items.Count - iCurrentStep) + 1;
            }
            else
            {
                string sqlStr1 = "select ROW_NUMBER() OVER(ORDER BY SortOrder ) as numRow,SortOrder from DSTempStep where DSTempHdrId=" + oTemp.TemplateId + " "
                                        + "and DSTempSetId=" + setid + " AND IsDynamic=0 ORDER BY SortOrder desc";
                DataTable dt = oData.ReturnDataTable(sqlStr1, false);
                foreach (DataRow dr in dt.Rows)
                {
                    if (dr["numRow"].ToString() == "" + iCurrentStep)
                    {
                        iCurrentStep = Convert.ToInt32(dr["SortOrder"]);
                        break;
                    }
                }
            }
            string sqlStr = "select DSTempStepId from DSTempStep where DSTempHdrId=" + oTemp.TemplateId + " "
                + "and DSTempSetId=" + setid + " and SortOrder=" + iCurrentStep + " AND IsDynamic=0 order by SortOrder";
            iCurrentStep = Convert.ToInt32(oData.FetchValue(sqlStr));
            for (int i = 0; i < RadioButtonListSteps.Items.Count; i++)
            {
                if (Convert.ToInt32(RadioButtonListSteps.Items[i].Value) == iCurrentStep)
                {
                    RadioButtonListSteps.Items[i].Selected = true;

                }
            }

        }
        else
        {
            if (RadioButtonListSteps.Items.Count > 0)
            {
                RadioButtonListSteps.Items[0].Selected = true;
            }
        }


    }

    private void loadPromptOverrid()
    {
        int iCurrentPrompt = 0;
        string sqlStr = "";
        string type = "";
        oTemp = (ClsTemplateSession)Session["BiweeklySession"];
        if (Session["sCurrentPrompt"] != null && Session["sCurrentPrompt"] != "")
        {
            iCurrentPrompt = Convert.ToInt32(Session["sCurrentPrompt"]);
            hdnRadBtnPrompt.Value = iCurrentPrompt.ToString();
        }
        oData = new clsData();
        oTemp = (ClsTemplateSession)Session["BiweeklySession"];
        if (oTemp != null)
        {
            sqlStr = "SELECT lk.LookupName FROM DSTempHdr hd inner join lookup lk on lk.LookupId=hd.PromptTypeId where DSTempHdrId=" + oTemp.TemplateId;
            type = oData.FetchValue(sqlStr).ToString();
            oSession = (clsSession)HttpContext.Current.Session["UserSession"];
            if (oSession != null)
            {

                if ((type == "Least-to-Most") || (type == "Graduated Guidance"))
                {
                    sqlStr = "SELECT LU.LookupId as Id,LU.LookupName as Name,DS.DSTempPromptid FROM LookUp LU INNER JOIN DSTempPrompt DS ON DS.PromptId=LU.LookupId WHERE" +
                                            " DS.ActiveInd='A' AND DS.DSTempHdrId=" + oTemp.TemplateId + " ORDER BY SortOrder DESC";
                }
                else
                {
                    sqlStr = "SELECT LU.LookupId as Id,LU.LookupName as Name,DS.DSTempPromptid FROM LookUp LU INNER JOIN DSTempPrompt DS ON DS.PromptId=LU.LookupId WHERE" +
                                " DS.ActiveInd='A' AND DS.DSTempHdrId=" + oTemp.TemplateId + " ORDER BY SortOrder ";
                }
                //sqlStr = "select DP.DSTempPromptid,LK.LookupName,DP.PromptOrder from DSTempPrompt DP join LookUp LK on LK.LookupId=DP.PromptId where DSTempHdrId=" + oTemp.TemplateId + " order by DP.PromptOrder";
                DataSet ds = oData.ReturnDataSet(sqlStr, false);
                RadioButtonListPrompts.DataSource = ds;
                RadioButtonListPrompts.DataTextField = "Name";
                RadioButtonListPrompts.DataValueField = "DSTempPromptid";
                RadioButtonListPrompts.DataBind();

            }
        }
        //
        if (iCurrentPrompt > 0)
        {
            sqlStr = "select DP.DSTempPromptid from DSTempPrompt DP join LookUp LK on LK.LookupId=DP.PromptId where DSTempHdrId=" + oTemp.TemplateId + ""
                + " and LK.LookupId=" + iCurrentPrompt + " order by DP.PromptOrder";
            iCurrentPrompt = Convert.ToInt32(oData.FetchValue(sqlStr));
            for (int i = 0; i < RadioButtonListPrompts.Items.Count; i++)
            {
                if (Convert.ToInt32(RadioButtonListPrompts.Items[i].Value) == iCurrentPrompt)
                {
                    RadioButtonListPrompts.Items[i].Selected = true;

                }
            }
        }
        Session["iCurrentSetId"] = null;
        Session["iCurrentStep"] = null;
        Session["sCurrentPrompt"] = null;
    }

    protected void ImgBtn_Override_Click(object sender, EventArgs e)
    {
        ScriptManager.RegisterClientScriptBlock(this, typeof(System.Web.UI.Page), Guid.NewGuid().ToString(), "$(document).ready(function(){popOverride();});", true);
    }
    protected void RadioButtonListSets_SelectedIndexChanged(object sender, EventArgs e)
    {
        loadStepOverrid(Convert.ToInt32(RadioButtonListSets.SelectedValue.ToString()));
    }
    protected void btnOverride_Click(object sender, EventArgs e)
    {
        oDS = (clsDataSheet)Session[DatasheetKey];
        //string teachingProc = getTeachingMethod(oDS.TeachProc);
        if (oDS.IOAInd == "Y")
        {
            Response.Write("Override Not Possible");
        }
        else
        {
            string teachingProc = oDS.TeachProc;

            string sqlStr = "SELECT ChainType,TotalTaskType,SkillType FROM DSTempHdr where DSTempHdrId=" + oTemp.TemplateId;
            DataTable dataT = oData.ReturnDataTable(sqlStr, false);
            string totalTasktype = dataT.Rows[0]["TotalTaskType"].ToString();

            string hdnRadSet = hdnRadBtnSet.Value;
            string hdnRadStep = hdnRadBtnStep.Value;
            string hdnRadPrompt = hdnRadBtnPrompt.Value;

            int curSetId = Convert.ToInt32(hdnRadSet);
            string qString = "select SortOrder from DSTempSet where DSTempSetId=" + hdnRadSet;
            int curSet = Convert.ToInt32(oData.FetchValue(qString));

            int curStep = 1;
            //curStep = Convert.ToInt32(hdnRadStep);
            if (Convert.ToInt32(hdnRadStep) > 0)
                curStep = Convert.ToInt32(hdnRadStep);
            else
                curStep = 1;

            int curPrompt = Convert.ToInt32(hdnRadPrompt);

            int curSessionNo = 0;
            curSessionNo = oDS.SessNbr;

            qString = "select LessonPlanId from DSTempHdr where DSTempHdrId=" + oTemp.TemplateId;
            int lpID = Convert.ToInt32(oData.FetchValue(qString));

            string skillType = dataT.Rows[0]["SkillType"].ToString();

            string sessMistrial = "N";
            sqlStr = "";

            string nextStep = "1";
            int promptId = 0;
            if (chkSessMistrial.Checked == true)
            {
                sessMistrial = "Y";
                mistrialRsn.Text = hdnMissTrialRsn.Value;
            }
            try
            {
                oSession = (clsSession)HttpContext.Current.Session["UserSession"];
                oTemp = (ClsTemplateSession)Session["BiweeklySession"];

                oData = new clsData();
                int iSetId = Convert.ToInt32(RadioButtonListSets.SelectedItem.Value);
                int iSetId_tt = Convert.ToInt32(RadioButtonListSets_tt.SelectedItem.Value);

                if (totalTasktype != "1")
                {

                    sqlStr = "SELECT ChainType FROM DSTempHdr where DSTempHdrId=" + oTemp.TemplateId;
                    string type = oData.FetchValue(sqlStr).ToString();
                    sqlStr = "select count(1) from DSTempStep where DSTempSetId=" + iSetId + " AND IsDynamic=0";
                    int stepcount = Convert.ToInt32(oData.FetchValue(sqlStr));
                    if ((teachingProc != "Match-to-Sample" && type.Contains(" chain")) || teachingProc == "Total Task")
                    {
                        if (RadioButtonListSteps.Items.Count > 0)
                        {
                            int iStepId = Convert.ToInt32(RadioButtonListSteps.SelectedItem.Value);
                            sqlStr = "select SortOrder from DSTempStep where DSTempHdrId=" + oTemp.TemplateId + " "
                                        + "and DSTempSetId=" + iSetId + " and DSTempStepId=" + iStepId + " AND IsDynamic=0";
                            nextStep = oData.FetchValue(sqlStr).ToString();
                            if (type == "Backward chain")
                            {
                                sqlStr = "select ROW_NUMBER() OVER(ORDER BY SortOrder desc) as numRow,SortOrder from DSTempStep where DSTempHdrId=" + oTemp.TemplateId + " "
                                        + "and DSTempSetId=" + iSetId + " AND IsDynamic=0 ORDER BY SortOrder";
                                DataTable dt = oData.ReturnDataTable(sqlStr, false);
                                foreach (DataRow dr in dt.Rows)
                                {
                                    if (dr["SortOrder"].ToString() == "" + nextStep)
                                    {
                                        nextStep = dr["numRow"].ToString();
                                        break;
                                    }
                                }
                                //nextStep = (stepcount - Convert.ToInt32(nextStep) + 1).ToString();
                            }
                            else
                            {
                                sqlStr = "select ROW_NUMBER() OVER(ORDER BY SortOrder) as numRow,SortOrder from DSTempStep where DSTempHdrId=" + oTemp.TemplateId + " "
                                        + "and DSTempSetId=" + iSetId + " AND IsDynamic=0 ORDER BY SortOrder desc";
                                DataTable dt = oData.ReturnDataTable(sqlStr, false);
                                foreach (DataRow dr in dt.Rows)
                                {
                                    if (dr["SortOrder"].ToString() == "" + nextStep)
                                    {
                                        nextStep = dr["numRow"].ToString();
                                        break;
                                    }
                                }
                            }
                            if (nextStep == null && nextStep == "0")
                                nextStep = "1";
                        }
                        else
                        {
                            tdMsg.InnerHtml = clsGeneral.failedMsg("Override Failed. No steps found.");//no steps for the set
                            return;
                        }
                    }
                    sqlStr = "select SortOrder from DSTempSet where DSTempHdrId=" + oTemp.TemplateId + " "
                            + "and DSTempSetId=" + iSetId;
                    int nextSet = Convert.ToInt32(oData.FetchValue(sqlStr).ToString());
                    if (nextSet == null && nextSet == 0)
                        nextSet = 1;
                    if (RadioButtonListPrompts.Items.Count > 0)
                    {
                        promptId = Convert.ToInt32(RadioButtonListPrompts.SelectedItem.Value);
                        sqlStr = "select PromptId from DSTempPrompt where DSTempHdrId=" + oTemp.TemplateId + " "
                                + "and DSTempPromptId=" + promptId;
                        promptId = Convert.ToInt32(oData.FetchValue(sqlStr).ToString());
                    }
                    int id = 0;
                    //if (RadioButtonListSteps.Items.Count > 0)
                    //{
                    string steQry = "select NextSetId from StdtDSStat where DSTempHdrId=" + oTemp.TemplateId + "";
                    int oldSetid = Convert.ToInt32(oData.FetchValue(steQry));
                    string strQuery = "UPDATE StdtDSStat SET NextSetId=" + iSetId + ",NextStepId=" + nextStep + ", NextSetNmbr=" + nextSet + ","
                        + "NextPromptId='" + promptId + "',ModifiedBy=" + oSession.LoginId + " ,ModifiedOn=GETDATE() WHERE DSTempHdrId=" + oTemp.TemplateId + "";
                    id = oData.Execute(strQuery);
                    // }
                    //else
                    //{
                    //    tdMsg.InnerHtml = clsGeneral.failedMsg("Override Failed. No steps found.");//no steps for the set
                    //    return;
                    //}
                    if (id > 0)
                    {
                        //string updQry = "update StdtSessionHdr SET AssignedToId=1,EndTs=GETDATE(),SessionStatusCd='S',SessMissTrailStus='" + sessMistrial + "',"
                        //    + " CurrentSetId=" + iSetId + ", CurrentStepId=" + nextStep + ", CurrentPromptId=" + promptId + ","
                        //               + "Comments='" + txtNote.Text.Trim() + "',ModifiedBy=" + oSession.LoginId + ",ModifiedOn=GETDATE() WHERE StdtSessionHdrId=" + ViewState["StdtSessHdr"] + "";
                        string updQry = "DELETE FROM StdtSessionHdr WHERE StdtSessionHdrId=" + ViewState["StdtSessHdr"];
                        int retrn = oData.Execute(updQry);
                        if (retrn > 0)
                        {
                            if (iSetId != oldSetid)
                            {
                                string strqry = "select max(StimulyActivityId) from StdtSessStimuliActivity where DSTempHdrId=" + oTemp.TemplateId + " and ActivitiType='SET'";
                                string stimuliId = oData.FetchValue(strqry).ToString();
                                if (stimuliId != null && stimuliId != "")
                                {
                                    strQuery = "Update StdtSessStimuliActivity Set DateMastered=GETDATE() where StimulyActivityId=" + Convert.ToInt32(stimuliId);
                                    oData.Execute(strQuery);
                                    strQuery = "INSERT INTO StdtSessStimuliActivity(SchoolId,ClassId,StudentId,DSTempHdrId,ActivitiType,StartTime,ActivityId,CreatedBy,CreatedOn)VALUES" +
                                     "(" + oSession.SchoolId + "," + oSession.Classid + "," + oSession.StudentId + "," + oTemp.TemplateId + ",'SET',GETDATE()," + iSetId + "," + oSession.LoginId + ",GETDATE())";
                                    int stimuli = oData.ExecuteWithScope(strQuery);
                                }
                            }

                            int curPromptOdr = 0;
                            int promptIdOdr = 0;
                            string promptType = "";
                            string sQuery1 = "select PromptOrder from DSTempPrompt where promptid=" + curPrompt + " and DSTempHdrId=" + oTemp.TemplateId;
                            curPromptOdr = Convert.ToInt32(oData.FetchValue(sQuery1));
                            string sQuery2 = "select PromptOrder from DSTempPrompt where promptid=" + promptId + " and DSTempHdrId=" + oTemp.TemplateId;
                            promptIdOdr = Convert.ToInt32(oData.FetchValue(sQuery2));

                            string sQuery3 = "select lk.LookupName from DSTempHdr hd inner join lookup lk on lk.LookupId=hd.PromptTypeId where DSTempHdrId=" + oTemp.TemplateId;
                            promptType = oData.FetchValue(sQuery3).ToString();

                            string resultMessage = "NOT COMPLETED";
                            string movtType = "";

                            if (curSet > nextSet)
                            {
                                movtType = "SET MOVEDOWN";
                            }
                            else if (curSet < nextSet)
                            {
                                movtType = "SET MOVEUP";
                            }
                            else if (curSet == nextSet)
                            {
                                if (curStep > Convert.ToInt32(nextStep))
                                {
                                    movtType = "STEP MOVEDOWN";
                                }
                                else if (curStep < Convert.ToInt32(nextStep))
                                {
                                    movtType = "STEP MOVEUP";
                                }
                                else if (curStep == Convert.ToInt32(nextStep))
                                {
                                    if (curPromptOdr > promptIdOdr)
                                    {
                                        //if (promptType == "Most-to-Least")
                                        movtType = "PROMPT MOVEUP";
                                        //else
                                        //movtType = "PROMPT MOVEDOWN";
                                    }
                                    else if (curPromptOdr < promptIdOdr)
                                    {
                                        //if (promptType == "Most-to-Least")
                                        movtType = "PROMPT MOVEDOWN";
                                        //else
                                        //movtType = "PROMPT MOVEUP";
                                    }
                                }
                            }
                            if (movtType != "")
                                UpdateEvent(skillType, Convert.ToInt32(nextStep), iSetId, promptId, nextSet.ToString(), nextStep, resultMessage, movtType, curSessionNo, lpID);
                            //UpdateEvent(skillType, curStep, curSetId, curPrompt, nextSet.ToString(), nextStep, resultMessage, movtType, curSessionNo, lpID);

                            //Page.ClientScript.RegisterStartupScript(this.GetType(), "myScript", "parent.removeFrame(" + oSession.StudentId + ",0,'DS');", true);
                            ScriptManager.RegisterStartupScript(this, this.GetType(), "closewindow", "closeIframe1(" + oSession.StudentId + ");", true);
                        }
                        //ScriptManager.RegisterStartupScript(this, this.GetType(), "closewindow", "parent.removeFrame(" + oSession.StudentId + ",0,'DS')", true);
                        else tdMsg.InnerHtml = clsGeneral.failedMsg("Override Failed");
                    }
                    //else tdMsg.InnerHtml = clsGeneral.failedMsg("Override Failed");
                }
                else
                {
                    sqlStr = "select SortOrder from DSTempSet where DSTempHdrId=" + oTemp.TemplateId + " "
                               + "and DSTempSetId=" + iSetId_tt;
                    int nextSet = Convert.ToInt32(oData.FetchValue(sqlStr).ToString());
                    if (nextSet == null && nextSet == 0)
                        nextSet = 1;

                    string steQry = "select NextSetId from StdtDSStat where DSTempHdrId=" + oTemp.TemplateId + "";
                    int oldSetid = Convert.ToInt32(oData.FetchValue(steQry));
                    string strQuery = "UPDATE StdtDSStat SET NextSetId=" + iSetId_tt + ", NextSetNmbr=" + nextSet + ","
                        + "ModifiedBy=" + oSession.LoginId + " ,ModifiedOn=GETDATE() WHERE DSTempHdrId=" + oTemp.TemplateId + "";
                    int id = oData.Execute(strQuery);
                    if (id > 0)
                    {

                        foreach (RepeaterItem ri in rptr_listStep.Items)
                        {

                            if (ri.ItemType == ListItemType.Item || ri.ItemType == ListItemType.AlternatingItem)
                            {
                                CheckBox checkBoxInRepeater = ri.FindControl("stepCheckBox") as CheckBox;

                                if (checkBoxInRepeater.Checked == true)
                                {
                                    HiddenField stepId = ri.FindControl("hdn_stepId") as HiddenField;
                                    DropDownList promptDDL = ri.FindControl("stepDDL") as DropDownList;

                                    if (promptDDL.SelectedValue != "")
                                    {
                                        if (oData.IFExists("select StdtDSStepStatid from StdtDSStepStat where DSTempStepId = " + stepId.Value + "") == true)
                                        {
                                            string query = "UPDATE StdtDSStepStat set PromptId = " + promptDDL.SelectedValue + " where DSTempStepId = " + stepId.Value;
                                            id = oData.Execute(query);
                                        }
                                        else
                                        {

                                            string insertStepStats = "INSERT INTO StdtDSStepStat (SchoolId,StudentId,DSTempStepId,PromptId,CreatedBy,CreatedOn) " +
                                                                        "VALUES(" + oSession.SchoolId + "," + oSession.StudentId + "," + stepId.Value + "," +
                                                                        "" + promptDDL.SelectedValue + "," + oSession.LoginId + ",GETDATE())";
                                            id = oData.Execute(insertStepStats);
                                        }
                                    }
                                }


                            }
                        }


                        //string updQry = "update StdtSessionHdr SET AssignedToId=1,EndTs=GETDATE(),SessionStatusCd='S',SessMissTrailStus='" + sessMistrial + "',"
                        //    + " CurrentSetId=" + iSetId + ", CurrentStepId=" + nextStep + ", CurrentPromptId=" + promptId + ","
                        //               + "Comments='" + txtNote.Text.Trim() + "',ModifiedBy=" + oSession.LoginId + ",ModifiedOn=GETDATE() WHERE StdtSessionHdrId=" + ViewState["StdtSessHdr"] + "";
                        string updQry = "DELETE FROM StdtSessionHdr WHERE StdtSessionHdrId=" + ViewState["StdtSessHdr"];
                        int retrn = oData.Execute(updQry);
                        if (retrn > 0)
                        {
                            if (iSetId_tt != oldSetid)
                            {
                                string strqry = "select max(StimulyActivityId) from StdtSessStimuliActivity where DSTempHdrId=" + oTemp.TemplateId + " and ActivitiType='SET'";
                                string stimuliId = oData.FetchValue(strqry).ToString();
                                if (stimuliId != null && stimuliId != "")
                                {
                                    strQuery = "Update StdtSessStimuliActivity Set DateMastered=GETDATE() where StimulyActivityId=" + Convert.ToInt32(stimuliId);
                                    oData.Execute(strQuery);
                                    strQuery = "INSERT INTO StdtSessStimuliActivity(SchoolId,ClassId,StudentId,DSTempHdrId,ActivitiType,StartTime,ActivityId,CreatedBy,CreatedOn)VALUES" +
                                     "(" + oSession.SchoolId + "," + oSession.Classid + "," + oSession.StudentId + "," + oTemp.TemplateId + ",'SET',GETDATE()," + iSetId_tt + "," + oSession.LoginId + ",GETDATE())";
                                    int stimuli = oData.ExecuteWithScope(strQuery);
                                }
                            }

                            string resultMessage = "NOT COMPLETED";
                            string movtType = "";

                            if (curSet > nextSet)
                            {
                                movtType = "SET MOVEDOWN";
                            }
                            else if (curSet < nextSet)
                            {
                                movtType = "SET MOVEUP";
                            }
                            if (movtType != "")
                                UpdateEvent(skillType, curStep, iSetId_tt, promptId, nextSet.ToString(), nextStep, resultMessage, movtType, curSessionNo, lpID);
                            //UpdateEvent(skillType, curStep, curSetId, promptId, nextSet.ToString(), nextStep, resultMessage, movtType, curSessionNo, lpID);

                            //Page.ClientScript.RegisterStartupScript(this.GetType(), "myScript", "parent.removeFrame(" + oSession.StudentId + ",0,'DS');", true);
                            //ScriptManager.RegisterStartupScript(this, this.GetType(), "closewindow", "parent.removeFrame(" + oSession.StudentId + ",0,'DS')", true);
                            ScriptManager.RegisterStartupScript(this, this.GetType(), "closewindow", "closeIframe1(" + oSession.StudentId + ");", true);
                        }
                        else
                        {
                            tdMsg.InnerHtml = clsGeneral.failedMsg("Override Failed");
                        }


                    }

                }
                ResetIOAStatus(oTemp.TemplateId);
                clearOverrideSession(oTemp.TemplateId.ToString());
            }

            catch (Exception ex)
            {
                tdMsg.InnerHtml = clsGeneral.failedMsg("Override Failed");
                ClsErrorLog error = new ClsErrorLog();
                error.WriteToLog("Override Failed" + ex);
            }
        }

    }


    protected void UpdateEvent(string skillType, int StepId, int SetId, int promptId, string nextSet, string nextStep, string resultMessage, string Type, int iSessionNmbr, int sLessonPlanId)
    {
        clsData objData = new clsData();

        string strQuery = "";

        string arrowSymbol = "";
        if (Type == "SET MOVEUP")
            arrowSymbol = "↑ SET ";
        else if (Type == "SET MOVEDOWN")
            arrowSymbol = "↓ SET ";
        else if (Type == "STEP MOVEUP")
            arrowSymbol = "↑ STEP ";
        else if (Type == "STEP MOVEDOWN")
            arrowSymbol = "↓ STEP ";
        else if (Type == "PROMPT MOVEUP")
            arrowSymbol = "↑ ";
        else if (Type == "PROMPT MOVEDOWN")
            arrowSymbol = "↓ ";

        if (skillType == "Chained")
        {
            #region chained set moveup n movedown
            if (Type == "SET MOVEUP" || Type == "SET MOVEDOWN")
            {
                if (promptId > 0)
                {
                    strQuery = "SELECT SetCd FROM [DSTempSet] WHERE [DSTempSet].DSTempSetId=" + SetId;
                    string setName = objData.FetchValue(strQuery).ToString();

                    strQuery = "INSERT INTO StdtSessEvent(SchoolId,ClassId,StudentId,DSTempHdrId,EventName,StdtSessEventType,SetId,EvntTs,EventType,LessonPlanId,SessionNbr,CreatedBy,CreatedOn,TimeStampForReport)VALUES" +
                        "(" + oSession.SchoolId + "," + oSession.Classid + "," + oSession.StudentId + "," + oTemp.TemplateId + ",N'" + arrowSymbol + clsGeneral.convertQuotes(setName) + " (OV)','Major'," + SetId + ",GETDATE(),'EV', " + sLessonPlanId + ",'" + iSessionNmbr + "'," + oSession.LoginId + ",GETDATE(),DATEADD(HH,(SELECT (COUNT(*)+1) FROM StdtSessEvent WHERE CONVERT(DATE,EvntTs)=CONVERT(DATE,GETDATE()) AND " + "SchoolId=" + oSession.SchoolId + " AND StudentId=" + oSession.StudentId + " AND EventType='EV' AND LessonPlanId=" + sLessonPlanId + ")," + "CONVERT(datetime,GETDATE())))";
                    objData.ExecuteWithScope(strQuery);
                }
                else
                {
                    strQuery = "SELECT SetCd FROM [DSTempSet] WHERE [DSTempSet].DSTempSetId=" + SetId;
                    string setName = objData.FetchValue(strQuery).ToString();

                    strQuery = "INSERT INTO StdtSessEvent(SchoolId,ClassId,StudentId,DSTempHdrId,EventName,StdtSessEventType,SetId,EvntTs,EventType,LessonPlanId,SessionNbr,CreatedBy,CreatedOn,TimeStampForReport)VALUES" +
                        "(" + oSession.SchoolId + "," + oSession.Classid + "," + oSession.StudentId + "," + oTemp.TemplateId + ",N'" + arrowSymbol + clsGeneral.convertQuotes(setName) + " (OV)','Major'," + SetId + ",GETDATE(),'EV', " + sLessonPlanId + ",'" + iSessionNmbr + "'," + oSession.LoginId + ",GETDATE(),DATEADD(HH,(SELECT (COUNT(*)+1) FROM StdtSessEvent WHERE CONVERT(DATE,EvntTs)=CONVERT(DATE,getdate()) AND " + "SchoolId=" + oSession.SchoolId + " AND StudentId=" + oSession.StudentId + " AND EventType='EV' AND LessonPlanId=" + sLessonPlanId + ")," + "CONVERT(datetime,getdate())))";
                    objData.ExecuteWithScope(strQuery);
                }
            }
            #endregion

            #region chained step moveup n movedown
            else if (Type == "STEP MOVEUP" || Type == "STEP MOVEDOWN")
            {
                if (promptId > 0)
                {
                    strQuery = "SELECT DSTempStepId FROM (SELECT DSTempStepId,RANK() OVER (ORDER BY SortOrder) RNK FROM DSTempStep " +
                    " WHERE DSTempHdrId = " + oTemp.TemplateId + " AND DSTempSetId=" + SetId + " AND ActiveInd='A' ) AS Temp WHERE RNK = " + nextStep.ToString();
                    int iStepId = Convert.ToInt32(objData.FetchValue(strQuery));
                    strQuery = "SELECT SortOrder FROM (SELECT DSTempStepId,SortOrder,RANK() OVER (ORDER BY SortOrder) RNK FROM DSTempStep " +
                    " WHERE DSTempHdrId = " + oTemp.TemplateId + " AND DSTempSetId=" + SetId + " AND ActiveInd='A' ) AS Temp WHERE RNK = " + StepId;
                    string stepNumber = objData.FetchValue(strQuery).ToString();

                    strQuery = "INSERT INTO StdtSessEvent(SchoolId,ClassId,StudentId,DSTempHdrId,EventName,StdtSessEventType,EvntTs,EventType,StepId,SetId,LessonPlanId,SessionNbr,CreatedBy,CreatedOn,TimeStampForReport)VALUES" +
                        "(" + oSession.SchoolId + "," + oSession.Classid + "," + oSession.StudentId + "," + oTemp.TemplateId + ",N'" + arrowSymbol + stepNumber + " (OV)','Minor'," + "GETDATE(),'EV'," + iStepId + "," + SetId + "," + sLessonPlanId + ",'" + iSessionNmbr + "'," + oSession.LoginId + ",GETDATE(),DATEADD(HH,(SELECT (COUNT(*)+1) FROM StdtSessEvent WHERE CONVERT(DATE,EvntTs)=CONVERT(DATE,getdate()) AND " + "SchoolId=" + oSession.SchoolId + " AND StudentId=" + oSession.StudentId + " AND EventType='EV' AND LessonPlanId=" + sLessonPlanId + ")," + "CONVERT(datetime,getdate())))";
                    objData.ExecuteWithScope(strQuery);
                }
                else
                {
                    strQuery = "SELECT DSTempStepId FROM (SELECT DSTempStepId,RANK() OVER (ORDER BY SortOrder) RNK FROM DSTempStep " +
                    " WHERE DSTempHdrId = " + oTemp.TemplateId + " AND DSTempSetId=" + SetId + " AND ActiveInd='A' ) AS Temp WHERE RNK = " + nextStep.ToString();
                    int iStepId = Convert.ToInt32(objData.FetchValue(strQuery));
                    strQuery = "SELECT SortOrder FROM (SELECT DSTempStepId,SortOrder,RANK() OVER (ORDER BY SortOrder) RNK FROM DSTempStep " +
                                " WHERE DSTempHdrId = " + oTemp.TemplateId + " AND DSTempSetId=" + SetId + " AND ActiveInd='A' ) AS Temp WHERE RNK = " + StepId;
                    string stepNumber = objData.FetchValue(strQuery).ToString();

                    strQuery = "INSERT INTO StdtSessEvent(SchoolId,ClassId,StudentId,DSTempHdrId,EventName,StdtSessEventType,EvntTs,EventType,SetId,StepId,LessonPlanId,SessionNbr,CreatedBy,CreatedOn,TimeStampForReport)VALUES" +
                        "(" + oSession.SchoolId + "," + oSession.Classid + "," + oSession.StudentId + "," + oTemp.TemplateId + ",N'" + arrowSymbol + stepNumber + " (OV)','Minor'," + "GETDATE(),'EV'," + SetId + "," + iStepId + "," + sLessonPlanId + ",'" + iSessionNmbr + "'," + oSession.LoginId + ",GETDATE(),DATEADD(HH,(SELECT (COUNT(*)+1) FROM StdtSessEvent WHERE CONVERT(DATE,EvntTs)=CONVERT(DATE,getdate()) AND " + "SchoolId=" + oSession.SchoolId + " AND StudentId=" + oSession.StudentId + " AND EventType='EV' AND LessonPlanId=" + sLessonPlanId + ")," + "CONVERT(datetime,getdate())))";
                    objData.ExecuteWithScope(strQuery);
                }
            }
            #endregion

            #region chained prompt moveup n movedown
            else if (Type == "PROMPT MOVEUP" || Type == "PROMPT MOVEDOWN")
            {
                strQuery = "SELECT LookUpName FROM LookUp WHERE lookuptype='DSTempPrompt' and LookupId=" + promptId;
                string promptName = objData.FetchValue(strQuery).ToString();
                strQuery = "INSERT INTO StdtSessEvent(SchoolId,ClassId,StudentId,DSTempHdrId,EventName,StdtSessEventType,EvntTs,EventType,SetId,StepId,PromptId,LessonPlanId,SessionNbr,CreatedBy,CreatedOn,TimeStampForReport)VALUES" +
                   "(" + oSession.SchoolId + "," + oSession.Classid + "," + oSession.StudentId + "," + oTemp.TemplateId + ",N'" + arrowSymbol + promptName + " (OV)','Minor'," + "GETDATE(),'EV'," + SetId + "," + SetId + "," + promptId + "," + sLessonPlanId + ",'" + iSessionNmbr + "'," + oSession.LoginId + ",GETDATE(),DATEADD(HH,(SELECT (COUNT(*)+1) FROM StdtSessEvent WHERE CONVERT(DATE,EvntTs)=CONVERT(DATE,getdate()) AND " + "SchoolId=" + oSession.SchoolId + " AND StudentId=" + oSession.StudentId + " AND EventType='EV' AND LessonPlanId=" + sLessonPlanId + ")," + "getdate()))";
                objData.ExecuteWithScope(strQuery);
            }
            #endregion
        }
        else if (skillType == "Discrete")
        {
            #region discrete set moveup n movedown
            if (Type == "SET MOVEUP" || Type == "SET MOVEDOWN")
            {
                strQuery = "SELECT SetCd FROM [DSTempSet] WHERE [DSTempSet].DSTempSetId=" + SetId;
                string setName = objData.FetchValue(strQuery).ToString();
                strQuery = "INSERT INTO StdtSessEvent(SchoolId,ClassId,StudentId,DSTempHdrId,EventName,StdtSessEventType,SetId,EvntTs,EventType,LessonPlanId,SessionNbr,CreatedBy,CreatedOn,TimeStampForReport)VALUES" +
                    "(" + oSession.SchoolId + "," + oSession.Classid + "," + oSession.StudentId + "," + oTemp.TemplateId + ",N'" + arrowSymbol + clsGeneral.convertQuotes(setName) + " (OV)','Major'," + SetId + ",GETDATE(),'EV', " + sLessonPlanId + ",'" + iSessionNmbr + "'," + oSession.LoginId + ",GETDATE(),DATEADD(HH,(SELECT (COUNT(*)+1) FROM StdtSessEvent WHERE CONVERT(DATE,EvntTs)=CONVERT(DATE,GETDATE()) AND " + "SchoolId=" + oSession.SchoolId + " AND StudentId=" + oSession.StudentId + " AND EventType='EV' AND LessonPlanId=" + sLessonPlanId + ")," + "CONVERT(datetime,GETDATE())))";
                objData.ExecuteWithScope(strQuery);
            }
            #endregion

            #region discrete prompt moveup n movedown
            else if (Type == "PROMPT MOVEUP" || Type == "PROMPT MOVEDOWN")
            {
                strQuery = "SELECT LookUpName FROM LookUp WHERE lookuptype='DSTempPrompt' and LookupId=" + promptId;
                string promptName = objData.FetchValue(strQuery).ToString();
                strQuery = "INSERT INTO StdtSessEvent(SchoolId,ClassId,StudentId,DSTempHdrId,EventName,StdtSessEventType,EvntTs,EventType,SetId,StepId,PromptId,LessonPlanId,SessionNbr,CreatedBy,CreatedOn,TimeStampForReport)VALUES" +
                   "(" + oSession.SchoolId + "," + oSession.Classid + "," + oSession.StudentId + "," + oTemp.TemplateId + ",N'" + arrowSymbol + promptName + " (OV)','Minor'," + "GETDATE(),'EV'," + SetId + "," + SetId + "," + promptId + "," + sLessonPlanId + ",'" + iSessionNmbr + "'," + oSession.LoginId + ",GETDATE(),DATEADD(HH,(SELECT (COUNT(*)+1) FROM StdtSessEvent WHERE CONVERT(DATE,EvntTs)=CONVERT(DATE,getdate()) AND " + "SchoolId=" + oSession.SchoolId + " AND StudentId=" + oSession.StudentId + " AND EventType='EV' AND LessonPlanId=" + sLessonPlanId + ")," + "getdate()))";
                objData.ExecuteWithScope(strQuery);
            }
            #endregion
        }
    }

    protected void rptr_listStep_ItemDataBound(object sender, RepeaterItemEventArgs e)
    {
        if (e.Item.ItemType == ListItemType.Item || e.Item.ItemType == ListItemType.AlternatingItem)
        {
            DropDownList promptList = e.Item.FindControl("stepDDL") as DropDownList;
            HiddenField hdn_dsTempHdrId = e.Item.FindControl("hdn_dsTempHdrId") as HiddenField;
            HiddenField hdn_promptIdValue = e.Item.FindControl("hdn_stepDDLValue") as HiddenField;

            System.Data.DataSet ds = new System.Data.DataSet();
            ds = getPromptList(hdn_dsTempHdrId.Value);

            promptList.DataSource = ds.Tables[0];
            promptList.DataTextField = "LookupName";
            promptList.DataValueField = "PromptId";

            promptList.DataBind();

            promptList.Items.Insert(0, new ListItem("--- Select ---", ""));

            promptList.SelectedValue = hdn_promptIdValue.Value;
        }
    }

    public System.Data.DataSet getPromptList(string dsTempHdrId)
    {

        string sqlStr = "";
        string type = "";
        DataSet ds = new DataSet();
        ds = null;
        oData = new clsData();
        oTemp = (ClsTemplateSession)Session["BiweeklySession"];
        if (oTemp != null)
        {
            sqlStr = "SELECT lk.LookupName FROM DSTempHdr hd inner join lookup lk on lk.LookupId=hd.PromptTypeId where DSTempHdrId=" + oTemp.TemplateId;
            type = oData.FetchValue(sqlStr).ToString();
            oSession = (clsSession)HttpContext.Current.Session["UserSession"];
            if (oSession != null)
            {


                if ((type == "Least-to-Most") || (type == "Graduated Guidance"))
                {
                    sqlStr = "SELECT dstp.DSTempPromptId, dstp.DSTempHdrId, dstp.PromptId, dstp.PromptOrder, lu.LookupName FROM DSTempPrompt as dstp join [LookUp] as lu on dstp.PromptId = lu.LookupId WHERE (dstp.DSTempHdrId = " + dsTempHdrId + " AND dstp.ActiveInd = 'A') ORDER BY SortOrder DESC";
                    //sqlStr = "SELECT LU.LookupId as Id,LU.LookupName as Name,DS.DSTempPromptid FROM LookUp LU INNER JOIN DSTempPrompt DS ON DS.PromptId=LU.LookupId WHERE" +
                    //                        " DS.ActiveInd='A' AND DS.DSTempHdrId=" + oTemp.TemplateId + " ORDER BY PromptOrder";
                }
                else
                {
                    sqlStr = "SELECT dstp.DSTempPromptId, dstp.DSTempHdrId, dstp.PromptId, dstp.PromptOrder, lu.LookupName FROM DSTempPrompt as dstp join [LookUp] as lu on dstp.PromptId = lu.LookupId WHERE (dstp.DSTempHdrId = " + dsTempHdrId + " AND dstp.ActiveInd = 'A') ORDER BY SortOrder";
                    //sqlStr = "SELECT LU.LookupId as Id,LU.LookupName as Name,DS.DSTempPromptid FROM LookUp LU INNER JOIN DSTempPrompt DS ON DS.PromptId=LU.LookupId WHERE" +
                    //           " DS.ActiveInd='A' AND DS.DSTempHdrId=" + oTemp.TemplateId + " ORDER BY PromptOrder DESC";
                }
                //string sqlStr = "SELECT dstp.DSTempPromptId, dstp.DSTempHdrId, dstp.PromptId, dstp.PromptOrder, lu.LookupName FROM DSTempPrompt as dstp join [LookUp] as lu on dstp.PromptId = lu.LookupId WHERE (DSTempHdrId = " + dsTempHdrId + ")";
                //sqlStr = "select DP.DSTempPromptid,LK.LookupName,DP.PromptOrder from DSTempPrompt DP join LookUp LK on LK.LookupId=DP.PromptId where DSTempHdrId=" + oTemp.TemplateId + " order by DP.PromptOrder";
                ds = oData.ReturnDataSet(sqlStr, false);


            }
        }

        return ds;
        //string sqlStr = "SELECT dstp.DSTempPromptId, dstp.DSTempHdrId, dstp.PromptId, dstp.PromptOrder, lu.LookupName FROM DSTempPrompt as dstp join [LookUp] as lu on dstp.PromptId = lu.LookupId WHERE (DSTempHdrId = " + dsTempHdrId + ")";
        //System.Data.DataSet ds = new System.Data.DataSet();
        //ds = oData.ReturnDataSet(sqlStr, false);
        //int x = ds.Tables[0].Rows.Count;
        //return ds;
    }
    protected void btn_sets_Click(object sender, EventArgs e)
    {
        LinkButton btn = (LinkButton)sender;
        loadStepOverrid(Convert.ToInt32(btn.ToolTip));
    }
    protected void RadioButtonListSets_tt_SelectedIndexChanged(object sender, EventArgs e)
    {
        loadStepOverrid(Convert.ToInt32(RadioButtonListSets_tt.SelectedValue.ToString()));
    }
    protected void rptr_tempOverride_ItemDataBound(object sender, RepeaterItemEventArgs e)
    {
        if (e.Item.ItemType == ListItemType.Item || e.Item.ItemType == ListItemType.AlternatingItem)
        {
            oData = new clsData();

            HiddenField hdn_currSetId = e.Item.FindControl("hdn_currSetId") as HiddenField;
            HiddenField hdn_tempSetId = e.Item.FindControl("hdn_tempSetId") as HiddenField;
            HiddenField hdn_currSetNmbr = e.Item.FindControl("hdn_currSetNmbr") as HiddenField;
            HiddenField hdn_tempSetNmbr = e.Item.FindControl("hdn_tempSetNmbr") as HiddenField;
            Button btn_go = e.Item.FindControl("btn_go") as Button;
            Label btn_list_crr = e.Item.FindControl("btn_list_crr") as Label;
            Label lblDraft = e.Item.FindControl("lblDraft") as Label;

            Panel pnl_set = e.Item.FindControl("pnl_set") as Panel;
            Label lblGroupName = e.Item.FindControl("lblGroupName") as Label;

            if (hdn_currSetId.Value == hdn_tempSetId.Value)
            {

                pnl_set.CssClass = "to_stepDiv_current";
                btn_list_crr.Visible = true;
            }


            string query = "select * from StdtSessionHdr where SessionStatusCd = 'D' and CurrentSetId='" + hdn_tempSetId.Value + "'";
            DataTable dt = oData.ReturnDataTable(query, false);
            if (dt.Rows.Count > 0)
            {
                lblDraft.Visible = true;
            }

            if (Convert.ToInt32(hdn_tempSetNmbr.Value) > Convert.ToInt32(hdn_currSetNmbr.Value))
            {
                pnl_set.Visible = false;
                lblGroupName.Text = "";
                lblGroupName.Visible = true;
                GroupName.Clear();
            }
            else if (Convert.ToInt32(hdn_tempSetNmbr.Value) == Convert.ToInt32(hdn_currSetNmbr.Value))
            {
                btn_go.Visible = false;
                //btn_list_crr.Visible = true;
                btn_list_crr.Visible = false;
                lblDraft.Visible = false;
                lblGroupName.Visible = true;

            }
            else
            {
                if (GroupName.Contains(lblGroupName.Text))
                {
                    lblGroupName.Visible = false;
                }
                else
                {
                    GroupName.Add(lblGroupName.Text.ToString());
                    lblGroupName.Visible = true;
                }
            }
        }
    }
    protected void btn_go_Click(object sender, EventArgs e)
    {

        Button btn = (Button)sender;
        RepeaterItem ritem = (RepeaterItem)btn.NamingContainer;
        HiddenField hdn_tempSetNmbr = (HiddenField)ritem.FindControl("hdn_tempSetNmbr");
        HiddenField hdn_tempSetId = (HiddenField)ritem.FindControl("hdn_tempSetId");


        oDS = (clsDataSheet)Session[DatasheetKey];
        if (oDS != null)
        {
            oDS.IOAInd = "N";

            hdn_currTempSetNmbr.Value = hdn_tempSetNmbr.Value;
            hdn_currTempSet.Value = hdn_tempSetId.Value;
            SqlConnection con = null;
            SqlTransaction trans = null;

            oData = new clsData();
            oSession = (clsSession)Session["UserSession"];
            oTemp = (ClsTemplateSession)Session["BiweeklySession"];



            oData = new clsData();
            string sel = "SELECT TOP 1 * FROM StdtSessionHdr WHERE StudentId=" + oSession.StudentId + " AND SchoolId=" + oSession.SchoolId + /*" AND StdtClassId=" + oSession.Classid +*/ " AND DSTempHdrId=" + oTemp.TemplateId + " AND SessionStatusCd='D' AND CurrentSetId = '" + hdn_tempSetId.Value + "' AND IOAInd='N'";
            string selIOA = "SELECT TOP 1 * FROM StdtSessionHdr WHERE StudentId=" + oSession.StudentId + " AND SchoolId=" + oSession.SchoolId + " AND DSTempHdrId=" + oTemp.TemplateId + " AND SessionStatusCd='D' AND CurrentSetId = '" + hdn_tempSetId.Value + "' AND IOAInd='Y'";

            object objSessNbr = oData.FetchValue("SELECT ISNULL(MAX(SessionNbr),0)+1 FROM StdtSessionHdr WHERE StudentId=" + oSession.StudentId + " AND SchoolId=" + oSession.SchoolId + /*" AND StdtClassId=" + oSession.Classid +*/ " AND LessonPlanId=(SELECT LessonPlanId FROM DSTempHdr WHERE DSTempHdrId=" + oTemp.TemplateId + ")");
            if (objSessNbr == null)
                objSessNbr = 0;
            oDS.SessNbr = (int)objSessNbr;
            DataTable dtHdrs = oData.ReturnDataTable(sel, false);
            DataTable dtHdrsIOA = oData.ReturnDataTable(selIOA, false);
            dtHdrs.Merge(dtHdrsIOA, true);

            if (dtHdrs != null)
            {
                if (dtHdrs.Rows.Count == 0)
                {
                    //Create new Draft for teacher; IsMaintanance = true

                    hdn_isMaintainance.Value = "true";

                    con = oData.Open();
                    trans = con.BeginTransaction();
                    generateSheet(true);
                    bool reslt = SaveDraft("D", "N", "insert", con, trans, false);
                    if (reslt)
                    {
                        bool reslt2 = SaveMeasuremnts(Convert.ToInt32(ViewState["StdtSessHdr"].ToString()), con, trans);
                        if (reslt2) oData.CommitTransation(trans, con);
                        else if (trans.Connection.State == ConnectionState.Open) oData.RollBackTransation(trans, con);
                        con.Close();
                        getStepPrompts();
                        fillStepGrid(oDS.TeachProc, oDS.SkillType, oDS.MatchToSampleType);

                    }
                    else if (trans.Connection.State == ConnectionState.Open)
                    {
                        oData.RollBackTransation(trans, con);
                        con.Close();
                    }
                    ClientScript.RegisterStartupScript(this.GetType(), "", "probe();", true);
                }
            }
            if (dtHdrs.Rows.Count == 1)
            {
                if (dtHdrs.Rows[0]["IsMaintanace"].ToString() == "True")
                {
                    hdn_isMaintainance.Value = "true";

                    if (dtHdrs.Rows[0]["IOAInd"].ToString() == "Y")
                    {
                        //open ioa's draft...
                        ViewState["StdtSessHdr"] = dtHdrs.Rows[0]["StdtSessionHdrId"].ToString();
                        oDS.IOAInd = "Y";
                        oDS.IOASessHdr = Convert.ToInt32(dtHdrs.Rows[0]["IOASessionHdrId"].ToString());
                        LoadData(Convert.ToInt32(ViewState["StdtSessHdr"].ToString()), true);
                    }
                    else
                    {
                        // Automatically load the drafted Data Sheet


                        Response.Redirect("Datasheet.aspx?SessHdrID=" + dtHdrs.Rows[0]["StdtSessionHdrId"].ToString() + "&isMaint=true");
                    }
                    ClientScript.RegisterStartupScript(this.GetType(), "", "probe();", true);
                }
                else
                {
                    //A draft which is not "IsMaintanance" is available.

                    hdn_isMaintainance.Value = "false";

                    //ClientScript.RegisterStartupScript(this.GetType(), "", "alert('There is already a draft available. Opening it in normal mode...');", true);

                    if (dtHdrs.Rows[0]["IOAInd"].ToString() == "Y")
                    {
                        //open ioa's draft...
                        ViewState["StdtSessHdr"] = dtHdrs.Rows[0]["StdtSessionHdrId"].ToString();
                        oDS.IOAInd = "Y";
                        oDS.IOASessHdr = Convert.ToInt32(dtHdrs.Rows[0]["IOASessionHdrId"].ToString());
                        LoadData(Convert.ToInt32(ViewState["StdtSessHdr"].ToString()), true);
                    }
                    else
                    {   //ask whether to create an ioa draft or open existing draft...

                        ViewState["StdtSessHdr"] = dtHdrs.Rows[0]["StdtSessionHdrId"].ToString();
                        oDS.IOASessHdr = Convert.ToInt32(dtHdrs.Rows[0]["StdtSessionHdrId"].ToString());
                        ClientScript.RegisterStartupScript(this.GetType(), "", "showPop(2);alertBox('There is already a draft available. Opening it in normal mode...');", true);


                        string selQry = "SELECT UserLName+' '+UserFName AS Name,Hdr.CreatedOn,SessionNbr FROM StdtSessionHdr Hdr INNER JOIN [User] Usr ON Usr.UserId=Hdr.CreatedBy " +
                                "WHERE StdtSessionHdrId=" + dtHdrs.Rows[0]["StdtSessionHdrId"].ToString();
                        DataTable dtUsr = oData.ReturnDataTable(selQry, false);
                        if ((dtUsr != null) && (dtUsr.Rows.Count > 0))
                        {
                            lblUName1.InnerHtml = dtUsr.Rows[0]["Name"].ToString();
                            LblStrtTime1.InnerHtml = dtUsr.Rows[0]["CreatedOn"].ToString();
                            lblSessNo1.InnerHtml = dtUsr.Rows[0]["SessionNbr"].ToString();
                        }
                    }
                }
            }
        }
    }

    protected void btn_continue_Click(object sender, EventArgs e)
    {
        SqlConnection con = null;
        SqlTransaction trans = null;
        oData = new clsData();

        //Create new Draft for teacher..

        hdn_isMaintainance.Value = "false";

        con = oData.Open();
        trans = con.BeginTransaction();
        generateSheet(true);
        bool reslt = SaveDraft("D", "N", "insert", con, trans, false);
        if (reslt)
        {
            bool reslt2 = SaveMeasuremnts(Convert.ToInt32(ViewState["StdtSessHdr"].ToString()), con, trans);
            if (reslt2) oData.CommitTransation(trans, con);
            else if (trans.Connection.State == ConnectionState.Open) oData.RollBackTransation(trans, con);
            con.Close();
            getStepPrompts();
            fillStepGrid(oDS.TeachProc, oDS.SkillType, oDS.MatchToSampleType);

        }
        else if (trans.Connection.State == ConnectionState.Open)
        {
            oData.RollBackTransation(trans, con);
            con.Close();
        }
    }
    protected void btn_contIOASess_Click(object sender, EventArgs e)
    {
        //open ioa's draft...
        ViewState["StdtSessHdr"] = hdn_StdtSessionHdrId.Value;
        oDS.IOAInd = "Y";
        oDS.IOASessHdr = Convert.ToInt32(hdn_IOASessionHdrId.Value);
        LoadData(Convert.ToInt32(ViewState["StdtSessHdr"].ToString()), true);
    }
    protected void btnSubmitAndRepeat_Click(object sender, EventArgs e)
    {
        oData = new clsData();
        string currSetIdTemp = "";
        Hashtable htLpList = (Hashtable)Session["tempOverrideHT"];
        if (htLpList != null)
        {
            string lpId = oTemp.TemplateId.ToString();
            LinkedList<KeyValuePair<string, Hashtable>> llKvpSetList = (LinkedList<KeyValuePair<string, Hashtable>>)htLpList[lpId];
            if (llKvpSetList != null)
            {
                if (llKvpSetList.Count > 0)
                {
                    currSetIdTemp = llKvpSetList.First.Value.Value["tempSetId"].ToString();
                }
            }
        }
        if (currSetIdTemp == "")
        {
            if (Request.QueryString["currSetId"] != null)
            {
                currSetIdTemp = Request.QueryString["currSetId"].ToString();
            }
        }
        //submit the datasheet, increment the repeat count, reload the datasheet
        string isMaintStatus = hdn_isMaintainance.Value;
        btnSubmit_Click(sender, e);
        if (lblSubmitAndRepeatCount.Text != "")
        {
            repeatNo = Convert.ToInt32(lblSubmitAndRepeatCount.Text);
        }
        repeatNo++;

        Response.Redirect("Datasheet.aspx?pageid=" + oTemp.TemplateId + "&studid=" + oSession.StudentId + "&SRMode=true&repeatNo=" + repeatNo + "&isMaint=" + isMaintStatus + "&currSetIdTemp=" + currSetIdTemp + "&exc=false");
    }
    protected void btnDiscard_ok_Click(object sender, EventArgs e)
    {
        oData = new clsData();
        string strqry = "select StdtSessionStepId stepId from StdtSessionStep WHERE StdtSessionHdrId=" + ViewState["StdtSessHdr"];
        DataSet ds = oData.ReturnDataSet(strqry, false);
        int n = ds.Tables[0].Rows.Count;
        //int i = Convert.ToInt32(stepId);
        oData.Execute("DELETE FROM StdtSessionHdr WHERE StdtSessionHdrId=" + ViewState["StdtSessHdr"]);
        oData.Execute("DELETE FROM StdtSessColScore WHERE StdtSessionHdrId=" + ViewState["StdtSessHdr"]);
        oData.Execute("DELETE FROM StdtSessionStep WHERE StdtSessionHdrId=" + ViewState["StdtSessHdr"]);
        for (int i = 0; i < n; i++)
        {
            oData.Execute("DELETE FROM StdtSessionDtl WHERE StdtSessionStepId=" + Convert.ToInt32(ds.Tables[0].Rows[i]["stepId"]));
        }
        oSession = (clsSession)Session["UserSession"];
    }
    protected void btn_new_continue_Click(object sender, EventArgs e)
    {
        string isMaintVal = "";
        string LpId = oTemp.TemplateId.ToString();
        Hashtable htLpList = (Hashtable)Session["tempOverrideHT"];
        if (htLpList == null)
        {
            htLpList = new Hashtable();
        }
        Hashtable htSetList = new Hashtable();
        LinkedList<KeyValuePair<string, Hashtable>> llKvpSetList = new LinkedList<KeyValuePair<string, Hashtable>>();

        //add LP ids to htLpList
        //add checked sets' ids to llKvpSetList
        //add set details to htSetDetails
        foreach (RepeaterItem rItem in rptr_tempOverride.Items)
        {
            Hashtable htSetDetails = new Hashtable();
            CheckBox chkTempOverride = (CheckBox)rItem.FindControl("tempOverrideCheckBox");

            if (chkTempOverride.Checked)
            {
                hdn_displayTempOverride.Value = "true";

                HiddenField hdn_currSetId = (HiddenField)rItem.FindControl("hdn_currSetId");
                HiddenField hdn_tempSetId = (HiddenField)rItem.FindControl("hdn_tempSetId");
                HiddenField hdn_currSetNmbr = (HiddenField)rItem.FindControl("hdn_currSetNmbr");
                HiddenField hdn_tempSetNmbr = (HiddenField)rItem.FindControl("hdn_tempSetNmbr");

                if (Convert.ToInt32(hdn_tempSetNmbr.Value) < Convert.ToInt32(hdn_currSetNmbr.Value))
                {
                    isMaintVal = "true";
                }
                else if (Convert.ToInt32(hdn_tempSetNmbr.Value) == Convert.ToInt32(hdn_currSetNmbr.Value))
                {
                    isMaintVal = "false";
                }

                //fill htSetDetails
                htSetDetails.Add("currSetId", hdn_currSetId.Value);
                htSetDetails.Add("tempSetId", hdn_tempSetId.Value);
                htSetDetails.Add("currSetNmbr", hdn_currSetNmbr.Value);
                htSetDetails.Add("tempSetNmbr", hdn_tempSetNmbr.Value);
                htSetDetails.Add("isMaintVal", isMaintVal);

                //fill setList
                //llKvpSetList.AddLast(new KeyValuePair<string, Hashtable>(hdn_tempSetId.Value, htSetDetails));
                llKvpSetList.AddFirst(new KeyValuePair<string, Hashtable>(hdn_tempSetId.Value, htSetDetails));
            }
        }
        //fill htLpList
        if (!htLpList.ContainsKey(LpId))
        {
            htLpList.Add(LpId, llKvpSetList);
        }
        else
        {
            htLpList.Remove(LpId);
            htLpList.Add(LpId, llKvpSetList);
        }

        //assign the hash table to session
        Session["tempOverrideHT"] = htLpList;
        LoadDatasheet(LpId);

    }


    public void Continue_IsM_True(string currSetId, string tempSetId, string currSetNmbr, string tempSetNmbr)
    {
        oDS = (clsDataSheet)Session[DatasheetKey];
        if (oDS != null)
        {
            oDS.IOAInd = "N";

            hdn_currTempSetNmbr.Value = tempSetNmbr;
            hdn_currTempSet.Value = tempSetId;
            SqlConnection con = null;
            SqlTransaction trans = null;

            oData = new clsData();
            oSession = (clsSession)Session["UserSession"];
            oTemp = (ClsTemplateSession)Session["BiweeklySession"];

            oData = new clsData();
            string sel = "SELECT * FROM StdtSessionHdr WHERE StudentId=" + oSession.StudentId + " AND SchoolId=" + oSession.SchoolId + /*" AND StdtClassId=" + oSession.Classid +*/ " AND DSTempHdrId=" + oTemp.TemplateId + " AND SessionStatusCd='D' AND CurrentSetId = '" + tempSetId + "'";
            object objSessNbr = oData.FetchValue("SELECT ISNULL(MAX(SessionNbr),0)+1 FROM StdtSessionHdr WHERE StudentId=" + oSession.StudentId + " AND SchoolId=" + oSession.SchoolId + /*" AND StdtClassId=" + oSession.Classid +*/ " AND LessonPlanId=(SELECT LessonPlanId FROM DSTempHdr WHERE DSTempHdrId=" + oTemp.TemplateId + ")");
            if (objSessNbr == null)
                objSessNbr = 0;
            oDS.SessNbr = (int)objSessNbr;
            DataTable dtHdrs = oData.ReturnDataTable(sel, false);

            if (dtHdrs != null)
            {
                if (dtHdrs.Rows.Count == 0)
                {
                    //Create new Draft for teacher; IsMaintanance = true
                    hdn_isMaintainance.Value = "true";

                    con = oData.Open();
                    trans = con.BeginTransaction();
                    generateSheet(true);
                    bool reslt = SaveDraft("D", "N", "insert", con, trans, false);
                    if (reslt)
                    {
                        bool reslt2 = SaveMeasuremnts(Convert.ToInt32(ViewState["StdtSessHdr"].ToString()), con, trans);
                        if (reslt2) oData.CommitTransation(trans, con);
                        else if (trans.Connection.State == ConnectionState.Open) oData.RollBackTransation(trans, con);
                        con.Close();
                        getStepPrompts();
                        fillStepGrid(oDS.TeachProc, oDS.SkillType, oDS.MatchToSampleType);

                    }
                    else if (trans.Connection.State == ConnectionState.Open)
                    {
                        oData.RollBackTransation(trans, con);
                        con.Close();
                    }
                    ClientScript.RegisterStartupScript(this.GetType(), "", "probe();", true);
                }
            }
            if (dtHdrs.Rows.Count == 1)
            {
                if (dtHdrs.Rows[0]["IsMaintanace"].ToString() == "True")
                {
                    hdn_isMaintainance.Value = "true";

                    if (dtHdrs.Rows[0]["IOAInd"].ToString() == "Y")
                    {
                        //open ioa's draft...
                        ViewState["StdtSessHdr"] = dtHdrs.Rows[0]["StdtSessionHdrId"].ToString();
                        oDS.IOAInd = "Y";
                        oDS.IOASessHdr = Convert.ToInt32(dtHdrs.Rows[0]["IOASessionHdrId"].ToString());
                        LoadData(Convert.ToInt32(ViewState["StdtSessHdr"].ToString()), true);
                    }
                    else
                    {
                        //Automatically load the drafted Data Sheet
                        Response.Redirect("Datasheet.aspx?SessHdrID=" + dtHdrs.Rows[0]["StdtSessionHdrId"].ToString() + "&isMaint=true&exc=true");
                    }
                    ClientScript.RegisterStartupScript(this.GetType(), "", "probe();", true);
                }
                else
                {
                    //A draft which is not "IsMaintanance" is available.
                    hdn_isMaintainance.Value = "false";

                    //ClientScript.RegisterStartupScript(this.GetType(), "", "alert('There is already a draft available. Opening it in normal mode...');", true);
                    if (dtHdrs.Rows[0]["IOAInd"].ToString() == "Y")
                    {
                        //open ioa's draft...
                        ViewState["StdtSessHdr"] = dtHdrs.Rows[0]["StdtSessionHdrId"].ToString();
                        oDS.IOAInd = "Y";
                        oDS.IOASessHdr = Convert.ToInt32(dtHdrs.Rows[0]["IOASessionHdrId"].ToString());
                        LoadData(Convert.ToInt32(ViewState["StdtSessHdr"].ToString()), true);
                    }
                    else
                    {   //ask whether to create an ioa draft or open existing draft...
                        ViewState["StdtSessHdr"] = dtHdrs.Rows[0]["StdtSessionHdrId"].ToString();
                        oDS.IOASessHdr = Convert.ToInt32(dtHdrs.Rows[0]["StdtSessionHdrId"].ToString());
                        ClientScript.RegisterStartupScript(this.GetType(), "", "showPop(2);alertBox('There is already a draft available. Opening it in normal mode...');", true);

                        string selQry = "SELECT UserLName+' '+UserFName AS Name,Hdr.CreatedOn,SessionNbr FROM StdtSessionHdr Hdr INNER JOIN [User] Usr ON Usr.UserId=Hdr.CreatedBy " +
                                "WHERE StdtSessionHdrId=" + dtHdrs.Rows[0]["StdtSessionHdrId"].ToString();
                        DataTable dtUsr = oData.ReturnDataTable(selQry, false);
                        if ((dtUsr != null) && (dtUsr.Rows.Count > 0))
                        {
                            lblUName1.InnerHtml = dtUsr.Rows[0]["Name"].ToString();
                            LblStrtTime1.InnerHtml = dtUsr.Rows[0]["CreatedOn"].ToString();
                            lblSessNo1.InnerHtml = dtUsr.Rows[0]["SessionNbr"].ToString();
                        }
                    }
                }
            }
        }
    }
    public void Continue_IsM_False(string currSetId, string tempSetId, string currSetNmbr, string tempSetNmbr)
    {
        string hasRNo = Request.QueryString["repeatNo"];
        string strSRMode = "false";
        if (hasRNo != null)
        {
            strSRMode = "true";
        }
        //pramod
        Response.Redirect("Datasheet.aspx?pageid=" + oTemp.TemplateId + "&studid=" + oSession.StudentId + "&exc=true&SRMode=" + strSRMode + "&repeatNo=" + hasRNo + "");
    }

    public void LoadDatasheet(string LPId)
    {
        oSession = (clsSession)Session["UserSession"];
        Hashtable htLpList = (Hashtable)Session["tempOverrideHT"];
        if (htLpList.Count != 0)
        {
            LinkedList<KeyValuePair<string, Hashtable>> llKvpSetList = (LinkedList<KeyValuePair<string, Hashtable>>)htLpList[LPId];
            if (llKvpSetList != null)
            {
                if (llKvpSetList.Count > 0)
                {
                    //gets the value of first element in the linked list
                    Hashtable htSetDetails = llKvpSetList.First.Value.Value;

                    string currSetId = htSetDetails["currSetId"].ToString();
                    string tempSetId = htSetDetails["tempSetId"].ToString();
                    string currSetNmbr = htSetDetails["currSetNmbr"].ToString();
                    string tempSetNmbr = htSetDetails["tempSetNmbr"].ToString();
                    string tempIsMaint = htSetDetails["isMaintVal"].ToString();

                    if (tempIsMaint == "true")
                    {
                        Continue_IsM_True(currSetId, tempSetId, currSetNmbr, tempSetNmbr);
                    }
                    else if (tempIsMaint == "false")
                    {

                        Continue_IsM_False(currSetId, tempSetId, currSetNmbr, tempSetNmbr);
                    }
                }
                else
                {
                    ScriptManager.RegisterStartupScript(this, this.GetType(), "closewindow", "closeIframe1(" + oSession.StudentId + ");", true);
                }
            }
        }
    }


    [System.Web.Services.WebMethod]
    public static void resetOverrideSession(string sheetId)
    {
        StudentBinder_Datasheet obj = new StudentBinder_Datasheet();
        obj.clearOverrideSession(sheetId);
    }

    public void clearOverrideSession(string lpId)
    {
        Hashtable htLpList = (Hashtable)Session["tempOverrideHT"];
        if (htLpList != null)
        {
            if (htLpList.Count > 0)
            {
                htLpList.Remove(lpId);
            }
        }
    }

    [WebMethod]
    public static string ViewLessonPlanData(string Id)
    {
        objData = new clsData();
        DataTable dtLPDetail = objData.ReturnDataTable("SELECT DSTempHdrId,StudentId,LessonPlanId,(SELECT GoalId FROM StdtLessonplan SLP WHERE SLP.StdtLessonplanId=DSTempHdr.StdtLessonplanId) GoalId,StdtLessonplanId FROM DSTempHdr WHERE DSTempHdrId=(SELECT DSTempHdrId FROM StdtSessionHdr WHERE StdtSessionHdrId='" + Id + "')", false);

        return "LessonPlanAttributes.aspx?pageid=" + dtLPDetail.Rows[0]["DSTempHdrId"] + "&studid=" + dtLPDetail.Rows[0]["StudentId"] + "&ViewPopUp=" + 1;
        //+ "&lessonId=" + dtLPDetail.Rows[0]["LessonPlanId"] + "&goalId=" + dtLPDetail.Rows[0]["GoalId"] + "&delLpID=" + dtLPDetail.Rows[0]["StdtLessonplanId"];

    }
    protected void btnVLP_Click(object sender, EventArgs e)
    {
    }
    protected void btnAddTrial_Click(object sender, EventArgs e)
    {
        oData = new clsData();
        oTemp = (ClsTemplateSession)Session["BiweeklySession"];
        oSession = (clsSession)Session["UserSession"];
        oDS = (clsDataSheet)Session[DatasheetKey];
        Hashtable htLpList = (Hashtable)Session["tempOverrideHT"];
        int CurrentSet = 0;

        SqlConnection con = null;
        SqlTransaction trans = null;
        try
        {
            Session["ISAddTrial"] = "True";
            SaveDraft();
            tdMsg.InnerHtml = "";

            string sqlStr = "SELECT DSTempSetColId,ColName,ColTypeCd,CorrRespDesc,CorrResp,InCorrRespDesc,IncMisTrialInd,CalcuType," +
                                   "CASE(ColTypeCd) WHEN '+/-' THEN '' WHEN 'Prompt' THEN '0' WHEN 'Duration' THEN '00:00:00' " +
                                   "WHEN 'Frequency' THEN '0' WHEN 'Text' THEN '0' END as ColValue, " +
                                   "CASE(ColTypeCd) WHEN '+/-' THEN 'Radio' WHEN 'Prompt' THEN 'DropDown' WHEN 'Duration' THEN 'Timer' " +
                                   "WHEN 'Frequency' THEN 'Freq' WHEN 'Text' THEN 'Text' END as ColControl " +
                                   "FROM DSTempSetCol WHERE " +
                                   "DSTempHdrId=" + oTemp.TemplateId + " AND SchoolId = " + oSession.SchoolId + "  AND ActiveInd='A' ORDER BY DSTempSetColId";
            DataTable dt = oData.ReturnDataTable(sqlStr, false);
            oDS.dtColumns = dt;

            con = oData.Open();
            trans = con.BeginTransaction();



            int crntPrmpt = Convert.ToInt32(Session["TargetPrompt"]);
            int DSTempStep = 0;
            //string UpdateQuery = "UPDATE DSTempHdr SET NbrOfTrials=((SELECT NbrOfTrials FROM DSTempHdr WHERE DSTempHdrId='" + oTemp.TemplateId + "')+1) WHERE DSTempHdrId='" + oTemp.TemplateId + "' ";
            //int dstmphdr = oData.ExecuteWithTrans(UpdateQuery, con, trans);

            if (oDS.TeachProc == "Match-to-Sample")
            {

                if (htLpList != null)
                {
                    string lpId = oTemp.TemplateId.ToString();
                    LinkedList<KeyValuePair<string, Hashtable>> llKvpSetList = (LinkedList<KeyValuePair<string, Hashtable>>)htLpList[lpId];
                    if (llKvpSetList != null)
                    {
                        if (llKvpSetList.Count > 0)
                        {
                            int cnt = 0;
                            foreach (KeyValuePair<string, Hashtable> abc in llKvpSetList)
                            {
                                if (cnt == 0)
                                {
                                    string checkedId = abc.Key;
                                    string tempSetId = abc.Value["tempSetId"].ToString();
                                    CurrentSet = Convert.ToInt32(tempSetId);
                                    string currSetId = abc.Value["currSetId"].ToString();
                                }
                                cnt++;
                            }
                        }
                    }
                }

                if (CurrentSet == 0)
                {
                    CurrentSet = oDS.CrntSet;
                }


                sqlStr = "SELECT [DSTempStepId],[StepName] as StepCd,[StepName],SortOrder as StepId  FROM [dbo].[DSTempStep] " +
                            " WHERE DSTempHdrId=" + oTemp.TemplateId + " AND DsTempSetId=" + CurrentSet + " AND ActiveInd='A' ORDER BY [SortOrder]";
                dt = oData.ReturnDataTableWithTransaction(sqlStr, con, trans, false);
                string[] stepname = new string[dt.Rows.Count];


                string[] distractorSamples = getDistractors(oTemp.TemplateId, oDS.CrntSet);

                if (dt.Rows.Count > 0)
                {
                    for (int j = 0; j < dt.Rows.Count; j++)
                    {
                        string tempString = dt.Rows[j]["StepName"].ToString();

                        if (distractorSamples != null)
                        {
                            string matchDistractors = String.Join(",", distractorSamples);
                            tempString = getNormalSample(distractorSamples, matchDistractors, tempString);
                        }


                        stepname[j] = tempString;
                    }
                    string StpName = "";
                    int length = 0;
                    string setMatch = "";
                    Random rnd = new Random();
                    if (oDS.MatchToSampleType == "Randomized")
                    {
                        string[] shuffleItem = Shuffle(stepname);
                        string[] shuffleItemdetail = shuffleItem[(dt.Rows.Count - 1)].Split('[');
                        string[] samples = Shuffle((shuffleItemdetail[1].Split(']'))[0].Split(','));
                        for (int arryInt = 0; arryInt < samples.Count(); arryInt++)
                        {
                            setMatch += samples[arryInt].ToString().Trim() + ", ";
                        }
                        length = setMatch.Length;
                        setMatch = setMatch.ToString().Substring(0, length - 2);
                        int FindIndex = rnd.Next(0, samples.Length);
                        //StpName = "Find " + samples[FindIndex] + ":  [" + setMatch + "]";
                        StpName = samples[FindIndex] + ":  [" + setMatch + "]";

                    }
                    else
                    {
                        string[] shuffleItem = Shuffle(stepname);
                        string[] shufItemdetail = shuffleItem[(dt.Rows.Count - 1)].Split('[');
                        string[] shuffleItemdetail = stepname[(dt.Rows.Count - 1)].Split('[');
                        string[] samples = (shuffleItemdetail[1].Split(']'))[0].Split(',');
                        setMatch = samples[(samples.Count() - 1)].ToString() + ", ";

                        for (int arryInt = 1; arryInt < samples.Count(); arryInt++)
                        {
                            setMatch += samples[arryInt].ToString().Trim() + ", ";
                        }
                        length = setMatch.Length;
                        setMatch = setMatch.ToString().Substring(0, length - 2);
                        int FindIndex = rnd.Next(0, samples.Length);
                        //StpName = "Find " + samples[FindIndex] + ":  [" + setMatch + "]";
                        StpName = samples[FindIndex] + ":  [" + setMatch + "]";
                        //StpName = shufItemdetail[0] + "[" + setMatch + "]";
                    }

                    sqlStr = "INSERT INTO DSTempStep (SchoolId,DSTempHdrId,DSTempSetId,StepName,SortOrder,ActiveInd,CreatedBy,CreatedOn,ModifiedBy,ModifiedOn,IsDynamic) " +
                    "Values(" + oSession.SchoolId + "," + oTemp.TemplateId + "," + CurrentSet + ",'" + StpName + "'," + ((dt.Rows.Count) + 1) + ",'A'," + oSession.LoginId + ",getdate()," + oSession.LoginId + ",getdate(),1) ";
                    DSTempStep = oData.ExecuteWithScopeandConnection(sqlStr, con, trans);
                }
            }

            int Trial = 0;
            Trial = Convert.ToInt32(oData.FetchValueTrans("SELECT COUNT(*) FROM StdtSessionStep WHERE StdtSessionHdrId='" + Convert.ToInt32(ViewState["StdtSessHdr"].ToString()) + "'", trans, con));

            string InsertQry = "INSERT INTO [dbo].[StdtSessionStep](StdtSessionHdrId,DSTempStepId,TrialNbr,SessionStatusCd,CreatedBy,CreatedOn) VALUES ('" + Convert.ToInt32(ViewState["StdtSessHdr"].ToString()) + "','" + DSTempStep + "','" + Trial + "','NAV','" + oSession.LoginId + "',GETDATE())";
            int stdtsessstepId = oData.ExecuteWithScopeandConnection(InsertQry, con, trans);

            DataTable dtcolumns = oDS.dtColumns;
            int dtlId = 0;
            if (dtcolumns != null)
            {
                foreach (DataRow drColmn in dtcolumns.Rows)
                {
                    string insertSessionSetDtlQuery = "INSERT INTO StdtSessionDtl(StdtSessionStepId,DSTempSetColId,StepVal,CurrentPrompt,RowNumber,CreatedBy,CreatedOn)"
                                                        + " VALUES(" + stdtsessstepId + "," + drColmn["DSTempSetColId"].ToString() + ",'" + drColmn["ColValue"].ToString() + "'," + crntPrmpt + ",(SELECT (NbrOfTrials) FROM DSTempHdr WHERE DSTempHdrId='" + oTemp.TemplateId + "')," + oSession.LoginId + ",GETDATE())";
                    dtlId = oData.ExecuteWithScopeandConnection(insertSessionSetDtlQuery, con, trans);
                }
            }


            if (DSTempStep > 0)
            {
                string IsTrial = Convert.ToString(oData.FetchValueTrans("SELECT IsTrial FROM StdtSessionHdr WHERE StdtSessionHdrId='" + Convert.ToInt32(ViewState["StdtSessHdr"].ToString()) + "'", trans, con));

                if (IsTrial != null && IsTrial != "")
                {
                    IsTrial = IsTrial + "," + DSTempStep.ToString();
                }
                else
                {
                    IsTrial = DSTempStep.ToString();
                }
                string UpdateQuery = "UPDATE StdtSessionHdr SET IsTrial='" + IsTrial + "' WHERE StdtSessionHdrId='" + Convert.ToInt32(ViewState["StdtSessHdr"].ToString()) + "' ";
                int sesshdr = oData.ExecuteWithTrans(UpdateQuery, con, trans);
            }

            //if (Convert.ToInt32(oData.FetchValue("SELECT COUNT(*) FROM StdtSessionHdr WHERE [IOASessionHdrId]='" + Convert.ToInt32(ViewState["StdtSessHdr"].ToString()) + "'")) > 0)
            //{
            //    int IOASessHdr = Convert.ToInt32(oData.FetchValue("SELECT StdtSessionHdrId FROM StdtSessionHdr WHERE [IOASessionHdrId]='" + Convert.ToInt32(ViewState["StdtSessHdr"].ToString()) + "'"));
            //    string InsertIOAQry = "INSERT INTO [dbo].[StdtSessionStep](StdtSessionHdrId,DSTempStepId,TrialNbr,SessionStatusCd,CreatedBy,CreatedOn) VALUES ('" + IOASessHdr + "',0,(SELECT (NbrOfTrials-1) FROM DSTempHdr WHERE DSTempHdrId='" + oTemp.TemplateId + "'),'NAV','" + oSession.LoginId + "',GETDATE())";
            //    int stdtsessStpId= oData.ExecuteWithScope(InsertIOAQry);

            //    if (dtcolumns != null)
            //    {
            //        foreach (DataRow drColmn in dtcolumns.Rows)
            //        {
            //            string insertSessionSetDtlQuery = "INSERT INTO StdtSessionDtl(StdtSessionStepId,DSTempSetColId,StepVal,CurrentPrompt,RowNumber,CreatedBy,CreatedOn)"
            //                                                + " VALUES(" + stdtsessStpId + "," + drColmn["DSTempSetColId"].ToString() + ",'" + drColmn["ColValue"].ToString() + "'," + crntPrmpt + ",(SELECT (NbrOfTrials) FROM DSTempHdr WHERE DSTempHdrId='" + oTemp.TemplateId + "')," + oSession.LoginId + ",GETDATE())";
            //            int dtlId = oData.ExecuteWithScope(insertSessionSetDtlQuery);
            //        }
            //    }
            //}
            if (stdtsessstepId > 0 && dtlId > 0)
            {
                oData.CommitTransation(trans, con);
            }
            else
            {
                oData.RollBackTransation(trans, con);
            }
            con.Close();
            string isMaintStatus = Convert.ToString(oData.FetchValue("SELECT DSMode FROM DSTempHdr WHERE DSTempHdrId='" + oTemp.TemplateId + "'"));
            bool IsMaintSetStatus = Convert.ToBoolean(oData.FetchValue("select IsMaintanace from StdtSessionHdr where StdtSessionHdrId=" + Convert.ToInt32(ViewState["StdtSessHdr"].ToString())));
            isMaintStatus = (isMaintStatus == "MAINTENANCE" ? "true" : "false");
            if (IsMaintSetStatus)
            {
                isMaintStatus = "true";
            }



            if (lblSubmitAndRepeatCount.Text != "")
            {
                repeatNo = Convert.ToInt32(lblSubmitAndRepeatCount.Text);
            }

            //remya
            object IOA_Status = oData.FetchValue("SELECT IOAInd FROM StdtSessionHdr WHERE StdtSessionHdrId=" + Convert.ToInt32(ViewState["StdtSessHdr"].ToString()));
            Session["ISAddTrial"] = "";
            Response.Redirect("Datasheet.aspx?pageid=" + oTemp.TemplateId + "&studid=" + oSession.StudentId + "&exc=true&isMaint=" + isMaintStatus + "&AddTrial=true&IOA_Status='" + IOA_Status + "&SessionHdr=" + ViewState["StdtSessHdr"].ToString() + "");


        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    private string[] Shuffle(string[] Objects)
    {
        Random rand = new Random();

        for (int i = 0; i < Objects.Length; i++)
        {
            int rVal = rand.Next(Objects.Length - 1);

            string temp = Objects[i];
            Objects[i] = Objects[rVal];
            Objects[rVal] = temp;

        }

        return Objects;
    }
    protected void FillSetStepDetails(int templateId, string ioaStat, string multiTeacher)
    {

        oData = new clsData();
        string strQuery = "";
        string sortNum = "";
        string ioaMultiStat = "";
        oDisc = new DiscreteSession();
        if (oDS.ChainType == "Backward chain")
        {
            strQuery = "Select (Select SortOrder from DSTempSet where DSTempSetId=NextSetId AND ActiveInd='A') as SortOrder,(Select SetCd from DSTempSet where DSTempSetId=NextSetId AND ActiveInd='A') as SETName,(SELECT distinct TOP 1(StepCd) FROM(select StepCd as StepCd,SortOrder,RANK() OVER(ORDER BY SortOrder DESC) Rnk from DSTempStep where DSTempHdrId=" + templateId + " AND ActiveInd='A' AND  DSTempSetId=StdtDSStat.NextSetId) A WHERE Rnk=StdtDSStat.NextStepId) as STEP,(select LookupName from LookUp where LookupId=NextPromptId) as PROMPT,statusMessage as Status FROM StdtDSStat Where  DSTempHdrId= " + templateId + "";
        }
        else
        {

            strQuery = "Select (Select SortOrder from DSTempSet where DSTempSetId=NextSetId AND ActiveInd='A') as SortOrder,(Select SetCd from DSTempSet where DSTempSetId=NextSetId AND ActiveInd='A' ) as SETName,(Select distinct TOP 1(StepCd) from DSTempStep where SortOrder=StdtDSStat.NextStepId and DSTempSetId=StdtDSStat.NextSetId and DSTempHdrId=" + templateId + " AND ActiveInd='A') as STEP,(select LookupName from LookUp where LookupId=NextPromptId) as PROMPT,statusMessage as Status FROM StdtDSStat Where  DSTempHdrId= " + templateId + "";
        }
        DataTable Dt = oData.ReturnDataTable(strQuery, false);

        if (Dt != null && Dt.Rows.Count > 0)
        {
            strQuery = "select (Select sortorder from DSTempSet where DSTempSetId=NextSetId) FROM StdtDSStat Where   DSTempHdrId= " + templateId + " ";
            sortNum = oData.FetchValue(strQuery).ToString();

            Dt.Columns.Add("IOA/MT Status", typeof(string));
            strQuery = "select IsMT_IOA from DSTempHdr where  DSTempHdrId= " + templateId + "";
            ioaMultiStat = oData.FetchValue(strQuery).ToString();

            if (Convert.ToInt16(ioaMultiStat) == 1)
            {
                Dt.Rows[0]["IOA/MT Status"] = "IOA to Advance";
            }
            else if (Convert.ToInt16(ioaMultiStat) == 2)
            {
                Dt.Rows[0]["IOA/MT Status"] = "MT to Advance";
            }
            else if (Convert.ToInt16(ioaMultiStat) == 3)
            {
                Dt.Rows[0]["IOA/MT Status"] = "IOA & MT to Advance";
            }
            else
                Dt.Rows[0]["IOA/MT Status"] = "---";

            //if (ioaStat == "IOA to Advance")
            //{
            //    if (multiTeacher == "MT to Advance")
            //    {
            //        Dt.Rows[0]["IOA/MT Status"] = "IOA & MT to Advance";
            //    }
            //    else
            //        Dt.Rows[0]["IOA/MT Status"] = ioaStat;
            //}
            //else if (multiTeacher == "MT to Advance")
            //{
            //    Dt.Rows[0]["IOA/MT Status"] = multiTeacher;
            //}
            //else
            //    Dt.Rows[0]["IOA/MT Status"] = "---";
            if (Dt.Rows[0]["Status"].ToString() == "COMPLETED")
            {
                Dt.Rows[0]["Status"] = "Mastered";
                Dt.Rows[0]["PROMPT"] = "Mastered";
                Dt.Rows[0]["STEP"] = "Mastered";

            }
            else
                Dt.Rows[0]["Status"] = "Current";
        }

        strQuery = "select SortOrder,SetCd as SETName from DSTempSet where DSTempHdrId=" + templateId + " and sortorder<" + Convert.ToInt32(sortNum) + "";
        DataTable dtOtherSetBelow = oData.ReturnDataTable(strQuery, false);
        if (dtOtherSetBelow != null)
        {
            if (dtOtherSetBelow.Rows.Count > 0)
            {

                dtOtherSetBelow.Columns.Add("STEP", typeof(string));
                dtOtherSetBelow.Columns.Add("PROMPT", typeof(string));
                dtOtherSetBelow.Columns.Add("Status", typeof(string));
                dtOtherSetBelow.Columns.Add("IOA/MT Status", typeof(string));
                foreach (DataRow item in dtOtherSetBelow.Rows)
                {
                    if (Dt.Rows[0]["STEP"] != System.DBNull.Value)
                        item["STEP"] = "Mastered";
                    if (Dt.Rows[0]["PROMPT"] != System.DBNull.Value)
                        item["PROMPT"] = "Mastered";

                    item["Status"] = "Mastered";
                    item["IOA/MT Status"] = "---";
                    Dt.ImportRow(item);
                }
            }
        }
        strQuery = "select SortOrder,SetCd as SETName from DSTempSet where DSTempHdrId=" + templateId + " and sortorder>" + Convert.ToInt32(sortNum) + "";
        DataTable dtOtherSetAbove = oData.ReturnDataTable(strQuery, false);
        if (dtOtherSetAbove != null)
        {
            if (dtOtherSetAbove.Rows.Count > 0)
            {

                dtOtherSetAbove.Columns.Add("STEP", typeof(string));
                dtOtherSetAbove.Columns.Add("PROMPT", typeof(string));
                dtOtherSetAbove.Columns.Add("Status", typeof(string));
                dtOtherSetAbove.Columns.Add("IOA/MT Status", typeof(string));
                foreach (DataRow item in dtOtherSetAbove.Rows)
                {
                    if (Dt.Rows[0]["STEP"] != System.DBNull.Value)
                        item["STEP"] = "Not Started";
                    if (Dt.Rows[0]["PROMPT"] != System.DBNull.Value)
                        item["PROMPT"] = "Not Started";
                    item["Status"] = "Not Started";
                    item["IOA/MT Status"] = "---";
                    Dt.ImportRow(item);
                }
            }
        }

        DataView dataview = Dt.DefaultView;
        dataview.Sort = "SortOrder";
        Dt = dataview.ToTable();
        Dt.Columns.RemoveAt(0);
        Dt.Columns[0].ColumnName = "SET";
        grdSetDetails.DataSource = Dt;
        grdSetDetails.DataBind();
    }
    private string checkversion(string version)
    {
        if (version != null && version != "")
        {
            string[] tempver = version.Split('.');
            int first = Convert.ToInt32(tempver[0]);
            int second = Convert.ToInt32(tempver[1]);
            if (second == 0)
            {
                first = first - 1;
                second = 9;
            }
            else
                second = second - 1;
            version = first.ToString() + "." + second.ToString();
            return version;
        }
        else
            return version = "1.0";

    }
    protected void getPromptNA(int tempId, int colId, Rules tempRules)
    {
        oData = new clsData();
        string strQuery = "";

        string sql = " SELECT  DR.RuleType, DR.IOAReqInd, DR.MultiTeacherReqInd, DR.CriteriaType, DR.TotalInstance, DR.TotCorrInstance,DST.IncMisTrialInd, DST.ColName," +
                  " DC.CalcType,DT.MultiSetsInd, DT.DSTempHdrId, DR.ScoreReq,DR.ConsequetiveInd,DR.IsNA,ISNULL(DR.ConsequetiveAvgInd,0) AS ConsequetiveAvgInd FROM DSTempHdr DT " +
                  " INNER JOIN DSTempSetCol DST ON DT.DSTempHdrId = DST.DSTempHdrId " +
                  " INNER JOIN DSTempSetColCalc DC ON DST.DSTempSetColId = DC.DSTempSetColId " +
                  " INNER JOIN DSTempRule DR ON DR.DSTempSetColCalcId = DC.DSTempSetColCalcId " +
                  " WHERE (DT.DSTempHdrId =" + tempId + ")AND DR.RuleType='PROMPT' AND DR.DSTempSetColId=" + colId + " AND DR.ActiveInd='A'";
        DataTable dt = oData.ReturnDataTable(sql, false);

        foreach (DataRow dr in dt.Rows)
        {

            if (dr["CriteriaType"].ToString() == "MOVE UP")
            {
                if (dr["IsNA"].ToString() == "True")
                {
                    tempRules.NAPromptMoveup = true;
                }
            }
            if (dr["CriteriaType"].ToString() == "MOVE DOWN")
            {
                if (dr["IsNA"].ToString() == "True")
                {
                    tempRules.NAPromptMoveDown = true;
                }
            }

        }

    }

    protected void getstepNA(int tempId, int colId, Rules tempRules)
    {
        oData = new clsData();
        string strQuery = "";

        string sql = " SELECT  DR.RuleType, DR.IOAReqInd, DR.MultiTeacherReqInd, DR.CriteriaType, DR.TotalInstance, DR.TotCorrInstance,DST.IncMisTrialInd, DST.ColName," +
                  " DC.CalcType,DT.MultiSetsInd, DT.DSTempHdrId, DR.ScoreReq,DR.ConsequetiveInd,DR.IsNA,ISNULL(DR.ConsequetiveAvgInd,0) AS ConsequetiveAvgInd FROM DSTempHdr DT " +
                  " INNER JOIN DSTempSetCol DST ON DT.DSTempHdrId = DST.DSTempHdrId " +
                  " INNER JOIN DSTempSetColCalc DC ON DST.DSTempSetColId = DC.DSTempSetColId " +
                  " INNER JOIN DSTempRule DR ON DR.DSTempSetColCalcId = DC.DSTempSetColCalcId " +
                  " WHERE (DT.DSTempHdrId =" + tempId + ")AND DR.RuleType='STEP' AND DR.DSTempSetColId=" + colId + " AND DR.ActiveInd='A'";
        DataTable dt = oData.ReturnDataTable(sql, false);

        foreach (DataRow dr in dt.Rows)
        {

            if (dr["CriteriaType"].ToString() == "MOVE UP")
            {
                if (dr["IsNA"].ToString() == "True")
                {
                    tempRules.NAStepMoveup = true;
                }
            }
            if (dr["CriteriaType"].ToString() == "MOVE DOWN")
            {
                if (dr["IsNA"].ToString() == "True")
                {
                    tempRules.NAStepMoveDown = true;
                }
            }

        }

    }


    public void ConfirmSubmission(object sender, EventArgs e)
    {
        oData = new clsData();
        DataTable dt = new DataTable();
        DataTable dtNA = new DataTable();
        bool notScoredStatus = false;
        string NACols = "";
        string NACols2 = "";

        Button b1 = (Button)sender;
        string bText = b1.Text;

        //Dictionary<int, Dictionary<string, string>> dict1 = new Dictionary<int, Dictionary<string, string>>();
        //Dictionary<string, string> dict2 = new Dictionary<string, string>();
        int sessHdrId1 = Convert.ToInt32(ViewState["StdtSessHdr"]);
        string sqlStr1 = "select SessionStatusCd from StdtSessionHdr where StdtSessionHdrId=" + sessHdrId1;
        object sesst1 = oData.FetchValue(sqlStr1);
        if (sesst1.ToString() == "S")
        {
            string strDtls = "SELECT UserFName+' '+UserLName AS CreatedBy,StartTs,CASE WHEN S.ModifiedBy IS NULL THEN (SELECT CONCAT(UserFName,' ',UserLName) FROM [User] " +
                    "WHERE UserId=S.CreatedBy) ELSE (SELECT CONCAT(UserFName,' ',UserLName) FROM [User] WHERE UserId=S.ModifiedBy) END as ModifiedBy,EndTs " +
                    "FROM StdtSessionHdr S LEFT JOIN [User] U ON U.UserId=S.CreatedBy WHERE StdtSessionHdrId=" + sessHdrId1;
            DataTable dts = oData.ReturnDataTable(strDtls, false);
            if (dts != null)
            {
                if (dts.Rows.Count == 1)
                {
                    string strCreatedBy = dts.Rows[0]["CreatedBy"].ToString();
                    string strModifiedBy = dts.Rows[0]["ModifiedBy"].ToString();
                    DateTime strStart = DateTime.Parse(dts.Rows[0]["StartTs"].ToString());
                    string strStartDate = strStart.ToString("MM/dd/yyyy HH:mm:ss");
                    DateTime strEnd = DateTime.Parse(dts.Rows[0]["EndTs"].ToString());
                    string strEndDate = strEnd.ToString("MM/dd/yyyy HH:mm:ss");
                    tdMsg.InnerHtml = clsGeneral.failedMsg("Submit not possible: This session was started by '" + strCreatedBy + "' on '" + strStartDate + "' and completed by '" + strModifiedBy + "' on '" + strEndDate + "'. Please Close[X] this datasheet.");
                }
            }
        }
        else
        {
            //find which column is used in the criteria
            string query = "select distinct DSTempSetColId from DSTempRule where DSTempHdrId=" + oTemp.TemplateId + " and ActiveInd='A'";
            dt = oData.ReturnDataTable(query, false);

            foreach (DataRow dr in dt.Rows)
            {
                string query2 = "select col.DSTempSetColId,col.ColName,col.ColTypeCd,colcalc.DSTempSetColCalcId,colcalc.CalcType " +
                            "from DSTempSetCol col " +
                            "left join DSTempSetColCalc colcalc on col.DSTempSetColId=colcalc.DSTempSetColId " +
                            "where DSTempHdrId=" + oTemp.TemplateId + " and col.DSTempSetColId=" + dr["DSTempSetColId"];
                dtNA = oData.ReturnDataTable(query2, false);

                string score = "";
                dict2.Clear();
                //--score_start
                foreach (DataRow drNA in dtNA.Rows)
                {
                    NACols = "";
                    Session["totalcorrectincorrect"] = "";
                    //find the score of the columns
                    if (drNA["CalcType"].ToString().Replace(" ", "") == "Customize")
                    {
                        score = ReturnScore(hfTextScore, drNA["DSTempSetColId"].ToString());
                    }
                    if (drNA["CalcType"].ToString().Replace(" ", "") == "%AccuracyatTrainingStep")
                    {
                        if (drNA["ColTypeCd"].ToString() == "+/-")
                        {
                            score = ReturnScore(hfResultStep_Acc, drNA["DSTempSetColId"].ToString());
                        }
                        if (drNA["ColTypeCd"].ToString() == "Prompt")
                        {
                            score = ReturnScore(hfResultStep_Prmpt, drNA["DSTempSetColId"].ToString());
                        }
                    }
                    if (drNA["CalcType"].ToString().Replace(" ", "") == "%AccuracyatPreviouslyLearnedSteps")
                    {
                        if (drNA["ColTypeCd"].ToString() == "+/-")
                        {
                            score = ReturnScore(hfRslt1_ExcludeCrntStep_Acc, drNA["DSTempSetColId"].ToString());
                        }
                        if (drNA["ColTypeCd"].ToString() == "Prompt")
                        {
                            score = ReturnScore(hfRslt2_ExcludeCrntStep_Acc, drNA["DSTempSetColId"].ToString());
                        }
                    }
                    if (drNA["CalcType"].ToString().Replace(" ", "") == "%Accuracy")
                    {
                        if (drNA["ColTypeCd"].ToString() == "+/-")
                        {
                            score = ReturnScore(hfRslt1_Acc, drNA["DSTempSetColId"].ToString());
                        }
                        if (drNA["ColTypeCd"].ToString() == "Prompt")
                        {
                            score = ReturnScore(hfRslt2_Acc, drNA["DSTempSetColId"].ToString());
                        }
                    }
                    if (drNA["CalcType"].ToString().Replace(" ", "") == "%Prompted")
                    {
                        if (drNA["ColTypeCd"].ToString() == "+/-")
                        {
                            score = ReturnScore(hfRslt1_Prmt, drNA["DSTempSetColId"].ToString());
                        }
                        if (drNA["ColTypeCd"].ToString() == "Prompt")
                        {
                            score = ReturnScore(hfRslt2_Prmt, drNA["DSTempSetColId"].ToString());
                        }
                    }
                    if (drNA["CalcType"].ToString().Replace(" ", "") == "%Independent")
                    {
                        if (drNA["ColTypeCd"].ToString() == "+/-")
                        {
                            score = ReturnScore(hfRslt1_Ind, drNA["DSTempSetColId"].ToString());
                        }
                        if (drNA["ColTypeCd"].ToString() == "Prompt")
                        {
                            score = ReturnScore(hfRslt2_Ind, drNA["DSTempSetColId"].ToString());
                        }
                    }
                    if (drNA["CalcType"].ToString().Replace(" ", "") == "%IndependentofAllSteps")
                    {
                        if (drNA["ColTypeCd"].ToString() == "+/-")
                        {
                            score = ReturnScore(hfRslt1_IndAll, drNA["DSTempSetColId"].ToString());
                        }
                        if (drNA["ColTypeCd"].ToString() == "Prompt")
                        {
                            score = ReturnScore(hfRslt2_IndAll, drNA["DSTempSetColId"].ToString());
                        }
                    }
                    if (drNA["CalcType"].ToString().Replace(" ", "") == "AvgDuration")
                    {
                        if (hfAvgDur.Value == "") score = TimeSpan.Parse("00:00:00").TotalSeconds.ToString();
                        else
                        {
                            score = ReturnScore(hfAvgDur, drNA["DSTempSetColId"].ToString());
                            if (score != "N/A")
                            {
                                score = TimeSpan.Parse(ReturnScore(hfAvgDur, drNA["DSTempSetColId"].ToString())).TotalSeconds.ToString();
                            }
                        }
                    }
                    if (drNA["CalcType"].ToString().Replace(" ", "") == "TotalDuration")
                    {
                        if (hfTotDur.Value == "") score = TimeSpan.Parse("00:00:00").TotalSeconds.ToString();
                        else
                        {
                            score = ReturnScore(hfTotDur, drNA["DSTempSetColId"].ToString());
                            if (score != "N/A")
                            {
                                score = TimeSpan.Parse(ReturnScore(hfTotDur, drNA["DSTempSetColId"].ToString())).TotalSeconds.ToString();
                            }
                        }
                    }
                    if (drNA["CalcType"].ToString() == "Frequency")
                    {
                        score = ReturnScore(hf_Freq, drNA["DSTempSetColId"].ToString());
                    }
                    if (drNA["CalcType"].ToString() == "Total Correct")
                    {
                        if (drNA["ColTypeCd"].ToString() == "+/-")
                        {
                            if (hfTotCorct.Value != "")
                            {
                                Session["totalcorrectincorrect"] = "Total Correct";
                                score = ReturnScore(hfTotCorct, drNA["DSTempSetColId"].ToString());
                            }
                            else
                                score = "0";
                        }
                    }
                    if (drNA["CalcType"].ToString() == "Total Incorrect")
                    {
                        if (drNA["ColTypeCd"].ToString() == "+/-")
                        {
                            if (hfInTotCorct.Value != "")
                            {
                                Session["totalcorrectincorrect"] = "Total Incorrect";
                                score = ReturnScore(hfInTotCorct, drNA["DSTempSetColId"].ToString());
                            }
                            else
                                score = "0";
                        }
                    }
                    if (drNA["CalcType"].ToString().Replace(" ", "") == "NA")
                    {
                        score = "N/A";
                    }
                    //end

                    //if the score of col used in criteria is NA, then add to dictionary
                    if (score == "N/A")
                    {
                        notScoredStatus = true;
                        dictNAscore.Add(Convert.ToInt32(drNA["DSTempSetColId"]), drNA["ColName"].ToString());
                        if (!dict2.ContainsKey(drNA["CalcType"].ToString()))
                        {
                            dict2.Add(drNA["CalcType"].ToString(), score);
                            NACols = drNA["ColName"].ToString() + ",";
                        }
                    }
                }
                if (!dict1.ContainsKey(Convert.ToInt32(dr["DSTempSetColId"])))
                {
                    dict1.Add(Convert.ToInt32(dr["DSTempSetColId"]), dict2);
                    NACols2 += NACols;
                }
                //--score_end
            }

            Session["NA_Dictionary"] = dict1;
            Session["NAStatus"] = dictNAscore;

            if (notScoredStatus == true)
            {
                if (NACols2.Length > 0)
                {
                    NACols2 = NACols2.Substring(0, (NACols2.Length - 1));
                }
                if (NACols2.Contains("'"))
                {
                    ScriptManager.RegisterStartupScript(this, this.GetType(), "", "showConfirmPopUp(\"" + NACols2 + "\",'" + bText + "');", true);
                }
                else if (NACols2.Contains("\\"))
                {
                    ScriptManager.RegisterStartupScript(this, this.GetType(), "", "showConfirmPopUp('" + NACols2.Replace("\\", @"\\") + "','" + bText + "');", true);
                }
                else
                {
                    ScriptManager.RegisterStartupScript(this, this.GetType(), "", "showConfirmPopUp('" + NACols2 + "','" + bText + "');", true);
                }
            }
            else
            {
                if (bText == "Submit Scores")
                {
                    ScriptManager.RegisterStartupScript(this, this.GetType(), "", "triggerSubmitClick();", true);
                }
                else
                {
                    ScriptManager.RegisterStartupScript(this, this.GetType(), "", "triggerSubmitAndRepeatClick();", true);
                }
            }
        }
    }
    protected bool checkIfScoreIsNA(bool IsInfluencedBy, int ColId)
    {
        //ash
        //check whether the col is used in criteria
        if (IsInfluencedBy == true)
        {
            //check the dictionary contains the colId, which means the score is NA; then do not move down
            if (Session["NA_Dictionary"] != null)
            {
                dict1 = (Dictionary<int, Dictionary<string, string>>)Session["NA_Dictionary"];
                if (dict1.ContainsKey(ColId))
                {
                    if (dict1[ColId].Values.Count > 0)
                    {
                        return true;
                    }
                }
            }
        }
        return false;
    }

    [WebMethod]
    public static string SearchIOA()
    {
        try
        {
            clsData oData = new clsData();
            clsSession oSession = (clsSession)HttpContext.Current.Session["UserSession"];
            ClsTemplateSession oTemp = (ClsTemplateSession)HttpContext.Current.Session["BiweeklySession"];

            string qString = "select LessonPlanId from StdtSessionHdr where DSTempHdrId=" + oTemp.TemplateId;
            int lpID = Convert.ToInt32(oData.FetchValue(qString));
            //string sQuery = "SELECT MAX(StdtSessionHdrId) FROM StdtSessionHdr WHERE studentid=" + oSession.StudentId + " AND LessonPlanId=" + lpID; //+ " AND StdtClassId=" + oSession.Classid;
            //object sessHdr = oData.FetchValue(sQuery);

            string sQuery2 = "SELECT * FROM StdtSessionHdr WHERE studentid=" + oSession.StudentId + " AND LessonPlanId=" + lpID + " AND DSTempHdrId=" + oTemp.TemplateId + " AND SessionStatusCd='D' AND IOAInd='Y'";
            DataTable dtSess = oData.ReturnDataTable(sQuery2, false);

            if (dtSess.Rows.Count > 0)
                return "1";
            else
                return "0";
        }
        catch (Exception Ex)
        {
            throw Ex;
        }
    }

    [WebMethod]
    public static string chkIOAUserAndNrmlSession(int sessHdr)
    {
        try
        {
            clsData oData = new clsData();
            clsSession oSession = (clsSession)HttpContext.Current.Session["UserSession"];

            string normalUser = "SELECT IOAUserId FROM StdtSessionHdr WHERE StdtSessionHdrId=" + sessHdr;
            if (oData.FetchValue(normalUser) != null)
            {
                int normalUserId = Convert.ToInt32(oData.FetchValue(normalUser));
                if (normalUserId == Convert.ToInt32(oSession.LoginId))
                {
                    return "1";
                }
                else
                {
                    return "0";
                }
            }
            else
            {
                return "2"; // There is no normal session associated with this IOA
            }
        }
        catch (Exception Ex)
        {
            throw Ex;
        }
    }
    [WebMethod]
    public static int SelectSortOrder(int PromptId)
    {
        try
        {
            int PromptId1, PromptId2 = 0;
            string SqlQuery = "SELECT SortOrder FROM LookUp WHERE LookupId = " + PromptId;
            clsData oData = new clsData();
            PromptId1 = Convert.ToInt32(oData.FetchValue(SqlQuery));
            if (PromptId1 != 0)
            {
                PromptId2 = PromptId1;
            }
            else
            {
                PromptId2 = 0;
            }
            return PromptId2;
        }
        catch (Exception Ex)
        {
            throw Ex;
        }
    }
    protected void left_View(object sender, EventArgs e)
    {
        String isMaintanance = "";
        int CurrentSetId = 0;
        int SessId = 0;
        int sessionId = 0;
        int SessionNum = 0;
        if (!String.IsNullOrEmpty(Request.QueryString["SessHdrID"]))
        {
            sessionId = Convert.ToInt32(Request.QueryString["SessHdrID"]);
        }
        ClsTemplateSession Objtempsess = (ClsTemplateSession)Session["BiweeklySession"];
        clsSession sess = (clsSession)Session["UserSession"];
        clsData oDta = new clsData();
        String sqlqry = "select LessonPlanId from StdtSessionHdr where StdtSessionHdrId= " + sessionId;
        int Lpid = Convert.ToInt32(oData.FetchValue(sqlqry));
        String sqlqry3 = "select MAX(SessionNbr) from StdtSessionHdr where LessonPlanId= " + Lpid;
        int MaxSessNum = Convert.ToInt32(oData.FetchValue(sqlqry3));
        DataTable tempid = oDta.ReturnDataTable("SELECT SessionNbr, DSTempHdrId,CurrentSetId,IsMaintanace FROM StdtSessionHdr WHERE StdtSessionHdrId=" + sessionId, false);
        if (tempid != null)
        {
            if (tempid.Rows.Count > 0)
            {
                Objtempsess.TemplateId = Convert.ToInt32(tempid.Rows[0]["DSTempHdrId"].ToString());

                if (tempid.Rows[0]["IsMaintanace"].ToString() == "True")
                {
                    isMaintanance = "true";
                }
                else
                {
                    isMaintanance = "false";
                }

                CurrentSetId = Convert.ToInt32(tempid.Rows[0]["CurrentSetId"]);
                SessionNum = Convert.ToInt32(tempid.Rows[0]["SessionNbr"]) + 1;
                //String sqlqry2 = "select StdtSessionHdrId from StdtSessionHdr where SessionNbr= " + SessionNum + " AND LessonPlanId= " + Lpid;
                String sqlqry2 = "select StdtSessionHdrId from StdtSessionHdr where SessionNbr= " + SessionNum + " AND LessonPlanId= " + Lpid + " and StudentId = " + sess.StudentId; //View Prior Bug 
                SessId = Convert.ToInt32(oData.FetchValue(sqlqry2));
            }
            if (SessionNum <= MaxSessNum)
            {
                Response.Redirect("Datasheet.aspx?SessHdrID=" + SessId + "&isMaint=" + isMaintanance + "&currSetId=" + CurrentSetId);
            }


        }

    }
    protected void right_View(object sender, EventArgs e)
    {
        String isMaintanance = "";
        int CurrentSetId = 0;
        int SessId = 0;
        int sessionId = 0;
        int SessionNum = 0;
        if (!String.IsNullOrEmpty(Request.QueryString["SessHdrID"]))
        {
            sessionId = Convert.ToInt32(Request.QueryString["SessHdrID"]);
        }
        ClsTemplateSession Objtempsess = (ClsTemplateSession)Session["BiweeklySession"];
        clsSession sess = (clsSession)Session["UserSession"];
        clsData oDta = new clsData();
        String sqlqry = "select LessonPlanId from StdtSessionHdr where StdtSessionHdrId= " + sessionId;
        int Lpid = Convert.ToInt32(oData.FetchValue(sqlqry));
        DataTable tempid = oDta.ReturnDataTable("SELECT SessionNbr, DSTempHdrId,CurrentSetId,IsMaintanace FROM StdtSessionHdr WHERE StdtSessionHdrId=" + sessionId, false);
        if (tempid != null)
        {
            if (tempid.Rows.Count > 0)
            {
                Objtempsess.TemplateId = Convert.ToInt32(tempid.Rows[0]["DSTempHdrId"].ToString());

                if (tempid.Rows[0]["IsMaintanace"].ToString() == "True")
                {
                    isMaintanance = "true";
                }
                else
                {
                    isMaintanance = "false";
                }

                CurrentSetId = Convert.ToInt32(tempid.Rows[0]["CurrentSetId"]);
                SessionNum = Convert.ToInt32(tempid.Rows[0]["SessionNbr"]) - 1;
                //String sqlqry2 = "select StdtSessionHdrId from StdtSessionHdr where SessionNbr= " + SessionNum + " AND LessonPlanId= " + Lpid;
                String sqlqry2 = "select StdtSessionHdrId from StdtSessionHdr where SessionNbr= " + SessionNum + " AND LessonPlanId= " + Lpid + " and StudentId = " + sess.StudentId; //View Prior Bug 
                SessId = Convert.ToInt32(oData.FetchValue(sqlqry2));
            }
            if (SessionNum > 0)
            {
                Response.Redirect("Datasheet.aspx?SessHdrID=" + SessId + "&isMaint=" + isMaintanance + "&currSetId=" + CurrentSetId);
            }

        }

    }
    /*Code added for printing Functinality [20-jun-2020] start---
   To expand prompt dropdown in datasheet before Print added on 20/05/2020*/
    public void promptPrintBefore(int printSave)
    {

        if (btnSave.Text == "Save Draft")
        {
            String isMaintanance = "";
            clsData oDta = new clsData();
            int printId = 1;
            int printSaveId = printSave;
            ClsTemplateSession Objtempsess = (ClsTemplateSession)Session["BiweeklySession"];
            int sessHdrId1 = Convert.ToInt32(ViewState["StdtSessHdr"]);
            DataTable tempid = oDta.ReturnDataTable("SELECT SessionNbr, DSTempHdrId,CurrentSetId,IsMaintanace FROM StdtSessionHdr WHERE StdtSessionHdrId=" + sessHdrId1, false);
            int CurrentSetId = Convert.ToInt32(tempid.Rows[0]["CurrentSetId"]);
            if (tempid != null)
            {
                if (tempid.Rows.Count > 0)
                {
                    Objtempsess.TemplateId = Convert.ToInt32(tempid.Rows[0]["DSTempHdrId"].ToString());

                    if (tempid.Rows[0]["IsMaintanace"].ToString() == "True")
                    {
                        isMaintanance = "true";
                    }
                    else
                    {
                        isMaintanance = "false";
                    }

                }

            }

            Response.Redirect("Datasheet.aspx?SessHdrID=" + sessHdrId1 + "&isMaint=" + isMaintanance + "&currSetId=" + CurrentSetId + "&printId=" + printId + "&printSaveId=" + printSaveId);
        }
    }

    //To make datasheet same after print (closing prompt expansion)
    public void promptPrintAfter()
    {
        int printSaveId = 0;
        String isMaintanance = "";
        clsData oDta = new clsData();
        int printId = 2;
        ClsTemplateSession Objtempsess = (ClsTemplateSession)Session["BiweeklySession"];
        int sessHdrId1 = Convert.ToInt32(ViewState["StdtSessHdr"]);
        DataTable tempid = oDta.ReturnDataTable("SELECT SessionNbr, DSTempHdrId,CurrentSetId,IsMaintanace FROM StdtSessionHdr WHERE StdtSessionHdrId=" + sessHdrId1, false);
        int CurrentSetId = Convert.ToInt32(tempid.Rows[0]["CurrentSetId"]);
        if (tempid != null)
        {
            if (tempid.Rows.Count > 0)
            {
                Objtempsess.TemplateId = Convert.ToInt32(tempid.Rows[0]["DSTempHdrId"].ToString());

                if (tempid.Rows[0]["IsMaintanace"].ToString() == "True")
                {
                    isMaintanance = "true";
                }
                else
                {
                    isMaintanance = "false";
                }
            }
        }

        Response.Redirect("Datasheet.aspx?SessHdrID=" + sessHdrId1 + "&isMaint=" + isMaintanance + "&currSetId=" + CurrentSetId + "&printId=" + printId + "&printSaveId=" + printSaveId);

    }

    public void printCompleteFunction(object sender, EventArgs e)
    {
        if (printPrev.Value == "0")
        {
            oData = new clsData();
            string strqry = "select StdtSessionStepId stepId from StdtSessionStep WHERE StdtSessionHdrId=" + ViewState["StdtSessHdr"];
            DataSet ds = oData.ReturnDataSet(strqry, false);
            int n = ds.Tables[0].Rows.Count;
            //int i = Convert.ToInt32(stepId);
            oData.Execute("DELETE FROM StdtSessionHdr WHERE StdtSessionHdrId=" + ViewState["StdtSessHdr"]);
            oData.Execute("DELETE FROM StdtSessColScore WHERE StdtSessionHdrId=" + ViewState["StdtSessHdr"]);
            oData.Execute("DELETE FROM StdtSessionStep WHERE StdtSessionHdrId=" + ViewState["StdtSessHdr"]);
            for (int i = 0; i < n; i++)
            {
                oData.Execute("DELETE FROM StdtSessionDtl WHERE StdtSessionStepId=" + Convert.ToInt32(ds.Tables[0].Rows[i]["stepId"]));
            }
            oSession = (clsSession)Session["UserSession"];
            ScriptManager.RegisterStartupScript(this, this.GetType(), "closewindow", "closeIframe1(" + oSession.StudentId + ");", true);
        }
        else if (printPrev.Value == "1")
        {
            promptPrintAfter();

        }
        else
        {
            int printSaveId = Convert.ToInt32(Request.QueryString["printSaveId"]);
            if (printSaveId == 1)
            {
                promptPrintAfter();
            }
            else
            {

                oSession = (clsSession)Session["UserSession"];
                ScriptManager.RegisterStartupScript(this, this.GetType(), "closewindow", "closeIframe1(" + oSession.StudentId + ");", true);
            }

        }

    }
    protected void btnSave2_Click(object sender, EventArgs e)
    {
        int printSave = 1;
        SaveDraft();
        if (Convert.ToBoolean(ViewState["IsHistory"]) == true)
        {
            oDS.VTLessonId = 0;
        }
        promptPrintBefore(printSave);

    }
    protected void btnNotSave_Click(object sender, EventArgs e)
    {
        int printSave = 0;
        promptPrintBefore(printSave);

    }


    //Code added for printing Functinality [26-jun-2020] End--

    //Code added for Distractor Functinality [28-oct-2021] Start--
    private string[] getDistractors(int templateid,int setid)
    {
        int templateidcopy = templateid;
        string[] discopy = new string[0];
        if (templateid > 0)
        {
            object getDisSam = oData.FetchValue("SELECT DistractorSamples FROM DSTempSet where dstemphdrid = " + templateidcopy + " AND DSTempSetId = " + setid);
            object distractordt = oData.FetchValue("SELECT DistractorSamplesCount FROM DSTempSet where dstemphdrid = " + templateidcopy + " AND DSTempSetId = " + setid);
            if ((getDisSam.ToString() != "") && (distractordt.ToString() != "")) //if (getDisSam != null && distractordt != null)
            {
                int disCount = Convert.ToInt32(distractordt);
                string disSam = getDisSam.ToString();
                disSam = disSam.TrimEnd(',');
                discopy = new string[disCount];
                discopy = disSam.Split(',');
            }
        }
        return discopy;
    }

    protected void continue_btn_Click(object sender, EventArgs e)
    {
        hdnMissTrialRsn.Value = hdnChkdRsn.Value;
        mistrialRsn.Text = hdnMissTrialRsn.Value;
        ScriptManager.RegisterStartupScript(this, this.GetType(), "UncheckAll", "UncheckAll();", true);
    }

    private string getNormalSample(string[] disSamplearry, string disSamples, string steptempstring)
    {
        try
        {
            string matchDistractors = disSamples;
            string[] distractorSamplesArry = disSamplearry;
            string tempString = steptempstring;
            if (matchDistractors != null)
            {
                string tempStringcopy = steptempstring;
                string firstpart = tempStringcopy.Substring(0, tempStringcopy.IndexOf(":"));
                firstpart = firstpart.Trim();
                string lastpart = tempStringcopy.Substring(tempStringcopy.IndexOf(":") + 1);
                tempStringcopy = tempStringcopy.Substring(tempStringcopy.IndexOf("[") + 1);
                tempStringcopy = tempStringcopy.Substring(0, tempStringcopy.IndexOf("]"));

                string matchSelctd = tempStringcopy;
                string[] nondistractors = new string[0];
                string[] nondistractorsExceptional = new string[0];
                string output = "";

                if (matchSelctd != null)
                {
                    List<string> diff;
                    IEnumerable<string> set1 = matchSelctd.Split(',').Distinct();
                    IEnumerable<string> set2 = matchDistractors.Split(',').Distinct();

                    if (set2.Count() > set1.Count())
                    {
                        diff = set2.Except(set1).ToList();
                    }
                    else
                    {
                        diff = set1.Except(set2).ToList();
                    }
                    if (diff != null)
                    {
                        output = String.Join(",", diff);
                        nondistractors = output.Split(',');
                        nondistractorsExceptional = output.Split(',');
                    }
                }

                string[] CopyQuestnAary = QuestnAary.Where(c => c != null).ToArray();
                int SampleLimitCount = 0;
                int AryLen = QuestnAary.Length;
                int DisLen = nondistractorsExceptional.Length;
                if ((AryLen > 0) && (DisLen > 1))
                {
                    if (AryLen >= (DisLen * 2))
                    {
                        decimal SampleLimitCount2 = Convert.ToDecimal(AryLen) / Convert.ToDecimal(DisLen);
                        SampleLimitCount = Convert.ToInt32(Math.Round(SampleLimitCount2));
                    }
                    else if (AryLen == DisLen)
                    {
                        decimal SampleLimitCount2 = Convert.ToDecimal(AryLen) / Convert.ToDecimal(DisLen);
                        SampleLimitCount = Convert.ToInt32(Math.Round(SampleLimitCount2));
                    }
                    else if (AryLen > DisLen)
                    {
                        SampleLimitCount = AryLen;
                    }
                    else if (DisLen > AryLen)
                    {
                        SampleLimitCount = DisLen;
                    }
                }
                else
                {
                    SampleLimitCount = AryLen;
                }

                var list = new List<string>(nondistractors);
                int tescnt = 0;
                for (int i = 0; i < nondistractors.Length; i++)
                {
                    string[] test = QuestnAary.Where(c => c != null && c == nondistractors[i]).ToArray();
                    int test2 = test.Length;
                    tescnt = test2;

                    if (tescnt >= SampleLimitCount && SampleLimitCount != 0)
                    {
                        if (!samcnt.ContainsKey(nondistractors[i]))
                        {
                            samcnt.Add(nondistractors[i], nondistractors[i]);
                        }
                        if (samcnt.ContainsKey(nondistractors[i]))
                        {
                            list.Remove(nondistractors[i]);
                        }
                    }
                }
                nondistractors = list.ToArray();

                int disindex = 0;
                string disindexString = "";
                string disStringnew = "";
                Random disrand = new Random();
                if (nondistractorsExceptional.Length <= 1 && nondistractors.Length <= 1)
                {
                    if (distractorSamplesArry.Contains(firstpart))
                    {
                        disindex = disrand.Next(nondistractorsExceptional.Length);
                        disindexString = nondistractorsExceptional[disindex].ToString();
                        disStringnew = disindexString + ": " + lastpart;
                        tempString = disStringnew;
                    }
                    else
                    {
                        tempString = firstpart + ": " + lastpart;
                    }
                }
                else if (nondistractorsExceptional.Length > 1 && nondistractors.Length > 0)
                {
                    if (distractorSamplesArry.Contains(firstpart))
                    {
                        int LoopInc = 0;
                        do
                        {
                            LoopInc++;
                            disindex = disrand.Next(nondistractors.Length);
                            disindexString = nondistractors[disindex].ToString();
                            if (preSampleString != disindexString)
                            {
                                break;
                            }
                            if ((LoopInc > 5) && (nondistractors.Length <= 1))
                            {
                                for (int i = 0; i <= QuestnAary.Length; i++)
                                {
                                    if (QuestnAary[i] != disindexString)
                                    {
                                        string swapString = QuestnAary[i];
                                        QuestnAary[i] = disindexString;
                                        disindexString = swapString;
                                        break;
                                    }
                                }
                            }
                        } while ((preSampleString == disindexString));
                        disStringnew = disindexString + ": " + lastpart;
                        tempString = disStringnew;
                        preSampleString = disindexString;
                    }
                    else
                    {
                        if (preSampleString == firstpart)
                        {
                            int LoopInc = 0;
                            do
                            {
                                LoopInc++;
                                disindex = disrand.Next(nondistractors.Length);
                                disindexString = nondistractors[disindex].ToString();
                                if (preSampleString != disindexString)
                                {
                                    break;
                                }
                                if ((LoopInc > 5) && (nondistractors.Length <= 1))
                                {
                                    for (int i = 0; i <= QuestnAary.Length; i++)
                                    {
                                        if (QuestnAary[i] != disindexString)
                                        {
                                            string swapString = QuestnAary[i];
                                            QuestnAary[i] = disindexString;
                                            disindexString = swapString;
                                            break;
                                        }
                                    }
                                }
                            } while (preSampleString == disindexString);
                            disStringnew = disindexString + ": " + lastpart;
                            tempString = disStringnew;
                            preSampleString = disindexString;
                        }
                        else
                        {
                            if (preSampleString != firstpart && !samcnt.ContainsKey(firstpart))
                            {
                                disStringnew = firstpart + ": " + lastpart;
                                tempString = disStringnew;
                                preSampleString = firstpart;
                            }
                            else
                            {
                                int LoopInc = 0;
                                do
                                {
                                    LoopInc++;
                                    disindex = disrand.Next(nondistractors.Length);
                                    disindexString = nondistractors[disindex].ToString();
                                    if (preSampleString != disindexString)
                                    {
                                        break;
                                    }
                                    if ((LoopInc > 5) && (nondistractors.Length <= 1))
                                    {
                                        for (int i = 0; i <= QuestnAary.Length; i++)
                                        {
                                            if (QuestnAary[i] != disindexString)
                                            {
                                                string swapString = QuestnAary[i];
                                                QuestnAary[i] = disindexString;
                                                disindexString = swapString;
                                                break;
                                            }
                                        }
                                    }
                                } while (preSampleString == disindexString);
                                disStringnew = disindexString + ": " + lastpart;
                                tempString = disStringnew;
                                preSampleString = disindexString;
                            }
                        }
                    }
                }
                else
                {
                    if (distractorSamplesArry.Contains(firstpart))
                    {
                        do
                        {
                            disindex = disrand.Next(nondistractorsExceptional.Length);
                            disindexString = nondistractorsExceptional[disindex].ToString();
                            if (preSampleString != disindexString)
                            {
                                break;
                            }
                        } while (preSampleString == disindexString);
                        disStringnew = disindexString + ": " + lastpart;
                        tempString = disStringnew;
                        preSampleString = disindexString;
                    }
                    else
                    {
                        if (preSampleString == firstpart)
                        {
                            do
                            {
                                disindex = disrand.Next(nondistractorsExceptional.Length);
                                disindexString = nondistractorsExceptional[disindex].ToString();
                                if (preSampleString != disindexString)
                                {
                                    break;
                                }
                            } while (preSampleString == disindexString);
                            disStringnew = disindexString + ": " + lastpart;
                            tempString = disStringnew;
                            preSampleString = disindexString;
                        }
                        else
                        {
                            tempString = firstpart + ": " + lastpart;
                        }

                    }
                }
            }
            return tempString;
        }
        catch (Exception ex)
        {
            ClsErrorLog clError = new ClsErrorLog();
            clError.WriteToLog(ex.ToString());
            throw ex;
        }
    }
    //Code added for Distractor Functinality [28-oct-2021] End--
}

